α : Type u,	_inst_1 : inhabited α,	b : buffer α,	i : ℕ,	h : i < b.size	⊢ b.read ⟨i, h⟩ = b.read' i
α : Type u,	_inst_1 : inhabited α,	b : buffer α,	i : ℕ,	h : i < b.size	⊢ b.read ⟨i, h⟩ = b.read' i
α : Type u,	_inst_1 : inhabited α,	i b_fst : ℕ,	b_snd : array b_fst α,	h : i < buffer.size ⟨b_fst, b_snd⟩	⊢ buffer.read ⟨b_fst, b_snd⟩ ⟨i, h⟩ = buffer.read' ⟨b_fst, b_snd⟩ i
α : Type u,	_inst_1 : inhabited α,	i b_fst : ℕ,	b_snd : array b_fst α,	h : i < buffer.size ⟨b_fst, b_snd⟩	⊢ b_snd.read ⟨i, h⟩ = b_snd.read' i
α : Type u,	_inst_1 : inhabited α,	b : buffer α,	i : ℕ,	h : i < b.size	⊢ b.read ⟨i, h⟩ = b.read' i
α : Type u,	f : α → α,	a : α	⊢ stream.iterate f a = a::stream.iterate f (f a)
α : Type u,	f : α → α,	a : α	⊢ (stream.iterate f a).head::stream.iterate f (f a) = a::stream.iterate f (f a)
α : Type u,	f : α → α,	a : α	⊢ (stream.iterate f a).head::(stream.iterate f a).tail = a::stream.iterate f (f a)
α : Type u,	a : α,	s : stream α,	_x : a ∈ s.even,	_fun_match : a ∈ s.even → a ∈ s,	n : ℕ,	h : (λ (b : α), a = b) (stream.nth n s.even)	⊢ a = stream.nth (2 * n) s
α : Type u,	n : ℕ,	a : α,	v_val : list α,	v_property : v_val.length = n	⊢ (vector.cons a ⟨v_val, v_property⟩).to_list = a :: vector.to_list ⟨v_val, v_property⟩
α : Type u,	n : ℕ,	a : α,	v : vector α n	⊢ (vector.cons a v).to_list = a :: v.to_list
α : Type u,	_inst_1 : linear_order α,	a b c : α,	h₁ : a ≤ c,	h₂ : b ≤ c	⊢ linear_order.max a b ≤ c
α : Type u,	b : bool,	a : α	⊢ cond b a a = a
α : Type u,	a : α	⊢ cond bool.ff a a = a
α : Type u,	a : α	⊢ cond bool.tt a a = a
α : Type u,	b : bool,	a : α	⊢ cond b a a = a
b : bool	⊢ bool.ff && b = bool.ff
⊢ bool.ff && bool.ff = bool.ff
⊢ bool.ff && bool.tt = bool.ff
b : bool	⊢ bool.ff && b = bool.ff
b : bool	⊢ (¬b = bool.tt) = (b = bool.ff)
⊢ (¬bool.ff = bool.tt) = (bool.ff = bool.ff)
⊢ (¬bool.tt = bool.tt) = (bool.tt = bool.ff)
b : bool	⊢ (¬b = bool.tt) = (b = bool.ff)
⊢ bool.ff = bool.tt = false
c : char	⊢ decidable c.is_whitespace
c : char	⊢ decidable (c ∈ [' ', '\t', '\n'])
⊢ decidable_pred char.is_whitespace
c : char	⊢ decidable c.is_digit
c : char	⊢ decidable (c.val ≥ 48 ∧ c.val ≤ 57)
⊢ decidable_pred char.is_digit
n : ℕ	⊢ is_valid_char n → (char.of_nat n).val = n
n : ℕ	⊢ is_valid_char n → (char.of_nat n).val = n
n : ℕ,	h : is_valid_char n	⊢ (char.of_nat n).val = n
n : ℕ,	h : is_valid_char n	⊢ (dite (is_valid_char n) (λ (h : is_valid_char n), {val := n, valid := h}) (λ (h : ¬is_valid_char n), '\x00')).val = n
n : ℕ	⊢ is_valid_char n → (char.of_nat n).val = n
add_left_neg : ∀ (a : ℤ), -a + a = 0,	m : ℕ	⊢ -int.of_nat m.succ + int.of_nat m.succ = 0
add_left_neg : ∀ (a : ℤ), -a + a = 0,	m : ℕ	⊢ - -[1+ m] + -[1+ m] = 0
m n k : ℕ	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : n < k ∨ k ≤ n	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : n < k	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : n < k	⊢ m.succ * n < m.succ * k		m n k : ℕ,	h : n < k,	h' : m.succ * n < m.succ * k	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : n < k,	h' : m.succ * n < m.succ * k	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : n < k,	h' : m.succ * n < m.succ * k	⊢ -[1+ m] * -[1+ (k - n).pred] = int.of_nat (m.succ * k - m.succ * n)
m n k : ℕ,	h : n < k	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)		case or.inr	m n k : ℕ,	h : k ≤ n	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : k ≤ n	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : k ≤ n	⊢ n > k ∨ k = n		m n k : ℕ,	h : k ≤ n,	h' : n > k ∨ k = n	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : k ≤ n,	h' : n > k ∨ k = n	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : k ≤ n,	h' : n > k	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : k ≤ n,	h' : n > k	⊢ m.succ * n > m.succ * k		m n k : ℕ,	h : k ≤ n,	h' : n > k,	h₁ : m.succ * n > m.succ * k	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : k ≤ n,	h' : n > k,	h₁ : m.succ * n > m.succ * k	⊢ -[1+ m] * int.of_nat (n - k) = -[1+ (m.succ * n - m.succ * k).pred]
m n k : ℕ,	h : k ≤ n,	h' : n > k,	h₁ : m.succ * n > m.succ * k	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : k ≤ n,	h' : n > k,	h₁ : m.succ * n > m.succ * k	⊢ int.neg_of_nat (n * m.succ - k * m.succ) = -[1+ (n * m.succ - k * m.succ).pred]
m n k : ℕ,	h : k ≤ n,	h' : n > k	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)		case or.inr	m n k : ℕ,	h : k ≤ n,	h' : k = n	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
m n k : ℕ,	h : k ≤ n,	h' : n > k,	h₁ : m.succ * n > m.succ * k	⊢ int.neg_of_nat (m.succ * n - m.succ * k).pred.succ = -int.of_nat (m.succ * n - m.succ * k).pred.succ.pred.succ
m k : ℕ,	h : k ≤ k	⊢ -[1+ m] * int.sub_nat_nat k k = int.sub_nat_nat (m.succ * k) (m.succ * k)
m k : ℕ,	h : k ≤ k	⊢ -[1+ m] * 0 = 0
m n k : ℕ,	h : k ≤ n,	h' : k = n	⊢ -[1+ m] * int.sub_nat_nat n k = int.sub_nat_nat (m.succ * k) (m.succ * n)
a b : ℤ,	n m : ℕ,	ha : 0 ≤ a,	hb : 0 ≤ b,	e1 : a.nat_abs = n,	e2 : b.nat_abs = m,	h : n ≠ m	⊢ a.nat_abs ≠ b.nat_abs
a b : ℤ,	h : a < -b	⊢ b < -a
a b : ℤ,	h : a < -b,	h : - -b < -a	⊢ b < -a
a b c : ℤ,	h : a ≤ b + c	⊢ a - b ≤ c
a b c : ℤ,	h : a ≤ b + c,	h : a + -b ≤ b + c + -b	⊢ a - b ≤ c
a b c : ℤ,	h : -c + a ≤ b	⊢ a ≤ b + c
a b c : ℤ,	h : a + -c ≤ b	⊢ a ≤ b + c
a b c : ℤ,	h : a - b < c	⊢ a < b + c
a b c : ℤ,	h : a - b < c,	h : a - b + b < c + b	⊢ a < b + c
a b : ℤ,	ha : a < 0,	hb : 0 < b,	h : a * b < 0 * b	⊢ a * b < 0
α : Type u,	n : ℕ,	l : list α	⊢ (list.take n l).length ≤ n
α : Type u,	a : α,	n : ℕ	⊢ (list.repeat a n).length = n
α : Type u,	a : α,	n : ℕ	⊢ (list.repeat a n).length = n
α : Type u,	a : α	⊢ (list.repeat a 0).length = 0
α : Type u,	a : α,	n_n : ℕ,	n_ih : (list.repeat a n_n).length = n_n	⊢ (list.repeat a n_n.succ).length = n_n.succ
α : Type u,	a : α,	n : ℕ	⊢ (list.repeat a n).length = n
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : n = 0	⊢ C n
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : n = 0	⊢ C n
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : n = 0	⊢ C 0
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : ¬n = 0,	n' : ℕ := n.div2	⊢ n.div2 < n
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : ¬n = 0,	n' : ℕ := n.div2	⊢ n' < n
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : ¬n = 0,	n' : ℕ := n.div2	⊢ n / 2 < n
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : ¬n = 0,	n' : ℕ := n.div2	⊢ n < n * 1.succ
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : ¬n = 0,	n' : ℕ := n.div2,	this : n * 1 < n * 1.succ	⊢ n < n * 1.succ
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : ¬n = 0,	n' : ℕ := n.div2,	this : n' < n	⊢ C n
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : ¬n = 0,	n' : ℕ := n.div2,	this : n' < n	⊢ C (nat.bit n.bodd n')
C : ℕ → Sort u,	z : C 0,	f : Π (b : bool) (n : ℕ), C n → C (nat.bit b n),	binary_rec : Π (n : ℕ), C n,	n : ℕ,	n0 : ¬n = 0,	n' : ℕ := n.div2,	this : n' < n	⊢ C n
f : bool → bool → bool,	h : f bool.ff bool.ff = bool.ff,	m : ℕ	⊢ nat.bitwise f m 0 = cond (f bool.tt bool.ff) m 0
f : bool → bool → bool,	h : f bool.ff bool.ff = bool.ff,	m : ℕ	⊢ nat.bitwise f m 0 = cond (f bool.tt bool.ff) m 0
f : bool → bool → bool,	h : f bool.ff bool.ff = bool.ff,	m : ℕ	⊢ nat.bitwise f m 0 = cond (f bool.tt bool.ff) m 0
f : bool → bool → bool,	h : f bool.ff bool.ff = bool.ff,	m : ℕ	⊢ nat.bitwise f m 0 = cond (f bool.tt bool.ff) m 0
f : bool → bool → bool,	h : f bool.ff bool.ff = bool.ff,	m : ℕ	⊢ nat.binary_rec (λ (n : ℕ), cond (f bool.ff bool.tt) n 0) (λ (a : bool) (m : ℕ) (Ia : ℕ → ℕ), nat.binary_rec (cond (f bool.tt bool.ff) (nat.bit a m) 0) (λ (b : bool) (n _x : ℕ), nat.bit (f a b) (Ia n))) m 0 = cond (f bool.tt bool.ff) m 0
f : bool → bool → bool,	h : f bool.ff bool.ff = bool.ff,	m : ℕ	⊢ ∀ (b : bool) (n : ℕ), nat.binary_rec (λ (n : ℕ), cond (f bool.ff bool.tt) n 0) (λ (a : bool) (m : ℕ) (Ia : ℕ → ℕ), nat.binary_rec (cond (f bool.tt bool.ff) (nat.bit a m) 0) (λ (b : bool) (n _x : ℕ), nat.bit (f a b) (Ia n))) (nat.bit b n) 0 = cond (f bool.tt bool.ff) (nat.bit b n) 0
f : bool → bool → bool,	h : f bool.ff bool.ff = bool.ff,	m : ℕ	⊢ nat.bitwise f m 0 = cond (f bool.tt bool.ff) m 0
f : bool → bool → bool,	h : f bool.ff bool.ff = bool.ff,	m : ℕ,	b : bool,	n : ℕ	⊢ nat.binary_rec (cond (f bool.tt bool.ff) (nat.bit bool.ff 0) 0) (λ (b : bool) (n _x : ℕ), nat.bit (f bool.ff b) (cond (f bool.ff bool.tt) n 0)) = λ (n : ℕ), cond (f bool.ff bool.tt) n 0
f : bool → bool → bool,	h : f bool.ff bool.ff = bool.ff,	m : ℕ,	b : bool,	n : ℕ	⊢ nat.binary_rec (λ (n : ℕ), cond (f bool.ff bool.tt) n 0) (λ (a : bool) (m : ℕ) (Ia : ℕ → ℕ), nat.binary_rec (cond (f bool.tt bool.ff) (nat.bit a m) 0) (λ (b : bool) (n _x : ℕ), nat.bit (f a b) (Ia n))) (nat.bit b n) 0 = cond (f bool.tt bool.ff) (nat.bit b n) 0
n : ℕ	⊢ 1.gcd n = 1
add_assoc : ∀ (n m k : ℕ), n + m + k = n + (m + k),	n m k : ℕ	⊢ n + m + k.succ = n + (m + k.succ)
add_assoc : ∀ (n m k : ℕ), n + m + k = n + (m + k),	n m k : ℕ	⊢ n + m + k.succ = n + (m + k.succ)
add_assoc : ∀ (n m k : ℕ), n + m + k = n + (m + k),	n m k : ℕ	⊢ (n + (m + k)).succ = n + (m + k).succ
a : ℕ	⊢ a % 0 = a
a : ℕ	⊢ ite (0 < 0 ∧ 0 ≤ a) ((a - 0) % 0) a = a
a : ℕ	⊢ ¬(0 < 0 ∧ 0 ≤ a)		a : ℕ,	h : ¬(0 < 0 ∧ 0 ≤ a)	⊢ ite (0 < 0 ∧ 0 ≤ a) ((a - 0) % 0) a = a
a : ℕ,	h : ¬(0 < 0 ∧ 0 ≤ a)	⊢ ite (0 < 0 ∧ 0 ≤ a) ((a - 0) % 0) a = a
b : ℕ	⊢ 0 % b = 0
b : ℕ	⊢ ite (0 < b ∧ b ≤ 0) ((0 - b) % b) 0 = 0
b : ℕ,	hn : 0 < b ∧ b ≤ 0	⊢ false
b : ℕ,	l : 0 < b,	r : b ≤ 0	⊢ false
b : ℕ	⊢ ¬(0 < b ∧ b ≤ 0)
b : ℕ	⊢ ¬(0 < b ∧ b ≤ 0)		b : ℕ,	h : ¬(0 < b ∧ b ≤ 0)	⊢ ite (0 < b ∧ b ≤ 0) ((0 - b) % b) 0 = 0
b : ℕ,	h : ¬(0 < b ∧ b ≤ 0)	⊢ ite (0 < b ∧ b ≤ 0) ((0 - b) % b) 0 = 0
smt_tactic.monad : monad smt_tactic	⊢ monad smt_tactic
R : Type u,	A₁ : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A₁,	_inst_5 : algebra R A₁,	x : A₁ ≃ₐ[R] A₁,	a : A₁	⊢ ⇑(⇑(alg_equiv.refl.aut_congr) x) a = ⇑(⇑(mul_equiv.refl (A₁ ≃ₐ[R] A₁)) x) a
R : Type u,	A₁ : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A₁,	_inst_5 : algebra R A₁	⊢ alg_equiv.refl.aut_congr = mul_equiv.refl (A₁ ≃ₐ[R] A₁)
I : Type u,	R : Type u_1,	f : I → Type v,	r : comm_semiring R,	s : Π (i : I), semiring (f i),	_inst_1 : Π (i : I), algebra R (f i),	a : R,	f : Π (i : I), f i	⊢ {to_fun := (pi.ring_hom (λ (i : I), algebra_map R (f i))).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun a * f = f * {to_fun := (pi.ring_hom (λ (i : I), algebra_map R (f i))).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun a
I : Type u,	R : Type u_1,	f : I → Type v,	r : comm_semiring R,	s : Π (i : I), semiring (f i),	_inst_1 : Π (i : I), algebra R (f i),	a : R,	f : Π (i : I), f i,	x : I	⊢ ({to_fun := (pi.ring_hom (λ (i : I), algebra_map R (f i))).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun a * f) x = (f * {to_fun := (pi.ring_hom (λ (i : I), algebra_map R (f i))).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun a) x
I : Type u,	R : Type u_1,	f : I → Type v,	r : comm_semiring R,	s : Π (i : I), semiring (f i),	_inst_1 : Π (i : I), algebra R (f i),	a : R,	f : Π (i : I), f i	⊢ a • f = {to_fun := (pi.ring_hom (λ (i : I), algebra_map R (f i))).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun a * f
I : Type u,	R : Type u_1,	f : I → Type v,	r : comm_semiring R,	s : Π (i : I), semiring (f i),	_inst_1 : Π (i : I), algebra R (f i),	a : R,	f : Π (i : I), f i,	x : I	⊢ (a • f) x = ({to_fun := (pi.ring_hom (λ (i : I), algebra_map R (f i))).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun a * f) x
R : Type u,	A : Type v,	B : Type w,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : semiring B,	_inst_6 : algebra R A,	_inst_7 : algebra R B,	f : A →ₗ[R] B,	map_one : ⇑f 1 = 1,	map_mul : ∀ (x y : A), ⇑f (x * y) = ⇑f x * ⇑f y,	x : A	⊢ ⇑((alg_hom.of_linear_map f map_one map_mul).to_linear_map) x = ⇑f x
R : Type u,	A : Type v,	B : Type w,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : semiring B,	_inst_6 : algebra R A,	_inst_7 : algebra R B,	f : A →ₗ[R] B,	map_one : ⇑f 1 = 1,	map_mul : ∀ (x y : A), ⇑f (x * y) = ⇑f x * ⇑f y	⊢ (alg_hom.of_linear_map f map_one map_mul).to_linear_map = f
R : Type u,	A₁ : Type v,	A₂ : Type w,	_inst_1 : comm_semiring R,	_inst_2 : semiring A₁,	_inst_3 : semiring A₂,	_inst_5 : algebra R A₁,	_inst_6 : algebra R A₂,	e : A₁ ≃ₐ[R] A₂,	x : A₁	⊢ ⇑(↑(e.symm).comp ↑e) x = ⇑(alg_hom.id R A₁) x
R : Type u,	A₁ : Type v,	A₂ : Type w,	_inst_1 : comm_semiring R,	_inst_2 : semiring A₁,	_inst_3 : semiring A₂,	_inst_5 : algebra R A₁,	_inst_6 : algebra R A₂,	e : A₁ ≃ₐ[R] A₂	⊢ ↑(e.symm).comp ↑e = alg_hom.id R A₁
R : Type u_1,	A : Type u_2,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	a b x : A	⊢ ⇑(algebra.lmul_left R (a * b)) x = ⇑((algebra.lmul_left R a).comp (algebra.lmul_left R b)) x
R : Type u_1,	A : Type u_2,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	a b : A	⊢ algebra.lmul_left R (a * b) = (algebra.lmul_left R a).comp (algebra.lmul_left R b)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A	⊢ {a}.up • M = ?m_1
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A	⊢ {a}.up • M = submodule.map (algebra.lmul_left R a) M
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A	⊢ {a}.up • submodule.span R ↑M = submodule.map (algebra.lmul_left R a) M
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A	⊢ submodule.span R {a}.up * submodule.span R ↑M = submodule.map (algebra.lmul_left R a) M
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A	⊢ submodule.span R ({a}.up * ↑M) = submodule.map (algebra.lmul_left R a) M
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A	⊢ submodule.span R ({a}.up * ↑M) ≤ submodule.map (algebra.lmul_left R a) M
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A	⊢ {a}.up * ↑M ⊆ ↑(submodule.map (algebra.lmul_left R a) M)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A,	b m : A,	hb : b ∈ {a}.up,	hm : m ∈ ↑M	⊢ b * m ∈ ↑(submodule.map (algebra.lmul_left R a) M)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A	⊢ submodule.span R ({a}.up * ↑M) ≤ submodule.map (algebra.lmul_left R a) M		R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A	⊢ submodule.map (algebra.lmul_left R a) M ≤ submodule.span R ({a}.up * ↑M)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A,	b m : A,	hb : b ∈ {a}.up,	hm : m ∈ ↑M	⊢ ∃ (y : A), y ∈ M ∧ ⇑(algebra.lmul_left R a) y = a * m
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A,	m : A,	hm : m ∈ ↑M	⊢ ⇑(algebra.lmul_left R a) m ∈ submodule.span R ({a}.up * ↑M)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	a : A,	M : submodule R A	⊢ submodule.map (algebra.lmul_left R a) M ≤ submodule.span R ({a}.up * ↑M)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	I : submodule R A,	hI : I ≤ 1	⊢ I ≤ I * (1 / I)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	I : submodule R A,	hI : I ≤ 1	⊢ I * 1 ≤ I * (1 / I)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B	⊢ submodule.map h.to_linear_map (I / J) = submodule.map h.to_linear_map I / submodule.map h.to_linear_map J
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B	⊢ x ∈ submodule.map h.to_linear_map (I / J) ↔ x ∈ submodule.map h.to_linear_map I / submodule.map h.to_linear_map J
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B	⊢ (∃ (y : A), (∀ (y_1 : A), y_1 ∈ J → y * y_1 ∈ I) ∧ ⇑(h.to_linear_map) y = x) ↔ ∀ (y : B), (∃ (y_1 : A), y_1 ∈ J ∧ ⇑(h.to_linear_map) y_1 = y) → (∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = x * y)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B	⊢ (∃ (y : A), (∀ (y_1 : A), y_1 ∈ J → y * y_1 ∈ I) ∧ ⇑(h.to_linear_map) y = x) → ∀ (y : B), (∃ (y_1 : A), y_1 ∈ J ∧ ⇑(h.to_linear_map) y_1 = y) → (∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = x * y)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B	⊢ (∃ (y : A), (∀ (y_1 : A), y_1 ∈ J → y * y_1 ∈ I) ∧ ⇑(h.to_linear_map) y = x) → ∀ (y : B), (∃ (y_1 : A), y_1 ∈ J ∧ ⇑(h.to_linear_map) y_1 = y) → (∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = x * y)		R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B	⊢ (∀ (y : B), (∃ (y_1 : A), y_1 ∈ J ∧ ⇑(h.to_linear_map) y_1 = y) → (∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = x * y)) → (∃ (y : A), (∀ (y_1 : A), y_1 ∈ J → y * y_1 ∈ I) ∧ ⇑(h.to_linear_map) y = x)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : A,	hx : ∀ (y : A), y ∈ J → x * y ∈ I,	y : A,	hy : y ∈ J	⊢ ∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = ⇑(h.to_linear_map) x * ⇑(h.to_linear_map) y
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B	⊢ (∀ (y : B), (∃ (y_1 : A), y_1 ∈ J ∧ ⇑(h.to_linear_map) y_1 = y) → (∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = x * y)) → (∃ (y : A), (∀ (y_1 : A), y_1 ∈ J → y * y_1 ∈ I) ∧ ⇑(h.to_linear_map) y = x)
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B,	hx : ∀ (y : B), (∃ (y_1 : A), y_1 ∈ J ∧ ⇑(h.to_linear_map) y_1 = y) → (∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = x * y)	⊢ ∃ (y : A), (∀ (y_1 : A), y_1 ∈ J → y * y_1 ∈ I) ∧ ⇑(h.to_linear_map) y = x
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B,	hx : ∀ (y : B), (∃ (y_1 : A), y_1 ∈ J ∧ ⇑(h.to_linear_map) y_1 = y) → (∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = x * y),	z : A,	hz : z ∈ J	⊢ ⇑(h.symm) x * z ∈ I
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B,	hx : ∀ (y : B), (∃ (y_1 : A), y_1 ∈ J ∧ ⇑(h.to_linear_map) y_1 = y) → (∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = x * y),	z : A,	hz : z ∈ J,	xz : A,	xz_mem : xz ∈ I,	hxz : ⇑(h.to_linear_map) xz = x * ⇑h z	⊢ ⇑(h.symm) x * z ∈ I
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B,	hx : ∀ (y : B), (∃ (y_1 : A), y_1 ∈ J ∧ ⇑(h.to_linear_map) y_1 = y) → (∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = x * y),	z : A,	hz : z ∈ J,	xz : A,	xz_mem : xz ∈ I,	hxz : ⇑(h.to_linear_map) xz = x * ⇑h z	⊢ ⇑(h.symm) x * z = xz
R : Type u,	_inst_1 : comm_semiring R,	A : Type v,	_inst_2 : comm_semiring A,	_inst_3 : algebra R A,	B : Type u_1,	_inst_4 : comm_ring B,	_inst_5 : algebra R B,	I J : submodule R A,	h : A ≃ₐ[R] B,	x : B,	hx : ∀ (y : B), (∃ (y_1 : A), y_1 ∈ J ∧ ⇑(h.to_linear_map) y_1 = y) → (∃ (y_1 : A), y_1 ∈ I ∧ ⇑(h.to_linear_map) y_1 = x * y),	z : A,	hz : z ∈ J,	xz : A,	xz_mem : xz ∈ I,	hxz : ⇑(h.to_linear_map) xz = x * ⇑h z	⊢ ⇑h (⇑(h.symm) x * z) = ⇑h xz
R : Type u_1,	S : Type u_2,	M : Type u_3,	_inst_1 : semiring S,	_inst_2 : add_comm_monoid M,	_inst_3 : comm_semiring R,	_inst_4 : algebra R S,	_inst_5 : module S M,	r : R,	S : S,	M : restrict_scalars R S M	⊢ (r • S) • M = r • S • M
R : Type u_1,	S : Type u_2,	M : Type u_3,	_inst_1 : semiring S,	_inst_2 : add_comm_monoid M,	_inst_3 : comm_semiring R,	_inst_4 : algebra R S,	_inst_5 : module S M,	r : R,	S : S,	M : restrict_scalars R S M	⊢ ⇑(algebra_map R S) r • S • M = r • S • M
R : Type u,	A : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	S : subalgebra R A	⊢ S.to_submodule * S.to_submodule = S.to_submodule
R : Type u,	A : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	S : subalgebra R A	⊢ S.to_submodule * S.to_submodule ≤ S.to_submodule
R : Type u,	A : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	S : subalgebra R A	⊢ ∀ (m : A), m ∈ S.to_submodule → ∀ (n : A), n ∈ S.to_submodule → m * n ∈ S.to_submodule
R : Type u,	A : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	S : subalgebra R A	⊢ S.to_submodule * S.to_submodule ≤ S.to_submodule		R : Type u,	A : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	S : subalgebra R A	⊢ S.to_submodule ≤ S.to_submodule * S.to_submodule
R : Type u,	A : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	S : subalgebra R A,	y : A,	hy : y ∈ S.to_submodule,	z : A,	hz : z ∈ S.to_submodule	⊢ y * z ∈ S.to_submodule
R : Type u,	A : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	S : subalgebra R A	⊢ S.to_submodule ≤ S.to_submodule * S.to_submodule
R : Type u,	A : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	S : subalgebra R A,	x : A,	hx1 : x ∈ S.to_submodule	⊢ x ∈ S.to_submodule * S.to_submodule
R : Type u,	A : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A,	S : subalgebra R A,	x : A,	hx1 : x ∈ S.to_submodule	⊢ x * 1 ∈ S.to_submodule * S.to_submodule
R : Type u,	A : Type v,	_inst_1 : comm_semiring R,	_inst_2 : semiring A,	_inst_3 : algebra R A	⊢ ↑⊥ = set.range ⇑(algebra_map R A)
R : Type u,	S : Type v,	A : Type w,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	_inst_3 : semiring A,	_inst_4 : algebra R S,	_inst_5 : algebra S A,	_inst_6 : algebra R A,	_inst_7 : is_scalar_tower R S A,	U V : subalgebra S A,	H : subalgebra.restrict_scalars R U = subalgebra.restrict_scalars R V,	x : A	⊢ x ∈ U ↔ x ∈ V
α : Type u_1,	_inst_1 : linear_ordered_field α,	_inst_2 : archimedean α,	x y : α,	xpos : 0 < x,	hx : x ≤ 1,	ypos : 0 < y,	hy : y < 1	⊢ ∃ (n : ℕ), y ^ (n + 1) < x ∧ x ≤ y ^ n
α : Type u_1,	_inst_1 : linear_ordered_field α,	_inst_2 : archimedean α,	x y : α,	xpos : 0 < x,	hx : x ≤ 1,	ypos : 0 < y,	hy : y < 1,	n : ℕ,	hn : y⁻¹ ^ n ≤ x⁻¹,	h'n : x⁻¹ < y⁻¹ ^ (n + 1)	⊢ ∃ (n : ℕ), y ^ (n + 1) < x ∧ x ≤ y ^ n
α : Type u_1,	_inst_1 : linear_ordered_field α,	_inst_2 : archimedean α,	x y : α,	xpos : 0 < x,	hx : x ≤ 1,	ypos : 0 < y,	hy : y < 1,	n : ℕ,	hn : y⁻¹ ^ n ≤ x⁻¹,	h'n : x⁻¹ < y⁻¹ ^ (n + 1)	⊢ y ^ (n + 1) < x
α : Type u_1,	_inst_1 : linear_ordered_field α,	_inst_2 : archimedean α,	x y : α,	xpos : 0 < x,	hx : x ≤ 1,	ypos : 0 < y,	hy : y < 1,	n : ℕ,	hn : y⁻¹ ^ n ≤ x⁻¹,	h'n : x⁻¹ < y⁻¹ ^ (n + 1)	⊢ y ^ (n + 1) < x		α : Type u_1,	_inst_1 : linear_ordered_field α,	_inst_2 : archimedean α,	x y : α,	xpos : 0 < x,	hx : x ≤ 1,	ypos : 0 < y,	hy : y < 1,	n : ℕ,	hn : y⁻¹ ^ n ≤ x⁻¹,	h'n : x⁻¹ < y⁻¹ ^ (n + 1)	⊢ x ≤ y ^ n
α : Type u_1,	_inst_1 : linear_ordered_field α,	_inst_2 : archimedean α,	x y : α,	xpos : 0 < x,	hx : x ≤ 1,	ypos : 0 < y,	hy : y < 1,	n : ℕ,	hn : y⁻¹ ^ n ≤ x⁻¹,	h'n : x⁻¹ < y⁻¹ ^ (n + 1)	⊢ x ≤ y ^ n
α : Type u_1,	_inst_1 : linear_ordered_field α,	H : ∀ (x : α), ∃ (n : ℕ), x < ↑n,	x y : α,	y0 : 0 < y,	n : ℕ,	h : x / y < ↑n	⊢ x < n • y
α : Type u_1,	β : Type u_2,	_inst_1 : comm_monoid_with_zero α,	p : α,	hp : prime p,	s : multiset β,	f : β → α,	h : p ∣ (multiset.map f s).prod	⊢ ∃ (a : β) (H : a ∈ s), p ∣ f a
α : Type u_1,	_inst_1 : monoid α,	x : α,	h : ¬is_unit x	⊢ irreducible x ∨ ∃ (a b : α), ¬is_unit a ∧ ¬is_unit b ∧ a * b = x
α : Type u_1,	_inst_1 : monoid α,	x : α,	h : ¬is_unit x,	_inst : Π (p : Prop), decidable p	⊢ irreducible x ∨ ∃ (a b : α), ¬is_unit a ∧ ¬is_unit b ∧ a * b = x
α : Type u_1,	_inst_1 : monoid α,	x : α,	h : ¬is_unit x,	_inst : Π (p : Prop), decidable p,	H : ¬∃ (a b : α), ¬is_unit a ∧ ¬is_unit b ∧ a * b = x	⊢ irreducible x
α : Type u_1,	_inst_1 : monoid α,	x : α,	h : ¬is_unit x,	_inst : Π (p : Prop), decidable p,	H : ∀ (x_1 : α), ¬is_unit x_1 → ∀ (x_2 : α), ¬is_unit x_2 → ¬x_1 * x_2 = x	⊢ ∀ (a b : α), x = a * b → is_unit a ∨ is_unit b
α : Type u_1,	_inst_1 : monoid α,	x : α,	h : ¬is_unit x,	_inst : Π (p : Prop), decidable p,	H : ∀ (x_1 : α), ¬is_unit x_1 → ∀ (x_2 : α), ¬is_unit x_2 → ¬x_1 * x_2 = x,	a b : α,	h : x = a * b,	o : ¬(is_unit a ∨ is_unit b)	⊢ false
α : Type u_1,	_inst_1 : monoid α,	x : α,	h : ¬is_unit x,	_inst : Π (p : Prop), decidable p,	H : ∀ (x_1 : α), ¬is_unit x_1 → ∀ (x_2 : α), ¬is_unit x_2 → ¬x_1 * x_2 = x,	a b : α,	h : x = a * b,	o : ¬is_unit a ∧ ¬is_unit b	⊢ false
α : Type u_1,	M : Type u_4,	N : Type u_5,	_inst_1 : comm_monoid M,	_inst_2 : comm_monoid N,	s : set α,	f : α → M,	g : M →* N,	h₀ : (s ∩ function.mul_support f).finite	⊢ ⇑g (∏ᶠ (j : α) (H : j ∈ s), f j) = ∏ᶠ (i : α) (H : i ∈ s), ⇑g (f i)
α : Type u_1,	M : Type u_4,	N : Type u_5,	_inst_1 : comm_monoid M,	_inst_2 : comm_monoid N,	s : set α,	f : α → M,	g : M →* N,	h₀ : (s ∩ function.mul_support f).finite	⊢ ∏ᶠ (i : α), ⇑g (∏ᶠ (H : i ∈ s), f i) = ∏ᶠ (i : α) (H : i ∈ s), ⇑g (f i)		α : Type u_1,	M : Type u_4,	N : Type u_5,	_inst_1 : comm_monoid M,	_inst_2 : comm_monoid N,	s : set α,	f : α → M,	g : M →* N,	h₀ : (s ∩ function.mul_support f).finite	⊢ (function.mul_support (λ (i : α), ∏ᶠ (H : i ∈ s), f i)).finite
α : Type u_1,	M : Type u_4,	N : Type u_5,	_inst_1 : comm_monoid M,	_inst_2 : comm_monoid N,	s : set α,	f : α → M,	g : M →* N,	h₀ : (s ∩ function.mul_support f).finite	⊢ ∏ᶠ (i : α), ⇑g (∏ᶠ (H : i ∈ s), f i) = ∏ᶠ (i : α) (H : i ∈ s), ⇑g (f i)
α : Type u_1,	M : Type u_4,	N : Type u_5,	_inst_1 : comm_monoid M,	_inst_2 : comm_monoid N,	s : set α,	f : α → M,	g : M →* N,	h₀ : (s ∩ function.mul_support f).finite	⊢ (function.mul_support (λ (i : α), ∏ᶠ (H : i ∈ s), f i)).finite
δ : Type u_1,	_inst_2 : add_comm_monoid δ,	a b : ℕ,	hab : a < b,	f : ℕ → δ	⊢ a ∉ finset.Ico (a + 1) b
δ : Type u_1,	_inst_2 : add_comm_monoid δ,	a b : ℕ,	hab : a < b,	f : ℕ → δ,	ha : a ∉ finset.Ico (a + 1) b	⊢ ∑ (k : ℕ) in finset.Ico a b, f k = f a + ∑ (k : ℕ) in finset.Ico (a + 1) b, f k
J : Type u,	𝒥 : category_theory.small_category J	⊢ category_theory.limits.has_limits_of_shape J CommSemiRing
J : Type ?,	𝒥 : category_theory.small_category J,	F : J ⥤ CommSemiRing	⊢ category_theory.limits.preserves_limit F (category_theory.forget₂ CommSemiRing SemiRing)
G H : Group,	f₁ f₂ : G ⟶ H,	w : ∀ (x : ↥G), ⇑f₁ x = ⇑f₂ x,	x : ↥G	⊢ ⇑f₁ x = ⇑f₂ x
G H : Group,	f₁ f₂ : G ⟶ H,	w : ∀ (x : ↥G), ⇑f₁ x = ⇑f₂ x	⊢ f₁ = f₂
J : Type ?,	_x : decidable_eq J,	_x : fintype J	⊢ category_theory.limits.has_biproducts_of_shape J AddCommGroup
J : Type ?,	_x : decidable_eq J,	_x : fintype J,	f : J → AddCommGroup	⊢ category_theory.limits.has_biproduct f
G H : AddCommGroup,	f : G ⟶ H	⊢ (AddCommGroup.kernel_iso_ker f).hom ≫ (add_monoid_hom.ker f).subtype = category_theory.limits.kernel.ι f
G H : AddCommGroup,	f : G ⟶ H	⊢ (AddCommGroup.kernel_iso_ker f).hom ≫ (add_monoid_hom.ker f).subtype = category_theory.limits.kernel.ι f
G H : AddCommGroup,	f : G ⟶ H,	x : ↥(category_theory.limits.kernel f)	⊢ ⇑((AddCommGroup.kernel_iso_ker f).hom ≫ (add_monoid_hom.ker f).subtype) x = ⇑(category_theory.limits.kernel.ι f) x
R : Type u_1,	_inst_1 : comm_ring R,	C : Type u,	_inst_2 : category_theory.category C,	D : Type u,	_inst_3 : category_theory.category D,	_inst_4 : category_theory.preadditive D,	_inst_5 : category_theory.linear R D,	F : C ⥤ D,	X Y : C,	f : X ⟶ Y,	r : R	⊢ (category_theory.Free.lift R F).map (finsupp.single f r) = r • F.map f
R : Type u_1,	_inst_1 : comm_ring R,	C : Type u,	_inst_2 : category_theory.category C,	D : Type u,	_inst_3 : category_theory.category D,	_inst_4 : category_theory.preadditive D,	_inst_5 : category_theory.linear R D,	F : C ⥤ D	⊢ ∀ {X Y : C} (f : X ⟶ Y), (category_theory.Free.embedding R C ⋙ category_theory.Free.lift R F).map f ≫ (category_theory.iso.refl ((category_theory.Free.embedding R C ⋙ category_theory.Free.lift R F).obj Y)).hom = (category_theory.iso.refl ((category_theory.Free.embedding R C ⋙ category_theory.Free.lift R F).obj X)).hom ≫ F.map f
R : Type u,	_inst_1 : ring R,	X Y : Module R,	i : X ≅ Y	⊢ function.left_inverse ⇑(i.inv) ⇑(i.hom)
R : Type u,	_inst_1 : ring R,	X Y : Module R,	i : X ≅ Y	⊢ function.right_inverse ⇑(i.inv) ⇑(i.hom)
R : Type u,	_inst_1 : ring R,	X Y : Module R,	i : X ≅ Y	⊢ ∀ (x y : ↥X), ⇑(i.hom) (x + y) = ⇑(i.hom) x + ⇑(i.hom) y
R : Type u,	_inst_1 : ring R,	X Y : Module R,	i : X ≅ Y	⊢ ∀ (r : R) (x : ↥X), ⇑(i.hom) (r • x) = ⇑(ring_hom.id R) r • ⇑(i.hom) x
R : Type v,	_inst_1 : ring R,	J : Type v,	_inst_2 : category_theory.small_category J,	F : J ⥤ Module R,	j : J	⊢ ∀ (r : R) (x : ↥(F.obj j)), Module.colimits.cocone_fun F j (r • x) = ⇑(ring_hom.id R) r • Module.colimits.cocone_fun F j x
R : Type v,	_inst_1 : ring R,	J : Type v,	_inst_2 : category_theory.small_category J,	F : J ⥤ Module R,	j : J,	r : R,	x : ↥(F.obj j)	⊢ Module.colimits.cocone_fun F j (r • x) = ⇑(ring_hom.id R) r • Module.colimits.cocone_fun F j x
R : Type v,	_inst_1 : ring R,	J : Type v,	_inst_2 : category_theory.small_category J,	F : J ⥤ Module R,	j : J,	r : R,	x : ↥(F.obj j)	⊢ setoid.r (Module.colimits.prequotient.of j (r • x)) (Module.colimits.prequotient.smul (⇑(ring_hom.id R) r) (Module.colimits.prequotient.of j x))
R : Type v,	_inst_1 : ring R,	J : Type v,	_inst_2 : category_theory.small_category J,	F : J ⥤ Module R,	j : J	⊢ ∀ (x y : ↥(F.obj j)), Module.colimits.cocone_fun F j (x + y) = Module.colimits.cocone_fun F j x + Module.colimits.cocone_fun F j y
R : Type v,	_inst_1 : ring R,	J : Type v,	_inst_2 : category_theory.small_category J,	F : J ⥤ Module R,	j : J	⊢ ∀ (x y : ↥(F.obj j)), Module.colimits.cocone_fun F j (x + y) = Module.colimits.cocone_fun F j x + Module.colimits.cocone_fun F j y
R : Type v,	_inst_1 : ring R,	J : Type v,	_inst_2 : category_theory.small_category J,	F : J ⥤ Module R,	j : J	⊢ ∀ (x y : ↥(F.obj j)), Module.colimits.cocone_fun F j (x + y) = Module.colimits.cocone_fun F j x + Module.colimits.cocone_fun F j y
R : Type v,	_inst_1 : ring R,	J : Type v,	_inst_2 : category_theory.small_category J,	F : J ⥤ Module R,	j : J,	x y : ↥(F.obj j)	⊢ Module.colimits.cocone_fun F j (x + y) = Module.colimits.cocone_fun F j x + Module.colimits.cocone_fun F j y
R : Type v,	_inst_1 : ring R,	J : Type v,	_inst_2 : category_theory.small_category J,	F : J ⥤ Module R,	j : J,	x y : ↥(F.obj j)	⊢ setoid.r (Module.colimits.prequotient.of j (x + y)) ((Module.colimits.prequotient.of j x).add (Module.colimits.prequotient.of j y))
R : Type u,	_inst_1 : ring R,	M : Module R,	m : ↥M	⊢ ⇑(⇑(finsupp.basis_single_one.constr ℕ) id) (finsupp.single m 1) = m
J : Type ?,	_x : category_theory.small_category J,	_x : category_theory.is_filtered J	⊢ category_theory.limits.preserves_colimits_of_shape J (category_theory.forget Mon)
J : Type ?,	𝒥 : category_theory.small_category J,	F : J ⥤ CommMon	⊢ category_theory.limits.preserves_limit F (category_theory.forget₂ CommMon Mon)
R : Type u,	_inst_1 : non_assoc_semiring R,	_inst_2 : char_p R 1,	this : ∀ (r : R), r = 0,	a b : R	⊢ a = b
R : Type u,	_inst_1 : non_assoc_semiring R,	_inst_2 : char_p R 1,	r : R	⊢ r = 1 * r
R : Type u,	_inst_1 : non_assoc_semiring R,	_inst_2 : char_p R 1,	r : R	⊢ 1 * r = ↑1 * r
R : Type u,	_inst_1 : non_assoc_semiring R,	_inst_2 : char_p R 1,	r : R	⊢ ↑1 * r = 0 * r
R : Type u,	_inst_1 : non_assoc_semiring R,	_inst_2 : char_p R 1,	r : R	⊢ 0 * r = 0
K : Type u_1,	v : K,	n : ℕ,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	hyp : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1)	⊢ ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	hyp : 0 = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (0 - 1)	⊢ ((generalized_continued_fraction.of v).continuants_aux 0).a * ((generalized_continued_fraction.of v).continuants_aux (0 + 1)).b - ((generalized_continued_fraction.of v).continuants_aux 0).b * ((generalized_continued_fraction.of v).continuants_aux (0 + 1)).a = (-1) ^ 0
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	hyp : 0 = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (0 - 1)	⊢ ((generalized_continued_fraction.of v).continuants_aux 0).a * ((generalized_continued_fraction.of v).continuants_aux (0 + 1)).b - ((generalized_continued_fraction.of v).continuants_aux 0).b * ((generalized_continued_fraction.of v).continuants_aux (0 + 1)).a = (-1) ^ 0		case nat.succ	K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1)	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1)	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1)	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2)	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1)	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b	⊢ ((generalized_continued_fraction.of v).continuants_aux n.succ).a * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n.succ).b * ((generalized_continued_fraction.of v).continuants_aux (n.succ + 1)).a = (-1) ^ n.succ
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b	⊢ ¬g.terminated_at n		K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n	⊢ pA * conts.b - pB * conts.a = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b	⊢ pA * conts.b - pB * conts.a = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n	⊢ ∃ (gp : generalized_continued_fraction.pair K), g.s.nth n = option.some gp		K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp	⊢ pA * conts.b - pB * conts.a = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n	⊢ pA * conts.b - pB * conts.a = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp	⊢ pA * conts.b - pB * conts.a = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) = (-1) ^ (n + 1)	⊢ pA * conts.b - pB * conts.a = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) = (-1) ^ (n + 1)	⊢ gp.a = 1		K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) = (-1) ^ (n + 1),	gp_a_eq_one : gp.a = 1	⊢ pA * (gp.b * (g.continuants_aux (n + 1)).b + gp.a * (g.continuants_aux n).b) - pB * (gp.b * (g.continuants_aux (n + 1)).a + gp.a * (g.continuants_aux n).a) = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) = (-1) ^ (n + 1)	⊢ pA * (gp.b * (g.continuants_aux (n + 1)).b + gp.a * (g.continuants_aux n).b) - pB * (gp.b * (g.continuants_aux (n + 1)).a + gp.a * (g.continuants_aux n).a) = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) = (-1) ^ (n + 1),	gp_a_eq_one : gp.a = 1	⊢ pA * (gp.b * (g.continuants_aux (n + 1)).b + gp.a * (g.continuants_aux n).b) - pB * (gp.b * (g.continuants_aux (n + 1)).a + gp.a * (g.continuants_aux n).a) = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) = (-1) ^ (n + 1),	gp_a_eq_one : gp.a = 1	⊢ pA * (gp.b * (g.continuants_aux (n + 1)).b + 1 * (g.continuants_aux n).b) - pB * (gp.b * (g.continuants_aux (n + 1)).a + 1 * (g.continuants_aux n).a) = pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : pA * ppB - pB * ppA = (-1) ^ (n + 1)	⊢ pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) = (-1) ^ (n + 1)		K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp	⊢ pA * ppB - pB * ppA = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp	⊢ pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : pA * ppB - pB * ppA = (-1) ^ (n + 1)	⊢ pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) = pA * ppB + pA * gp.b * pB - pB * ppA - pB * gp.b * pA
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : pA * ppB - pB * ppA = (-1) ^ (n + 1)	⊢ pA * ppB + pA * gp.b * pB - pB * ppA - pB * gp.b * pA = pA * ppB - pB * ppA
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : pA * ppB - pB * ppA = (-1) ^ (n + 1)	⊢ pA * ppB - pB * ppA = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp	⊢ pA * ppB - pB * ppA = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : ppA * pB - ppB * pA = (-1) ^ n	⊢ (-1) ^ (n + 1) = (-1) * (-1) ^ n		K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : ppA * pB - ppB * pA = (-1) ^ n,	pow_succ_n : (-1) ^ (n + 1) = (-1) * (-1) ^ n	⊢ pA * ppB - pB * ppA = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : ppA * pB - ppB * pA = (-1) ^ n	⊢ pA * ppB - pB * ppA = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : ppA * pB - ppB * pA = (-1) ^ n,	pow_succ_n : (-1) ^ (n + 1) = (-1) * (-1) ^ n	⊢ pA * ppB - pB * ppA = (-1) ^ (n + 1)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp,	this : ppA * pB - ppB * pA = (-1) ^ n,	pow_succ_n : (-1) ^ (n + 1) = (-1) * (-1) ^ n	⊢ pA * ppB - pB * ppA = (-1) * (ppA * pB - ppB * pA)
K : Type u_1,	v : K,	_inst_1 : linear_ordered_field K,	_inst_2 : floor_ring K,	n : ℕ,	IH : n = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n - 1) → ((generalized_continued_fraction.of v).continuants_aux n).a * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).b - ((generalized_continued_fraction.of v).continuants_aux n).b * ((generalized_continued_fraction.of v).continuants_aux (n + 1)).a = (-1) ^ n,	hyp : n.succ = 0 ∨ ¬(generalized_continued_fraction.of v).terminated_at (n.succ - 1),	g : generalized_continued_fraction K := generalized_continued_fraction.of v,	conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 2),	pred_conts : generalized_continued_fraction.pair K := g.continuants_aux (n + 1),	pred_conts_eq : pred_conts = g.continuants_aux (n + 1),	ppred_conts : generalized_continued_fraction.pair K := g.continuants_aux n,	ppred_conts_eq : ppred_conts = g.continuants_aux n,	pA : K := pred_conts.a,	pB : K := pred_conts.b,	ppA : K := ppred_conts.a,	ppB : K := ppred_conts.b,	not_terminated_at_n : ¬g.terminated_at n,	gp : generalized_continued_fraction.pair K,	s_nth_eq : g.s.nth n = option.some gp	⊢ ppA * pB - ppB * pA = (-1) ^ n
M : Type u_1,	N : Type u_2,	μ : M → N → N,	_inst_1 : partial_order N	⊢ covariant M N μ has_lt.lt → covariant M N μ has_le.le
M : Type u_1,	N : Type u_2,	μ : M → N → N,	_inst_1 : partial_order N,	h : covariant M N μ has_lt.lt,	a : M,	b c : N,	bc : b ≤ c	⊢ μ a b ≤ μ a c
M : Type u_1,	N : Type u_2,	μ : M → N → N,	_inst_1 : partial_order N,	h : covariant M N μ has_lt.lt,	a : M,	b : N,	bc : b ≤ b	⊢ μ a b ≤ μ a b		M : Type u_1,	N : Type u_2,	μ : M → N → N,	_inst_1 : partial_order N,	h : covariant M N μ has_lt.lt,	a : M,	b c : N,	bc : b ≤ c,	bc : b < c	⊢ μ a b ≤ μ a c
M : Type u_1,	N : Type u_2,	μ : M → N → N,	_inst_1 : partial_order N,	h : covariant M N μ has_lt.lt,	a : M,	b : N,	bc : b ≤ b	⊢ μ a b ≤ μ a b
M : Type u_1,	N : Type u_2,	μ : M → N → N,	_inst_1 : partial_order N,	h : covariant M N μ has_lt.lt,	a : M,	b c : N,	bc : b ≤ c,	bc : b < c	⊢ μ a b ≤ μ a c
R : Type u,	_inst_1 : ring R,	ι : Type v,	_inst_2 : directed_order ι,	G : ι → Type w,	_inst_3 : Π (i : ι), add_comm_group (G i),	_inst_4 : Π (i : ι), module R (G i),	f : Π (i j : ι), i ≤ j → (G i →ₗ[R] G j),	i j : ι,	x : G i,	h : i ≤ j	⊢ ⇑(module.direct_limit.totalize G f i j) x = dite (i ≤ j) (λ (h : i ≤ j), ⇑(f i j h) x) (λ (h : ¬i ≤ j), 0)
R : Type u,	_inst_1 : ring R,	ι : Type v,	_inst_2 : directed_order ι,	G : ι → Type w,	_inst_3 : Π (i : ι), add_comm_group (G i),	_inst_4 : Π (i : ι), module R (G i),	f : Π (i j : ι), i ≤ j → (G i →ₗ[R] G j),	i j : ι,	x : G i,	h : i ≤ j	⊢ ⇑(module.direct_limit.totalize G f i j) x = dite (i ≤ j) (λ (h : i ≤ j), ⇑(f i j h) x) (λ (h : ¬i ≤ j), 0)
R : Type u,	_inst_1 : ring R,	ι : Type v,	_inst_2 : directed_order ι,	G : ι → Type w,	_inst_3 : Π (i : ι), add_comm_group (G i),	_inst_4 : Π (i : ι), module R (G i),	f : Π (i j : ι), i ≤ j → (G i →ₗ[R] G j),	i j : ι,	x : G i,	h : i ≤ j	⊢ ⇑(dite (i ≤ j) (f i j) (λ (h : ¬i ≤ j), 0)) x = dite (i ≤ j) (λ (h : i ≤ j), ⇑(f i j h) x) (λ (h : ¬i ≤ j), 0)
R : Type u,	_inst_1 : ring R,	ι : Type v,	_inst_2 : directed_order ι,	G : ι → Type w,	_inst_3 : Π (i : ι), add_comm_group (G i),	_inst_4 : Π (i : ι), module R (G i),	f : Π (i j : ι), i ≤ j → (G i →ₗ[R] G j),	i j : ι,	x : G i,	h : ¬i ≤ j	⊢ ⇑(module.direct_limit.totalize G f i j) x = dite (i ≤ j) (λ (h : i ≤ j), ⇑(f i j h) x) (λ (h : ¬i ≤ j), 0)
R : Type u,	_inst_1 : ring R,	ι : Type v,	_inst_2 : directed_order ι,	G : ι → Type w,	_inst_3 : Π (i : ι), add_comm_group (G i),	_inst_4 : Π (i : ι), module R (G i),	f : Π (i j : ι), i ≤ j → (G i →ₗ[R] G j),	i j : ι,	x : G i,	h : ¬i ≤ j	⊢ ⇑(module.direct_limit.totalize G f i j) x = dite (i ≤ j) (λ (h : i ≤ j), ⇑(f i j h) x) (λ (h : ¬i ≤ j), 0)
R : Type u,	_inst_1 : ring R,	ι : Type v,	_inst_2 : directed_order ι,	G : ι → Type w,	_inst_3 : Π (i : ι), add_comm_group (G i),	_inst_4 : Π (i : ι), module R (G i),	f : Π (i j : ι), i ≤ j → (G i →ₗ[R] G j),	i j : ι,	x : G i,	h : ¬i ≤ j	⊢ ⇑(dite (i ≤ j) (f i j) (λ (h : ¬i ≤ j), 0)) x = dite (i ≤ j) (λ (h : i ≤ j), ⇑(f i j h) x) (λ (h : ¬i ≤ j), 0)
ι : Type v,	_inst_2 : directed_order ι,	G : ι → Type w,	_inst_3 : nonempty ι,	_inst_4 : Π (i : ι), field (G i),	f : Π (i j : ι), i ≤ j → G i → G j,	p : ring.direct_limit G f,	i : ι,	x : G i,	H : ⇑(ring.direct_limit.of G f i) x ≠ 0	⊢ ⇑(ring.direct_limit.of G f i) x * ⇑(ring.direct_limit.of G f i) x⁻¹ = 1
ι : Type v,	_inst_2 : directed_order ι,	G : ι → Type w,	_inst_3 : nonempty ι,	_inst_4 : Π (i : ι), field (G i),	f : Π (i j : ι), i ≤ j → G i → G j,	p : ring.direct_limit G f,	i : ι,	x : G i,	H : ⇑(ring.direct_limit.of G f i) x ≠ 0,	h : x = 0	⊢ ⇑(ring.direct_limit.of G f i) x = 0
α : Type u_1,	_inst_1 : comm_monoid α,	a b : α,	h : a ∣ b,	c : α	⊢ a ∣ b * c
α : Type u_1,	_inst_1 : comm_monoid α,	a b : α,	h : a ∣ b,	c : α	⊢ a ∣ c * b
α : Type u_1,	_inst_1 : comm_monoid_with_zero α,	a b : α,	hd : a ∣ b,	hnd : ¬b ∣ a	⊢ dvd_not_unit a b
α : Type u_1,	_inst_1 : comm_monoid_with_zero α,	b : α,	hd : 0 ∣ b,	hnd : ¬b ∣ 0	⊢ false
α : Type u_1,	_inst_1 : comm_monoid_with_zero α,	a b : α,	hd : a ∣ b,	hnd : ¬b ∣ a	⊢ a ≠ 0		α : Type u_1,	_inst_1 : comm_monoid_with_zero α,	a b : α,	hd : a ∣ b,	hnd : ¬b ∣ a	⊢ ∃ (x : α), ¬is_unit x ∧ b = a * x
α : Type u_1,	_inst_1 : comm_monoid_with_zero α,	a b : α,	hd : a ∣ b,	hnd : ¬b ∣ a	⊢ a ≠ 0
α : Type u_1,	_inst_1 : comm_monoid_with_zero α,	a b : α,	hd : a ∣ b,	hnd : ¬b ∣ a	⊢ ∃ (x : α), ¬is_unit x ∧ b = a * x
α : Type u_1,	_inst_1 : comm_monoid_with_zero α,	a c : α,	hnd : ¬a * c ∣ a	⊢ ∃ (x : α), ¬is_unit x ∧ a * c = a * x
α : Type u_1,	_inst_1 : comm_monoid_with_zero α,	a c : α,	hnd : ¬a * c ∣ a	⊢ ¬is_unit c
α : Type u_1,	_inst_1 : comm_monoid_with_zero α,	a : α,	u : units α,	hnd : ¬a * ↑u ∣ a	⊢ false
R : Type u,	_inst_1 : euclidean_domain R,	_inst_2 : decidable_eq R,	s t r' s' t' : R	⊢ ite (0 = 0) (r', s', t') (let q : R := r' / 0 in euclidean_domain.xgcd_aux (r' % 0) (s' - q * s) (t' - q * t) 0 s t) = (r', s', t')
R : Type u,	_inst_1 : euclidean_domain R,	_inst_2 : decidable_eq R,	s t r' s' t' : R	⊢ euclidean_domain.xgcd_aux 0 s t r' s' t' = (r', s', t')
R : Type u,	_inst_1 : euclidean_domain R,	_inst_2 : decidable_eq R,	x : R	⊢ euclidean_domain.lcm 0 x = 0
K : Type u,	_inst_1 : division_ring K,	a : K	⊢ (-a)⁻¹ = -a⁻¹
α : Type u_1,	_inst_1 : linear_ordered_ring α,	_inst_2 : floor_ring α,	a : α	⊢ a < ↑⌊a⌋₊ + 1
α : Type u_1,	_inst_1 : linear_ordered_ring α,	_inst_2 : floor_ring α,	a : α	⊢ ↑⌊a⌋ ≤ ↑⌊a⌋₊
α : Type u_1,	_inst_1 : linear_ordered_ring α,	_inst_2 : floor_ring α,	a : α	⊢ ⌊a⌋ ≤ ↑⌊a⌋₊
α : Type u_1,	_inst_1 : linear_ordered_ring α,	_inst_2 : floor_ring α,	x : α	⊢ x < ↑⌊x⌋ + 1
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	m n k : α,	H : k ∣ m * n	⊢ k ∣ gcd_monoid.gcd k m * n
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	m n k : α,	H : k ∣ m * n	⊢ k ∣ gcd_monoid.gcd k m * ⇑normalize n
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	m n k : α,	H : k ∣ m * n	⊢ k ∣ gcd_monoid.gcd k m * ⇑normalize n		α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	m n k : α,	H : k ∣ m * n	⊢ gcd_monoid.gcd k m * ⇑normalize n ∣ gcd_monoid.gcd k m * n
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	m n k : α,	H : k ∣ m * n	⊢ k ∣ gcd_monoid.gcd (k * n) (m * n)
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	m n k : α,	H : k ∣ m * n	⊢ gcd_monoid.gcd k m * ⇑normalize n ∣ gcd_monoid.gcd k m * n
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	m n k : α,	H : k ∣ m * n	⊢ gcd_monoid.gcd k m * ⇑normalize n * ↑(normalization_monoid.norm_unit n)⁻¹ = gcd_monoid.gcd k m * n		α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	m n k : α,	H : k ∣ m * n	⊢ has_lift_t (units α) α
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	m n k : α,	H : k ∣ m * n	⊢ gcd_monoid.gcd k m * (n * ↑(normalization_monoid.norm_unit n * (normalization_monoid.norm_unit n)⁻¹)) = gcd_monoid.gcd k m * n
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	a b : α,	this : gcd_monoid.lcm a b = 0	⊢ ⇑normalize (gcd_monoid.lcm a b) = gcd_monoid.lcm a b
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	a b : α,	h_lcm : gcd_monoid.lcm a b ≠ 0	⊢ gcd_monoid.gcd a b = 0 → gcd_monoid.lcm a b = 0
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	a b : α,	h_lcm : gcd_monoid.lcm a b ≠ 0	⊢ gcd_monoid.gcd a b = 0 → gcd_monoid.lcm a b = 0
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	a b : α,	h_lcm : gcd_monoid.lcm a b ≠ 0	⊢ gcd_monoid.gcd a b = 0 → gcd_monoid.lcm a b = 0
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	a b : α,	h_lcm : gcd_monoid.lcm a b ≠ 0	⊢ gcd_monoid.gcd a b = 0 → gcd_monoid.lcm a b = 0
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	h_lcm : gcd_monoid.lcm 0 0 ≠ 0	⊢ 0 = 0 ∨ 0 = 0
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	h_lcm : gcd_monoid.lcm 0 0 ≠ 0	⊢ 0 = 0
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	a b : α,	h_lcm : gcd_monoid.lcm a b ≠ 0	⊢ a = 0 ∧ b = 0 → a = 0 ∨ b = 0
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	a b : α,	h_lcm : gcd_monoid.lcm a b ≠ 0,	h1 : gcd_monoid.gcd a b ≠ 0	⊢ ⇑normalize (gcd_monoid.gcd a b * gcd_monoid.lcm a b) = gcd_monoid.gcd a b * gcd_monoid.lcm a b
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	a b : α,	h_lcm : gcd_monoid.lcm a b ≠ 0,	h1 : gcd_monoid.gcd a b ≠ 0,	h2 : ⇑normalize (gcd_monoid.gcd a b * gcd_monoid.lcm a b) = gcd_monoid.gcd a b * gcd_monoid.lcm a b	⊢ ⇑normalize (gcd_monoid.lcm a b) = gcd_monoid.lcm a b
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : decidable_eq α,	f : associates α →* α,	hinv : function.right_inverse ⇑f associates.mk,	a b : α,	ha : a ≠ 0,	hb : b ≠ 0	⊢ ite (a * b = 0) 1 (classical.some _) = ite (a = 0) 1 (classical.some _) * ite (b = 0) 1 (classical.some _)
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : decidable_eq α,	f : associates α →* α,	hinv : function.right_inverse ⇑f associates.mk,	a b : α,	ha : a ≠ 0,	hb : b ≠ 0	⊢ ↑(classical.some _) = ↑(classical.some _) * ↑(classical.some _)
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : decidable_eq α,	f : associates α →* α,	hinv : function.right_inverse ⇑f associates.mk,	a b : α,	ha : a ≠ 0,	hb : b ≠ 0,	this : a * b * ↑(classical.some _) = a * ↑(classical.some _) * (b * ↑(classical.some _))	⊢ ↑(classical.some _) = ↑(classical.some _) * ↑(classical.some _)
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : decidable_eq α,	f : associates α →* α,	hinv : function.right_inverse ⇑f associates.mk,	a b : α,	ha : a ≠ 0,	hb : b ≠ 0,	this : a * b * ↑(classical.some _) = a * ↑(classical.some _) * (b * ↑(classical.some _))	⊢ ↑(classical.some _) = ↑(classical.some _) * ↑(classical.some _)		α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : decidable_eq α,	f : associates α →* α,	hinv : function.right_inverse ⇑f associates.mk,	a b : α,	ha : a ≠ 0,	hb : b ≠ 0	⊢ a * b * ↑(classical.some _) = a * ↑(classical.some _) * (b * ↑(classical.some _))
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : decidable_eq α,	f : associates α →* α,	hinv : function.right_inverse ⇑f associates.mk,	a b : α,	ha : a ≠ 0,	hb : b ≠ 0,	this : a * b * ↑(classical.some _) = a * ↑(classical.some _) * (b * ↑(classical.some _))	⊢ a * b * ↑(classical.some _) = a * b * (↑(classical.some _) * ↑(classical.some _))
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : decidable_eq α,	f : associates α →* α,	hinv : function.right_inverse ⇑f associates.mk,	a b : α,	ha : a ≠ 0,	hb : b ≠ 0	⊢ a * b * ↑(classical.some _) = a * ↑(classical.some _) * (b * ↑(classical.some _))
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : decidable_eq α,	f : associates α →* α,	hinv : function.right_inverse ⇑f associates.mk,	u : units α	⊢ ite (↑u = 0) 1 (classical.some _) = u⁻¹
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : decidable_eq α,	f : associates α →* α,	hinv : function.right_inverse ⇑f associates.mk,	u : units α	⊢ ↑(classical.some _) = ↑u⁻¹
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : decidable_eq α,	f : associates α →* α,	hinv : function.right_inverse ⇑f associates.mk,	u : units α	⊢ ↑u * ↑(classical.some _) = ↑u * ↑u⁻¹
α : Type u_1,	β : Type u_2,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	s : finset β,	f : β → α,	a : α	⊢ s.gcd (λ (x : β), f x * a) = s.gcd f * ⇑normalize a
α : Type u_1,	β : Type u_2,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	s : finset β,	f : β → α,	a : α,	_inst : Π (a : Prop), decidable a	⊢ s.gcd (λ (x : β), f x * a) = s.gcd f * ⇑normalize a
α : Type u_1,	β : Type u_2,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	s : finset β,	f : β → α,	a : α,	_inst : Π (a : Prop), decidable a	⊢ ∅.gcd (λ (x : β), f x * a) = ∅.gcd f * ⇑normalize a		α : Type u_1,	β : Type u_2,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	s : finset β,	f : β → α,	a : α,	_inst : Π (a : Prop), decidable a	⊢ ∀ ⦃a_1 : β⦄ {s : finset β}, a_1 ∉ s → s.gcd (λ (x : β), f x * a) = s.gcd f * ⇑normalize a → (has_insert.insert a_1 s).gcd (λ (x : β), f x * a) = (has_insert.insert a_1 s).gcd f * ⇑normalize a
α : Type u_1,	β : Type u_2,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	s : finset β,	f : β → α,	a : α,	_inst : Π (a : Prop), decidable a	⊢ ∅.gcd (λ (x : β), f x * a) = ∅.gcd f * ⇑normalize a
α : Type u_1,	β : Type u_2,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	s : finset β,	f : β → α,	a : α,	_inst : Π (a : Prop), decidable a	⊢ ∀ ⦃a_1 : β⦄ {s : finset β}, a_1 ∉ s → s.gcd (λ (x : β), f x * a) = s.gcd f * ⇑normalize a → (has_insert.insert a_1 s).gcd (λ (x : β), f x * a) = (has_insert.insert a_1 s).gcd f * ⇑normalize a
α : Type u_1,	β : Type u_2,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	s : finset β,	f : β → α,	a : α,	_inst : Π (a : Prop), decidable a,	b : β,	t : finset β,	hbt : b ∉ t,	h : t.gcd (λ (x : β), f x * a) = t.gcd f * ⇑normalize a	⊢ (has_insert.insert b t).gcd (λ (x : β), f x * a) = (has_insert.insert b t).gcd f * ⇑normalize a
α : Type u_1,	β : Type u_2,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : nontrivial α,	_inst_3 : gcd_monoid α,	s : finset β,	f : β → α,	a : α,	_inst : Π (a : Prop), decidable a,	b : β,	t : finset β,	hbt : b ∉ t,	h : t.gcd (λ (x : β), f x * a) = t.gcd f * ⇑normalize a	⊢ gcd_monoid.gcd (f b * a) (t.gcd f * ⇑normalize a) = gcd_monoid.gcd (f b * a) (t.gcd f * a)
G : Type u,	_inst_1 : add_comm_group G,	a b c : G	⊢ c + a - (c + b) = a - b
G : Type u_1,	_inst_1 : group G,	a b : G,	h : commute a b	⊢ a * b * a⁻¹ = b
M : Type u_1,	m₁ m₂ : monoid M,	h_mul : monoid.mul = monoid.mul	⊢ m₁ = m₂
M : Type u_1,	m₁ m₂ : monoid M,	h_mul : monoid.mul = monoid.mul	⊢ m₁ = m₂
M : Type u_1,	m₂ : monoid M,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	h_mul : monoid.mul = monoid.mul	⊢ {mul := mul₁, mul_assoc := m₁_mul_assoc, one := one₁, one_mul := one_mul₁, mul_one := mul_one₁, npow := npow₁, npow_zero' := npow_zero₁, npow_succ' := npow_succ₁} = m₂
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	mul₂ : M → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₂ : M,	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow₂ : ℕ → M → M,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	h_mul : monoid.mul = monoid.mul	⊢ {mul := mul₁, mul_assoc := m₁_mul_assoc, one := one₁, one_mul := one_mul₁, mul_one := mul_one₁, npow := npow₁, npow_zero' := npow_zero₁, npow_succ' := npow_succ₁} = {mul := mul₂, mul_assoc := m₂_mul_assoc, one := one₂, one_mul := one_mul₂, mul_one := mul_one₂, npow := npow₂, npow_zero' := npow_zero₂, npow_succ' := npow_succ₂}
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	mul₂ : M → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₂ : M,	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow₂ : ℕ → M → M,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	h_mul : mul₁ = mul₂	⊢ {mul := mul₁, mul_assoc := m₁_mul_assoc, one := one₁, one_mul := one_mul₁, mul_one := mul_one₁, npow := npow₁, npow_zero' := npow_zero₁, npow_succ' := npow_succ₁} = {mul := mul₂, mul_assoc := m₂_mul_assoc, one := one₂, one_mul := one_mul₂, mul_one := mul_one₂, npow := npow₂, npow_zero' := npow_zero₂, npow_succ' := npow_succ₂}
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	one₂ : M,	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous)	⊢ {mul := mul₁, mul_assoc := m₁_mul_assoc, one := one₁, one_mul := one_mul₁, mul_one := mul_one₁, npow := npow₁, npow_zero' := npow_zero₁, npow_succ' := npow_succ₁} = {mul := mul₁, mul_assoc := m₂_mul_assoc, one := one₂, one_mul := one_mul₂, mul_one := mul_one₂, npow := npow₂, npow_zero' := npow_zero₂, npow_succ' := npow_succ₂}
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	one₂ : M,	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous)	⊢ one₁ = one₂
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	one₂ : M,	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous)	⊢ one₁ = one₂		M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	one₂ : M,	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	h_one : one₁ = one₂	⊢ {mul := mul₁, mul_assoc := m₁_mul_assoc, one := one₁, one_mul := one_mul₁, mul_one := mul_one₁, npow := npow₁, npow_zero' := npow_zero₁, npow_succ' := npow_succ₁} = {mul := mul₁, mul_assoc := m₂_mul_assoc, one := one₂, one_mul := one_mul₂, mul_one := mul_one₂, npow := npow₂, npow_zero' := npow_zero₂, npow_succ' := npow_succ₂}
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	one₂ : M,	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous)	⊢ 1 * one₁ = one₂
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	one₂ : M,	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	h_one : one₁ = one₂	⊢ {mul := mul₁, mul_assoc := m₁_mul_assoc, one := one₁, one_mul := one_mul₁, mul_one := mul_one₁, npow := npow₁, npow_zero' := npow_zero₁, npow_succ' := npow_succ₁} = {mul := mul₁, mul_assoc := m₂_mul_assoc, one := one₂, one_mul := one_mul₂, mul_one := mul_one₂, npow := npow₂, npow_zero' := npow_zero₂, npow_succ' := npow_succ₂}
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous)	⊢ {mul := mul₁, mul_assoc := m₁_mul_assoc, one := one₁, one_mul := one_mul₁, mul_one := mul_one₁, npow := npow₁, npow_zero' := npow_zero₁, npow_succ' := npow_succ₁} = {mul := mul₁, mul_assoc := m₂_mul_assoc, one := one₁, one_mul := one_mul₂, mul_one := mul_one₂, npow := npow₂, npow_zero' := npow_zero₂, npow_succ' := npow_succ₂}
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous)	⊢ npow₁ = npow₂
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	n : ℕ,	x : M	⊢ npow₁ n x = npow₂ n x
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	x : M	⊢ npow₁ 0 x = npow₂ 0 x		case nat.succ	M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	x : M,	d : ℕ,	hd : npow₁ d x = npow₂ d x	⊢ npow₁ d.succ x = npow₂ d.succ x
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	x : M	⊢ npow₁ 0 x = npow₂ 0 x
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous)	⊢ npow₁ = npow₂		M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	h_npow : npow₁ = npow₂	⊢ {mul := mul₁, mul_assoc := m₁_mul_assoc, one := one₁, one_mul := one_mul₁, mul_one := mul_one₁, npow := npow₁, npow_zero' := npow_zero₁, npow_succ' := npow_succ₁} = {mul := mul₁, mul_assoc := m₂_mul_assoc, one := one₁, one_mul := one_mul₂, mul_one := mul_one₂, npow := npow₂, npow_zero' := npow_zero₂, npow_succ' := npow_succ₂}
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	x : M,	d : ℕ,	hd : npow₁ d x = npow₂ d x	⊢ npow₁ d.succ x = npow₂ d.succ x
M : Type u_1,	mul₁ : M → M → M,	m₁_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one₁ : M,	one_mul₁ : ∀ (a : M), 1 * a = a,	mul_one₁ : ∀ (a : M), a * 1 = a,	npow₁ : ℕ → M → M,	npow_zero₁ : auto_param (∀ (x : M), npow₁ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₁ : auto_param (∀ (n : ℕ) (x : M), npow₁ n.succ x = x * npow₁ n x) (name.mk_string "try_refl_tac" name.anonymous),	npow₂ : ℕ → M → M,	m₂_mul_assoc : ∀ (a b c : M), a * b * c = a * (b * c),	one_mul₂ : ∀ (a : M), 1 * a = a,	mul_one₂ : ∀ (a : M), a * 1 = a,	npow_zero₂ : auto_param (∀ (x : M), npow₂ 0 x = 1) (name.mk_string "try_refl_tac" name.anonymous),	npow_succ₂ : auto_param (∀ (n : ℕ) (x : M), npow₂ n.succ x = x * npow₂ n x) (name.mk_string "try_refl_tac" name.anonymous),	h_npow : npow₁ = npow₂	⊢ {mul := mul₁, mul_assoc := m₁_mul_assoc, one := one₁, one_mul := one_mul₁, mul_one := mul_one₁, npow := npow₁, npow_zero' := npow_zero₁, npow_succ' := npow_succ₁} = {mul := mul₁, mul_assoc := m₂_mul_assoc, one := one₁, one_mul := one_mul₂, mul_one := mul_one₂, npow := npow₂, npow_zero' := npow_zero₂, npow_succ' := npow_succ₂}
M : Type u_1,	N : Type u_2,	A : Type u_3,	mM : mul_one_class M,	gN : mul_one_class N,	gA : comm_group A,	φ : N →* A,	ψ : M →* N,	x : M	⊢ ⇑(φ⁻¹.comp ψ) x = ⇑(φ.comp ψ)⁻¹ x
M : Type u_1,	N : Type u_2,	A : Type u_3,	mM : mul_one_class M,	gN : mul_one_class N,	gA : comm_group A,	φ : N →* A,	ψ : M →* N	⊢ φ⁻¹.comp ψ = (φ.comp ψ)⁻¹
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), monoid_with_zero (f i)	⊢ monoid_with_zero (Π (i : I), f i)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), monoid_with_zero (f i)	⊢ monoid_with_zero (Π (i : I), f i)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), monoid_with_zero (f i)	⊢ ∀ (a b c : Π (i : I), f i), a * b * c = a * (b * c)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), monoid_with_zero (f i)	⊢ ∀ (a : Π (i : I), f i), 1 * a = a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), monoid_with_zero (f i)	⊢ ∀ (a : Π (i : I), f i), a * 1 = a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), monoid_with_zero (f i)	⊢ ∀ (x : Π (i : I), f i), (λ (i : I), monoid.npow 0 (x i)) = 1
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), monoid_with_zero (f i)	⊢ ∀ (n : ℕ) (x : Π (i : I), f i), (λ (i : I), monoid.npow n.succ (x i)) = x * λ (i : I), monoid.npow n (x i)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), monoid_with_zero (f i)	⊢ ∀ (a : Π (i : I), f i), 0 * a = 0
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), monoid_with_zero (f i)	⊢ ∀ (a : Π (i : I), f i), a * 0 = 0
M : Type u_5,	N : Type u_6,	_inst_1 : monoid M,	_inst_2 : monoid N,	u : units M × units N	⊢ (↑(u.fst), ↑(u.snd)) * (↑(u.fst)⁻¹, ↑(u.snd)⁻¹) = 1
M : Type u_5,	N : Type u_6,	_inst_1 : monoid M,	_inst_2 : monoid N,	u : units M × units N	⊢ (↑(u.fst)⁻¹, ↑(u.snd)⁻¹) * (↑(u.fst), ↑(u.snd)) = 1
M : Type u_5,	N : Type u_6,	_inst_1 : monoid M,	_inst_2 : monoid N,	u : units (M × N)	⊢ (λ (u : units M × units N), {val := (↑(u.fst), ↑(u.snd)), inv := (↑(u.fst)⁻¹, ↑(u.snd)⁻¹), val_inv := _, inv_val := _}) (⇑((units.map (monoid_hom.fst M N)).prod (units.map (monoid_hom.snd M N))) u) = u
M : Type u_5,	N : Type u_6,	_inst_1 : monoid M,	_inst_2 : monoid N,	_x : units M × units N,	_fun_match : ∀ (_a : units M × units N), ⇑((units.map (monoid_hom.fst M N)).prod (units.map (monoid_hom.snd M N))) ((λ (u : units M × units N), {val := (↑(u.fst), ↑(u.snd)), inv := (↑(u.fst)⁻¹, ↑(u.snd)⁻¹), val_inv := _, inv_val := _}) _a) = _a,	u₁ : units M,	u₂ : units N	⊢ ⇑((units.map (monoid_hom.fst M N)).prod (units.map (monoid_hom.snd M N))) ((λ (u : units M × units N), {val := (↑(u.fst), ↑(u.snd)), inv := (↑(u.fst)⁻¹, ↑(u.snd)⁻¹), val_inv := _, inv_val := _}) (u₁, u₂)) = (u₁, u₂)
M : Type u_5,	_inst_4 : monoid M,	A : Type u_6,	_inst_5 : add_monoid A,	_inst_6 : distrib_mul_action M A,	B : Type u_8,	_inst_9 : add_monoid B,	_inst_10 : distrib_mul_action M B,	f g : A →+[M] B,	h : ↑f = ↑g,	a : A	⊢ ⇑f a = ⇑g a
M : Type u_5,	_inst_4 : monoid M,	A : Type u_6,	_inst_5 : add_monoid A,	_inst_6 : distrib_mul_action M A,	B : Type u_8,	_inst_9 : add_monoid B,	_inst_10 : distrib_mul_action M B,	f g : A →+[M] B,	h : ↑f = ↑g	⊢ f = g
M : Type u_5,	_inst_4 : monoid M,	R : Type u_11,	_inst_15 : semiring R,	_inst_16 : mul_semiring_action M R,	S : Type u_13,	_inst_19 : semiring S,	_inst_20 : mul_semiring_action M S,	f : R →+*[M] S,	x : R	⊢ ⇑((mul_semiring_action_hom.id M).comp f) x = ⇑f x
R : Type u₁,	_inst_1 : integral_domain R,	a b : R,	h : a ^ 2 = b ^ 2	⊢ a = b ∨ a = -b
R : Type u_1,	_inst_1 : comm_ring R,	a b : R	⊢ a ^ 4 + 4 * b ^ 4 = (a ^ 2 - 2 * a * b + 2 * b ^ 2) * (a ^ 2 + 2 * a * b + 2 * b ^ 2)
α : Type u_1,	_inst_2 : linear_ordered_add_comm_group α,	n : ℤ,	a : α	⊢ abs (n • a) = abs n • abs a
α : Type u_1,	_inst_2 : linear_ordered_add_comm_group α,	n : ℤ,	a : α,	n0 : 0 ≤ n	⊢ abs (n • a) = abs n • abs a
α : Type u_1,	_inst_2 : linear_ordered_add_comm_group α,	n : ℤ,	a : α,	n0 : 0 ≤ n	⊢ abs (n • a) = abs n • abs a		α : Type u_1,	_inst_2 : linear_ordered_add_comm_group α,	n : ℤ,	a : α,	n0 : ¬0 ≤ n	⊢ abs (n • a) = abs n • abs a
α : Type u_1,	_inst_2 : linear_ordered_add_comm_group α,	a : α,	n : ℕ	⊢ abs (↑n • a) = abs ↑n • abs a
α : Type u_1,	_inst_2 : linear_ordered_add_comm_group α,	n : ℤ,	a : α,	n0 : ¬0 ≤ n	⊢ abs (n • a) = abs n • abs a
α : Type u_1,	_inst_2 : linear_ordered_add_comm_group α,	n : ℤ,	a : α,	n0 : ¬0 ≤ n,	m : ℕ,	h : ↑m = -n	⊢ abs (n • a) = abs n • abs a
α : Type u_1,	_inst_2 : linear_ordered_add_comm_group α,	n : ℤ,	a : α,	n0 : ¬0 ≤ n,	m : ℕ,	h : ↑m = -n	⊢ abs (m • a) = m • abs a
R : Type u₁,	_inst_1 : semiring R,	a b : R,	n : ℕ	⊢ n • (a * b) = a * n • b
n : ℤ	⊢ n • 1 = n
M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	n : ℕ,	h : 0 < n	⊢ is_unit (m ^ n) ↔ is_unit m
M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ	⊢ is_unit (m ^ p.succ) ↔ is_unit m
M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	h : is_unit (m ^ p.succ)	⊢ is_unit m
M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	k k' : M,	hk : k * k' = 1,	hk' : k' * k = 1,	h : ↑{val := k, inv := k', val_inv := hk, inv_val := hk'} = m ^ p.succ	⊢ is_unit m
M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	k k' : M,	hk : k * k' = 1,	hk' : k' * k = 1,	h : k = m ^ p.succ	⊢ is_unit m
M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	k k' : M,	hk : k * k' = 1,	hk' : k' * k = 1,	h : k = m ^ p.succ	⊢ m * (m ^ p * k') = 1		M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	k k' : M,	hk : k * k' = 1,	hk' : k' * k = 1,	h : k = m ^ p.succ	⊢ m ^ p * k' * m = 1		M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	k k' : M,	hk : k * k' = 1,	hk' : k' * k = 1,	h : k = m ^ p.succ	⊢ ↑{val := m, inv := m ^ p * k', val_inv := ?m_1, inv_val := ?m_2} = m
M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	k k' : M,	hk : k * k' = 1,	hk' : k' * k = 1,	h : k = m ^ p.succ	⊢ m * (m ^ p * k') = 1
M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	k k' : M,	hk : k * k' = 1,	hk' : k' * k = 1,	h : k = m ^ p.succ	⊢ m ^ p * k' * m = 1		M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	k k' : M,	hk : k * k' = 1,	hk' : k' * k = 1,	h : k = m ^ p.succ	⊢ ↑{val := m, inv := m ^ p * k', val_inv := _, inv_val := ?m_1} = m
M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	k k' : M,	hk : k * k' = 1,	hk' : k' * k = 1,	h : k = m ^ p.succ	⊢ m ^ p * k' * m = 1
x : ℤ,	h : 1 < x.nat_abs	⊢ function.injective (has_pow.pow x)
x : ℤ,	h : 1 < x.nat_abs,	this : function.injective (int.nat_abs ∘ has_pow.pow x)	⊢ function.injective (has_pow.pow x)		x : ℤ,	h : 1 < x.nat_abs	⊢ function.injective (int.nat_abs ∘ has_pow.pow x)
x : ℤ,	h : 1 < x.nat_abs,	this : function.injective (int.nat_abs ∘ has_pow.pow x)	⊢ function.injective (has_pow.pow x)
x : ℤ,	h : 1 < x.nat_abs	⊢ function.injective (int.nat_abs ∘ has_pow.pow x)
x : ℤ,	h : 1 < x.nat_abs	⊢ int.nat_abs ∘ has_pow.pow x = has_pow.pow x.nat_abs
M : Type u_1,	_inst_5 : comm_monoid M,	m : M,	p : ℕ,	h : 0 < p.succ,	k k' : M,	hk : k * k' = 1,	hk' : k' * k = 1,	h : k = m ^ p.succ	⊢ ↑{val := m, inv := m ^ p * k', val_inv := _, inv_val := _} = m
x : ℤ,	h : 1 < x.nat_abs,	n : ℕ	⊢ (int.nat_abs ∘ has_pow.pow x) n = x.nat_abs ^ n
M₀ : Type u_1,	M₀' : Type u_3,	_inst_1 : has_mul M₀,	_inst_2 : has_zero M₀,	_inst_3 : has_mul M₀',	_inst_4 : has_zero M₀',	_inst_5 : no_zero_divisors M₀',	f : M₀ → M₀',	hf : function.injective f,	zero : f 0 = 0,	mul : ∀ (x y : M₀), f (x * y) = f x * f y,	x y : M₀,	H : x * y = 0	⊢ f x * f y = 0
M₀ : Type u_1,	M₀' : Type u_3,	_inst_1 : has_mul M₀,	_inst_2 : has_zero M₀,	_inst_3 : has_mul M₀',	_inst_4 : has_zero M₀',	_inst_5 : no_zero_divisors M₀',	f : M₀ → M₀',	hf : function.injective f,	zero : f 0 = 0,	mul : ∀ (x y : M₀), f (x * y) = f x * f y,	x y : M₀,	H : x * y = 0,	this : f x * f y = 0,	H : f x = 0	⊢ f x = f 0
M₀ : Type u_1,	M₀' : Type u_3,	_inst_1 : has_mul M₀,	_inst_2 : has_zero M₀,	_inst_3 : has_mul M₀',	_inst_4 : has_zero M₀',	_inst_5 : no_zero_divisors M₀',	f : M₀ → M₀',	hf : function.injective f,	zero : f 0 = 0,	mul : ∀ (x y : M₀), f (x * y) = f x * f y,	x y : M₀,	H : x * y = 0,	this : f x * f y = 0,	H : f y = 0	⊢ f y = f 0
M₀ : Type u_1,	M₀' : Type u_3,	_inst_1 : cancel_monoid_with_zero M₀,	_inst_2 : has_zero M₀',	_inst_3 : has_mul M₀',	_inst_4 : has_one M₀',	f : M₀' → M₀,	hf : function.injective f,	zero : f 0 = 0,	one : f 1 = 1,	mul : ∀ (x y : M₀'), f (x * y) = f x * f y,	x y z : M₀',	hx : x ≠ 0,	H : x * y = x * z	⊢ f x * f y = f x * f z
M₀ : Type u_1,	M₀' : Type u_3,	_inst_1 : cancel_monoid_with_zero M₀,	_inst_2 : has_zero M₀',	_inst_3 : has_mul M₀',	_inst_4 : has_one M₀',	f : M₀' → M₀,	hf : function.injective f,	zero : f 0 = 0,	one : f 1 = 1,	mul : ∀ (x y : M₀'), f (x * y) = f x * f y,	x y z : M₀',	hx : x ≠ 0,	H : x * y = x * z	⊢ f (x * z) = f (x * z)
M₀ : Type u_1,	M₀' : Type u_3,	_inst_1 : cancel_monoid_with_zero M₀,	_inst_2 : has_zero M₀',	_inst_3 : has_mul M₀',	_inst_4 : has_one M₀',	f : M₀' → M₀,	hf : function.injective f,	zero : f 0 = 0,	one : f 1 = 1,	mul : ∀ (x y : M₀'), f (x * y) = f x * f y,	x y z : M₀',	hx : x ≠ 0,	H : x * y = x * z	⊢ f x * f y = f x * f z
M₀ : Type u_1,	M₀' : Type u_3,	_inst_1 : cancel_monoid_with_zero M₀,	_inst_2 : has_zero M₀',	_inst_3 : has_mul M₀',	_inst_4 : has_one M₀',	f : M₀' → M₀,	hf : function.injective f,	zero : f 0 = 0,	one : f 1 = 1,	mul : ∀ (x y : M₀'), f (x * y) = f x * f y,	x y z : M₀',	hx : y ≠ 0,	H : x * y = z * y	⊢ f x * f y = f z * f y
M₀ : Type u_1,	M₀' : Type u_3,	_inst_1 : cancel_monoid_with_zero M₀,	_inst_2 : has_zero M₀',	_inst_3 : has_mul M₀',	_inst_4 : has_one M₀',	f : M₀' → M₀,	hf : function.injective f,	zero : f 0 = 0,	one : f 1 = 1,	mul : ∀ (x y : M₀'), f (x * y) = f x * f y,	x y z : M₀',	hx : y ≠ 0,	H : x * y = z * y	⊢ f (z * y) = f (z * y)
M₀ : Type u_1,	M₀' : Type u_3,	_inst_1 : cancel_monoid_with_zero M₀,	_inst_2 : has_zero M₀',	_inst_3 : has_mul M₀',	_inst_4 : has_one M₀',	f : M₀' → M₀,	hf : function.injective f,	zero : f 0 = 0,	one : f 1 = 1,	mul : ∀ (x y : M₀'), f (x * y) = f x * f y,	x y z : M₀',	hx : y ≠ 0,	H : x * y = z * y	⊢ f x * f y = f z * f y
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x : G₀,	h : x ≠ 0,	y y' : G₀,	w : (λ (y : G₀), y * x) y = (λ (y : G₀), y * x) y'	⊢ y = y'
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	a b c : G₀,	hb : b ≠ 0	⊢ a = b⁻¹ * c → b * a = c
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	a b c : G₀,	hb : b ≠ 0	⊢ b * a = c → a = b⁻¹ * c
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	b c : G₀,	hb : b ≠ 0	⊢ b * (b⁻¹ * c) = c
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	a b c : G₀,	hb : b ≠ 0	⊢ a = b⁻¹ * c ↔ b * a = c
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	a b : G₀,	hb : b ≠ 0	⊢ a = b⁻¹ * (b * a)
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	a b c : G₀,	hb : b ≠ 0	⊢ a = b⁻¹ * c ↔ b * a = c
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	a b c : G₀,	hb : b ≠ 0	⊢ a = b⁻¹ * c ↔ b * a = c
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀,	hx : x = 0	⊢ (x * y)⁻¹ = y⁻¹ * x⁻¹
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀,	hx : x = 0	⊢ (x * y)⁻¹ = y⁻¹ * x⁻¹		G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀,	hx : ¬x = 0	⊢ (x * y)⁻¹ = y⁻¹ * x⁻¹
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀	⊢ (x * y)⁻¹ = y⁻¹ * x⁻¹
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀,	hx : ¬x = 0,	hy : y = 0	⊢ (x * y)⁻¹ = y⁻¹ * x⁻¹
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀,	hx : ¬x = 0,	hy : y = 0	⊢ (x * y)⁻¹ = y⁻¹ * x⁻¹		G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀,	hx : ¬x = 0,	hy : ¬y = 0	⊢ (x * y)⁻¹ = y⁻¹ * x⁻¹
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀,	hx : ¬x = 0	⊢ (x * y)⁻¹ = y⁻¹ * x⁻¹
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀,	hx : ¬x = 0,	hy : ¬y = 0	⊢ (x * y)⁻¹ = y⁻¹ * x⁻¹
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀,	hx : ¬x = 0,	hy : ¬y = 0	⊢ y⁻¹ * x⁻¹ = (x * y)⁻¹
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	x y : G₀,	hx : ¬x = 0,	hy : ¬y = 0	⊢ y⁻¹ * x⁻¹ * (x * y) = 1
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	a : G₀,	h : a ≠ 0	⊢ 1 / a * a = 1
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	a : G₀	⊢ 1 / (1 / a) = a
G₀ : Type u_2,	_inst_1 : group_with_zero G₀,	a b c : G₀,	hc : c ≠ 0	⊢ a / c = b / c ↔ a = b
G₀ : Type u_2,	_inst_1 : comm_group_with_zero G₀,	a b c : G₀	⊢ b / c * a = b * a / c
M : Type u_1,	_inst_1 : monoid_with_zero M,	_inst_2 : nontrivial M,	n : ℕ	⊢ 0 ^ n = 0 → 0 < n
M : Type u_1,	_inst_1 : monoid_with_zero M,	_inst_2 : nontrivial M,	n : ℕ	⊢ 0 < n → 0 ^ n = 0
M : Type u_1,	_inst_1 : monoid_with_zero M,	_inst_2 : nontrivial M,	n : ℕ	⊢ 0 ^ n = 0 ↔ 0 < n
M : Type u_1,	_inst_1 : monoid_with_zero M,	_inst_2 : nontrivial M,	n : ℕ	⊢ 0 ^ n = 0 ↔ 0 < n
M : Type u_1,	_inst_1 : monoid_with_zero M,	_inst_2 : nontrivial M,	n : ℕ,	h : 0 ^ n = 0	⊢ n ≠ 0
M : Type u_1,	_inst_1 : monoid_with_zero M,	_inst_2 : nontrivial M,	h : 0 ^ 0 = 0	⊢ false
M : Type u_1,	_inst_1 : monoid_with_zero M,	_inst_2 : nontrivial M,	n : ℕ,	h : 0 ^ n = 0	⊢ 0 < n		M : Type u_1,	_inst_1 : monoid_with_zero M,	_inst_2 : nontrivial M,	n : ℕ,	h : 0 < n	⊢ 0 ^ n = 0
M : Type u_1,	_inst_1 : monoid_with_zero M,	_inst_2 : nontrivial M,	n : ℕ,	h : 0 ^ n = 0	⊢ 0 < n
M : Type u_1,	_inst_1 : monoid_with_zero M,	_inst_2 : nontrivial M,	n : ℕ,	h : 0 < n	⊢ 0 ^ n = 0
G₀ : Type u_1,	_inst_1 : group_with_zero G₀,	a : G₀,	inv_fpow : ∀ (n : ℤ), a⁻¹ ^ n = (a ^ n)⁻¹,	n : ℕ	⊢ a⁻¹ ^ ↑n = (a ^ ↑n)⁻¹
G₀ : Type u_1,	_inst_1 : group_with_zero G₀,	a : G₀,	inv_fpow : ∀ (n : ℤ), a⁻¹ ^ n = (a ^ n)⁻¹,	n : ℕ	⊢ a⁻¹ ^ -[1+ n] = (a ^ -[1+ n])⁻¹
β : Type u_1,	_inst_1 : add_comm_group β,	b : β,	V : Type u_2,	_inst_2 : category_theory.category V,	_inst_3 : category_theory.limits.has_zero_morphisms V,	X : category_theory.differential_object (category_theory.graded_object_with_shift b V),	i j : β,	w : ¬(complex_shape.up' b).rel i j	⊢ dite (i + b = j) (λ (h : i + b = j), X.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = j), 0) = 0
β : Type u_1,	_inst_1 : add_comm_group β,	b : β,	V : Type u_2,	_inst_2 : category_theory.category V,	_inst_3 : category_theory.limits.has_zero_morphisms V,	X : category_theory.differential_object (category_theory.graded_object_with_shift b V),	i j : β,	w : ¬i + b = j	⊢ dite (i + b = j) (λ (h : i + b = j), X.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = j), 0) = 0
β : Type u_1,	_inst_1 : add_comm_group β,	b : β,	V : Type u_2,	_inst_2 : category_theory.category V,	_inst_3 : category_theory.limits.has_zero_morphisms V,	X : category_theory.differential_object (category_theory.graded_object_with_shift b V),	i j k : β,	hjk : j + b = k,	hij : i + b = j	⊢ dite (i + b = j) (λ (h : i + b = j), X.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = j), 0) ≫ dite (j + b = k) (λ (h : j + b = k), X.d j ≫ category_theory.eq_to_hom _) (λ (h : ¬j + b = k), 0) = 0
β : Type u_1,	_inst_1 : add_comm_group β,	b : β,	V : Type u_2,	_inst_2 : category_theory.category V,	_inst_3 : category_theory.limits.has_zero_morphisms V,	X : category_theory.differential_object (category_theory.graded_object_with_shift b V),	i j k : β,	hij : (complex_shape.up' b).rel i j,	hjk : (complex_shape.up' b).rel j k	⊢ dite (i + b = j) (λ (h : i + b = j), X.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = j), 0) ≫ dite (j + b = k) (λ (h : j + b = k), X.d j ≫ category_theory.eq_to_hom _) (λ (h : ¬j + b = k), 0) = 0
β : Type u_1,	_inst_1 : add_comm_group β,	b : β,	V : Type u_2,	_inst_2 : category_theory.category V,	_inst_3 : category_theory.limits.has_zero_morphisms V,	X : category_theory.differential_object (category_theory.graded_object_with_shift b V),	i : β	⊢ dite (i + b = i + b) (λ (h : i + b = i + b), X.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = i + b), 0) ≫ dite (i + b + b = i + b + b) (λ (h : i + b + b = i + b + b), X.d (i + b) ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b + b = i + b + b), 0) = 0
β : Type u_1,	_inst_1 : add_comm_group β,	b : β,	V : Type u_2,	_inst_2 : category_theory.category V,	_inst_3 : category_theory.limits.has_zero_morphisms V,	X : category_theory.differential_object (category_theory.graded_object_with_shift b V),	i : β	⊢ X.d i ≫ X.d (i + b) = 0
β : Type u_1,	_inst_1 : add_comm_group β,	b : β,	V : Type u_2,	_inst_2 : category_theory.category V,	_inst_3 : category_theory.limits.has_zero_morphisms V,	X Y : category_theory.differential_object (category_theory.graded_object_with_shift b V),	f : X ⟶ Y,	i j : β,	h : (complex_shape.up' b).rel i j	⊢ f.f i ≫ {X := λ (i : β), Y.X i, d := λ (i j : β), dite (i + b = j) (λ (h : i + b = j), Y.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = j), 0), shape' := _, d_comp_d' := _}.d i j = {X := λ (i : β), X.X i, d := λ (i j : β), dite (i + b = j) (λ (h : i + b = j), X.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = j), 0), shape' := _, d_comp_d' := _}.d i j ≫ f.f j
β : Type u_1,	_inst_1 : add_comm_group β,	b : β,	V : Type u_2,	_inst_2 : category_theory.category V,	_inst_3 : category_theory.limits.has_zero_morphisms V,	X Y : category_theory.differential_object (category_theory.graded_object_with_shift b V),	f : X ⟶ Y,	i j : β,	h : i + b = j	⊢ f.f i ≫ dite (i + b = j) (λ (h : i + b = j), Y.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = j), 0) = dite (i + b = j) (λ (h : i + b = j), X.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = j), 0) ≫ f.f j
β : Type u_1,	_inst_1 : add_comm_group β,	b : β,	V : Type u_2,	_inst_2 : category_theory.category V,	_inst_3 : category_theory.limits.has_zero_morphisms V,	X Y : category_theory.differential_object (category_theory.graded_object_with_shift b V),	f : X ⟶ Y,	i : β	⊢ f.f i ≫ dite (i + b = i + b) (λ (h : i + b = i + b), Y.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = i + b), 0) = dite (i + b = i + b) (λ (h : i + b = i + b), X.d i ≫ category_theory.eq_to_hom _) (λ (h : ¬i + b = i + b), 0) ≫ f.f (i + b)
β : Type u_1,	_inst_1 : add_comm_group β,	b : β,	V : Type u_2,	_inst_2 : category_theory.category V,	_inst_3 : category_theory.limits.has_zero_morphisms V,	X Y : category_theory.differential_object (category_theory.graded_object_with_shift b V),	f : X ⟶ Y,	i : β	⊢ f.f i ≫ Y.d i = X.d i ≫ f.f (i + b)
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_images V,	A B C : V,	g : B ⟶ C,	_inst_3 : category_theory.limits.has_zero_morphisms V,	_inst_4 : category_theory.limits.has_equalizers V,	_inst_5 : category_theory.exact 0 g	⊢ (category_theory.limits.kernel_subobject g).arrow = 0
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_images V,	A B C : V,	g : B ⟶ C,	_inst_3 : category_theory.limits.has_zero_morphisms V,	_inst_4 : category_theory.limits.has_equalizers V,	_inst_5 : category_theory.exact 0 g	⊢ category_theory.limits.factor_thru_image_subobject 0 ≫ image_to_kernel 0 g category_theory.exact.w ≫ (category_theory.limits.kernel_subobject g).arrow = category_theory.limits.factor_thru_image_subobject 0 ≫ image_to_kernel 0 g category_theory.exact.w ≫ 0
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	α : Type u_2,	_inst_3 : add_right_cancel_semigroup α,	_inst_4 : has_one α,	_inst_5 : decidable_eq α,	X : α → V,	d_X : Π (n : α), X n ⟶ X (n + 1),	sq_X : ∀ (n : α), d_X n ≫ d_X (n + 1) = 0,	Y : α → V,	d_Y : Π (n : α), Y n ⟶ Y (n + 1),	sq_Y : ∀ (n : α), d_Y n ≫ d_Y (n + 1) = 0,	f : Π (i : α), X i ⟶ Y i,	comm : ∀ (i : α), f i ≫ d_Y i = d_X i ≫ f (i + 1),	n m : α	⊢ (complex_shape.up α).rel n m → f n ≫ (cochain_complex.of Y d_Y sq_Y).d n m = (cochain_complex.of X d_X sq_X).d n m ≫ f m
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	α : Type u_2,	_inst_3 : add_right_cancel_semigroup α,	_inst_4 : has_one α,	_inst_5 : decidable_eq α,	X : α → V,	d_X : Π (n : α), X n ⟶ X (n + 1),	sq_X : ∀ (n : α), d_X n ≫ d_X (n + 1) = 0,	Y : α → V,	d_Y : Π (n : α), Y n ⟶ Y (n + 1),	sq_Y : ∀ (n : α), d_Y n ≫ d_Y (n + 1) = 0,	f : Π (i : α), X i ⟶ Y i,	comm : ∀ (i : α), f i ≫ d_Y i = d_X i ≫ f (i + 1),	n m : α,	h : n + 1 = m	⊢ (complex_shape.up α).rel n m → f n ≫ (cochain_complex.of Y d_Y sq_Y).d n m = (cochain_complex.of X d_X sq_X).d n m ≫ f m
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	α : Type u_2,	_inst_3 : add_right_cancel_semigroup α,	_inst_4 : has_one α,	_inst_5 : decidable_eq α,	X : α → V,	d_X : Π (n : α), X n ⟶ X (n + 1),	sq_X : ∀ (n : α), d_X n ≫ d_X (n + 1) = 0,	Y : α → V,	d_Y : Π (n : α), Y n ⟶ Y (n + 1),	sq_Y : ∀ (n : α), d_Y n ≫ d_Y (n + 1) = 0,	f : Π (i : α), X i ⟶ Y i,	comm : ∀ (i : α), f i ≫ d_Y i = d_X i ≫ f (i + 1),	n m : α,	h : n + 1 = m	⊢ (complex_shape.up α).rel n m → f n ≫ (cochain_complex.of Y d_Y sq_Y).d n m = (cochain_complex.of X d_X sq_X).d n m ≫ f m		V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	α : Type u_2,	_inst_3 : add_right_cancel_semigroup α,	_inst_4 : has_one α,	_inst_5 : decidable_eq α,	X : α → V,	d_X : Π (n : α), X n ⟶ X (n + 1),	sq_X : ∀ (n : α), d_X n ≫ d_X (n + 1) = 0,	Y : α → V,	d_Y : Π (n : α), Y n ⟶ Y (n + 1),	sq_Y : ∀ (n : α), d_Y n ≫ d_Y (n + 1) = 0,	f : Π (i : α), X i ⟶ Y i,	comm : ∀ (i : α), f i ≫ d_Y i = d_X i ≫ f (i + 1),	n m : α,	h : ¬n + 1 = m	⊢ (complex_shape.up α).rel n m → f n ≫ (cochain_complex.of Y d_Y sq_Y).d n m = (cochain_complex.of X d_X sq_X).d n m ≫ f m
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	α : Type u_2,	_inst_3 : add_right_cancel_semigroup α,	_inst_4 : has_one α,	_inst_5 : decidable_eq α,	X : α → V,	d_X : Π (n : α), X n ⟶ X (n + 1),	sq_X : ∀ (n : α), d_X n ≫ d_X (n + 1) = 0,	Y : α → V,	d_Y : Π (n : α), Y n ⟶ Y (n + 1),	sq_Y : ∀ (n : α), d_Y n ≫ d_Y (n + 1) = 0,	f : Π (i : α), X i ⟶ Y i,	comm : ∀ (i : α), f i ≫ d_Y i = d_X i ≫ f (i + 1),	n : α	⊢ (complex_shape.up α).rel n (n + 1) → f n ≫ (cochain_complex.of Y d_Y sq_Y).d n (n + 1) = (cochain_complex.of X d_X sq_X).d n (n + 1) ≫ f (n + 1)
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	α : Type u_2,	_inst_3 : add_right_cancel_semigroup α,	_inst_4 : has_one α,	_inst_5 : decidable_eq α,	X : α → V,	d_X : Π (n : α), X n ⟶ X (n + 1),	sq_X : ∀ (n : α), d_X n ≫ d_X (n + 1) = 0,	Y : α → V,	d_Y : Π (n : α), Y n ⟶ Y (n + 1),	sq_Y : ∀ (n : α), d_Y n ≫ d_Y (n + 1) = 0,	f : Π (i : α), X i ⟶ Y i,	comm : ∀ (i : α), f i ≫ d_Y i = d_X i ≫ f (i + 1),	n m : α,	h : ¬n + 1 = m	⊢ (complex_shape.up α).rel n m → f n ≫ 0 = 0 ≫ f m
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	α : Type u_2,	_inst_3 : add_right_cancel_semigroup α,	_inst_4 : has_one α,	_inst_5 : decidable_eq α,	X : α → V,	d_X : Π (n : α), X n ⟶ X (n + 1),	sq_X : ∀ (n : α), d_X n ≫ d_X (n + 1) = 0,	Y : α → V,	d_Y : Π (n : α), Y n ⟶ Y (n + 1),	sq_Y : ∀ (n : α), d_Y n ≫ d_Y (n + 1) = 0,	f : Π (i : α), X i ⟶ Y i,	comm : ∀ (i : α), f i ≫ d_Y i = d_X i ≫ f (i + 1),	n m : α,	h : ¬n + 1 = m	⊢ (complex_shape.up α).rel n m → f n ≫ (cochain_complex.of Y d_Y sq_Y).d n m = (cochain_complex.of X d_X sq_X).d n m ≫ f m
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	X₀ X₁ X₂ : V,	d₀ : X₀ ⟶ X₁,	d₁ : X₁ ⟶ X₂,	s : d₀ ≫ d₁ = 0,	succ : Π (t : Σ' (X₀ X₁ X₂ : V) (d₀ : X₀ ⟶ X₁) (d₁ : X₁ ⟶ X₂), d₀ ≫ d₁ = 0), Σ' (X₃ : V) (d₂ : t.snd.snd.fst ⟶ X₃), t.snd.snd.snd.snd.fst ≫ d₂ = 0	⊢ ite (2 = 1 + 1) (d₁ ≫ 𝟙 X₂) 0 = d₁
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	X₀ X₁ X₂ : V,	d₀ : X₀ ⟶ X₁,	d₁ : X₁ ⟶ X₂,	s : d₀ ≫ d₁ = 0,	succ : Π (t : Σ' (X₀ X₁ X₂ : V) (d₀ : X₀ ⟶ X₁) (d₁ : X₁ ⟶ X₂), d₀ ≫ d₁ = 0), Σ' (X₃ : V) (d₂ : t.snd.snd.fst ⟶ X₃), t.snd.snd.snd.snd.fst ≫ d₂ = 0	⊢ (cochain_complex.mk X₀ X₁ X₂ d₀ d₁ s succ).d 1 2 = d₁
ι : Type u_1,	V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	c : complex_shape ι,	_inst_3 : category_theory.limits.has_zero_object V,	_inst_4 : category_theory.limits.has_kernels V,	C₁ C₂ C₃ : homological_complex V c,	f : C₁ ⟶ C₂,	g : C₂ ⟶ C₃,	i : ι	⊢ (C₃.cycles i).factor_thru ((C₁.cycles i).arrow ≫ (f ≫ g).f i) _ = (C₂.cycles i).factor_thru ((C₁.cycles i).arrow ≫ f.f i) _ ≫ (C₃.cycles i).factor_thru ((C₂.cycles i).arrow ≫ g.f i) _
ι : Type u_1,	V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	c : complex_shape ι,	_inst_3 : category_theory.limits.has_zero_object V,	_inst_4 : category_theory.limits.has_kernels V,	C₁ C₂ C₃ : homological_complex V c,	f : C₁ ⟶ C₂,	g : C₂ ⟶ C₃,	i : ι	⊢ cycles_map (f ≫ g) i = cycles_map f i ≫ cycles_map g i
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	_inst_3 : category_theory.limits.has_image f,	g : B ⟶ C,	_inst_4 : category_theory.limits.has_kernel g,	w : f ≫ g = 0,	_inst_5 : category_theory.limits.has_cokernel (image_to_kernel f g w),	D : V,	k : ↑(category_theory.limits.kernel_subobject g) ⟶ D,	p : image_to_kernel f g w ≫ k = 0	⊢ homology.π f g w ≫ homology.desc f g w k p = k
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ homology.map w w' {left := 𝟙 (category_theory.arrow.mk f).left, right := 𝟙 (category_theory.arrow.mk f).right, w' := _} {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} rfl ≫ homology.map w' w {left := 𝟙 (category_theory.arrow.mk f').left, right := 𝟙 (category_theory.arrow.mk f').right, w' := _} {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} rfl = 𝟙 (homology f g w)
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ homology.π f g w ≫ homology.map w w' {left := 𝟙 (category_theory.arrow.mk f).left, right := 𝟙 (category_theory.arrow.mk f).right, w' := _} {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} rfl ≫ homology.map w' w {left := 𝟙 (category_theory.arrow.mk f').left, right := 𝟙 (category_theory.arrow.mk f').right, w' := _} {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} rfl = homology.π f g w ≫ 𝟙 (homology f g w)
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ category_theory.limits.kernel_subobject_map ({left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _}) ≫ homology.π f g w = homology.π f g w
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ category_theory.limits.kernel_subobject_map ({left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _}) = 𝟙 ↑(category_theory.limits.kernel_subobject g)
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ ({left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _}).left = (𝟙 (category_theory.arrow.mk g)).left
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ ({left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _}).right = (𝟙 (category_theory.arrow.mk g)).right
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} = 𝟙 (category_theory.arrow.mk g)
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} = 𝟙 (category_theory.arrow.mk g)
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ homology.map w' w {left := 𝟙 (category_theory.arrow.mk f').left, right := 𝟙 (category_theory.arrow.mk f').right, w' := _} {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} rfl ≫ homology.map w w' {left := 𝟙 (category_theory.arrow.mk f).left, right := 𝟙 (category_theory.arrow.mk f).right, w' := _} {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} rfl = 𝟙 (homology f' g' w')
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ homology.π f' g' w' ≫ homology.map w' w {left := 𝟙 (category_theory.arrow.mk f').left, right := 𝟙 (category_theory.arrow.mk f').right, w' := _} {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} rfl ≫ homology.map w w' {left := 𝟙 (category_theory.arrow.mk f).left, right := 𝟙 (category_theory.arrow.mk f).right, w' := _} {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} rfl = homology.π f' g' w' ≫ 𝟙 (homology f' g' w')
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ category_theory.limits.kernel_subobject_map ({left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _}) ≫ homology.π f' g' w' = homology.π f' g' w'
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ category_theory.limits.kernel_subobject_map ({left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _}) = 𝟙 ↑(category_theory.limits.kernel_subobject g')
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ ({left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _}).left = (𝟙 (category_theory.arrow.mk g')).left
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ ({left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _}).right = (𝟙 (category_theory.arrow.mk g')).right
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} = 𝟙 (category_theory.arrow.mk g')
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	A B C : V,	f : A ⟶ B,	g : B ⟶ C,	w : f ≫ g = 0,	f' : A ⟶ B,	g' : B ⟶ C,	w' : f' ≫ g' = 0,	_inst_3 : category_theory.limits.has_kernels V,	_inst_4 : category_theory.limits.has_cokernels V,	_inst_5 : category_theory.limits.has_images V,	_inst_6 : category_theory.limits.has_image_maps V,	pf : f = f',	pg : g = g'	⊢ {left := 𝟙 (category_theory.arrow.mk g').left, right := 𝟙 (category_theory.arrow.mk g').right, w' := _} ≫ {left := 𝟙 (category_theory.arrow.mk g).left, right := 𝟙 (category_theory.arrow.mk g).right, w' := _} = 𝟙 (category_theory.arrow.mk g')
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y,	i : ι,	h : ¬i = j	⊢ f.f i = 0
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y,	i : ι,	h : ¬i = j	⊢ ((homological_complex.single V c j).obj Y).X i ≅ 0
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y,	i : ι,	h : ¬i = j	⊢ ite (i = j) Y 0 ≅ 0
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	A : V	⊢ ((homological_complex.single V c j).obj A).X j = A
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y	⊢ X = ((homological_complex.single V c j).obj X).X j
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y	⊢ ((homological_complex.single V c j).obj Y).X j = Y
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y	⊢ (homological_complex.single V c j).map (category_theory.eq_to_hom _ ≫ f.f j ≫ category_theory.eq_to_hom _) = f
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y,	i : ι	⊢ ((homological_complex.single V c j).map (category_theory.eq_to_hom _ ≫ f.f j ≫ category_theory.eq_to_hom _)).f i = f.f i
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y,	i : ι	⊢ dite (i = j) (λ (h : i = j), category_theory.eq_to_hom _ ≫ (category_theory.eq_to_hom _ ≫ f.f j ≫ category_theory.eq_to_hom _) ≫ category_theory.eq_to_hom _) (λ (h : ¬i = j), 0) = f.f i
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	X Y : V,	i : ι,	f : (homological_complex.single V c i).obj X ⟶ (homological_complex.single V c i).obj Y	⊢ category_theory.eq_to_hom _ ≫ (category_theory.eq_to_hom _ ≫ f.f i ≫ category_theory.eq_to_hom _) ≫ category_theory.eq_to_hom _ = f.f i
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y,	i : ι,	h : i = j	⊢ category_theory.eq_to_hom _ ≫ (category_theory.eq_to_hom _ ≫ f.f j ≫ category_theory.eq_to_hom _) ≫ category_theory.eq_to_hom _ = f.f i		V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y,	i : ι,	h : ¬i = j	⊢ 0 = f.f i
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y,	i : ι,	h : i = j	⊢ category_theory.eq_to_hom _ ≫ (category_theory.eq_to_hom _ ≫ f.f j ≫ category_theory.eq_to_hom _) ≫ category_theory.eq_to_hom _ = f.f i
V : Type u,	_inst_1 : category_theory.category V,	_inst_2 : category_theory.limits.has_zero_morphisms V,	_inst_3 : category_theory.limits.has_zero_object V,	ι : Type u_1,	_inst_4 : decidable_eq ι,	c : complex_shape ι,	j : ι,	X Y : V,	f : (homological_complex.single V c j).obj X ⟶ (homological_complex.single V c j).obj Y,	i : ι,	h : ¬i = j	⊢ 0 = f.f i
α : Type u_1,	M : Type u_4,	_inst_1 : mul_one_class M,	s : set α,	f : α → M,	a : α,	ha : a ∈ s	⊢ sᶜ.mul_indicator f a * s.mul_indicator f a = f a
α : Type u_1,	M : Type u_4,	_inst_1 : mul_one_class M,	s : set α,	f : α → M,	a : α,	ha : a ∉ s	⊢ sᶜ.mul_indicator f a * s.mul_indicator f a = f a
α : Type u_1,	M : Type u_4,	_inst_1 : mul_zero_class M,	a : α,	s : set α,	f g : α → M	⊢ ite (a ∈ s) (f a * g a) 0 = f a * ite (a ∈ s) (g a) 0
α : Type u_1,	M : Type u_4,	_inst_1 : mul_zero_class M,	a : α,	s : set α,	f g : α → M,	h : a ∈ s	⊢ f a * g a = f a * g a
α : Type u_1,	M : Type u_4,	_inst_1 : mul_zero_class M,	a : α,	s : set α,	f g : α → M,	h : a ∈ s	⊢ f a * g a = f a * g a		α : Type u_1,	M : Type u_4,	_inst_1 : mul_zero_class M,	a : α,	s : set α,	f g : α → M,	h : a ∉ s	⊢ 0 = f a * 0
α : Type u_1,	M : Type u_4,	_inst_1 : mul_zero_class M,	a : α,	s : set α,	f g : α → M,	h : a ∉ s	⊢ 0 = f a * 0
α : Type u_1,	M : Type u_4,	_inst_1 : mul_zero_class M,	a : α,	s : set α,	f g : α → M	⊢ s.indicator (λ (a : α), f a * g a) a = f a * s.indicator g a
α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α	⊢ (⋃ (i : ι), s i).mul_indicator f x = ⨆ (i : ι), (s i).mul_indicator f x
α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α,	hx : x ∈ ⋃ (i : ι), s i	⊢ (⋃ (i : ι), s i).mul_indicator f x = ⨆ (i : ι), (s i).mul_indicator f x
α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α,	hx : x ∈ ⋃ (i : ι), s i	⊢ f x = ⨆ (i : ι), (s i).mul_indicator f x
α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α,	hx : ∃ (i : ι), x ∈ s i	⊢ f x = ⨆ (i : ι), (s i).mul_indicator f x
α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α,	hx : ∃ (i : ι), x ∈ s i	⊢ f x ≤ ⨆ (i : ι), (s i).mul_indicator f x
α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α,	i : ι,	hi : x ∈ s i	⊢ f x ≤ ⨆ (i : ι), (s i).mul_indicator f x
α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α,	hx : x ∈ ⋃ (i : ι), s i	⊢ (⋃ (i : ι), s i).mul_indicator f x = ⨆ (i : ι), (s i).mul_indicator f x		α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α,	hx : x ∉ ⋃ (i : ι), s i	⊢ (⋃ (i : ι), s i).mul_indicator f x = ⨆ (i : ι), (s i).mul_indicator f x
α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α,	hx : x ∉ ⋃ (i : ι), s i	⊢ (⋃ (i : ι), s i).mul_indicator f x = ⨆ (i : ι), (s i).mul_indicator f x
α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α,	hx : x ∉ ⋃ (i : ι), s i	⊢ 1 = ⨆ (i : ι), (s i).mul_indicator f x
α : Type u_1,	ι : Sort u_2,	M : Type u_3,	_inst_3 : complete_lattice M,	_inst_4 : has_one M,	h1 : ⊥ = 1,	s : ι → set α,	f : α → M,	x : α,	hx : ∀ (x_1 : ι), x ∉ s x_1	⊢ 1 = ⨆ (i : ι), (s i).mul_indicator f x
α : Type u,	_inst_1 : monoid α,	a : α,	_x : invertible a,	_fun_match : ∀ (_a b : invertible a), _a = b,	b : α,	hba : b * a = 1,	hab : a * b = 1,	_x : invertible a,	_fun_match : ∀ (_a : invertible a), {inv_of := b, inv_of_mul_self := hba, mul_inv_of_self := hab} = _a,	c : α,	hca : c * a = 1,	hac : a * c = 1	⊢ {inv_of := b, inv_of_mul_self := hba, mul_inv_of_self := hab} = {inv_of := c, inv_of_mul_self := hca, mul_inv_of_self := hac}
α : Type u,	_inst_1 : monoid α,	a : α,	_x : invertible a,	_fun_match : ∀ (_a b : invertible a), _a = b,	b : α,	hba : b * a = 1,	hab : a * b = 1,	_x : invertible a,	_fun_match : ∀ (_a : invertible a), {inv_of := b, inv_of_mul_self := hba, mul_inv_of_self := hab} = _a,	c : α,	hca : c * a = 1,	hac : a * c = 1	⊢ b = c
α : Type u,	_inst_1 : monoid α,	a b : α,	_inst_2 : invertible a,	_inst_3 : invertible b	⊢ ⅟ b * ⅟ a * (a * b) = 1
α : Type u,	_inst_1 : monoid α,	a b : α,	_inst_2 : invertible a,	_inst_3 : invertible b	⊢ a * b * (⅟ b * ⅟ a) = 1
α : Type u,	_inst_1 : group_with_zero α,	a b : α,	_inst_2 : invertible a,	_inst_3 : invertible b	⊢ b / a * (a / b) = 1
α : Type u,	_inst_1 : group_with_zero α,	a b : α,	_inst_2 : invertible a,	_inst_3 : invertible b	⊢ a / b * (b / a) = 1
α : Type u,	_inst_1 : monoid α,	a b : α,	_inst_2 : invertible b	⊢ a * b * ⅟ b = a
R : Type u,	L : Type v,	M : Type w,	N : Type w₁,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : add_comm_group M,	_inst_5 : add_comm_group N,	_inst_7 : module R M,	_inst_8 : module R N,	_inst_10 : lie_ring_module L M,	_inst_11 : lie_ring_module L N,	_inst_13 : lie_module R L M,	_inst_14 : lie_module R L N,	f : M →ₗ⁅R,L⁆ N	⊢ ∀ {x : L} {m : M}, (-↑f).to_fun ⁅x,m⁆ = ⁅x,(-↑f).to_fun m⁆
R : Type u,	X : Type v,	_inst_1 : comm_ring R	⊢ ∀ (t : R) (x y : free_lie_algebra R X), ⁅x,t • y⁆ = t • ⁅x,y⁆
R : Type u,	X : Type v,	_inst_1 : comm_ring R,	t : R,	a c : lib R X	⊢ ⁅quot.mk (free_lie_algebra.rel R X) a,t • quot.mk (free_lie_algebra.rel R X) c⁆ = t • ⁅quot.mk (free_lie_algebra.rel R X) a,quot.mk (free_lie_algebra.rel R X) c⁆
R : Type u,	X : Type v,	_inst_1 : comm_ring R,	t : R,	a c : lib R X	⊢ quot.mk (free_lie_algebra.rel R X) (a • t • c) = quot.mk (free_lie_algebra.rel R X) (t • a • c)
R : Type u,	X : Type v,	_inst_1 : comm_ring R,	x : X	⊢ (⇑((⇑(universal_enveloping_algebra.lift R) (⇑(free_lie_algebra.lift R) (free_algebra.ι R))).comp (⇑(free_algebra.lift R) (⇑(universal_enveloping_algebra.ι R) ∘ free_lie_algebra.of R))) ∘ free_algebra.ι R) x = (⇑(alg_hom.id R (free_algebra R X)) ∘ free_algebra.ι R) x
R : Type u,	X : Type v,	_inst_1 : comm_ring R	⊢ (⇑(universal_enveloping_algebra.lift R) (⇑(free_lie_algebra.lift R) (free_algebra.ι R))).comp (⇑(free_algebra.lift R) (⇑(universal_enveloping_algebra.ι R) ∘ free_lie_algebra.of R)) = alg_hom.id R (free_algebra R X)
R : Type u,	X : Type v,	_inst_1 : comm_ring R,	x : X	⊢ ⇑(↑((⇑(free_algebra.lift R) (⇑(universal_enveloping_algebra.ι R) ∘ free_lie_algebra.of R)).comp (⇑(universal_enveloping_algebra.lift R) (⇑(free_lie_algebra.lift R) (free_algebra.ι R)))).comp (universal_enveloping_algebra.ι R)) (free_lie_algebra.of R x) = ⇑(↑(alg_hom.id R (universal_enveloping_algebra R (free_lie_algebra R X))).comp (universal_enveloping_algebra.ι R)) (free_lie_algebra.of R x)
R : Type u,	X : Type v,	_inst_1 : comm_ring R	⊢ (⇑(free_algebra.lift R) (⇑(universal_enveloping_algebra.ι R) ∘ free_lie_algebra.of R)).comp (⇑(universal_enveloping_algebra.lift R) (⇑(free_lie_algebra.lift R) (free_algebra.ι R))) = alg_hom.id R (universal_enveloping_algebra R (free_lie_algebra R X))
R : Type u,	L : Type v,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	I I₁ I₂ : lie_ideal R L	⊢ lie_ideal.comap I.incl ⁅I ⊓ I₁,I ⊓ I₂⁆ = ?m_1
R : Type u,	L : Type v,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	I I₁ I₂ : lie_ideal R L	⊢ I.incl = ?m_1		R : Type u,	L : Type v,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	I I₁ I₂ : lie_ideal R L	⊢ ⁅I ⊓ I₁,I ⊓ I₂⁆ = ?m_1
R : Type u,	L : Type v,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	I I₁ I₂ : lie_ideal R L	⊢ ⁅I ⊓ I₁,I ⊓ I₂⁆ = ?m_1
R : Type u,	L : Type v,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	I I₁ I₂ : lie_ideal R L	⊢ ⁅lie_ideal.comap I.incl I₁,lie_ideal.comap I.incl I₂⁆ = lie_ideal.comap I.incl ⁅I ⊓ I₁,I ⊓ I₂⁆
R : Type u,	L : Type v,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	I I₁ I₂ : lie_ideal R L	⊢ ⁅lie_ideal.comap I.incl I₁,lie_ideal.comap I.incl I₂⁆ = lie_ideal.comap I.incl ⁅I.incl.ideal_range ⊓ I₁,I.incl.ideal_range ⊓ I₂⁆
R : Type u,	L : Type v,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	I I₁ I₂ : lie_ideal R L	⊢ I.incl.is_ideal_morphism
R : Type u,	L : Type v,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	I I₁ I₂ : lie_ideal R L	⊢ ⁅lie_ideal.comap I.incl I₁,lie_ideal.comap I.incl I₂⁆ = ⁅lie_ideal.comap I.incl I₁,lie_ideal.comap I.incl I₂⁆ ⊔ I.incl.ker		R : Type u,	L : Type v,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	I I₁ I₂ : lie_ideal R L	⊢ I.incl.is_ideal_morphism
R : Type u,	L : Type v,	L' : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : lie_ring L',	_inst_5 : lie_algebra R L',	e : L ≃ₗ⁅R⁆ L'	⊢ lie_algebra.is_nilpotent R L → lie_algebra.is_nilpotent R L'
R : Type u,	L : Type v,	L' : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : lie_ring L',	_inst_5 : lie_algebra R L',	e : L ≃ₗ⁅R⁆ L'	⊢ lie_algebra.is_nilpotent R L' → lie_algebra.is_nilpotent R L
R : Type u,	L : Type v,	L' : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : lie_ring L',	_inst_5 : lie_algebra R L',	e : L ≃ₗ⁅R⁆ L'	⊢ lie_algebra.is_nilpotent R L ↔ lie_algebra.is_nilpotent R L'
R : Type u,	L : Type v,	L' : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : lie_ring L',	_inst_5 : lie_algebra R L',	e : L ≃ₗ⁅R⁆ L'	⊢ lie_algebra.is_nilpotent R L ↔ lie_algebra.is_nilpotent R L'
R : Type u,	L : Type v,	L' : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : lie_ring L',	_inst_5 : lie_algebra R L',	e : L ≃ₗ⁅R⁆ L',	h : lie_algebra.is_nilpotent R L	⊢ lie_algebra.is_nilpotent R L'		R : Type u,	L : Type v,	L' : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : lie_ring L',	_inst_5 : lie_algebra R L',	e : L ≃ₗ⁅R⁆ L',	h : lie_algebra.is_nilpotent R L'	⊢ lie_algebra.is_nilpotent R L
R : Type u,	L : Type v,	L' : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : lie_ring L',	_inst_5 : lie_algebra R L',	e : L ≃ₗ⁅R⁆ L',	h : lie_algebra.is_nilpotent R L	⊢ lie_algebra.is_nilpotent R L'
R : Type u,	L : Type v,	L' : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : lie_ring L',	_inst_5 : lie_algebra R L',	e : L ≃ₗ⁅R⁆ L',	h : lie_algebra.is_nilpotent R L'	⊢ lie_algebra.is_nilpotent R L
R : Type u,	_inst_1 : comm_ring R,	A : Type v,	_inst_8 : ring A,	_inst_9 : algebra R A,	a b : A	⊢ ⇑(⇑(lie_algebra.ad R A) a) b = ⇑((algebra.lmul_left R - algebra.lmul_right R) a) b
R : Type u,	_inst_1 : comm_ring R,	A : Type v,	_inst_8 : ring A,	_inst_9 : algebra R A	⊢ ⇑(lie_algebra.ad R A) = algebra.lmul_left R - algebra.lmul_right R
R : Type u,	n : Type w,	_inst_1 : comm_ring R,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	J A B : matrix n n R,	hA : Aᵀ * J = J * -A,	hB : Bᵀ * J = J * -B	⊢ J * -B * -A - J * -A * -B = J * -(A * B - B * A)
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	B : bilin_form R M,	N : Type w,	_inst_4 : add_comm_group N,	_inst_5 : module R N,	e : N ≃ₗ[R] M	⊢ ↥(skew_adjoint_lie_subalgebra (B.comp ↑e ↑e)) ≃ₗ⁅R⁆ ↥(skew_adjoint_lie_subalgebra B)
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	B : bilin_form R M,	N : Type w,	_inst_4 : add_comm_group N,	_inst_5 : module R N,	e : N ≃ₗ[R] M	⊢ lie_subalgebra.map ↑(e.lie_conj) (skew_adjoint_lie_subalgebra (B.comp ↑e ↑e)) = skew_adjoint_lie_subalgebra B
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	B : bilin_form R M,	N : Type w,	_inst_4 : add_comm_group N,	_inst_5 : module R N,	e : N ≃ₗ[R] M,	f : module.End R M	⊢ f ∈ lie_subalgebra.map ↑(e.lie_conj) (skew_adjoint_lie_subalgebra (B.comp ↑e ↑e)) ↔ f ∈ skew_adjoint_lie_subalgebra B
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	B : bilin_form R M,	N : Type w,	_inst_4 : add_comm_group N,	_inst_5 : module R N,	e : N ≃ₗ[R] M,	f : module.End R M	⊢ ⇑(↑(e.lie_conj).symm) f ∈ ↑(skew_adjoint_lie_subalgebra (B.comp ↑e ↑e)) ↔ f ∈ skew_adjoint_lie_subalgebra B
R : Type u,	n : Type w,	_inst_1 : comm_ring R,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	J A B : matrix n n R,	hA : A ∈ skew_adjoint_matrices_submodule J,	hB : B ∈ skew_adjoint_matrices_submodule J	⊢ ⁅A,B⁆ ∈ skew_adjoint_matrices_submodule J
R : Type u,	n : Type w,	_inst_1 : comm_ring R,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	J A B : matrix n n R,	hA : J.is_skew_adjoint A,	hB : J.is_skew_adjoint B	⊢ ⁅A,B⁆ᵀ ⬝ J = J ⬝ -⁅A,B⁆
R : Type u,	n : Type w,	_inst_1 : comm_ring R,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	J A B : matrix n n R,	hA : J.is_skew_adjoint A,	hB : J.is_skew_adjoint B	⊢ J.is_skew_adjoint ⁅A,B⁆
R : Type u,	n : Type w,	_inst_1 : comm_ring R,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	J A B : matrix n n R,	hB : J.is_skew_adjoint B,	hA : Aᵀ ⬝ J = J ⬝ -A	⊢ ⁅A,B⁆ᵀ ⬝ J = J ⬝ -⁅A,B⁆
R : Type u,	n : Type w,	_inst_1 : comm_ring R,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	J A B : matrix n n R,	hA : Aᵀ ⬝ J = J ⬝ -A,	hB : Bᵀ ⬝ J = J ⬝ -B	⊢ ⁅A,B⁆ᵀ ⬝ J = J ⬝ -⁅A,B⁆
R : Type u,	n : Type w,	_inst_1 : comm_ring R,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	J A B : matrix n n R,	hA : Aᵀ * J = J * -A,	hB : Bᵀ * J = J * -B	⊢ ⁅A,B⁆ᵀ * J = J * -⁅A,B⁆
R : Type u,	L₁ : Type v,	L₂ : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L₁,	_inst_3 : lie_ring L₂,	_inst_4 : lie_algebra R L₁,	_inst_5 : lie_algebra R L₂,	f : L₁ →ₗ⁅R⁆ L₂,	h : function.injective ⇑f,	x y : L₁	⊢ (linear_equiv.of_injective ↑f _).to_fun ⁅x,y⁆ = ⁅(linear_equiv.of_injective ↑f _).to_fun x,(linear_equiv.of_injective ↑f _).to_fun y⁆
R : Type u,	L₁ : Type v,	L₂ : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L₁,	_inst_3 : lie_ring L₂,	_inst_4 : lie_algebra R L₁,	_inst_5 : lie_algebra R L₂,	f : L₁ →ₗ⁅R⁆ L₂,	h : function.injective ⇑f,	x y : L₁	⊢ ↑((linear_equiv.of_injective ↑f _).to_fun ⁅x,y⁆) = ↑⁅(linear_equiv.of_injective ↑f _).to_fun x,(linear_equiv.of_injective ↑f _).to_fun y⁆
R : Type u,	L₁ : Type v,	L₂ : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L₁,	_inst_3 : lie_ring L₂,	_inst_4 : lie_algebra R L₁,	_inst_5 : lie_algebra R L₂,	f : L₁ →ₗ⁅R⁆ L₂,	h : function.injective ⇑f	⊢ function.injective ⇑↑f
R : Type u,	L : Type v,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : add_comm_group M,	_inst_5 : module R M,	_inst_6 : lie_ring_module L M,	_inst_7 : lie_module R L M,	N N' : lie_submodule R L M,	h : ↑N = ↑N'	⊢ N = N'
R : Type u,	L : Type v,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : add_comm_group M,	_inst_5 : module R M,	_inst_6 : lie_ring_module L M,	_inst_7 : lie_module R L M,	N N' : lie_submodule R L M,	h : ↑N = ↑N',	m : M	⊢ m ∈ N ↔ m ∈ N'
R : Type u,	L : Type v,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : lie_ring L,	_inst_3 : lie_algebra R L,	_inst_4 : add_comm_group M,	_inst_5 : module R M,	_inst_6 : lie_ring_module L M,	_inst_7 : lie_module R L M,	N N' : lie_submodule R L M,	h : ↑N = ↑N',	m : M	⊢ m ∈ ↑N' ↔ m ∈ N'
R : Type u,	M : Type w,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	r : R,	x : M	⊢ -r • x + r • x = 0
R : Type u,	M : Type w,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	_inst_4 : no_zero_smul_divisors R M,	_inst_5 : char_zero R,	c : ℕ,	x : M	⊢ c • x = 0 → c = 0 ∨ x = 0
R : Type u,	M : Type w,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	_inst_4 : no_zero_smul_divisors R M,	_inst_5 : char_zero R,	c : ℕ,	x : M	⊢ ↑c = 0 ∨ x = 0 → c = 0 ∨ x = 0
R : Type u,	M : Type w,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	_inst_4 : no_zero_smul_divisors R M,	_inst_5 : char_zero R	⊢ ∀ {c : ℕ} {x : M}, c • x = 0 → c = 0 ∨ x = 0
R : Type u_1,	_inst_1 : semiring R,	m : ℕ	⊢ m • 1 = ↑m
R : Type u_1,	M : Type u_7,	M₂ : Type u_9,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : add_comm_monoid M₂,	_inst_4 : module R M,	_inst_5 : module R M₂,	f g : M →+[R] M₂,	h : ↑f = ↑g,	m : M	⊢ ⇑f m = ⇑g m
R : Type u_1,	M : Type u_7,	M₂ : Type u_9,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : add_comm_monoid M₂,	_inst_4 : module R M,	_inst_5 : module R M₂,	f g : M →+[R] M₂,	h : ↑f = ↑g	⊢ f = g
R : Type u,	_inst_1 : ring R,	P : Type (max u v),	_inst_2 : add_comm_group P,	_inst_3 : module R P,	ι : Type u_1,	b : basis ι R P	⊢ module.projective R P
R : Type u,	_inst_1 : ring R,	P : Type (max u v),	_inst_2 : add_comm_group P,	_inst_3 : module R P,	ι : Type u_1,	b : basis ι R P	⊢ function.left_inverse ⇑(finsupp.total P P R id) ⇑(⇑(b.constr ℕ) (λ (i : ι), finsupp.single (⇑b i) 1))
R : Type u,	_inst_1 : ring R,	P : Type (max u v),	_inst_2 : add_comm_group P,	_inst_3 : module R P,	ι : Type u_1,	b : basis ι R P,	m : P	⊢ ⇑(finsupp.total P P R id) (⇑(⇑(b.constr ℕ) (λ (i : ι), finsupp.single (⇑b i) 1)) m) = m
R : Type u,	_inst_1 : ring R,	P : Type (max u v),	_inst_2 : add_comm_group P,	_inst_3 : module R P,	ι : Type u_1,	b : basis ι R P,	m : P	⊢ (⇑(b.repr) m).sum (λ (i : ι) (d : R), d • ⇑b i) = m
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	c f : ulift R,	g : M	⊢ (c + f) • g = c • g + f • g
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	f : ulift R,	g : M,	c : R	⊢ ({down := c} + f) • g = {down := c} • g + f • g
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	f : M	⊢ 0 • f = 0
k : Type u₁,	G : Type u₂,	R : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : semiring k,	_inst_3 : algebra R k,	_inst_4 : add_monoid G,	r : R,	a : add_monoid_algebra k G	⊢ r • a = {to_fun := (add_monoid_algebra.single_zero_ring_hom.comp (algebra_map R k)).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun r * a
k : Type u₁,	G : Type u₂,	R : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : semiring k,	_inst_3 : algebra R k,	_inst_4 : add_monoid G,	r : R,	a : add_monoid_algebra k G,	a_1 : G	⊢ ⇑(r • a) a_1 = ⇑({to_fun := (add_monoid_algebra.single_zero_ring_hom.comp (algebra_map R k)).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun r * a) a_1
k : Type u₁,	G : Type u₂,	R : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : semiring k,	_inst_3 : algebra R k,	_inst_4 : add_monoid G,	r : R,	f : add_monoid_algebra k G	⊢ {to_fun := (add_monoid_algebra.single_zero_ring_hom.comp (algebra_map R k)).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun r * f = f * {to_fun := (add_monoid_algebra.single_zero_ring_hom.comp (algebra_map R k)).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun r
k : Type u₁,	G : Type u₂,	R : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : semiring k,	_inst_3 : algebra R k,	_inst_4 : add_monoid G,	r : R,	f : add_monoid_algebra k G,	a : G	⊢ ⇑({to_fun := (add_monoid_algebra.single_zero_ring_hom.comp (algebra_map R k)).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun r * f) a = ⇑(f * {to_fun := (add_monoid_algebra.single_zero_ring_hom.comp (algebra_map R k)).to_fun, map_one' := _, map_mul' := _, map_zero' := _, map_add' := _}.to_fun r) a
k : Type u₁,	G : Type u₂,	_inst_1 : comm_semiring k,	_inst_2 : add_monoid G,	A : Type u₃,	_inst_3 : semiring A,	_inst_4 : algebra k A,	F : multiplicative G →* A,	f : monoid_algebra k G	⊢ ⇑(⇑(add_monoid_algebra.lift k G A) F) f = finsupp.sum f (λ (a : G) (b : k), b • ⇑F (⇑multiplicative.of_add a))
k : Type u₁,	G : Type u₂,	_inst_1 : semiring k,	_inst_2 : mul_one_class G,	R : Type u_1,	_inst_3 : semiring R,	f : k →+* R,	g : G →* R,	a b : monoid_algebra k G,	h_comm : ∀ {x y : G}, y ∈ a.support → commute (⇑f (⇑b x)) (⇑g y)	⊢ ⇑(monoid_algebra.lift_nc ↑f g) a * ⇑(monoid_algebra.lift_nc ↑f g) b = ?m_1
k : Type u₁,	G : Type u₂,	_inst_1 : semiring k,	_inst_2 : mul_one_class G,	R : Type u_1,	_inst_3 : semiring R,	f : k →+* R,	g : G →* R,	a b : monoid_algebra k G,	h_comm : ∀ {x y : G}, y ∈ a.support → commute (⇑f (⇑b x)) (⇑g y)	⊢ ⇑(monoid_algebra.lift_nc ↑f g) (a * b) = ⇑(monoid_algebra.lift_nc ↑f g) a * ⇑(monoid_algebra.lift_nc ↑f g) b
k : Type u₁,	G : Type u₂,	_inst_1 : semiring k,	_inst_2 : mul_one_class G,	R : Type u_1,	_inst_3 : semiring R,	f : k →+* R,	g : G →* R,	a b : monoid_algebra k G,	h_comm : ∀ {x y : G}, y ∈ a.support → commute (⇑f (⇑b x)) (⇑g y)	⊢ ⇑(monoid_algebra.lift_nc ↑f g) (a * b) = ⇑(monoid_algebra.lift_nc ↑f g) (finsupp.sum a finsupp.single) * ⇑(monoid_algebra.lift_nc ↑f g) (finsupp.sum b finsupp.single)
k : Type u₁,	G : Type u₂,	_inst_1 : semiring k,	_inst_2 : mul_one_class G,	R : Type u_1,	_inst_3 : semiring R,	f : k →+* R,	g : G →* R,	a b : monoid_algebra k G,	h_comm : ∀ {x y : G}, y ∈ a.support → commute (⇑f (⇑b x)) (⇑g y)	⊢ finsupp.sum a (λ (a : G) (b_1 : k), finsupp.sum b (λ (a_1 : G) (b : k), ⇑↑f (b_1 * b) * ⇑g (a * a_1))) = finsupp.sum a (λ (a : G) (c : k), finsupp.sum b (λ (a_1 : G) (c_1 : k), ⇑↑f c * ⇑g a * (⇑↑f c_1 * ⇑g a_1)))
k : Type u₁,	G : Type u₂,	_inst_1 : semiring k,	_inst_2 : mul_one_class G,	R : Type u_1,	_inst_3 : semiring R,	f : k →+* R,	g : G →* R,	a b : monoid_algebra k G,	h_comm : ∀ {x y : G}, y ∈ a.support → commute (⇑f (⇑b x)) (⇑g y),	y : G,	hy : y ∈ a.support,	x : G,	hx : x ∈ b.support	⊢ (λ (a_1 : G) (b : k), ⇑↑f (⇑a y * b) * ⇑g (y * a_1)) x (⇑b x) = (λ (a_1 : G) (c : k), ⇑↑f (⇑a y) * ⇑g y * (⇑↑f c * ⇑g a_1)) x (⇑b x)
R : Type u,	A : Type v,	B : Type w,	_inst_1 : monoid R,	_inst_2 : non_unital_non_assoc_semiring A,	_inst_3 : distrib_mul_action R A,	_inst_4 : non_unital_non_assoc_semiring B,	_inst_5 : distrib_mul_action R B,	f : non_unital_alg_hom R A B,	h₁ : ∀ (m : R) (x : A), ⇑f (m • x) = m • ⇑f x,	h₂ : ⇑f 0 = 0,	h₃ : ∀ (x y : A), ⇑f (x + y) = ⇑f x + ⇑f y,	h₄ : ∀ (x y : A), ⇑f (x * y) = ⇑f x * ⇑f y,	x : A	⊢ ⇑↑{to_fun := ⇑f, map_smul' := h₁, map_zero' := h₂, map_add' := h₃, map_mul' := h₄} x = ⇑{to_fun := ⇑f, map_smul' := h₁, map_zero' := h₂, map_add' := h₃} x
R : Type u,	A : Type v,	B : Type w,	_inst_1 : monoid R,	_inst_2 : non_unital_non_assoc_semiring A,	_inst_3 : distrib_mul_action R A,	_inst_4 : non_unital_non_assoc_semiring B,	_inst_5 : distrib_mul_action R B,	f : non_unital_alg_hom R A B,	h₁ : ∀ (m : R) (x : A), ⇑f (m • x) = m • ⇑f x,	h₂ : ⇑f 0 = 0,	h₃ : ∀ (x y : A), ⇑f (x + y) = ⇑f x + ⇑f y,	h₄ : ∀ (x y : A), ⇑f (x * y) = ⇑f x * ⇑f y	⊢ ↑{to_fun := ⇑f, map_smul' := h₁, map_zero' := h₂, map_add' := h₃, map_mul' := h₄} = {to_fun := ⇑f, map_smul' := h₁, map_zero' := h₂, map_add' := h₃}
R : Type u,	A : Type v,	_inst_1 : monoid R,	_inst_2 : non_unital_non_assoc_semiring A,	_inst_3 : distrib_mul_action R A	⊢ ∀ (x y : A), 1.to_fun (x * y) = 1.to_fun x * 1.to_fun y
α : Type u,	_inst_1 : has_mul α,	a x y : α	⊢ semiconj_by (opposite.op a) (opposite.op y) (opposite.op x) ↔ semiconj_by a x y
α : Type u,	_inst_1 : has_mul α,	a x y : α	⊢ semiconj_by (opposite.op a) (opposite.op y) (opposite.op x) → semiconj_by a x y
α : Type u,	_inst_1 : has_mul α,	a x y : α,	h : semiconj_by (opposite.op a) (opposite.op y) (opposite.op x)	⊢ semiconj_by a x y
α : Type u,	_inst_1 : has_mul α,	a x y : α	⊢ semiconj_by (opposite.op a) (opposite.op y) (opposite.op x) → semiconj_by a x y		α : Type u,	_inst_1 : has_mul α,	a x y : α	⊢ semiconj_by a x y → semiconj_by (opposite.op a) (opposite.op y) (opposite.op x)
α : Type u,	_inst_1 : has_mul α,	a x y : α,	h : semiconj_by (opposite.op a) (opposite.op y) (opposite.op x)	⊢ semiconj_by (opposite.unop (opposite.op a)) (opposite.unop (opposite.op x)) (opposite.unop (opposite.op y))
α : Type u,	_inst_1 : has_mul α,	a x y : α	⊢ semiconj_by a x y → semiconj_by (opposite.op a) (opposite.op y) (opposite.op x)
α : Type u,	_inst_1 : has_mul α,	a x y : α,	h : semiconj_by a x y	⊢ semiconj_by (opposite.op a) (opposite.op y) (opposite.op x)
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α	⊢ (cmp a b).swap = cmp b a
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α	⊢ (ite (a < b) ordering.lt (ite (b < a) ordering.gt ordering.eq)).swap = ite (b < a) ordering.lt (ite (a < b) ordering.gt ordering.eq)
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α	⊢ (ite (a < b) ordering.lt (ite (b < a) ordering.gt ordering.eq)).swap = ite (b < a) ordering.lt (ite (a < b) ordering.gt ordering.eq)
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α,	h : a < b	⊢ (ite (a < b) ordering.lt (ite (b < a) ordering.gt ordering.eq)).swap = ite (b < a) ordering.lt (ite (a < b) ordering.gt ordering.eq)
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α,	h : ¬a < b	⊢ (ite (a < b) ordering.lt (ite (b < a) ordering.gt ordering.eq)).swap = ite (b < a) ordering.lt (ite (a < b) ordering.gt ordering.eq)
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α	⊢ (ite (a < b) ordering.lt (ite (b < a) ordering.gt ordering.eq)).swap = ite (b < a) ordering.lt (ite (a < b) ordering.gt ordering.eq)
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α,	h : a < b,	h₂ : b < a	⊢ (ite (a < b) ordering.lt (ite (b < a) ordering.gt ordering.eq)).swap = ite (b < a) ordering.lt (ite (a < b) ordering.gt ordering.eq)
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α,	h : a < b,	h₂ : ¬b < a	⊢ (ite (a < b) ordering.lt (ite (b < a) ordering.gt ordering.eq)).swap = ite (b < a) ordering.lt (ite (a < b) ordering.gt ordering.eq)
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α,	h : ¬a < b,	h₂ : b < a	⊢ (ite (a < b) ordering.lt (ite (b < a) ordering.gt ordering.eq)).swap = ite (b < a) ordering.lt (ite (a < b) ordering.gt ordering.eq)
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α,	h : ¬a < b,	h₂ : ¬b < a	⊢ (ite (a < b) ordering.lt (ite (b < a) ordering.gt ordering.eq)).swap = ite (b < a) ordering.lt (ite (a < b) ordering.gt ordering.eq)
α : Type u,	_inst_1 : preorder α,	_inst_2 : decidable_rel has_lt.lt,	a b : α,	h : a < b,	h₂ : b < a	⊢ false
α : Type u,	_inst_1 : linear_order α,	x : α	⊢ cmp x x = ordering.eq
α : Type u_1,	_inst_1 : linear_ordered_field α,	a b c : α,	h : 0 < b	⊢ a * b⁻¹ < c ↔ a < c * b
α : Type u_1,	_inst_1 : linear_ordered_field α,	a b : α,	ha : a < 0,	hb : b < 0	⊢ a ≤ b⁻¹ ↔ b ≤ a⁻¹
α : Type u_1,	_inst_1 : linear_ordered_field α,	a b : α,	hb : b < 0	⊢ a / b < 1 ↔ b < a
α : Type u_1,	_inst_1 : linear_ordered_field α,	a b : α,	ha : 0 < a,	hb : 0 < b	⊢ 1 / a ≤ b ↔ 1 / b ≤ a
α : Type u,	_inst_1 : group α,	_inst_2 : has_lt α,	_inst_3 : covariant_class α α has_mul.mul has_lt.lt,	a b : α	⊢ a * a⁻¹ < a * b ↔ 1 < a * b
α : Type u,	_inst_1 : group α,	_inst_2 : has_lt α,	_inst_3 : covariant_class α α has_mul.mul has_lt.lt,	a b : α	⊢ b * a < b * b⁻¹ ↔ b * a < 1
α : Type u,	_inst_1 : comm_group α,	_inst_2 : has_lt α,	_inst_3 : covariant_class α α has_mul.mul has_lt.lt,	a b c d : α	⊢ a * b⁻¹ < c * d⁻¹ ↔ a * d < c * b
α : Type u,	_inst_1 : group α,	_inst_2 : has_lt α,	_inst_3 : covariant_class α α (function.swap has_mul.mul) has_lt.lt,	a b : α	⊢ 1 < a / b ↔ b < a
α : Type u,	_inst_1 : linear_ordered_ring α,	x y : α,	h₁ : x ≤ y,	h₂ : -x ≤ y	⊢ x * x ≤ y * y
α : Type u,	_inst_1 : linear_ordered_ring α,	x y : α,	h₁ : x ≤ y,	h₂ : -x ≤ y,	_inst : decidable_rel has_le.le	⊢ x * x ≤ y * y
α : Type u,	_inst_1 : linear_ordered_ring α,	x y : α,	h₁ : x ≤ y,	h₂ : -x ≤ y,	_inst : decidable_rel has_le.le	⊢ abs x * abs x ≤ y * y
α : Type u,	_inst_1 : linear_ordered_comm_ring α,	a b : α	⊢ abs (a - b) * abs (a - b) = a * a + b * b - (1 + 1) * a * b
α : Type u,	_inst_1 : linear_ordered_comm_ring α,	a b : α	⊢ (a - b) * (a - b) = a * a + b * b - (1 + 1) * a * b
α : Type u_1,	_inst_2 : ordered_semiring α,	a b c : α	⊢ 0 ≤ c → a ≤ c → 0 ≤ b → b ≤ 1 → a * b ≤ c
α : Type u_1,	_inst_2 : ordered_semiring α,	a b c : α,	_inst : Π (a : Prop), decidable a	⊢ 0 ≤ c → a ≤ c → 0 ≤ b → b ≤ 1 → a * b ≤ c
α : Type u_1,	_inst_2 : ordered_semiring α,	a b c : α	⊢ 0 ≤ c → a ≤ c → 0 ≤ b → b ≤ 1 → a * b ≤ c
α : Type u,	_inst_1 : linear_ordered_semiring α,	a b c : α,	h : 0 < c	⊢ c * a < c * b ↔ a < b
α : Type u,	_inst_1 : linear_ordered_semiring α,	a b c : α,	h : 0 < c,	_inst : decidable_rel has_le.le	⊢ c * a < c * b ↔ a < b
α : Type u,	_inst_1 : linear_ordered_semiring α,	a b c : α,	h : 0 < c	⊢ c * a < c * b ↔ a < b
α : Type u_1,	_inst_1 : partial_order α,	_inst_2 : add_comm_monoid α,	_inst_3 : has_sub α,	_inst_4 : has_ordered_sub α,	a b c : α,	_inst_5 : covariant_class α α has_add.add has_le.le	⊢ a - (b + c) = a - b - c
α : Type u_1,	_inst_1 : partial_order α,	_inst_2 : add_comm_monoid α,	_inst_3 : has_sub α,	_inst_4 : has_ordered_sub α,	a b c : α,	_inst_5 : covariant_class α α has_add.add has_le.le	⊢ a ≤ b + (c + (a - b - c))
α : Type u_1,	_inst_1 : partial_order α,	_inst_2 : add_comm_monoid α,	_inst_3 : has_sub α,	_inst_4 : has_ordered_sub α,	a b c : α,	_inst_5 : covariant_class α α has_add.add has_le.le	⊢ a ≤ b + c + (a - b - c)
α : Type u_1,	_inst_1 : partial_order α,	_inst_2 : add_comm_monoid α,	_inst_3 : has_sub α,	_inst_4 : has_ordered_sub α,	a b c : α,	_inst_5 : covariant_class α α has_add.add has_le.le	⊢ a ≤ b + c + (a - b - c)		α : Type u_1,	_inst_1 : partial_order α,	_inst_2 : add_comm_monoid α,	_inst_3 : has_sub α,	_inst_4 : has_ordered_sub α,	a b c : α,	_inst_5 : covariant_class α α has_add.add has_le.le	⊢ a ≤ b + (c + (a - (b + c)))
α : Type u_1,	_inst_1 : partial_order α,	_inst_2 : add_comm_monoid α,	_inst_3 : has_sub α,	_inst_4 : has_ordered_sub α,	a b c : α,	_inst_5 : covariant_class α α has_add.add has_le.le	⊢ a ≤ b + c + (a - (b + c))
α : Type u_1,	_inst_1 : partial_order α,	_inst_2 : add_comm_monoid α,	_inst_3 : has_sub α,	_inst_4 : has_ordered_sub α,	a b c : α,	_inst_5 : covariant_class α α has_add.add has_le.le	⊢ a ≤ b + (c + (a - (b + c)))
α : Type u_1,	_inst_1 : canonically_ordered_add_monoid α,	_inst_2 : has_sub α,	_inst_3 : has_ordered_sub α,	a b c : α,	h : c ≤ b	⊢ a - c ≤ b - c ↔ a ≤ b
α : Type u_1,	_inst_1 : canonically_ordered_add_monoid α,	_inst_2 : has_sub α,	_inst_3 : has_ordered_sub α,	a b : α	⊢ a - b = 0 ↔ a ≤ b
α : Type u_1,	_inst_1 : canonically_ordered_add_monoid α,	_inst_2 : has_sub α,	_inst_3 : has_ordered_sub α,	a b c : α,	h₁ : a ≤ b,	h₂ : a ≤ c,	h₃ : b - a = c - a	⊢ b = c
α : Type u_1,	_inst_1 : canonically_ordered_add_monoid α,	_inst_2 : has_sub α,	_inst_3 : has_ordered_sub α,	a b c : α,	hb : add_le_cancellable b,	h : b ≤ a	⊢ a - b + c = a + c - b
α : Type u_1,	_inst_1 : canonically_ordered_add_monoid α,	_inst_2 : has_sub α,	_inst_3 : has_ordered_sub α,	a b c : α,	ha : add_le_cancellable a,	hc : add_le_cancellable c,	h : c ≤ a	⊢ a - b ≤ a - c ↔ c ≤ b
α : Type u_1,	_inst_1 : canonically_ordered_add_monoid α,	_inst_2 : has_sub α,	_inst_3 : has_ordered_sub α,	a b c : α,	ha : add_le_cancellable a,	hc : add_le_cancellable c,	h : c ≤ a	⊢ a - b ≤ a - c → c ≤ b
α : Type u_1,	_inst_1 : canonically_ordered_add_monoid α,	_inst_2 : has_sub α,	_inst_3 : has_ordered_sub α,	a b c : α,	ha : add_le_cancellable a,	hc : add_le_cancellable c,	h : c ≤ a	⊢ a + c ≤ a + b → c ≤ b
α : Type u_1,	_inst_1 : canonically_ordered_add_monoid α,	_inst_2 : has_sub α,	_inst_3 : has_ordered_sub α,	a b : α,	hba : add_le_cancellable (b - a),	h : a ≤ b	⊢ b - (b - a) = a
α : Type u_1,	a b c : α,	_inst_1 : linear_ordered_comm_group_with_zero α,	h : c ≠ 0,	hab : a * c ≤ b	⊢ a * c ≤ b * c⁻¹ * c
α : Type u_1,	a b c d : α,	_inst_1 : linear_ordered_comm_group_with_zero α,	hab : a < b,	hcd : c < d,	hb : b ≠ 0,	hd : d ≠ 0,	ha : a = 0	⊢ a * c < b * d
α : Type u_1,	a b c d : α,	_inst_1 : linear_ordered_comm_group_with_zero α,	hab : a < b,	hcd : c < d,	hb : b ≠ 0,	hd : d ≠ 0,	ha : a = 0	⊢ b * d ≠ 0
α : Type u_1,	a b c d : α,	_inst_1 : linear_ordered_comm_group_with_zero α,	hab : a < b,	hcd : c < d,	hb : b ≠ 0,	hd : d ≠ 0,	ha : ¬a = 0,	hc : c = 0	⊢ a * c < b * d
α : Type u_1,	a b c d : α,	_inst_1 : linear_ordered_comm_group_with_zero α,	hab : a < b,	hcd : c < d,	hb : b ≠ 0,	hd : d ≠ 0,	ha : ¬a = 0,	hc : c = 0	⊢ b * d ≠ 0
α : Type u_1,	β : Type u_2,	γ : Type u_3,	f : α → β,	c : α,	_inst_1 : add_comm_monoid α,	_inst_2 : has_neg β,	_inst_3 : division_ring γ,	_inst_4 : module γ α,	h : function.antiperiodic f c,	a : γ,	ha : a ≠ 0,	x : α	⊢ (λ (x : α), f (a • x)) (x + a⁻¹ • c) = -(λ (x : α), f (a • x)) x
⊢ comm_group punit
⊢ comm_group punit
⊢ comm_group punit
⊢ punit → punit → punit → punit.star = punit.star
⊢ ∀ (a : punit), punit.star = a
⊢ punit → punit.star = 1
⊢ ℕ → ∀ (x : punit), punit.star = x * punit.star
⊢ ∀ (a : punit), punit → punit.star = a * punit.star
⊢ ℕ → ∀ (a : punit), punit.star = a * punit.star
⊢ ℕ → punit → punit.star = punit.star
⊢ ∀ (a : punit), a⁻¹ * a = 1
⊢ ∀ (a b : punit), a * b = b * a
a b c : punit	⊢ punit.star = punit.star
a : punit	⊢ punit.star = a
x : punit	⊢ punit.star = 1
n : ℕ,	x : punit	⊢ punit.star = x * punit.star
a b : punit	⊢ punit.star = a * punit.star
a : punit	⊢ punit.star = 1
n : ℕ,	a : punit	⊢ punit.star = a * punit.star
n : ℕ,	a : punit	⊢ punit.star = punit.star
a : punit	⊢ a⁻¹ * a = 1
a b : punit	⊢ a * b = b * a
R : Type u_1,	_inst_1 : rack R,	x y : R	⊢ (x ◃ x) ◃ y = x ◃ y
R : Type u_1,	_inst_1 : rack R,	x y : R,	h : opposite.op x ◃ opposite.op x = opposite.op y ◃ opposite.op y ↔ opposite.op x = opposite.op y	⊢ x ◃⁻¹ x = y ◃⁻¹ y ↔ x = y
R : Type u_1,	_inst_1 : rack R,	x y : R	⊢ x ◃⁻¹ x = y ◃⁻¹ y ↔ x = y
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ : R,	a b : ℍ[R,c₁,c₂]	⊢ {re := (a + b).re, im_i := -(a + b).im_i, im_j := -(a + b).im_j, im_k := -(a + b).im_k} = {re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k} + {re := b.re, im_i := -b.im_i, im_j := -b.im_j, im_k := -b.im_k}
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ : R,	a b : ℍ[R,c₁,c₂]	⊢ {re := (a + b).re, im_i := -(a + b).im_i, im_j := -(a + b).im_j, im_k := -(a + b).im_k} = {re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k} + {re := b.re, im_i := -b.im_i, im_j := -b.im_j, im_k := -b.im_k}
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ : R,	a b : ℍ[R,c₁,c₂]	⊢ {re := (a + b).re, im_i := -(a + b).im_i, im_j := -(a + b).im_j, im_k := -(a + b).im_k}.re = ({re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k} + {re := b.re, im_i := -b.im_i, im_j := -b.im_j, im_k := -b.im_k}).re
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ : R,	a b : ℍ[R,c₁,c₂]	⊢ {re := (a + b).re, im_i := -(a + b).im_i, im_j := -(a + b).im_j, im_k := -(a + b).im_k}.im_i = ({re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k} + {re := b.re, im_i := -b.im_i, im_j := -b.im_j, im_k := -b.im_k}).im_i
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ : R,	a b : ℍ[R,c₁,c₂]	⊢ {re := (a + b).re, im_i := -(a + b).im_i, im_j := -(a + b).im_j, im_k := -(a + b).im_k}.im_j = ({re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k} + {re := b.re, im_i := -b.im_i, im_j := -b.im_j, im_k := -b.im_k}).im_j
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ : R,	a b : ℍ[R,c₁,c₂]	⊢ {re := (a + b).re, im_i := -(a + b).im_i, im_j := -(a + b).im_j, im_k := -(a + b).im_k}.im_k = ({re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k} + {re := b.re, im_i := -b.im_i, im_j := -b.im_j, im_k := -b.im_k}).im_k
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ r : R,	a : ℍ[R,c₁,c₂]	⊢ {re := (r • a).re, im_i := -(r • a).im_i, im_j := -(r • a).im_j, im_k := -(r • a).im_k} = ⇑(ring_hom.id R) r • {re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k}
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ r : R,	a : ℍ[R,c₁,c₂]	⊢ {re := (r • a).re, im_i := -(r • a).im_i, im_j := -(r • a).im_j, im_k := -(r • a).im_k} = ⇑(ring_hom.id R) r • {re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k}
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ r : R,	a : ℍ[R,c₁,c₂]	⊢ {re := (r • a).re, im_i := -(r • a).im_i, im_j := -(r • a).im_j, im_k := -(r • a).im_k}.re = (⇑(ring_hom.id R) r • {re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k}).re
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ r : R,	a : ℍ[R,c₁,c₂]	⊢ {re := (r • a).re, im_i := -(r • a).im_i, im_j := -(r • a).im_j, im_k := -(r • a).im_k}.im_i = (⇑(ring_hom.id R) r • {re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k}).im_i
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ r : R,	a : ℍ[R,c₁,c₂]	⊢ {re := (r • a).re, im_i := -(r • a).im_i, im_j := -(r • a).im_j, im_k := -(r • a).im_k}.im_j = (⇑(ring_hom.id R) r • {re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k}).im_j
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ r : R,	a : ℍ[R,c₁,c₂]	⊢ {re := (r • a).re, im_i := -(r • a).im_i, im_j := -(r • a).im_j, im_k := -(r • a).im_k}.im_k = (⇑(ring_hom.id R) r • {re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k}).im_k
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ : R,	a : ℍ[R,c₁,c₂]	⊢ ⇑{to_fun := λ (a : ℍ[R,c₁,c₂]), {re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k}, map_add' := _, map_smul' := _} (⇑{to_fun := λ (a : ℍ[R,c₁,c₂]), {re := a.re, im_i := -a.im_i, im_j := -a.im_j, im_k := -a.im_k}, map_add' := _, map_smul' := _} a) = a
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ : R,	a : ℍ[R,c₁,c₂]	⊢ ⇑quaternion_algebra.conj a + a = 2 * ↑(a.re)
R : Type u_1,	_inst_1 : comm_ring R,	x : R	⊢ ⇑quaternion.norm_sq ↑x = x ^ 2
R : Type u_1,	A : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : ring A,	_inst_4 : algebra R A,	c₁ c₂ : R,	q : quaternion_algebra.basis A c₁ c₂	⊢ q.k * q.j = c₂ • q.i
R : Type u_1,	_inst_1 : mul_zero_class R	⊢ ¬is_left_regular 0 ↔ nontrivial R
R : Type u_1,	_inst_1 : mul_zero_class R	⊢ (¬∃ (x y : R), x ≠ y) ↔ ∀ (x y : R), x = y
R : Type u_1,	_inst_1 : mul_zero_class R	⊢ (∀ (x y : R), x = y) ↔ ∀ (x y : R), x = y
R : Type u_1,	a b : R,	_inst_1 : monoid R,	h : a * b = 1	⊢ is_right_regular (a * ?m_1)
R : Type u_1,	a b : R,	_inst_1 : monoid R,	h : a * b = 1	⊢ is_right_regular 1
R : Type u_1,	a b : R,	_inst_1 : semigroup R,	ab : is_left_regular (a * b)	⊢ function.injective (?m_2 ∘ has_mul.mul b)
α : Type u_1,	_inst_1 : boolean_ring α,	a b : α	⊢ a * b + a * (1 + b) + a * b * (a * (1 + b)) = a * b + a * (1 + b) + a * a * (b * (1 + b))
α : Type u_1,	_inst_1 : boolean_ring α,	a b : α	⊢ a * b + a * (1 + b) + a * a * (b * (1 + b)) = a * b + (a + a * b)
α : Type u_1,	_inst_1 : boolean_ring α,	a b : α	⊢ a * b + (a + a * b) = a + (a * b + a * b)
α : Type u_1,	_inst_1 : boolean_ring α,	a b : α	⊢ a + (a * b + a * b) = a
α : Type u_1,	_inst_1 : boolean_ring α,	a : α	⊢ a + a = (a + a) * (a + a)
α : Type u_1,	_inst_1 : boolean_ring α,	a : α	⊢ (a + a) * (a + a) = a * a + a * a + (a * a + a * a)
α : Type u_1,	_inst_1 : boolean_ring α,	a : α	⊢ a * a + a * a + (a * a + a * a) = a + a + (a + a)
α : Type u_1,	_inst_1 : boolean_ring α,	a : α,	this : a + a = a + a + (a + a)	⊢ a + a = 0
R₁ : Type u_1,	R₂ : Type u_2,	_inst_1 : semiring R₁,	_inst_2 : semiring R₂,	σ : R₁ →+* R₂,	σ' : R₂ →+* R₁,	_inst_4 : ring_hom_inv_pair σ σ',	x : R₂	⊢ ⇑(ring_hom.id R₂) x = x
R₁ : Type u_1,	R₂ : Type u_2,	_inst_1 : semiring R₁,	_inst_2 : semiring R₂,	σ : R₁ →+* R₂,	σ' : R₂ →+* R₁,	_inst_4 : ring_hom_inv_pair σ σ',	x : R₂	⊢ ⇑σ (⇑σ' x) = x
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ non_unital_semiring (Π (i : I), f i)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ non_unital_semiring (Π (i : I), f i)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (a b c : Π (i : I), f i), a + b + c = a + (b + c)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (a : Π (i : I), f i), 0 + a = a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (a : Π (i : I), f i), a + 0 = a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ℕ → (Π (i : I), f i) → Π (i : I), f i
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (x : Π (i : I), f i), (λ (ᾰ_1 : Π (i : I), f i) (i : I), non_unital_semiring.nsmul 0 (ᾰ_1 i)) x = 0
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (n : ℕ) (x : Π (i : I), f i), (λ (ᾰ_1 : Π (i : I), f i) (i : I), non_unital_semiring.nsmul n.succ (ᾰ_1 i)) x = x + (λ (ᾰ_1 : Π (i : I), f i) (i : I), non_unital_semiring.nsmul n (ᾰ_1 i)) x
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (a b : Π (i : I), f i), a + b = b + a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (a b c : Π (i : I), f i), a * (b + c) = a * b + a * c
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (a b c : Π (i : I), f i), (a + b) * c = a * c + b * c
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (a : Π (i : I), f i), 0 * a = 0
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (a : Π (i : I), f i), a * 0 = 0
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), non_unital_semiring (f i)	⊢ ∀ (a b c : Π (i : I), f i), a * b * c = a * (b * c)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ comm_ring (Π (i : I), f i)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ comm_ring (Π (i : I), f i)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a b c : Π (i : I), f i), a + b + c = a + (b + c)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a : Π (i : I), f i), 0 + a = a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a : Π (i : I), f i), a + 0 = a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (x : Π (i : I), f i), (λ (i : I), add_monoid.nsmul 0 (x i)) = 0
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (n : ℕ) (x : Π (i : I), f i), (λ (i : I), add_monoid.nsmul n.succ (x i)) = x + λ (i : I), add_monoid.nsmul n (x i)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ (Π (i : I), f i) → (Π (i : I), f i) → Π (i : I), f i
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a b : Π (i : I), f i), (λ (ᾰ_1 : Π (i : I), f i) (i : I), comm_ring.sub (a i) (ᾰ_1 i)) b = a + -b
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ℤ → (Π (i : I), f i) → Π (i : I), f i
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a : Π (i : I), f i), (λ (ᾰ_1 : Π (i : I), f i) (i : I), comm_ring.gsmul 0 (ᾰ_1 i)) a = 0
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (n : ℕ) (a : Π (i : I), f i), (λ (ᾰ_1 : Π (i : I), f i) (i : I), comm_ring.gsmul (int.of_nat n.succ) (ᾰ_1 i)) a = a + (λ (ᾰ_1 : Π (i : I), f i) (i : I), comm_ring.gsmul (int.of_nat n) (ᾰ_1 i)) a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (n : ℕ) (a : Π (i : I), f i), (λ (ᾰ_1 : Π (i : I), f i) (i : I), comm_ring.gsmul -[1+ n] (ᾰ_1 i)) a = -(λ (ᾰ_1 : Π (i : I), f i) (i : I), comm_ring.gsmul ↑(n.succ) (ᾰ_1 i)) a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a : Π (i : I), f i), -a + a = 0
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a b : Π (i : I), f i), a + b = b + a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a b c : Π (i : I), f i), a * b * c = a * (b * c)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a : Π (i : I), f i), 1 * a = a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a : Π (i : I), f i), a * 1 = a
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (x : Π (i : I), f i), (λ (i : I), monoid.npow 0 (x i)) = 1
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (n : ℕ) (x : Π (i : I), f i), (λ (i : I), monoid.npow n.succ (x i)) = x * λ (i : I), monoid.npow n (x i)
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a b c : Π (i : I), f i), a * (b + c) = a * b + a * c
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a b c : Π (i : I), f i), (a + b) * c = a * c + b * c
I : Type u,	f : I → Type v,	_inst_1 : Π (i : I), comm_ring (f i)	⊢ ∀ (a b : Π (i : I), f i), a * b = b * a
R : CommRingᵒᵖ	⊢ algebraic_geometry.Spec.SheafedSpace_map (𝟙 R).unop = 𝟙 (algebraic_geometry.Spec.SheafedSpace_obj (opposite.unop R))
R S T : CommRingᵒᵖ,	f : R ⟶ S,	g : S ⟶ T	⊢ algebraic_geometry.Spec.SheafedSpace_map (f ≫ g).unop = algebraic_geometry.Spec.SheafedSpace_map f.unop ≫ algebraic_geometry.Spec.SheafedSpace_map g.unop
R : CommRing,	x : ↥({to_PresheafedSpace := (algebraic_geometry.Spec.SheafedSpace_obj R).to_PresheafedSpace, sheaf_condition := (algebraic_geometry.Spec.SheafedSpace_obj R).sheaf_condition}.to_PresheafedSpace.carrier)	⊢ local_ring (localization.at_prime (prime_spectrum.as_ideal x))
R S T : CommRing,	f : R ⟶ S,	g : S ⟶ T	⊢ ↑(algebraic_geometry.Spec.LocallyRingedSpace_map (f ≫ g)) = ↑(algebraic_geometry.Spec.LocallyRingedSpace_map g ≫ algebraic_geometry.Spec.LocallyRingedSpace_map f)
R S T : CommRing,	f : R ⟶ S,	g : S ⟶ T	⊢ algebraic_geometry.Spec.SheafedSpace_map g ≫ algebraic_geometry.Spec.SheafedSpace_map f = ↑(algebraic_geometry.Spec.LocallyRingedSpace_map g ≫ algebraic_geometry.Spec.LocallyRingedSpace_map f)
R : CommRingᵒᵖ	⊢ algebraic_geometry.Spec.Top_map (𝟙 R).unop = 𝟙 (algebraic_geometry.Spec.Top_obj (opposite.unop R))
R S T : CommRingᵒᵖ,	f : R ⟶ S,	g : S ⟶ T	⊢ algebraic_geometry.Spec.Top_map (f ≫ g).unop = algebraic_geometry.Spec.Top_map f.unop ≫ algebraic_geometry.Spec.Top_map g.unop
R : Type u,	_inst_1 : comm_ring R,	x : prime_spectrum R	⊢ prime_spectrum.vanishing_ideal {x} = x.as_ideal
R : Type u,	_inst_1 : comm_ring R,	I : ideal R	⊢ prime_spectrum.zero_locus ↑I = ∅ ↔ I = ⊤
R : Type u,	_inst_1 : comm_ring R,	I : ideal R	⊢ prime_spectrum.zero_locus ↑I = ∅ → I = ⊤
R : Type u,	_inst_1 : comm_ring R,	I : ideal R	⊢ ¬I = ⊤ → ¬prime_spectrum.zero_locus ↑I = ∅
R : Type u,	_inst_1 : comm_ring R,	I : ideal R,	h : ¬I = ⊤	⊢ ¬prime_spectrum.zero_locus ↑I = ∅
R : Type u,	_inst_1 : comm_ring R,	I : ideal R,	h : ¬I = ⊤	⊢ (prime_spectrum.zero_locus ↑I).nonempty
R : Type u,	_inst_1 : comm_ring R,	I : ideal R	⊢ prime_spectrum.zero_locus ↑I = ∅ → I = ⊤		R : Type u,	_inst_1 : comm_ring R,	I : ideal R	⊢ I = ⊤ → prime_spectrum.zero_locus ↑I = ∅
R : Type u,	_inst_1 : comm_ring R,	I : ideal R,	h : ¬I = ⊤,	M : ideal R,	hM : M.is_maximal,	hIM : I ≤ M	⊢ (prime_spectrum.zero_locus ↑I).nonempty
R : Type u,	_inst_1 : comm_ring R	⊢ prime_spectrum.zero_locus ↑⊤ = ∅
R : Type u,	_inst_1 : comm_ring R	⊢ 1 ∈ ↑⊤
R : Type u,	_inst_1 : comm_ring R,	I : ideal R	⊢ I = ⊤ → prime_spectrum.zero_locus ↑I = ∅
R : Type u,	_inst_1 : comm_ring R,	s : set (set R)	⊢ prime_spectrum.zero_locus (⋃ (s' : set R) (H : s' ∈ s), s') = ⋂ (s' : set R) (H : s' ∈ s), prime_spectrum.zero_locus s'
R : Type u,	_inst_1 : comm_ring R,	S : Type v,	_inst_2 : comm_ring S,	f : R →+* S	⊢ continuous (prime_spectrum.comap f)
R : Type u,	_inst_1 : comm_ring R,	S : Type v,	_inst_2 : comm_ring S,	f : R →+* S	⊢ ∀ (s : set (prime_spectrum R)), is_closed s → is_closed (prime_spectrum.comap f ⁻¹' s)
R : Type u,	_inst_1 : comm_ring R,	S : Type v,	_inst_2 : comm_ring S,	f : R →+* S	⊢ ∀ (s : set (prime_spectrum R)), (∃ (s_1 : set R), s = prime_spectrum.zero_locus s_1) → (∃ (s_1 : set S), prime_spectrum.comap f ⁻¹' s = prime_spectrum.zero_locus s_1)
R : Type u,	_inst_1 : comm_ring R,	S : Type v,	_inst_2 : comm_ring S,	f : R →+* S,	s : set R	⊢ ∃ (s_1 : set S), prime_spectrum.comap f ⁻¹' prime_spectrum.zero_locus s = prime_spectrum.zero_locus s_1
m n : simplex_category,	f g : m ⟶ n,	h : simplex_category.skeletal_functor.map f = simplex_category.skeletal_functor.map g	⊢ simplex_category.hom.to_preorder_hom f = simplex_category.hom.to_preorder_hom g
m n : simplex_category,	f g : m ⟶ n,	h : simplex_category.skeletal_functor.map f = simplex_category.skeletal_functor.map g	⊢ ⇑(simplex_category.hom.to_preorder_hom f) = ⇑(simplex_category.hom.to_preorder_hom g)
m n : simplex_category,	f g : m ⟶ n,	h : simplex_category.skeletal_functor.map f = simplex_category.skeletal_functor.map g,	i : fin (m.len + 1)	⊢ ⇑(simplex_category.hom.to_preorder_hom f) i = ⇑(simplex_category.hom.to_preorder_hom g) i
m n : simplex_category,	f g : m ⟶ n,	h : simplex_category.skeletal_functor.map f = simplex_category.skeletal_functor.map g	⊢ f = g
m n : simplex_category,	f g : m ⟶ n,	h : simplex_category.skeletal_functor.map f = simplex_category.skeletal_functor.map g,	i : fin (m.len + 1)	⊢ {down := ⇑(simplex_category.hom.to_preorder_hom f) i} = {down := ⇑(simplex_category.hom.to_preorder_hom g) i}
m n : simplex_category,	f g : m ⟶ n,	h : simplex_category.skeletal_functor.map f = simplex_category.skeletal_functor.map g,	i : fin (m.len + 1)	⊢ ⇑(simplex_category.skeletal_functor.map f) {down := i} = ⇑(simplex_category.skeletal_functor.map g) {down := i}
n m : simplex_category,	f : n ⟶ m	⊢ category_theory.mono f ↔ function.injective ⇑(simplex_category.hom.to_preorder_hom f)
n m : simplex_category,	f : n ⟶ m	⊢ category_theory.mono f → function.injective ⇑(simplex_category.hom.to_preorder_hom f)
n m : simplex_category,	f : n ⟶ m,	m : category_theory.mono f,	x y : fin (n.len + 1),	h : ⇑(simplex_category.hom.to_preorder_hom f) x = ⇑(simplex_category.hom.to_preorder_hom f) y	⊢ x = y
n m : simplex_category,	f : n ⟶ m,	m : category_theory.mono f,	x y : fin (n.len + 1),	h : ⇑(simplex_category.hom.to_preorder_hom f) x = ⇑(simplex_category.hom.to_preorder_hom f) y	⊢ m.const (⇑(simplex_category.hom.to_preorder_hom f) x) = m.const (⇑(simplex_category.hom.to_preorder_hom f) y)
n m : simplex_category,	f : n ⟶ m,	m : category_theory.mono f,	x y : fin (n.len + 1),	h : ⇑(simplex_category.hom.to_preorder_hom f) x = ⇑(simplex_category.hom.to_preorder_hom f) y	⊢ n.const x ≫ f = n.const y ≫ f		n m : simplex_category,	f : n ⟶ m,	m : category_theory.mono f,	x y : fin (n.len + 1),	h : ⇑(simplex_category.hom.to_preorder_hom f) x = ⇑(simplex_category.hom.to_preorder_hom f) y,	H : n.const x ≫ f = n.const y ≫ f	⊢ x = y
n m : simplex_category,	f : n ⟶ m,	m : category_theory.mono f,	x y : fin (n.len + 1),	h : ⇑(simplex_category.hom.to_preorder_hom f) x = ⇑(simplex_category.hom.to_preorder_hom f) y	⊢ n.const x ≫ f = n.const y ≫ f
n m : simplex_category,	f : n ⟶ m,	m : category_theory.mono f,	x y : fin (n.len + 1),	h : ⇑(simplex_category.hom.to_preorder_hom f) x = ⇑(simplex_category.hom.to_preorder_hom f) y,	H : n.const x ≫ f = n.const y ≫ f	⊢ x = y
n m : simplex_category,	f : n ⟶ m,	m : category_theory.mono f,	x y : fin (n.len + 1),	h : ⇑(simplex_category.hom.to_preorder_hom f) x = ⇑(simplex_category.hom.to_preorder_hom f) y,	H : n.const x ≫ f = n.const y ≫ f	⊢ ⇑(simplex_category.hom.to_preorder_hom (n.const x)) 0 = ⇑(simplex_category.hom.to_preorder_hom (n.const y)) 0
n m : simplex_category,	f : n ⟶ m	⊢ category_theory.mono f → function.injective ⇑(simplex_category.hom.to_preorder_hom f)		n m : simplex_category,	f : n ⟶ m	⊢ function.injective ⇑(simplex_category.hom.to_preorder_hom f) → category_theory.mono f
n m : simplex_category,	f : n ⟶ m,	m : category_theory.mono f,	x y : fin (n.len + 1),	h : ⇑(simplex_category.hom.to_preorder_hom f) x = ⇑(simplex_category.hom.to_preorder_hom f) y,	H : n.const x = n.const y	⊢ ⇑(simplex_category.hom.to_preorder_hom (n.const x)) 0 = ⇑(simplex_category.hom.to_preorder_hom (n.const y)) 0
n m : simplex_category,	f : n ⟶ m	⊢ function.injective ⇑(simplex_category.hom.to_preorder_hom f) → category_theory.mono f
C : Type u,	_inst_1 : category_theory.category C,	X : category_theory.simplicial_object C,	X₀ : C,	f : X.obj (opposite.op [0]) ⟶ X₀,	w : ∀ (i : simplex_category) (g₁ g₂ : [0] ⟶ i), X.map g₁.op ≫ f = X.map g₂.op ≫ f	⊢ ∀ ⦃X_1 Y : simplex_categoryᵒᵖ⦄ (f_1 : X_1 ⟶ Y), ((𝟭 (category_theory.simplicial_object C)).obj X).map f_1 ≫ X.map ((opposite.unop Y).const 0).op ≫ f = (X.map ((opposite.unop X_1).const 0).op ≫ f) ≫ ((category_theory.simplicial_object.const C).obj X₀).map f_1
C : Type u,	_inst_1 : category_theory.category C,	X : category_theory.simplicial_object C,	X₀ : C,	f : X.obj (opposite.op [0]) ⟶ X₀,	w : ∀ (i : simplex_category) (g₁ g₂ : [0] ⟶ i), X.map g₁.op ≫ f = X.map g₂.op ≫ f,	i j : simplex_categoryᵒᵖ,	g : i ⟶ j	⊢ ((𝟭 (category_theory.simplicial_object C)).obj X).map g ≫ X.map ((opposite.unop j).const 0).op ≫ f = (X.map ((opposite.unop i).const 0).op ≫ f) ≫ ((category_theory.simplicial_object.const C).obj X₀).map g
C : Type u,	_inst_1 : category_theory.category C,	X : category_theory.simplicial_object C,	X₀ : C,	f : X.obj (opposite.op [0]) ⟶ X₀,	w : ∀ (i : simplex_category) (g₁ g₂ : [0] ⟶ i), X.map g₁.op ≫ f = X.map g₂.op ≫ f,	i j : simplex_categoryᵒᵖ,	g : i ⟶ j	⊢ X.map g ≫ X.map ((opposite.unop j).const 0).op ≫ f = (X.map ((opposite.unop i).const 0).op ≫ f) ≫ 𝟙 X₀
C : Type u,	_inst_1 : category_theory.category C,	X : category_theory.simplicial_object C,	X₀ : C,	f : X.obj (opposite.op [0]) ⟶ X₀,	w : ∀ (i : simplex_category) (g₁ g₂ : [0] ⟶ i), X.map g₁.op ≫ f = X.map g₂.op ≫ f,	i j : simplex_categoryᵒᵖ,	g : i ⟶ j	⊢ X.map g.unop.op ≫ X.map ((opposite.unop j).const 0).op ≫ f = (X.map ((opposite.unop i).const 0).op ≫ f) ≫ 𝟙 X₀
C : Type u,	_inst_1 : category_theory.category C,	X : category_theory.cosimplicial_object C,	n : ℕ,	i : fin (n + 2),	j : fin (n + 1),	H : ⇑fin.cast_succ j < i	⊢ X.map (simplex_category.δ i.succ) ≫ X.map (simplex_category.σ (⇑fin.cast_succ j)) = X.map (simplex_category.σ j) ≫ X.map (simplex_category.δ i)
C : Type u,	_inst_1 : category_theory.category C,	X : category_theory.cosimplicial_object C,	n : ℕ,	i : fin (n + 2),	j : fin (n + 1),	H : ⇑fin.cast_succ j < i	⊢ X.δ i.succ ≫ X.σ (⇑fin.cast_succ j) = X.σ j ≫ X.δ i
C : Type u,	_inst_1 : category_theory.category C,	X : category_theory.cosimplicial_object.augmented Cᵒᵖ	⊢ X.left_op.right_op.left = X.left
C : Type u,	_inst_1 : category_theory.category C,	X : category_theory.cosimplicial_object.augmented Cᵒᵖ	⊢ (category_theory.cosimplicial_object.const Cᵒᵖ).map (category_theory.eq_to_iso _).hom ≫ X.hom = X.left_op.right_op.hom ≫ (𝟭 (category_theory.cosimplicial_object Cᵒᵖ)).map (category_theory.functor.left_op_right_op_iso X.right).hom
C : Type u,	_inst_1 : category_theory.category C,	X : category_theory.simplicial_object C,	n m : ℕ,	h : n = m	⊢ opposite.op (simplex_category.mk n) = opposite.op (simplex_category.mk m)
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	v : ℝ → E → E,	s : ℝ → set E,	K : ℝ,	hv : ∀ (t : ℝ) (x y : E), x ∈ s t → y ∈ s t → has_dist.dist (v t x) (v t y) ≤ K * has_dist.dist x y,	f g : ℝ → E,	a b δ : ℝ,	hf : continuous_on f (set.Icc a b),	hf' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at f (v t (f t)) (set.Ici t) t,	hfs : ∀ (t : ℝ), t ∈ set.Ico a b → f t ∈ s t,	hg : continuous_on g (set.Icc a b),	hg' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at g (v t (g t)) (set.Ici t) t,	hgs : ∀ (t : ℝ), t ∈ set.Ico a b → g t ∈ s t,	ha : has_dist.dist (f a) (g a) ≤ δ	⊢ ∀ (t : ℝ), t ∈ set.Icc a b → has_dist.dist (f t) (g t) ≤ δ * real.exp (K * (t - a))
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	v : ℝ → E → E,	s : ℝ → set E,	K : ℝ,	hv : ∀ (t : ℝ) (x y : E), x ∈ s t → y ∈ s t → has_dist.dist (v t x) (v t y) ≤ K * has_dist.dist x y,	f g : ℝ → E,	a b δ : ℝ,	hf : continuous_on f (set.Icc a b),	hf' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at f (v t (f t)) (set.Ici t) t,	hfs : ∀ (t : ℝ), t ∈ set.Ico a b → f t ∈ s t,	hg : continuous_on g (set.Icc a b),	hg' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at g (v t (g t)) (set.Ici t) t,	hgs : ∀ (t : ℝ), t ∈ set.Ico a b → g t ∈ s t,	ha : has_dist.dist (f a) (g a) ≤ δ	⊢ ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (f t)) (v t (f t)) ≤ 0
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	v : ℝ → E → E,	s : ℝ → set E,	K : ℝ,	hv : ∀ (t : ℝ) (x y : E), x ∈ s t → y ∈ s t → has_dist.dist (v t x) (v t y) ≤ K * has_dist.dist x y,	f g : ℝ → E,	a b δ : ℝ,	hf : continuous_on f (set.Icc a b),	hf' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at f (v t (f t)) (set.Ici t) t,	hfs : ∀ (t : ℝ), t ∈ set.Ico a b → f t ∈ s t,	hg : continuous_on g (set.Icc a b),	hg' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at g (v t (g t)) (set.Ici t) t,	hgs : ∀ (t : ℝ), t ∈ set.Ico a b → g t ∈ s t,	ha : has_dist.dist (f a) (g a) ≤ δ,	t : ℝ,	H : t ∈ set.Ico a b	⊢ has_dist.dist (v t (f t)) (v t (f t)) ≤ 0
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	v : ℝ → E → E,	s : ℝ → set E,	K : ℝ,	hv : ∀ (t : ℝ) (x y : E), x ∈ s t → y ∈ s t → has_dist.dist (v t x) (v t y) ≤ K * has_dist.dist x y,	f g : ℝ → E,	a b δ : ℝ,	hf : continuous_on f (set.Icc a b),	hf' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at f (v t (f t)) (set.Ici t) t,	hfs : ∀ (t : ℝ), t ∈ set.Ico a b → f t ∈ s t,	hg : continuous_on g (set.Icc a b),	hg' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at g (v t (g t)) (set.Ici t) t,	hgs : ∀ (t : ℝ), t ∈ set.Ico a b → g t ∈ s t,	ha : has_dist.dist (f a) (g a) ≤ δ,	f_bound : ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (f t)) (v t (f t)) ≤ 0	⊢ ∀ (t : ℝ), t ∈ set.Icc a b → has_dist.dist (f t) (g t) ≤ δ * real.exp (K * (t - a))
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	v : ℝ → E → E,	s : ℝ → set E,	K : ℝ,	hv : ∀ (t : ℝ) (x y : E), x ∈ s t → y ∈ s t → has_dist.dist (v t x) (v t y) ≤ K * has_dist.dist x y,	f g : ℝ → E,	a b δ : ℝ,	hf : continuous_on f (set.Icc a b),	hf' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at f (v t (f t)) (set.Ici t) t,	hfs : ∀ (t : ℝ), t ∈ set.Ico a b → f t ∈ s t,	hg : continuous_on g (set.Icc a b),	hg' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at g (v t (g t)) (set.Ici t) t,	hgs : ∀ (t : ℝ), t ∈ set.Ico a b → g t ∈ s t,	ha : has_dist.dist (f a) (g a) ≤ δ,	f_bound : ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (f t)) (v t (f t)) ≤ 0	⊢ ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (g t)) (v t (g t)) ≤ 0
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	v : ℝ → E → E,	s : ℝ → set E,	K : ℝ,	hv : ∀ (t : ℝ) (x y : E), x ∈ s t → y ∈ s t → has_dist.dist (v t x) (v t y) ≤ K * has_dist.dist x y,	f g : ℝ → E,	a b δ : ℝ,	hf : continuous_on f (set.Icc a b),	hf' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at f (v t (f t)) (set.Ici t) t,	hfs : ∀ (t : ℝ), t ∈ set.Ico a b → f t ∈ s t,	hg : continuous_on g (set.Icc a b),	hg' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at g (v t (g t)) (set.Ici t) t,	hgs : ∀ (t : ℝ), t ∈ set.Ico a b → g t ∈ s t,	ha : has_dist.dist (f a) (g a) ≤ δ,	f_bound : ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (f t)) (v t (f t)) ≤ 0,	t : ℝ,	H : t ∈ set.Ico a b	⊢ has_dist.dist (v t (g t)) (v t (g t)) ≤ 0
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	v : ℝ → E → E,	s : ℝ → set E,	K : ℝ,	hv : ∀ (t : ℝ) (x y : E), x ∈ s t → y ∈ s t → has_dist.dist (v t x) (v t y) ≤ K * has_dist.dist x y,	f g : ℝ → E,	a b δ : ℝ,	hf : continuous_on f (set.Icc a b),	hf' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at f (v t (f t)) (set.Ici t) t,	hfs : ∀ (t : ℝ), t ∈ set.Ico a b → f t ∈ s t,	hg : continuous_on g (set.Icc a b),	hg' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at g (v t (g t)) (set.Ici t) t,	hgs : ∀ (t : ℝ), t ∈ set.Ico a b → g t ∈ s t,	ha : has_dist.dist (f a) (g a) ≤ δ,	f_bound : ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (f t)) (v t (f t)) ≤ 0,	g_bound : ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (g t)) (v t (g t)) ≤ 0	⊢ ∀ (t : ℝ), t ∈ set.Icc a b → has_dist.dist (f t) (g t) ≤ δ * real.exp (K * (t - a))
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	v : ℝ → E → E,	s : ℝ → set E,	K : ℝ,	hv : ∀ (t : ℝ) (x y : E), x ∈ s t → y ∈ s t → has_dist.dist (v t x) (v t y) ≤ K * has_dist.dist x y,	f g : ℝ → E,	a b δ : ℝ,	hf : continuous_on f (set.Icc a b),	hf' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at f (v t (f t)) (set.Ici t) t,	hfs : ∀ (t : ℝ), t ∈ set.Ico a b → f t ∈ s t,	hg : continuous_on g (set.Icc a b),	hg' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at g (v t (g t)) (set.Ici t) t,	hgs : ∀ (t : ℝ), t ∈ set.Ico a b → g t ∈ s t,	ha : has_dist.dist (f a) (g a) ≤ δ,	f_bound : ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (f t)) (v t (f t)) ≤ 0,	g_bound : ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (g t)) (v t (g t)) ≤ 0,	t : ℝ,	ht : t ∈ set.Icc a b	⊢ has_dist.dist (f t) (g t) ≤ δ * real.exp (K * (t - a))
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	v : ℝ → E → E,	s : ℝ → set E,	K : ℝ,	hv : ∀ (t : ℝ) (x y : E), x ∈ s t → y ∈ s t → has_dist.dist (v t x) (v t y) ≤ K * has_dist.dist x y,	f g : ℝ → E,	a b δ : ℝ,	hf : continuous_on f (set.Icc a b),	hf' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at f (v t (f t)) (set.Ici t) t,	hfs : ∀ (t : ℝ), t ∈ set.Ico a b → f t ∈ s t,	hg : continuous_on g (set.Icc a b),	hg' : ∀ (t : ℝ), t ∈ set.Ico a b → has_deriv_within_at g (v t (g t)) (set.Ici t) t,	hgs : ∀ (t : ℝ), t ∈ set.Ico a b → g t ∈ s t,	ha : has_dist.dist (f a) (g a) ≤ δ,	f_bound : ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (f t)) (v t (f t)) ≤ 0,	g_bound : ∀ (t : ℝ), t ∈ set.Ico a b → has_dist.dist (v t (g t)) (v t (g t)) ≤ 0,	t : ℝ,	ht : t ∈ set.Icc a b,	this : has_dist.dist (f t) (g t) ≤ gronwall_bound δ K (0 + 0) (t - a)	⊢ has_dist.dist (f t) (g t) ≤ δ * real.exp (K * (t - a))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	p : formal_multilinear_series 𝕜 E F,	r : ℝ≥0,	h : ↑r < p.radius	⊢ summable (λ (n : ℕ), ∥p n∥ * ↑r ^ n)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	p : formal_multilinear_series 𝕜 E F,	r : ℝ≥0,	h : ↑r < p.radius,	a : ℝ,	ha : a ∈ set.Ioo 0 1,	C : ℝ,	hp : ∀ (n : ℕ), ∥p n∥ * ↑r ^ n ≤ C * a ^ n,	hC : 0 < C	⊢ summable (λ (n : ℕ), ∥p n∥ * ↑r ^ n)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	_inst_8 : complete_space F,	f : E → F	⊢ is_open {x : E | analytic_at 𝕜 f x}
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	_inst_8 : complete_space F,	f : E → F	⊢ ∀ (a : E), a ∈ {x : E | analytic_at 𝕜 f x} → {x : E | analytic_at 𝕜 f x} ∈ 𝓝 a
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	_inst_8 : complete_space F,	f : E → F,	x : E,	p : formal_multilinear_series 𝕜 E F,	r : ℝ≥0∞,	hr : has_fpower_series_on_ball f p x r	⊢ {x : E | analytic_at 𝕜 f x} ∈ 𝓝 x
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0	⊢ u ~[l] v ↔ filter.tendsto (u / v) l (𝓝 1)
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0	⊢ u ~[l] v → filter.tendsto (u / v) l (𝓝 1)
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v	⊢ filter.tendsto (u / v) l (𝓝 1)
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), (u - v) x / v x) l (𝓝 0)	⊢ filter.tendsto (u / v) l (𝓝 1)
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), u x / v x - v x / v x) l (𝓝 0)	⊢ filter.tendsto (u / v) l (𝓝 1)
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), u x / v x - v x / v x) l (𝓝 0)	⊢ filter.tendsto (λ (x : α), v x / v x) l (𝓝 1)
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), u x / v x - v x / v x) l (𝓝 0)	⊢ filter.tendsto (λ (x : α), v x / v x) l (𝓝 1)		α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), u x / v x - v x / v x) l (𝓝 0),	key : filter.tendsto (λ (x : α), v x / v x) l (𝓝 1)	⊢ filter.tendsto (u / v) l (𝓝 1)
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), u x / v x - v x / v x) l (𝓝 0),	key : filter.tendsto (λ (x : α), v x / v x) l (𝓝 1)	⊢ filter.tendsto (u / v) l (𝓝 1)
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), u x / v x - v x / v x) l (𝓝 0),	key : filter.tendsto (λ (x : α), v x / v x) l (𝓝 1),	x : α	⊢ (u / v) x = u x / v x - v x / v x + v x / v x
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), u x / v x - v x / v x) l (𝓝 0),	key : filter.tendsto (λ (x : α), v x / v x) l (𝓝 1)	⊢ u / v = λ (x : α), u x / v x - v x / v x + v x / v x		α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), u x / v x - v x / v x) l (𝓝 0),	key : filter.tendsto (λ (x : α), v x / v x) l (𝓝 1)	⊢ 1 = 0 + 1
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), u x / v x - v x / v x) l (𝓝 0),	key : filter.tendsto (λ (x : α), v x / v x) l (𝓝 1)	⊢ u / v = λ (x : α), u x / v x - v x / v x + v x / v x
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0	⊢ u ~[l] v → filter.tendsto (u / v) l (𝓝 1)		α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0	⊢ filter.tendsto (u / v) l (𝓝 1) → u ~[l] v
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0,	hequiv : u ~[l] v,	this : filter.tendsto (λ (x : α), u x / v x - v x / v x) l (𝓝 0),	key : filter.tendsto (λ (x : α), v x / v x) l (𝓝 1)	⊢ 1 = 0 + 1
α : Type u_1,	β : Type u_2,	_inst_1 : normed_field β,	u v : α → β,	l : filter α,	hz : ∀ᶠ (x : α) in l, v x ≠ 0	⊢ filter.tendsto (u / v) l (𝓝 1) → u ~[l] v
α : Type u_1,	E : Type u_3,	F : Type u_4,	_inst_1 : has_norm E,	_inst_2 : has_norm F,	c : ℝ,	f : α → E,	g : α → F,	l : filter α,	h : asymptotics.is_O_with c f g l	⊢ asymptotics.is_O f g l
α : Type u_1,	E : Type u_3,	F : Type u_4,	_inst_1 : has_norm E,	_inst_2 : has_norm F,	c : ℝ,	f : α → E,	g : α → F,	l : filter α,	h : asymptotics.is_O_with c f g l	⊢ asymptotics.is_O f g l
α : Type u_1,	E : Type u_3,	F : Type u_4,	_inst_1 : has_norm E,	_inst_2 : has_norm F,	c : ℝ,	f : α → E,	g : α → F,	l : filter α,	h : asymptotics.is_O_with c f g l	⊢ ∃ (c : ℝ), asymptotics.is_O_with c f g l
α : Type u_1,	E' : Type u_6,	F' : Type u_7,	_inst_4 : normed_group E',	_inst_5 : normed_group F',	f' : α → E',	g' : α → F',	h : ∀ (x : α), g' x = 0 → f' x = 0,	h' : asymptotics.is_O f' g' filter.cofinite,	_let_match : (∃ (C : ℝ) (H : C > 0), ∀ ⦃x : α⦄, g' x ≠ 0 → ∥f' x∥ ≤ C * ∥g' x∥) → (∃ (C : ℝ), ∀ (x : α), ∥f' x∥ ≤ C * ∥g' x∥),	C : ℝ,	C₀ : C > 0,	hC : ∀ ⦃x : α⦄, g' x ≠ 0 → ∥f' x∥ ≤ C * ∥g' x∥,	x : α,	hx : g' x = 0	⊢ ∥f' x∥ ≤ C * ∥g' x∥
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	E : Type u_3,	_inst_3 : has_norm E,	F : Type u_4,	_inst_4 : has_norm F,	e : local_homeomorph α β,	b : β,	hb : b ∈ e.to_local_equiv.target,	f : β → E,	g : β → F	⊢ (∃ (c : ℝ), asymptotics.is_O_with c f g (𝓝 b)) ↔ ∃ (c : ℝ), asymptotics.is_O_with c (f ∘ ⇑e) (g ∘ ⇑e) (𝓝 (⇑(e.symm) b))
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	E : Type u_3,	_inst_3 : has_norm E,	F : Type u_4,	_inst_4 : has_norm F,	e : local_homeomorph α β,	b : β,	hb : b ∈ e.to_local_equiv.target,	f : β → E,	g : β → F	⊢ asymptotics.is_O f g (𝓝 b) ↔ asymptotics.is_O (f ∘ ⇑e) (g ∘ ⇑e) (𝓝 (⇑(e.symm) b))
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	E : Type u_3,	_inst_3 : has_norm E,	F : Type u_4,	_inst_4 : has_norm F,	e : α ≃ₜ β,	b : β,	f : β → E,	g : β → F	⊢ (∃ (c : ℝ), asymptotics.is_O_with c f g (𝓝 b)) ↔ ∃ (c : ℝ), asymptotics.is_O_with c (f ∘ ⇑e) (g ∘ ⇑e) (𝓝 (⇑(e.symm) b))
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	E : Type u_3,	_inst_3 : has_norm E,	F : Type u_4,	_inst_4 : has_norm F,	e : α ≃ₜ β,	b : β,	f : β → E,	g : β → F	⊢ asymptotics.is_O f g (𝓝 b) ↔ asymptotics.is_O (f ∘ ⇑e) (g ∘ ⇑e) (𝓝 (⇑(e.symm) b))
α : Type u_1,	E' : Type u_6,	F' : Type u_7,	_inst_4 : normed_group E',	_inst_5 : normed_group F',	f' : α → E',	g' : α → F',	l : filter α,	_inst_11 : subsingleton E',	c : ℝ,	hc : 0 < c	⊢ ∀ᶠ (x : α) in l, ∥f' x∥ ≤ c * ∥g' x∥
α : Type u_1,	F : Type u_4,	E' : Type u_6,	_inst_2 : has_norm F,	_inst_4 : normed_group E',	c : ℝ,	g : α → F,	f' : α → E',	l : filter α	⊢ asymptotics.is_O_with c (λ (x : α), -f' x) g l ↔ asymptotics.is_O_with c f' g l
α : Type u_1,	F : Type u_4,	E' : Type u_6,	_inst_2 : has_norm F,	_inst_4 : normed_group E',	g : α → F,	l : filter α,	f₁ f₂ : α → E',	h₁ : asymptotics.is_o f₁ g l,	h₂ : asymptotics.is_o f₂ g l	⊢ asymptotics.is_o (λ (x : α), f₁ x - f₂ x) g l
α : Type u_1,	E : Type u_3,	F : Type u_4,	_inst_1 : has_norm E,	_inst_2 : has_norm F,	c : ℝ,	f : α → E,	g : α → F,	l : filter α	⊢ asymptotics.is_O_with c f g l ↔ ∀ᶠ (x : α) in l, ∥f x∥ ≤ c * ∥g x∥
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	x : 𝕜,	s : set 𝕜,	𝔸 : Type u_2,	_inst_7 : normed_ring 𝔸,	_inst_9 : normed_algebra 𝕜 𝔸,	c d : 𝕜 → 𝔸,	c' d' : 𝔸,	hc : has_deriv_within_at c c' s x,	hd : has_deriv_within_at d d' s x	⊢ has_deriv_within_at (λ (y : 𝕜), c y * d y) (c' * d x + c x * d') s x
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	x : 𝕜,	s : set 𝕜,	𝔸 : Type u_2,	_inst_7 : normed_ring 𝔸,	_inst_9 : normed_algebra 𝕜 𝔸,	c d : 𝕜 → 𝔸,	c' d' : 𝔸,	hc : has_deriv_within_at c c' s x,	hd : has_deriv_within_at d d' s x,	this : has_deriv_within_at (λ (y : 𝕜), c y * d y) (⇑(c x • 1.smul_right d' + (1.smul_right c').smul_right (d x)) 1) s x	⊢ has_deriv_within_at (λ (y : 𝕜), c y * d y) (c' * d x + c x * d') s x
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	x : 𝕜,	c : 𝕜 → 𝕜,	d : 𝕜	⊢ deriv (λ (x : 𝕜), c x / d) x = deriv c x / d
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	x : 𝕜,	s : set 𝕜,	p : polynomial 𝕜,	hxs : unique_diff_within_at 𝕜 s x	⊢ deriv_within (λ (x : 𝕜), polynomial.eval x p) s x = polynomial.eval x (⇑polynomial.derivative p)
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	x : 𝕜,	s : set 𝕜,	p : polynomial 𝕜,	hxs : unique_diff_within_at 𝕜 s x	⊢ deriv (λ (x : 𝕜), polynomial.eval x p) x = polynomial.eval x (⇑polynomial.derivative p)
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	F : Type v,	_inst_2 : normed_group F,	_inst_3 : normed_space 𝕜 F,	f : 𝕜 → F,	f' : F,	x : 𝕜,	_inst_6 : partial_order 𝕜	⊢ has_deriv_within_at f f' (set.Ioi x) x ↔ has_deriv_within_at f f' (set.Ici x) x
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	F : Type v,	_inst_2 : normed_group F,	_inst_3 : normed_space 𝕜 F,	f : 𝕜 → F,	f' : F,	x : 𝕜,	s t : set 𝕜,	hs : has_deriv_within_at f f' s x,	ht : has_deriv_within_at f f' t x	⊢ has_deriv_within_at f f' (s ∪ t) x
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	F : Type v,	_inst_2 : normed_group F,	_inst_3 : normed_space 𝕜 F,	f : 𝕜 → F,	f' : F,	x : 𝕜,	s t : set 𝕜,	hs : has_deriv_within_at f f' s x,	ht : has_deriv_within_at f f' t x	⊢ has_deriv_at_filter f f' x (𝓝[s] x ⊔ 𝓝[t] x)
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	F : Type v,	_inst_2 : normed_group F,	_inst_3 : normed_space 𝕜 F,	f : 𝕜 → F,	x : 𝕜	⊢ 1.smul_right (deriv f x) = fderiv 𝕜 f x
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	F : Type v,	_inst_2 : normed_group F,	_inst_3 : normed_space 𝕜 F,	f : 𝕜 → F,	f' : F,	x : 𝕜,	c : 𝕜 → 𝕜,	c' : 𝕜,	hc : has_strict_deriv_at c c' x,	hf : has_strict_deriv_at f f' x	⊢ has_strict_deriv_at (λ (y : 𝕜), c y • f y) (c x • f' + c' • f x) x
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	F : Type v,	_inst_2 : normed_group F,	_inst_3 : normed_space 𝕜 F,	f : 𝕜 → F,	f' : F,	x : 𝕜,	L : filter 𝕜,	h : has_deriv_at_filter f f' x L	⊢ has_deriv_at_filter (λ (x : 𝕜), -f x) (-f') x L
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	F : Type v,	_inst_2 : normed_group F,	_inst_3 : normed_space 𝕜 F,	f g : 𝕜 → F,	f' g' : F,	x : 𝕜,	L : filter 𝕜,	hf : has_deriv_at_filter f f' x L,	hg : has_deriv_at_filter g g' x L	⊢ has_deriv_at_filter (λ (x : 𝕜), f x - g x) (f' - g') x L
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	x : E,	s : set E,	hxs : unique_diff_within_at 𝕜 s x,	c : F,	hf : ¬differentiable_within_at 𝕜 f s x	⊢ fderiv_within 𝕜 (λ (y : E), f y + c) s x = fderiv_within 𝕜 f s x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	x : E,	s : set E,	hxs : unique_diff_within_at 𝕜 s x,	c : F,	hf : ¬differentiable_within_at 𝕜 f s x	⊢ ¬differentiable_within_at 𝕜 (λ (y : E), f y + c) s x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v)	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v)	⊢ 𝓝[s] x = ?m_1
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v)	⊢ filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v)	⊢ filter.tendsto (λ (n : α), x + d n) l (𝓝[s] (x + 0))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v)	⊢ filter.tendsto (λ (n : α), x + d n) l (𝓝 (x + 0)) ∧ filter.tendsto (λ (n : α), x + d n) l (𝓟 s)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v)	⊢ filter.tendsto (λ (n : α), x + d n) l (𝓝 (x + 0))		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v)	⊢ filter.tendsto (λ (n : α), x + d n) l (𝓟 s)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v)	⊢ filter.tendsto (λ (n : α), x + d n) l (𝓝 (x + 0))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v)	⊢ filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x)		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x)	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v)	⊢ filter.tendsto (λ (n : α), x + d n) l (𝓟 s)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x)	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x)	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l	⊢ asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (d n)) d l
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l,	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (d n)) d l	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l,	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (d n)) d l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), c n • d n) l	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l,	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (d n)) d l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), c n • d n) l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), 1) l	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l,	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (d n)) d l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), c n • d n) l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), 1) l,	L1 : filter.tendsto (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) l (𝓝 0)	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l,	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (d n)) d l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), c n • d n) l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), 1) l,	L1 : filter.tendsto (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) l (𝓝 0),	L2 : filter.tendsto (λ (n : α), ⇑f' (c n • d n)) l (𝓝 (⇑f' v))	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l,	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (d n)) d l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), c n • d n) l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), 1) l,	L1 : filter.tendsto (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) l (𝓝 0),	L2 : filter.tendsto (λ (n : α), ⇑f' (c n • d n)) l (𝓝 (⇑f' v)),	L3 : filter.tendsto (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n)) + ⇑f' (c n • d n)) l (𝓝 (0 + ⇑f' v))	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l,	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (d n)) d l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), c n • d n) l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), 1) l,	L1 : filter.tendsto (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) l (𝓝 0),	L2 : filter.tendsto (λ (n : α), ⇑f' (c n • d n)) l (𝓝 (⇑f' v)),	L3 : filter.tendsto (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n)) + ⇑f' (c n • d n)) l (𝓝 (0 + ⇑f' v))	⊢ (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n)) + ⇑f' (c n • d n)) = λ (n : α), c n • (f (x + d n) - f x)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l,	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (d n)) d l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), c n • d n) l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), 1) l,	L1 : filter.tendsto (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) l (𝓝 0),	L2 : filter.tendsto (λ (n : α), ⇑f' (c n • d n)) l (𝓝 (⇑f' v)),	L3 : filter.tendsto (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n)) + ⇑f' (c n • d n)) l (𝓝 (0 + ⇑f' v)),	n : α	⊢ c n • (f (x + d n) - f x - ⇑f' (d n)) + ⇑f' (c n • d n) = c n • (f (x + d n) - f x)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s : set E,	h : has_fderiv_within_at f f' s x,	α : Type u_4,	l : filter α,	c : α → 𝕜,	d : α → E,	v : E,	dtop : ∀ᶠ (n : α) in l, x + d n ∈ s,	clim : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	cdlim : filter.tendsto (λ (n : α), c n • d n) l (𝓝 v),	tendsto_arg : filter.tendsto (λ (n : α), x + d n) l (𝓝[s] x),	this : asymptotics.is_o (λ (y : E), f y - f x - ⇑f' (y - x)) (λ (y : E), y - x) (𝓝[s] x),	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (x + d n - x)) (λ (n : α), x + d n - x) l,	this : asymptotics.is_o (λ (n : α), f (x + d n) - f x - ⇑f' (d n)) d l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), c n • d n) l,	this : asymptotics.is_o (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) (λ (n : α), 1) l,	L1 : filter.tendsto (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n))) l (𝓝 0),	L2 : filter.tendsto (λ (n : α), ⇑f' (c n • d n)) l (𝓝 (⇑f' v)),	L3 : filter.tendsto (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n)) + ⇑f' (c n • d n)) l (𝓝 (0 + ⇑f' v)),	this : (λ (n : α), c n • (f (x + d n) - f x - ⇑f' (d n)) + ⇑f' (c n • d n)) = λ (n : α), c n • (f (x + d n) - f x)	⊢ filter.tendsto (λ (n : α), c n • (f (x + d n) - f x)) l (𝓝 (⇑f' v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	iso : E ≃L[𝕜] F,	f : G → E,	x : G,	f' : G →L[𝕜] E	⊢ has_strict_fderiv_at (⇑iso ∘ f) (↑iso.comp f') x ↔ has_strict_fderiv_at f f' x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	iso : E ≃L[𝕜] F,	f : G → E,	x : G,	f' : G →L[𝕜] E,	H : has_strict_fderiv_at (⇑iso ∘ f) (↑iso.comp f') x	⊢ has_strict_fderiv_at f f' x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	iso : E ≃L[𝕜] F,	f : G → E,	x : G,	f' : G →L[𝕜] E,	H : has_strict_fderiv_at (⇑iso ∘ f) (↑iso.comp f') x	⊢ has_strict_fderiv_at f f' x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	iso : E ≃L[𝕜] F,	f : G → E,	x : G,	f' : G →L[𝕜] E,	H : has_strict_fderiv_at (⇑iso ∘ f) (↑iso.comp f') x	⊢ has_strict_fderiv_at f f' x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	iso : E ≃L[𝕜] F,	f : G → E,	x : G,	f' : G →L[𝕜] E,	H : has_strict_fderiv_at (⇑iso ∘ f) (↑iso.comp f') x	⊢ f = λ (x : G), ⇑(iso.symm) ((⇑iso ∘ f) x)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	iso : E ≃L[𝕜] F,	f : G → E,	x : G,	f' : G →L[𝕜] E,	H : has_strict_fderiv_at (⇑iso ∘ f) (↑iso.comp f') x	⊢ f' = ↑(iso.symm).comp (↑iso.comp f')
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	iso : E ≃L[𝕜] F,	f : G → E,	x : G,	f' : G →L[𝕜] E,	H : has_strict_fderiv_at (⇑iso ∘ f) (↑iso.comp f') x,	z : G	⊢ f z = ⇑(iso.symm) ((⇑iso ∘ f) z)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	iso : E ≃L[𝕜] F,	f : G → E,	x : G,	f' : G →L[𝕜] E,	H : has_strict_fderiv_at (⇑iso ∘ f) (↑iso.comp f') x,	z : G	⊢ ⇑f' z = ⇑(↑(iso.symm).comp (↑iso.comp f')) z
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	L : filter E,	x' : E,	hx' : ∥x' - x∥ = 0	⊢ ∥f x - f x - ⇑f' (x - x)∥ = 0
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	L : filter E,	x' : E,	hx' : ∥x' - x∥ = 0	⊢ ∥f x' - f x - ⇑f' (x' - x)∥ = 0
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	L : filter E,	h : ∀ (x' : E), ∥x' - x∥ = 0 → ∥f x' - f x - ⇑f' (x' - x)∥ = 0	⊢ has_fderiv_at_filter f f' x L ↔ filter.tendsto (λ (x' : E), ∥x' - x∥⁻¹ * ∥f x' - f x - ⇑f' (x' - x)∥) L (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	L : filter E,	h : ∀ (x' : E), ∥x' - x∥ = 0 → ∥f x' - f x - ⇑f' (x' - x)∥ = 0	⊢ asymptotics.is_o (λ (x' : E), f x' - f x - ⇑f' (x' - x)) (λ (x' : E), x' - x) L ↔ filter.tendsto (λ (x' : E), ∥x' - x∥⁻¹ * ∥f x' - f x - ⇑f' (x' - x)∥) L (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	L : filter E,	h : ∀ (x' : E), ∥x' - x∥ = 0 → ∥f x' - f x - ⇑f' (x' - x)∥ = 0	⊢ filter.tendsto (λ (x_1 : E), (λ (x' : E), ∥f x' - f x - ⇑f' (x' - x)∥) x_1 / (λ (x' : E), ∥x' - x∥) x_1) L (𝓝 0) ↔ filter.tendsto (λ (x' : E), ∥x' - x∥⁻¹ * ∥f x' - f x - ⇑f' (x' - x)∥) L (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x₀ : E,	hf : has_fderiv_at f f' x₀,	s : set E,	hs : s ∈ 𝓝 x₀,	C : ℝ≥0,	hlip : lipschitz_on_with C f s	⊢ ∥f'∥ ≤ ↑C
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x₀ : E,	hf : has_fderiv_at f f' x₀,	s : set E,	hs : s ∈ 𝓝 x₀,	C : ℝ≥0,	hlip : lipschitz_on_with C f s,	ε : ℝ,	ε0 : 0 < ε	⊢ 0 ≤ ↑C + ε		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x₀ : E,	hf : has_fderiv_at f f' x₀,	s : set E,	hs : s ∈ 𝓝 x₀,	C : ℝ≥0,	hlip : lipschitz_on_with C f s,	ε : ℝ,	ε0 : 0 < ε	⊢ ∀ᶠ (x : E) in 𝓝 0, ∥⇑f' x∥ ≤ (↑C + ε) * ∥x∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x₀ : E,	hf : has_fderiv_at f f' x₀,	s : set E,	hs : s ∈ 𝓝 x₀,	C : ℝ≥0,	hlip : lipschitz_on_with C f s,	ε : ℝ,	ε0 : 0 < ε,	hs' : s ∈ 𝓝 x₀	⊢ ∀ᶠ (x : E) in 𝓝 0, ∥⇑f' x∥ ≤ (↑C + ε) * ∥x∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x₀ : E,	hf : has_fderiv_at f f' x₀,	s : set E,	hs : s ∈ 𝓝 x₀,	C : ℝ≥0,	hlip : lipschitz_on_with C f s,	ε : ℝ,	ε0 : 0 < ε	⊢ ∀ᶠ (x : E) in 𝓝 0, ∥⇑f' x∥ ≤ (↑C + ε) * ∥x∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x₀ : E,	hf : has_fderiv_at f f' x₀,	s : set E,	hs : s ∈ 𝓝 x₀,	C : ℝ≥0,	hlip : lipschitz_on_with C f s,	ε : ℝ,	ε0 : 0 < ε,	hs' : has_add.add x₀ ⁻¹' s ∈ 𝓝 0	⊢ ∀ᶠ (x : E) in 𝓝 0, ∥⇑f' x∥ ≤ (↑C + ε) * ∥x∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x₀ : E,	hf : has_fderiv_at f f' x₀,	s : set E,	hs : s ∈ 𝓝 x₀,	C : ℝ≥0,	hlip : lipschitz_on_with C f s,	ε : ℝ,	ε0 : 0 < ε,	hs' : has_add.add x₀ ⁻¹' s ∈ 𝓝 0	⊢ ∀ (a : E), ∥f (x₀ + a) - f x₀ - ⇑f' a∥ ≤ ε * ∥a∥ → a ∈ has_add.add x₀ ⁻¹' s → ∥⇑f' a∥ ≤ (↑C + ε) * ∥a∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x₀ : E,	hf : has_fderiv_at f f' x₀,	s : set E,	hs : s ∈ 𝓝 x₀,	C : ℝ≥0,	hlip : lipschitz_on_with C f s,	ε : ℝ,	ε0 : 0 < ε,	hs' : has_add.add x₀ ⁻¹' s ∈ 𝓝 0,	y : E,	hy : ∥f (x₀ + y) - f x₀ - ⇑f' y∥ ≤ ε * ∥y∥,	hys : y ∈ has_add.add x₀ ⁻¹' s	⊢ ∥⇑f' y∥ ≤ (↑C + ε) * ∥y∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x₀ : E,	hf : has_fderiv_at f f' x₀,	s : set E,	hs : s ∈ 𝓝 x₀,	C : ℝ≥0,	hlip : lipschitz_on_with C f s,	ε : ℝ,	ε0 : 0 < ε,	hs' : has_add.add x₀ ⁻¹' s ∈ 𝓝 0,	y : E,	hy : ∥f (x₀ + y) - f x₀ - ⇑f' y∥ ≤ ε * ∥y∥,	hys : y ∈ has_add.add x₀ ⁻¹' s,	this : ∥f (x₀ + y) - f x₀∥ ≤ ↑C * ∥x₀ + y - x₀∥	⊢ ∥⇑f' y∥ ≤ (↑C + ε) * ∥y∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x₀ : E,	hf : has_fderiv_at f f' x₀,	s : set E,	hs : s ∈ 𝓝 x₀,	C : ℝ≥0,	hlip : lipschitz_on_with C f s,	ε : ℝ,	ε0 : 0 < ε,	hs' : has_add.add x₀ ⁻¹' s ∈ 𝓝 0,	y : E,	hy : ∥f (x₀ + y) - f x₀ - ⇑f' y∥ ≤ ε * ∥y∥,	hys : y ∈ has_add.add x₀ ⁻¹' s,	this : ∥f (x₀ + y) - f x₀∥ ≤ ↑C * ∥y∥	⊢ ∥⇑f' y∥ ≤ (↑C + ε) * ∥y∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	f' : E →L[𝕜] F,	x : E,	s t : set E,	h : t ∈ 𝓝 x	⊢ has_fderiv_within_at f f' (s ∩ t) x ↔ has_fderiv_within_at f f' s x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	r ε : ℝ,	L : E →L[𝕜] F,	x : E,	hx : x ∈ fderiv_measurable_aux.A f L r ε,	y z : E,	hy : y ∈ metric.closed_ball x (r / 2),	hz : z ∈ metric.closed_ball x (r / 2)	⊢ ∥f z - f y - ⇑L (z - y)∥ ≤ ε * r
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	r ε : ℝ,	L : E →L[𝕜] F,	x y z : E,	hy : y ∈ metric.closed_ball x (r / 2),	hz : z ∈ metric.closed_ball x (r / 2),	r' : ℝ,	r'mem : r' ∈ set.Ioc (r / 2) r,	hr' : ∀ (y z : E), y ∈ metric.ball x r' → z ∈ metric.ball x r' → ∥f z - f y - ⇑L (z - y)∥ ≤ ε * r	⊢ ∥f z - f y - ⇑L (z - y)∥ ≤ ε * r
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	F : Type u_2,	_inst_2 : normed_group F,	_inst_3 : normed_space 𝕜 F,	n : ℕ,	f : 𝕜 → F,	s : set 𝕜,	x : 𝕜	⊢ iterated_deriv_within n f s x = (⇑((continuous_multilinear_map.pi_field_equiv 𝕜 (fin n) F).symm) ∘ iterated_fderiv_within 𝕜 n f s) x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	F : Type u_2,	_inst_2 : normed_group F,	_inst_3 : normed_space 𝕜 F,	n : ℕ,	f : 𝕜 → F,	s : set 𝕜	⊢ iterated_deriv_within n f s = ⇑((continuous_multilinear_map.pi_field_equiv 𝕜 (fin n) F).symm) ∘ iterated_fderiv_within 𝕜 n f s
E : Type u,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : E → ℝ,	a : E,	s : set E,	h : is_local_max_on f s a,	y : E,	hy : y ∈ pos_tangent_cone_at s a,	hy' : -y ∈ pos_tangent_cone_at s a,	hf : ¬differentiable_within_at ℝ f s a	⊢ ⇑(fderiv_within ℝ f s a) y = 0
E : Type u,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : E → ℝ,	a : E,	s : set E,	h : is_local_max_on f s a,	y : E,	hy : y ∈ pos_tangent_cone_at s a,	hy' : -y ∈ pos_tangent_cone_at s a,	hf : ¬differentiable_within_at ℝ f s a	⊢ ⇑0 y = 0
E : Type u,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : E → ℝ,	a : E,	f' : E →L[ℝ] ℝ,	h : is_local_min f a,	hf : has_fderiv_at f f' a	⊢ f' = 0
E : Type u,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : E → ℝ,	a : E,	f' : E →L[ℝ] ℝ,	h : is_local_min f a,	hf : has_fderiv_at f f' a,	y : E	⊢ ⇑f' y = ⇑0 y
E : Type u,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : E → ℝ,	a : E,	f' : E →L[ℝ] ℝ,	h : is_local_min f a,	hf : has_fderiv_at f f' a,	y : E	⊢ ⇑f' y = ⇑0 y
E : Type u,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : E → ℝ,	a : E,	f' : E →L[ℝ] ℝ,	h : is_local_min f a,	hf : has_fderiv_at f f' a,	y : E	⊢ ⇑f' y = ⇑0 y
E : Type u,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : E → ℝ,	a : E,	f' : E →L[ℝ] ℝ,	h : is_local_min f a,	hf : has_fderiv_at f f' a,	y : E	⊢ y ∈ set.univ
E : Type u,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : E → ℝ,	a : E,	f' : E →L[ℝ] ℝ,	h : is_local_min f a,	hf : has_fderiv_at f f' a,	y : E	⊢ -y ∈ set.univ
E : Type u,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : E → ℝ,	a : E,	f' : E →L[ℝ] ℝ,	h : is_local_min f a,	hf : has_fderiv_at f f' a,	y : E	⊢ y ∈ pos_tangent_cone_at set.univ a
E : Type u,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : E → ℝ,	a : E,	f' : E →L[ℝ] ℝ,	h : is_local_min f a,	hf : has_fderiv_at f f' a,	y : E	⊢ -y ∈ pos_tangent_cone_at set.univ a
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : ℝ → E,	a b C : ℝ,	hf : differentiable_on ℝ f (set.Icc a b),	bound : ∀ (x : ℝ), x ∈ set.Ico a b → ∥deriv_within f (set.Icc a b) x∥ ≤ C	⊢ ∀ (x : ℝ), x ∈ set.Icc a b → ∥f x - f a∥ ≤ C * (x - a)
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	f : ℝ → E,	a b C : ℝ,	hf : differentiable_on ℝ f (set.Icc a b),	bound : ∀ (x : ℝ), x ∈ set.Ico a b → ∥deriv_within f (set.Icc a b) x∥ ≤ C	⊢ ∀ (x : ℝ), x ∈ set.Icc a b → has_deriv_within_at (λ (x : ℝ), f x) (deriv_within f (set.Icc a b) x) (set.Icc a b) x
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb)	⊢ ∃ (c : ℝ) (H : c ∈ set.Ioo a b), (lgb - lga) * f' c = (lfb - lfa) * g' c
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x	⊢ ∃ (c : ℝ) (H : c ∈ set.Ioo a b), (lgb - lga) * f' c = (lfb - lfa) * g' c
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x	⊢ filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga))
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	this : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 ((lgb - lga) * lfa - (lfb - lfa) * lga))	⊢ filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga))
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x	⊢ filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga))		f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga))	⊢ ∃ (c : ℝ) (H : c ∈ set.Ioo a b), (lgb - lga) * f' c = (lfb - lfa) * g' c
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	this : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 ((lgb - lga) * lfa - (lfb - lfa) * lga))	⊢ lgb * lfa - lfb * lga = (lgb - lga) * lfa - (lfb - lfa) * lga
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga))	⊢ ∃ (c : ℝ) (H : c ∈ set.Ioo a b), (lgb - lga) * f' c = (lfb - lfa) * g' c
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga))	⊢ filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga))
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	this : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 ((lgb - lga) * lfb - (lfb - lfa) * lgb))	⊢ filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga))
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga))	⊢ filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga))		f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	hhb : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga))	⊢ ∃ (c : ℝ) (H : c ∈ set.Ioo a b), (lgb - lga) * f' c = (lfb - lfa) * g' c
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	this : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 ((lgb - lga) * lfb - (lfb - lfa) * lgb))	⊢ lgb * lfa - lfb * lga = (lgb - lga) * lfb - (lfb - lfa) * lgb
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	hhb : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga))	⊢ ∃ (c : ℝ) (H : c ∈ set.Ioo a b), (lgb - lga) * f' c = (lfb - lfa) * g' c
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	hhb : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga)),	h' : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f' x - (lfb - lfa) * g' x	⊢ ∃ (c : ℝ) (H : c ∈ set.Ioo a b), (lgb - lga) * f' c = (lfb - lfa) * g' c
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	hhb : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga)),	h' : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f' x - (lfb - lfa) * g' x	⊢ ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at h (h' x) x
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	hhb : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga)),	h' : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f' x - (lfb - lfa) * g' x,	x : ℝ,	hx : x ∈ set.Ioo a b	⊢ has_deriv_at h (h' x) x
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	hhb : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga)),	h' : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f' x - (lfb - lfa) * g' x	⊢ ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at h (h' x) x		f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	hhb : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga)),	h' : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f' x - (lfb - lfa) * g' x,	hhh' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at h (h' x) x	⊢ ∃ (c : ℝ) (H : c ∈ set.Ioo a b), (lgb - lga) * f' c = (lfb - lfa) * g' c
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	hhb : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga)),	h' : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f' x - (lfb - lfa) * g' x,	hhh' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at h (h' x) x	⊢ ∃ (c : ℝ) (H : c ∈ set.Ioo a b), (lgb - lga) * f' c = (lfb - lfa) * g' c
f f' : ℝ → ℝ,	a b : ℝ,	hab : a < b,	g g' : ℝ → ℝ,	lfa lga lfb lgb : ℝ,	hff' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at f (f' x) x,	hgg' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at g (g' x) x,	hfa : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 lfa),	hga : filter.tendsto g (𝓝[set.Ioi a] a) (𝓝 lga),	hfb : filter.tendsto f (𝓝[set.Iio b] b) (𝓝 lfb),	hgb : filter.tendsto g (𝓝[set.Iio b] b) (𝓝 lgb),	h : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f x - (lfb - lfa) * g x,	hha : filter.tendsto h (𝓝[set.Ioi a] a) (𝓝 (lgb * lfa - lfb * lga)),	hhb : filter.tendsto h (𝓝[set.Iio b] b) (𝓝 (lgb * lfa - lfb * lga)),	h' : ℝ → ℝ := λ (x : ℝ), (lgb - lga) * f' x - (lfb - lfa) * g' x,	hhh' : ∀ (x : ℝ), x ∈ set.Ioo a b → has_deriv_at h (h' x) x,	c : ℝ,	cmem : c ∈ set.Ioo a b,	hc : (λ (x : ℝ), h' x) c = 0	⊢ ∃ (c : ℝ) (H : c ∈ set.Ioo a b), (lgb - lga) * f' c = (lfb - lfa) * g' c
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀	⊢ ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀	⊢ metric.ball x₀ ε ⊆ {x : H | (λ (x : H), ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥) x}
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ x ∈ {x : H | (λ (x : H), ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥) x}
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ measure_theory.integrable (λ (a : α), F x a) μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ measure_theory.integrable (λ (a : α), F x₀ a) μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ measure_theory.integrable (λ (a : α), F x a - F x₀ a) μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ measure_theory.integrable (λ (a : α), ⇑(F' a) (x - x₀)) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀	⊢ ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∫ (a : α), ∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀)) ∂μ = 0
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ filter.tendsto (λ (e : H), ∫ (a : α), ∥e - x₀∥⁻¹ • (F e a - F x₀ a - ⇑(F' a) (e - x₀)) ∂μ) (𝓝 x₀) (𝓝 (∫ (a : α), ∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀)) ∂μ))
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ (𝓝 x₀).is_countably_generated		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᶠ (n : H) in 𝓝 x₀, ae_measurable (λ (a : α), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ae_measurable (λ (a : α), ∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))) μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᶠ (n : H) in 𝓝 x₀, ∀ᵐ (a : α) ∂μ, ∥∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))∥ ≤ ?m_1 a		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ measure_theory.integrable ?m_1 μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᵐ (a : α) ∂μ, filter.tendsto (λ (n : H), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) (𝓝 x₀) (𝓝 (∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))))		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ α → ℝ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ (𝓝 x₀).is_countably_generated
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᶠ (n : H) in 𝓝 x₀, ae_measurable (λ (a : α), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ (a : H), a ∈ metric.ball x₀ ε → ae_measurable (λ (a_1 : α), ∥a - x₀∥⁻¹ • (F a a_1 - F x₀ a_1 - ⇑(F' a_1) (a - x₀))) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ ae_measurable (λ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ ae_measurable (λ (i : α), F x i - F x₀ i - ⇑(F' i) (x - x₀)) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᶠ (n : H) in 𝓝 x₀, ae_measurable (λ (a : α), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ae_measurable (λ (a : α), ∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))) μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᶠ (n : H) in 𝓝 x₀, ∀ᵐ (a : α) ∂μ, ∥∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))∥ ≤ ?m_1 a		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ measure_theory.integrable ?m_1 μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᵐ (a : α) ∂μ, filter.tendsto (λ (n : H), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) (𝓝 x₀) (𝓝 (∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))))		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ α → ℝ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ae_measurable (λ (a : α), ∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))) μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᶠ (n : H) in 𝓝 x₀, ∀ᵐ (a : α) ∂μ, ∥∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))∥ ≤ ?m_1 a		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ measure_theory.integrable ?m_1 μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᵐ (a : α) ∂μ, filter.tendsto (λ (n : H), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) (𝓝 x₀) (𝓝 (∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))))		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ α → ℝ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ae_measurable (λ (a : α), ∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᶠ (n : H) in 𝓝 x₀, ∀ᵐ (a : α) ∂μ, ∥∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))∥ ≤ ?m_1 a
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ metric.ball x₀ ε ⊆ {x : H | (λ (n : H), ∀ᵐ (a : α) ∂μ, ∥∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))∥ ≤ ?m_1 a) x}
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε	⊢ x ∈ {x : H | (λ (n : H), ∀ᵐ (a : α) ∂μ, ∥∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))∥ ≤ ?m_1 a) x}
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε	⊢ ∀ (x_1 : α), (λ (x : α), has_fderiv_at (λ (x_1 : H), F x_1 x) (F' x) x₀ ∧ lipschitz_on_with (⇑real.nnabs (bound x)) (λ (x_1 : H), F x_1 x) (metric.ball x₀ ε)) x_1 → ∥∥x - x₀∥⁻¹ • (F x x_1 - F x₀ x_1 - ⇑(F' x_1) (x - x₀))∥ ≤ ?m_1 x_1
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε)	⊢ ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))∥ ≤ ?m_1 a
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε)	⊢ ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))∥ ≤ b a + ∥F' a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε)	⊢ ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε)	⊢ ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))∥ ≤ b a + ∥F' a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∀ (x : H), x ∈ metric.ball x₀ ε → ∀ (y : H), y ∈ metric.ball x₀ ε → ∥F x a - F y a∥ ≤ ↑(⇑real.nnabs (bound a)) * ∥x - y∥	⊢ ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))∥ ≤ b a + ∥F' a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))∥ = ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a) - ∥x - x₀∥⁻¹ • ⇑(F' a) (x - x₀)∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a)∥ + ∥∥x - x₀∥⁻¹ • ⇑(F' a) (x - x₀)∥ = ∥x - x₀∥⁻¹ * ∥F x a - F x₀ a∥ + ∥x - x₀∥⁻¹ * ∥⇑(F' a) (x - x₀)∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a)∥ + ∥∥x - x₀∥⁻¹ • ⇑(F' a) (x - x₀)∥ = ∥x - x₀∥⁻¹ * ∥F x a - F x₀ a∥ + ∥x - x₀∥⁻¹ * ∥⇑(F' a) (x - x₀)∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ 0 ≤ ∥x - x₀∥⁻¹
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥x - x₀∥⁻¹ * ∥F x a - F x₀ a∥ ≤ ∥x - x₀∥⁻¹ * (b a * ∥x - x₀∥)		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥x - x₀∥⁻¹ * ∥⇑(F' a) (x - x₀)∥ ≤ ∥x - x₀∥⁻¹ * (∥F' a∥ * ∥x - x₀∥)		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥x - x₀∥⁻¹ * (b a * ∥x - x₀∥) + ∥x - x₀∥⁻¹ * (∥F' a∥ * ∥x - x₀∥) ≤ b a + ∥F' a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥x - x₀∥⁻¹ * ∥⇑(F' a) (x - x₀)∥ ≤ ∥x - x₀∥⁻¹ * (∥F' a∥ * ∥x - x₀∥)		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥x - x₀∥⁻¹ * (b a * ∥x - x₀∥) + ∥x - x₀∥⁻¹ * (∥F' a∥ * ∥x - x₀∥) ≤ b a + ∥F' a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥	⊢ ∥x - x₀∥⁻¹ * (b a * ∥x - x₀∥) + ∥x - x₀∥⁻¹ * (∥F' a∥ * ∥x - x₀∥) ≤ b a + ∥F' a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥,	h : ∥x - x₀∥ = 0	⊢ ∥x - x₀∥⁻¹ * (b a * ∥x - x₀∥) + ∥x - x₀∥⁻¹ * (∥F' a∥ * ∥x - x₀∥) ≤ b a + ∥F' a∥		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥,	h : ¬∥x - x₀∥ = 0	⊢ ∥x - x₀∥⁻¹ * (b a * ∥x - x₀∥) + ∥x - x₀∥⁻¹ * (∥F' a∥ * ∥x - x₀∥) ≤ b a + ∥F' a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥,	h : ∥x - x₀∥ = 0	⊢ ∥x - x₀∥⁻¹ * (b a * ∥x - x₀∥) + ∥x - x₀∥⁻¹ * (∥F' a∥ * ∥x - x₀∥) ≤ b a + ∥F' a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᶠ (n : H) in 𝓝 x₀, ∀ᵐ (a : α) ∂μ, ∥∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))∥ ≤ ?m_1 a		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ measure_theory.integrable ?m_1 μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᵐ (a : α) ∂μ, filter.tendsto (λ (n : H), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) (𝓝 x₀) (𝓝 (∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))))		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ α → ℝ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	x : H,	hx : x ∈ metric.ball x₀ ε,	a : α,	ha_deriv : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_bound : ∥F x a - F x₀ a∥ ≤ b a * ∥x - x₀∥,	h : ¬∥x - x₀∥ = 0	⊢ ∥x - x₀∥⁻¹ * (b a * ∥x - x₀∥) + ∥x - x₀∥⁻¹ * (∥F' a∥ * ∥x - x₀∥) ≤ b a + ∥F' a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ measure_theory.integrable (λ (a : α), b a + ∥F' a∥) μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᵐ (a : α) ∂μ, filter.tendsto (λ (n : H), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) (𝓝 x₀) (𝓝 (∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))))
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ measure_theory.integrable (λ (a : α), b a + ∥F' a∥) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ᵐ (a : α) ∂μ, filter.tendsto (λ (n : H), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) (𝓝 x₀) (𝓝 (∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))))
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥	⊢ ∀ (x : α), (λ (a : α), has_fderiv_at (λ (x : H), F x a) (F' a) x₀) x → filter.tendsto (λ (n : H), ∥n - x₀∥⁻¹ • (F n x - F x₀ x - ⇑(F' x) (n - x₀))) (𝓝 x₀) (𝓝 (∥x₀ - x₀∥⁻¹ • (F x₀ x - F x₀ x - ⇑(F' x) (x₀ - x₀))))
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	a : α,	ha : has_fderiv_at (λ (x : H), F x a) (F' a) x₀	⊢ filter.tendsto (λ (n : H), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) (𝓝 x₀) (𝓝 (∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))))
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	a : α,	ha : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	this : filter.tendsto (λ (x : H), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))) (𝓝 x₀) (𝓝 0)	⊢ filter.tendsto (λ (n : H), ∥n - x₀∥⁻¹ • (F n a - F x₀ a - ⇑(F' a) (n - x₀))) (𝓝 x₀) (𝓝 (∥x₀ - x₀∥⁻¹ • (F x₀ a - F x₀ a - ⇑(F' a) (x₀ - x₀))))
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	a : α,	ha : has_fderiv_at (λ (x : H), F x a) (F' a) x₀	⊢ filter.tendsto (λ (x : H), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))) (𝓝 x₀) (𝓝 0)
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	a : α,	ha : has_fderiv_at (λ (x : H), F x a) (F' a) x₀	⊢ filter.tendsto (λ (e : H), ∥∥e - x₀∥⁻¹ • (F e a - F x₀ a - ⇑(F' a) (e - x₀))∥) (𝓝 x₀) (𝓝 0)
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	a : α,	ha : has_fderiv_at (λ (x : H), F x a) (F' a) x₀	⊢ (λ (x : H), ∥x - x₀∥⁻¹ * ∥F x a - F x₀ a - ⇑(F' a) (x - x₀)∥) = λ (x : H), ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	a : α,	ha : has_fderiv_at (λ (x : H), F x a) (F' a) x₀	⊢ (λ (x : H), ∥x - x₀∥⁻¹ * ∥F x a - F x₀ a - ⇑(F' a) (x - x₀)∥) = λ (x : H), ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))∥		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	a : α,	ha : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	this : (λ (x : H), ∥x - x₀∥⁻¹ * ∥F x a - F x₀ a - ⇑(F' a) (x - x₀)∥) = λ (x : H), ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))∥	⊢ filter.tendsto (λ (e : H), ∥∥e - x₀∥⁻¹ • (F e a - F x₀ a - ⇑(F' a) (e - x₀))∥) (𝓝 x₀) (𝓝 0)
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	a : α,	ha : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x : H	⊢ ∥x - x₀∥⁻¹ * ∥F x a - F x₀ a - ⇑(F' a) (x - x₀)∥ = ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀,	this : ∀ᶠ (x : H) in 𝓝 x₀, ∥x - x₀∥⁻¹ * ∥∫ (a : α), F x a ∂μ - ∫ (a : α), F x₀ a ∂μ - (⇑∫ (a : α), F' a ∂μ) (x - x₀)∥ = ∥∫ (a : α), ∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀)) ∂μ∥,	a : α,	ha : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	this : (λ (x : H), ∥x - x₀∥⁻¹ * ∥F x a - F x₀ a - ⇑(F' a) (x - x₀)∥) = λ (x : H), ∥∥x - x₀∥⁻¹ • (F x a - F x₀ a - ⇑(F' a) (x - x₀))∥	⊢ filter.tendsto (λ (e : H), ∥∥e - x₀∥⁻¹ • (F e a - F x₀ a - ⇑(F' a) (e - x₀))∥) (𝓝 x₀) (𝓝 0)
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀	⊢ measure_theory.integrable F' μ ∧ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε	⊢ measure_theory.integrable F' μ ∧ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹	⊢ measure_theory.integrable F' μ ∧ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a)	⊢ measure_theory.integrable F' μ ∧ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ	⊢ measure_theory.integrable F' μ ∧ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a	⊢ measure_theory.integrable F' μ ∧ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a	⊢ ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ measure_theory.integrable (F x) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ ∀ᵐ (a : α) ∂μ, ∥F x₀ a - F x a∥ ≤ ε * ∥bound a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ ∀ (x_1 : α), (λ (a : α), lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε)) x_1 → ∥F x₀ x_1 - F x x_1∥ ≤ ε * ∥bound x_1∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	x_in : x ∈ metric.ball x₀ ε,	a : α,	ha : lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε)	⊢ ∥F x₀ a - F x a∥ ≤ ε * ∥bound a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	x_in : x ∈ metric.ball x₀ ε,	a : α,	ha : ∀ (x : H), x ∈ metric.ball x₀ ε → ∀ (y : H), y ∈ metric.ball x₀ ε → ∥F x a - F y a∥ ≤ ↑(⇑real.nnabs (bound a)) * ∥x - y∥	⊢ ∥F x₀ a - F x a∥ ≤ ε * ∥bound a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	x_in : x ∈ metric.ball x₀ ε,	a : α,	ha : ∀ (x : H), x ∈ metric.ball x₀ ε → ∀ (y : H), y ∈ metric.ball x₀ ε → ∥F x a - F y a∥ ≤ ↑(⇑real.nnabs (bound a)) * ∥x - y∥	⊢ ↑(⇑real.nnabs (bound a)) * ∥x₀ - x∥ ≤ ε * ∥bound a∥
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	x_in : x ∈ metric.ball x₀ ε,	a : α,	ha : ∀ (x : H), x ∈ metric.ball x₀ ε → ∀ (y : H), y ∈ metric.ball x₀ ε → ∥F x a - F y a∥ ≤ ↑(⇑real.nnabs (bound a)) * ∥x - y∥	⊢ ∥x₀ - x∥ * abs (bound a) ≤ ε * abs (bound a)
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	x_in : x ∈ metric.ball x₀ ε	⊢ ∀ᵐ (a : α) ∂μ, ∥F x₀ a - F x a∥ ≤ ε * ∥bound a∥		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	x_in : x ∈ metric.ball x₀ ε,	this : ∀ᵐ (a : α) ∂μ, ∥F x₀ a - F x a∥ ≤ ε * ∥bound a∥	⊢ measure_theory.integrable (F x) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	a : α,	ha : ∀ (x : H), x ∈ metric.ball x₀ ε → ∀ (y : H), y ∈ metric.ball x₀ ε → ∥F x a - F y a∥ ≤ ↑(⇑real.nnabs (bound a)) * ∥x - y∥,	x_in : ∥x₀ - x∥ < ε	⊢ ∥x₀ - x∥ * abs (bound a) ≤ ε * abs (bound a)
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	x : H,	x_in : x ∈ metric.ball x₀ ε,	this : ∀ᵐ (a : α) ∂μ, ∥F x₀ a - F x a∥ ≤ ε * ∥bound a∥	⊢ measure_theory.integrable (F x) μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a	⊢ ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ	⊢ measure_theory.integrable F' μ ∧ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ	⊢ measure_theory.integrable F' μ ∧ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ	⊢ measure_theory.integrable F' μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ	⊢ ∀ᵐ (a : α) ∂μ, ∥F' a∥ ≤ b a
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ	⊢ ∀ (x : α), (λ (x : α), has_fderiv_at (λ (x_1 : H), F x_1 x) (F' x) x₀ ∧ lipschitz_on_with (⇑real.nnabs (bound x)) (λ (x_1 : H), F x_1 x) (metric.ball x₀ ε)) x → ∥F' x∥ ≤ b x
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ	⊢ ∀ᵐ (a : α) ∂μ, ∥F' a∥ ≤ b a		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	this : ∀ᵐ (a : α) ∂μ, ∥F' a∥ ≤ b a	⊢ measure_theory.integrable F' μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	a : α,	ha_diff : has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	ha_lip : lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε)	⊢ ∥F' a∥ ≤ b a
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ	⊢ measure_theory.integrable F' μ		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ	⊢ measure_theory.integrable F' μ ∧ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	this : ∀ᵐ (a : α) ∂μ, ∥F' a∥ ≤ b a	⊢ measure_theory.integrable F' μ
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ	⊢ measure_theory.integrable F' μ ∧ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ	⊢ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : measurable_space E,	_inst_7 : borel_space E,	H : Type u_3,	_inst_8 : normed_group H,	_inst_9 : normed_space ℝ H,	_inst_10 : topological_space.second_countable_topology (H →L[ℝ] E),	F : H → α → E,	F' : α → (H →L[ℝ] E),	x₀ : H,	bound : α → ℝ,	ε : ℝ,	ε_pos : 0 < ε,	hF_meas : ∀ (x : H), x ∈ metric.ball x₀ ε → ae_measurable (F x) μ,	hF_int : measure_theory.integrable (F x₀) μ,	hF'_meas : ae_measurable F' μ,	h_lipsch : ∀ᵐ (a : α) ∂μ, lipschitz_on_with (⇑real.nnabs (bound a)) (λ (x : H), F x a) (metric.ball x₀ ε),	bound_integrable : measure_theory.integrable bound μ,	h_diff : ∀ᵐ (a : α) ∂μ, has_fderiv_at (λ (x : H), F x a) (F' a) x₀,	x₀_in : x₀ ∈ metric.ball x₀ ε,	nneg : ∀ (x : H), 0 ≤ ∥x - x₀∥⁻¹,	b : α → ℝ := λ (a : α), abs (bound a),	b_int : measure_theory.integrable b μ,	b_nonneg : ∀ (a : α), 0 ≤ b a,	hF_int' : ∀ (x : H), x ∈ metric.ball x₀ ε → measure_theory.integrable (F x) μ,	hF'_int : measure_theory.integrable F' μ,	h_ball : metric.ball x₀ ε ∈ 𝓝 x₀	⊢ has_fderiv_at (λ (x : H), ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀
E : Type u_1,	_inst_1 : inner_product_space ℝ E,	c : E,	f : times_cont_diff_bump_of_inner c	⊢ function.support ⇑f = metric.ball c f.R
E : Type u_1,	_inst_1 : inner_product_space ℝ E,	c : E,	f : times_cont_diff_bump_of_inner c,	x : E	⊢ x ∈ function.support ⇑f ↔ x ∈ metric.ball c f.R
E : Type u_1,	_inst_1 : inner_product_space ℝ E,	c : E,	f : times_cont_diff_bump_of_inner c,	x : E,	this : ⇑f x ≠ 0 ↔ has_dist.dist x c < f.R	⊢ x ∈ function.support ⇑f ↔ x ∈ metric.ball c f.R
E : Type u_1,	_inst_1 : inner_product_space ℝ E,	c : E,	f : times_cont_diff_bump_of_inner c,	x : E	⊢ ⇑f x ≠ 0 ↔ has_dist.dist x c < f.R
E : Type u_1,	_inst_1 : inner_product_space ℝ E,	c : E,	f : times_cont_diff_bump_of_inner c,	x : E,	hx : has_dist.dist x c < f.R	⊢ ⇑f x ≠ 0 ↔ has_dist.dist x c < f.R		case or.inr	E : Type u_1,	_inst_1 : inner_product_space ℝ E,	c : E,	f : times_cont_diff_bump_of_inner c,	x : E,	hx : f.R ≤ has_dist.dist x c	⊢ ⇑f x ≠ 0 ↔ has_dist.dist x c < f.R
E : Type u_1,	_inst_1 : inner_product_space ℝ E,	c : E,	f : times_cont_diff_bump_of_inner c,	x : E,	hx : has_dist.dist x c < f.R	⊢ ⇑f x ≠ 0 ↔ has_dist.dist x c < f.R
E : Type u_1,	_inst_1 : inner_product_space ℝ E,	c : E,	f : times_cont_diff_bump_of_inner c,	x : E,	hx : f.R ≤ has_dist.dist x c	⊢ ⇑f x ≠ 0 ↔ has_dist.dist x c < f.R
E : Type u_1,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	c : E,	f : times_cont_diff_bump c	⊢ closure (function.support ⇑f) = euclidean.closed_ball c f.to_times_cont_diff_bump_of_inner.R
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y)	⊢ filter.tendsto d l (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0)	⊢ filter.tendsto d l (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥)	⊢ filter.tendsto d l (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥),	C : filter.tendsto (λ (n : α), ∥c n∥⁻¹ * ∥c n • d n∥) l (𝓝 (0 * ∥y∥))	⊢ filter.tendsto d l (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥),	C : filter.tendsto (λ (n : α), ∥c n∥⁻¹ * ∥c n • d n∥) l (𝓝 0)	⊢ filter.tendsto d l (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥),	C : filter.tendsto (λ (n : α), ∥c n∥⁻¹ * ∥c n • d n∥) l (𝓝 0)	⊢ ∀ᶠ (n : α) in l, ∥c n∥⁻¹ * ∥c n • d n∥ = ∥d n∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥),	C : filter.tendsto (λ (n : α), ∥c n∥⁻¹ * ∥c n • d n∥) l (𝓝 0),	n : α,	hn : c n ≠ 0	⊢ ∥c n∥⁻¹ * ∥c n • d n∥ = ∥d n∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥),	C : filter.tendsto (λ (n : α), ∥c n∥⁻¹ * ∥c n • d n∥) l (𝓝 0)	⊢ ∀ᶠ (n : α) in l, ∥c n∥⁻¹ * ∥c n • d n∥ = ∥d n∥		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥),	C : filter.tendsto (λ (n : α), ∥c n∥⁻¹ * ∥c n • d n∥) l (𝓝 0),	this : ∀ᶠ (n : α) in l, ∥c n∥⁻¹ * ∥c n • d n∥ = ∥d n∥	⊢ filter.tendsto d l (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥),	C : filter.tendsto (λ (n : α), ∥c n∥⁻¹ * ∥c n • d n∥) l (𝓝 0),	n : α,	hn : c n ≠ 0	⊢ ∥c n∥ ≠ 0
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥),	C : filter.tendsto (λ (n : α), ∥c n∥⁻¹ * ∥c n • d n∥) l (𝓝 0),	this : ∀ᶠ (n : α) in l, ∥c n∥⁻¹ * ∥c n • d n∥ = ∥d n∥	⊢ filter.tendsto d l (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥),	C : filter.tendsto (λ (n : α), ∥c n∥⁻¹ * ∥c n • d n∥) l (𝓝 0),	this : ∀ᶠ (n : α) in l, ∥c n∥⁻¹ * ∥c n • d n∥ = ∥d n∥,	D : filter.tendsto (λ (n : α), ∥d n∥) l (𝓝 0)	⊢ filter.tendsto d l (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	y : E,	α : Type u_3,	l : filter α,	c : α → 𝕜,	d : α → E,	hc : filter.tendsto (λ (n : α), ∥c n∥) l filter.at_top,	hd : filter.tendsto (λ (n : α), c n • d n) l (𝓝 y),	A : filter.tendsto (λ (n : α), ∥c n∥⁻¹) l (𝓝 0),	B : filter.tendsto (λ (n : α), ∥c n • d n∥) l (𝓝 ∥y∥),	C : filter.tendsto (λ (n : α), ∥c n∥⁻¹ * ∥c n • d n∥) l (𝓝 0),	this : ∀ᶠ (n : α) in l, ∥c n∥⁻¹ * ∥c n • d n∥ = ∥d n∥,	D : filter.tendsto (λ (n : α), ∥d n∥) l (𝓝 0)	⊢ filter.tendsto (λ (e : α), ∥d e∥) l (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t	⊢ ⇑(linear_map.inl 𝕜 E F) '' tangent_cone_at 𝕜 s x ⊆ tangent_cone_at 𝕜 (s.prod t) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v)	⊢ ⇑(linear_map.inl 𝕜 E F) v ∈ tangent_cone_at 𝕜 (s.prod t) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v)	⊢ ∀ (n : ℕ), ∃ (d' : F), y + d' ∈ t ∧ ∥c n • d'∥ < (1 / 2) ^ n
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	n : ℕ	⊢ ∃ (d' : F), y + d' ∈ t ∧ ∥c n • d'∥ < (1 / 2) ^ n
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	n : ℕ,	z : F,	hz : z ∈ {x : F | (λ (y_1 : F), ∥c n • (y_1 - y)∥ < (1 / 2) ^ n) x},	hzt : z ∈ t	⊢ y + (z - y) ∈ t
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	n : ℕ,	z : F,	hz : z ∈ {x : F | (λ (y_1 : F), ∥c n • (y_1 - y)∥ < (1 / 2) ^ n) x},	hzt : z ∈ t	⊢ ∥c n • (z - y)∥ < (1 / 2) ^ n
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v)	⊢ ∀ (n : ℕ), ∃ (d' : F), y + d' ∈ t ∧ ∥c n • d'∥ < (1 / 2) ^ n		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	this : ∀ (n : ℕ), ∃ (d' : F), y + d' ∈ t ∧ ∥c n • d'∥ < (1 / 2) ^ n	⊢ ⇑(linear_map.inl 𝕜 E F) v ∈ tangent_cone_at 𝕜 (s.prod t) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	n : ℕ,	z : F,	hz : z ∈ {x : F | (λ (y_1 : F), ∥c n • (y_1 - y)∥ < (1 / 2) ^ n) x},	hzt : z ∈ t	⊢ ∃ (d' : F), y + d' ∈ t ∧ ∥c n • d'∥ < (1 / 2) ^ n
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	this : ∀ (n : ℕ), ∃ (d' : F), y + d' ∈ t ∧ ∥c n • d'∥ < (1 / 2) ^ n	⊢ ⇑(linear_map.inl 𝕜 E F) v ∈ tangent_cone_at 𝕜 (s.prod t) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ ⇑(linear_map.inl 𝕜 E F) v ∈ tangent_cone_at 𝕜 (s.prod t) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ ∀ᶠ (n : ℕ) in filter.at_top, (x, y) + (d n, d' n) ∈ s.prod t		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ filter.tendsto (λ (n : ℕ), c n • (d n, d' n)) filter.at_top (𝓝 (⇑(linear_map.inl 𝕜 E F) v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ ∀ᶠ (n : ℕ) in filter.at_top, (x, y) + (d n, d' n) ∈ s.prod t
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ ∀ (a : ℕ), x + d a ∈ s → (x, y) + (d a, d' a) ∈ s.prod t
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ ∀ᶠ (n : ℕ) in filter.at_top, (x, y) + (d n, d' n) ∈ s.prod t		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ filter.tendsto (λ (n : ℕ), c n • (d n, d' n)) filter.at_top (𝓝 (⇑(linear_map.inl 𝕜 E F) v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n,	n : ℕ,	hn : x + d n ∈ s	⊢ (x, y) + (d n, d' n) ∈ s.prod t
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ filter.tendsto (λ (n : ℕ), c n • (d n, d' n)) filter.at_top (𝓝 (⇑(linear_map.inl 𝕜 E F) v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ filter.tendsto (λ (c_1 : ℕ), c c_1 • (d c_1, d' c_1).snd) filter.at_top (𝓝 (⇑0 v))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	ht : y ∈ closure t,	v : E,	c : ℕ → 𝕜,	d : ℕ → E,	hd : ∀ᶠ (n : ℕ) in filter.at_top, x + d n ∈ s,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 v),	d' : ℕ → F,	hd' : ∀ (n : ℕ), y + d' n ∈ t ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ filter.tendsto (λ (n : ℕ), (1 / 2) ^ n) filter.at_top (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s	⊢ ⇑(linear_map.inr 𝕜 E F) '' tangent_cone_at 𝕜 t y ⊆ tangent_cone_at 𝕜 (s.prod t) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w)	⊢ ⇑(linear_map.inr 𝕜 E F) w ∈ tangent_cone_at 𝕜 (s.prod t) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w)	⊢ ∀ (n : ℕ), ∃ (d' : E), x + d' ∈ s ∧ ∥c n • d'∥ < (1 / 2) ^ n
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	n : ℕ	⊢ ∃ (d' : E), x + d' ∈ s ∧ ∥c n • d'∥ < (1 / 2) ^ n
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	n : ℕ,	z : E,	hz : z ∈ {x_1 : E | (λ (y : E), ∥c n • (y - x)∥ < (1 / 2) ^ n) x_1},	hzs : z ∈ s	⊢ x + (z - x) ∈ s
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	n : ℕ,	z : E,	hz : z ∈ {x_1 : E | (λ (y : E), ∥c n • (y - x)∥ < (1 / 2) ^ n) x_1},	hzs : z ∈ s	⊢ ∥c n • (z - x)∥ < (1 / 2) ^ n
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w)	⊢ ∀ (n : ℕ), ∃ (d' : E), x + d' ∈ s ∧ ∥c n • d'∥ < (1 / 2) ^ n		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	this : ∀ (n : ℕ), ∃ (d' : E), x + d' ∈ s ∧ ∥c n • d'∥ < (1 / 2) ^ n	⊢ ⇑(linear_map.inr 𝕜 E F) w ∈ tangent_cone_at 𝕜 (s.prod t) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	n : ℕ,	z : E,	hz : z ∈ {x_1 : E | (λ (y : E), ∥c n • (y - x)∥ < (1 / 2) ^ n) x_1},	hzs : z ∈ s	⊢ ∃ (d' : E), x + d' ∈ s ∧ ∥c n • d'∥ < (1 / 2) ^ n
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	this : ∀ (n : ℕ), ∃ (d' : E), x + d' ∈ s ∧ ∥c n • d'∥ < (1 / 2) ^ n	⊢ ⇑(linear_map.inr 𝕜 E F) w ∈ tangent_cone_at 𝕜 (s.prod t) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ ⇑(linear_map.inr 𝕜 E F) w ∈ tangent_cone_at 𝕜 (s.prod t) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ ∀ᶠ (n : ℕ) in filter.at_top, (x, y) + (d' n, d n) ∈ s.prod t		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ filter.tendsto (λ (n : ℕ), c n • (d' n, d n)) filter.at_top (𝓝 (⇑(linear_map.inr 𝕜 E F) w))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ ∀ᶠ (n : ℕ) in filter.at_top, (x, y) + (d' n, d n) ∈ s.prod t
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ ∀ (a : ℕ), y + d a ∈ t → (x, y) + (d' a, d a) ∈ s.prod t
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ ∀ᶠ (n : ℕ) in filter.at_top, (x, y) + (d' n, d n) ∈ s.prod t		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ filter.tendsto (λ (n : ℕ), c n • (d' n, d n)) filter.at_top (𝓝 (⇑(linear_map.inr 𝕜 E F) w))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n,	n : ℕ,	hn : y + d n ∈ t	⊢ (x, y) + (d' n, d n) ∈ s.prod t
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ filter.tendsto (λ (n : ℕ), c n • (d' n, d n)) filter.at_top (𝓝 (⇑(linear_map.inr 𝕜 E F) w))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ filter.tendsto (λ (c_1 : ℕ), c c_1 • (d' c_1, d c_1).fst) filter.at_top (𝓝 (⇑0 w))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	x : E,	s : set E,	t : set F,	y : F,	hs : x ∈ closure s,	w : F,	c : ℕ → 𝕜,	d : ℕ → F,	hd : ∀ᶠ (n : ℕ) in filter.at_top, y + d n ∈ t,	hc : filter.tendsto (λ (n : ℕ), ∥c n∥) filter.at_top filter.at_top,	hy : filter.tendsto (λ (n : ℕ), c n • d n) filter.at_top (𝓝 w),	d' : ℕ → E,	hd' : ∀ (n : ℕ), x + d' n ∈ s ∧ ∥c n • d' n∥ < (1 / 2) ^ n	⊢ filter.tendsto (λ (n : ℕ), (1 / 2) ^ n) filter.at_top (𝓝 0)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	ι : Type u_2,	_inst_8 : fintype ι,	E : ι → Type u_3,	_inst_9 : Π (i : ι), normed_group (E i),	_inst_10 : Π (i : ι), normed_space 𝕜 (E i),	s : Π (i : ι), set (E i),	x : Π (i : ι), E i,	I : set ι,	h : ∀ (i : ι), i ∈ I → unique_diff_within_at 𝕜 (s i) (x i)	⊢ unique_diff_within_at 𝕜 (I.pi s) x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	ι : Type u_2,	_inst_8 : fintype ι,	E : ι → Type u_3,	_inst_9 : Π (i : ι), normed_group (E i),	_inst_10 : Π (i : ι), normed_space 𝕜 (E i),	s : Π (i : ι), set (E i),	x : Π (i : ι), E i,	I : set ι,	h : ∀ (i : ι), i ∈ I → unique_diff_within_at 𝕜 (s i) (x i),	_inst : Π (a : Prop), decidable a	⊢ unique_diff_within_at 𝕜 (I.pi s) x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	ι : Type u_2,	_inst_8 : fintype ι,	E : ι → Type u_3,	_inst_9 : Π (i : ι), normed_group (E i),	_inst_10 : Π (i : ι), normed_space 𝕜 (E i),	s : Π (i : ι), set (E i),	x : Π (i : ι), E i,	I : set ι,	h : ∀ (i : ι), i ∈ I → unique_diff_within_at 𝕜 (s i) (x i),	_inst : Π (a : Prop), decidable a	⊢ unique_diff_within_at 𝕜 (set.univ.pi (I.piecewise s (λ (_x : ι), set.univ))) x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	ι : Type u_2,	_inst_8 : fintype ι,	E : ι → Type u_3,	_inst_9 : Π (i : ι), normed_group (E i),	_inst_10 : Π (i : ι), normed_space 𝕜 (E i),	s : Π (i : ι), set (E i),	x : Π (i : ι), E i,	I : set ι,	h : ∀ (i : ι), i ∈ I → unique_diff_within_at 𝕜 (s i) (x i),	_inst : Π (a : Prop), decidable a,	i : ι	⊢ unique_diff_within_at 𝕜 (I.piecewise s (λ (_x : ι), set.univ) i) (x i)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	ι : Type u_2,	_inst_8 : fintype ι,	E : ι → Type u_3,	_inst_9 : Π (i : ι), normed_group (E i),	_inst_10 : Π (i : ι), normed_space 𝕜 (E i),	s : Π (i : ι), set (E i),	x : Π (i : ι), E i,	I : set ι,	h : ∀ (i : ι), i ∈ I → unique_diff_within_at 𝕜 (s i) (x i),	_inst : Π (a : Prop), decidable a,	i : ι,	hi : i ∈ I	⊢ unique_diff_within_at 𝕜 (I.piecewise s (λ (_x : ι), set.univ) i) (x i)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	ι : Type u_2,	_inst_8 : fintype ι,	E : ι → Type u_3,	_inst_9 : Π (i : ι), normed_group (E i),	_inst_10 : Π (i : ι), normed_space 𝕜 (E i),	s : Π (i : ι), set (E i),	x : Π (i : ι), E i,	I : set ι,	h : ∀ (i : ι), i ∈ I → unique_diff_within_at 𝕜 (s i) (x i),	_inst : Π (a : Prop), decidable a,	i : ι,	hi : i ∉ I	⊢ unique_diff_within_at 𝕜 (I.piecewise s (λ (_x : ι), set.univ) i) (x i)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	ι : Type u_2,	_inst_8 : fintype ι,	E : ι → Type u_3,	_inst_9 : Π (i : ι), normed_group (E i),	_inst_10 : Π (i : ι), normed_space 𝕜 (E i),	s : Π (i : ι), set (E i),	x : Π (i : ι), E i,	I : set ι,	h : ∀ (i : ι), i ∈ I → unique_diff_within_at 𝕜 (s i) (x i),	_inst : Π (a : Prop), decidable a,	i : ι	⊢ unique_diff_within_at 𝕜 (I.piecewise s (λ (_x : ι), set.univ) i) (x i)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	p : E → formal_multilinear_series 𝕜 E F,	n : ℕ	⊢ has_ftaylor_series_up_to ↑(n + 1) f p ↔ (∀ (x : E), (p x 0).uncurry0 = f x) ∧ (∀ (x : E), has_fderiv_at (λ (y : E), p y 0) (p x 1).curry_left x) ∧ has_ftaylor_series_up_to ↑n (λ (x : E), ⇑(continuous_multilinear_curry_fin1 𝕜 E F) (p x 1)) (λ (x : E), (p x).shift)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	x : E,	n : ℕ,	h : times_cont_diff_at 𝕜 ↑n f x	⊢ ∀ᶠ (y : E) in 𝓝 x, times_cont_diff_at 𝕜 ↑n f y
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	n : with_top ℕ	⊢ times_cont_diff_on 𝕜 n f set.univ ↔ times_cont_diff 𝕜 n f
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	n : with_top ℕ	⊢ times_cont_diff_on 𝕜 n f set.univ → times_cont_diff 𝕜 n f
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	n : with_top ℕ,	H : times_cont_diff_on 𝕜 n f set.univ	⊢ times_cont_diff 𝕜 n f
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	n : with_top ℕ,	H : times_cont_diff_on 𝕜 n f set.univ	⊢ has_ftaylor_series_up_to n f (ftaylor_series_within 𝕜 f set.univ)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	n : with_top ℕ	⊢ times_cont_diff_on 𝕜 n f set.univ → times_cont_diff 𝕜 n f		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	n : with_top ℕ	⊢ times_cont_diff 𝕜 n f → times_cont_diff_on 𝕜 n f set.univ
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	n : with_top ℕ,	H : times_cont_diff_on 𝕜 n f set.univ	⊢ has_ftaylor_series_up_to_on n f (ftaylor_series_within 𝕜 f set.univ) set.univ
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	n : with_top ℕ	⊢ times_cont_diff 𝕜 n f → times_cont_diff_on 𝕜 n f set.univ
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	n : with_top ℕ,	x : E,	hx : x ∈ set.univ,	m : ℕ,	hm : ↑m ≤ n,	p : E → formal_multilinear_series 𝕜 E F,	hp : has_ftaylor_series_up_to n f p	⊢ ∃ (u : set E) (H : u ∈ 𝓝[has_insert.insert x set.univ] x) (p : E → formal_multilinear_series 𝕜 E F), has_ftaylor_series_up_to_on ↑m f p u
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	x : E,	n : ℕ,	m : fin (n + 1) → E	⊢ ⇑(iterated_fderiv 𝕜 (n + 1) f x) m = ⇑((⇑(continuous_multilinear_curry_right_equiv' 𝕜 n E F) ∘ iterated_fderiv 𝕜 n (λ (y : E), fderiv 𝕜 f y)) x) m
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	x : E,	n : ℕ,	m : fin (n + 1) → E	⊢ ⇑(⇑(iterated_fderiv 𝕜 n (λ (y : E), fderiv 𝕜 f y) x) (fin.init m)) (m (fin.last n)) = ⇑((⇑(continuous_multilinear_curry_right_equiv' 𝕜 n E F) ∘ iterated_fderiv 𝕜 n (λ (y : E), fderiv 𝕜 f y)) x) m
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	x : E,	n : ℕ	⊢ iterated_fderiv 𝕜 (n + 1) f x = (⇑(continuous_multilinear_curry_right_equiv' 𝕜 n E F) ∘ iterated_fderiv 𝕜 n (λ (y : E), fderiv 𝕜 f y)) x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	n : ℕ	⊢ times_cont_diff 𝕜 ↑(n + 1) f ↔ differentiable 𝕜 f ∧ times_cont_diff 𝕜 ↑n (λ (y : E), fderiv 𝕜 f y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	x : E,	_inst_8 : subsingleton F,	n : with_top ℕ	⊢ times_cont_diff_at 𝕜 n (λ (_x : E), 0) x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	f : E → F,	x : E,	_inst_8 : subsingleton F,	n : with_top ℕ	⊢ times_cont_diff_at 𝕜 n f x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	s : set E,	f : E → F,	_inst_8 : subsingleton F,	n : with_top ℕ	⊢ times_cont_diff_on 𝕜 n (λ (_x : E), 0) s
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	s : set E,	f : E → F,	_inst_8 : subsingleton F,	n : with_top ℕ	⊢ times_cont_diff_on 𝕜 n f s
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	s : set E,	x : E,	f : E → 𝕜,	n : with_top ℕ,	c : 𝕜,	hf : times_cont_diff_within_at 𝕜 n f s x	⊢ times_cont_diff_within_at 𝕜 n (λ (x : E), f x / c) s x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	E' : Type u_5,	_inst_8 : normed_group E',	_inst_9 : normed_space 𝕜 E',	F' : Type u_6,	_inst_10 : normed_group F',	_inst_11 : normed_space 𝕜 F',	n : with_top ℕ,	f : E → F,	g : E' → F',	x : E,	y : E',	hf : times_cont_diff_at 𝕜 n f x,	hg : times_cont_diff_at 𝕜 n g y	⊢ times_cont_diff_at 𝕜 n (prod.map f g) (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	E' : Type u_5,	_inst_8 : normed_group E',	_inst_9 : normed_space 𝕜 E',	F' : Type u_6,	_inst_10 : normed_group F',	_inst_11 : normed_space 𝕜 F',	n : with_top ℕ,	f : E → F,	g : E' → F',	x : E,	y : E',	hf : times_cont_diff_within_at 𝕜 n f set.univ x,	hg : times_cont_diff_within_at 𝕜 n g set.univ y	⊢ times_cont_diff_within_at 𝕜 n (prod.map f g) set.univ (x, y)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	E' : Type u_5,	_inst_8 : normed_group E',	_inst_9 : normed_space 𝕜 E',	F' : Type u_6,	_inst_10 : normed_group F',	_inst_11 : normed_space 𝕜 F',	n : with_top ℕ,	f : E → F,	g : E' → F',	x : E,	y : E',	hf : times_cont_diff_within_at 𝕜 n f set.univ x,	hg : times_cont_diff_within_at 𝕜 n g set.univ y	⊢ set.univ = set.univ.prod set.univ
z : ↥circle	⊢ ↑z⁻¹ = (↑z)⁻¹
z : ↥circle	⊢ ⇑complex.conj ↑z = (↑z)⁻¹
z : ↥circle	⊢ ↑z * ⇑complex.conj ↑z = 1
z : ↥circle	⊢ ↑(⇑complex.norm_sq ↑z) = 1
f : ℂ →ₗᵢ[ℝ] ℂ,	h₂ : ∀ (z : ℂ), (⇑f z).re = z.re,	z : ℂ	⊢ (⇑f z).im = z.im ∨ (⇑f z).im = -z.im
f : ℂ →ₗᵢ[ℝ] ℂ,	h₂ : ∀ (z : ℂ), (⇑f z).re = z.re,	z : ℂ,	h₁ : ∥⇑f z∥ = ∥z∥	⊢ (⇑f z).im = z.im ∨ (⇑f z).im = -z.im
f : ℂ →ₗᵢ[ℝ] ℂ,	h₂ : ∀ (z : ℂ), (⇑f z).re = z.re,	z : ℂ,	h₁ : real.sqrt (⇑complex.norm_sq (⇑f z)) = real.sqrt (⇑complex.norm_sq z)	⊢ (⇑f z).im = z.im ∨ (⇑f z).im = -z.im
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n	⊢ is_primitive_root (complex.exp (2 * ↑π * complex.I * (↑i / ↑n))) n
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n	⊢ complex.exp (2 * ↑π * complex.I * (↑i / ↑n)) ^ n = 1 ∧ ∀ (l : ℕ), complex.exp (2 * ↑π * complex.I * (↑i / ↑n)) ^ l = 1 → n ∣ l
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n	⊢ ↑n ≠ 0
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n	⊢ (∃ (n_1 : ℤ), ↑n * (2 * ↑π * complex.I * (↑i / ↑n)) = ↑n_1 * (2 * ↑π * complex.I)) ∧ ∀ (l : ℕ), (∃ (n_1 : ℤ), ↑l * (2 * ↑π * complex.I * (↑i / ↑n)) = ↑n_1 * (2 * ↑π * complex.I)) → n ∣ l
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0	⊢ (∃ (n_1 : ℤ), ↑n * (2 * ↑π * complex.I * (↑i / ↑n)) = ↑n_1 * (2 * ↑π * complex.I)) ∧ ∀ (l : ℕ), (∃ (n_1 : ℤ), ↑l * (2 * ↑π * complex.I * (↑i / ↑n)) = ↑n_1 * (2 * ↑π * complex.I)) → n ∣ l
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0	⊢ ∃ (n_1 : ℤ), ↑n * (2 * ↑π * complex.I * (↑i / ↑n)) = ↑n_1 * (2 * ↑π * complex.I)
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0	⊢ ∃ (n_1 : ℤ), ↑n * (2 * ↑π * complex.I * (↑i / ↑n)) = ↑n_1 * (2 * ↑π * complex.I)		i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0	⊢ ∀ (l : ℕ), (∃ (n_1 : ℤ), ↑l * (2 * ↑π * complex.I * (↑i / ↑n)) = ↑n_1 * (2 * ↑π * complex.I)) → n ∣ l
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0	⊢ ↑n * (2 * ↑π * complex.I * (↑i / ↑n)) = ↑↑i * (2 * ↑π * complex.I)
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0	⊢ ∀ (l : ℕ), (∃ (n_1 : ℤ), ↑l * (2 * ↑π * complex.I * (↑i / ↑n)) = ↑n_1 * (2 * ↑π * complex.I)) → n ∣ l
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0	⊢ ∀ (l : ℕ) (x : ℤ), ↑i * ↑l = ↑x * ↑n → n ∣ l
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0	⊢ ∀ (l : ℕ) (x : ℤ), ↑(i * l) = x * ↑n → n ∣ l
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0,	l : ℕ,	k : ℤ,	hk : ↑(i * l) = k * ↑n	⊢ n ∣ l
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0,	l : ℕ,	k : ℤ,	hk : ↑(i * l) = k * ↑n	⊢ ↑n ∣ k * ↑n
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0,	l : ℕ,	k : ℤ,	hk : ↑(i * l) = k * ↑n	⊢ n ∣ i * l		i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0,	l : ℕ,	k : ℤ,	hk : ↑(i * l) = k * ↑n,	this : n ∣ i * l	⊢ n ∣ l
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0,	l : ℕ,	k : ℤ,	hk : ↑(i * l) = k * ↑n	⊢ n ∣ i * l
i n : ℕ,	h0 : n ≠ 0,	hi : i.coprime n,	hn0 : ↑n ≠ 0,	l : ℕ,	k : ℤ,	hk : ↑(i * l) = k * ↑n,	this : n ∣ i * l	⊢ n ∣ l
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_monoid E,	_inst_3 : module 𝕜 E,	s : set E,	hs : convex 𝕜 s,	z : E	⊢ convex 𝕜 ((λ (x : E), z + x) ⁻¹' s)
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_monoid E,	_inst_3 : module 𝕜 E,	s : set E,	hs : convex 𝕜 s,	z x y : E,	hx : x ∈ (λ (x : E), z + x) ⁻¹' s,	hy : y ∈ (λ (x : E), z + x) ⁻¹' s,	a b : 𝕜,	ha : 0 ≤ a,	hb : 0 ≤ b,	hab : a + b = 1	⊢ a • x + b • y ∈ (λ (x : E), z + x) ⁻¹' s
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_monoid E,	_inst_3 : module 𝕜 E,	s : set E,	hs : convex 𝕜 s,	z x y : E,	hx : x ∈ (λ (x : E), z + x) ⁻¹' s,	hy : y ∈ (λ (x : E), z + x) ⁻¹' s,	a b : 𝕜,	ha : 0 ≤ a,	hb : 0 ≤ b,	hab : a + b = 1,	h : a • (λ (x : E), z + x) x + b • (λ (x : E), z + x) y ∈ s	⊢ a • x + b • y ∈ (λ (x : E), z + x) ⁻¹' s
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_monoid E,	_inst_3 : module 𝕜 E,	s : set E,	hs : convex 𝕜 s,	z : E	⊢ convex 𝕜 ((λ (x : E), x + z) ⁻¹' s)
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : normed_linear_ordered_field 𝕜,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	A B : set E,	hAB : is_exposed 𝕜 A B,	hA : convex 𝕜 A	⊢ convex 𝕜 B
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : normed_linear_ordered_field 𝕜,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	A : set E,	hA : convex 𝕜 A,	hAB : is_exposed 𝕜 A ∅	⊢ convex 𝕜 ∅		𝕜 : Type u_1,	E : Type u_2,	_inst_1 : normed_linear_ordered_field 𝕜,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	A B : set E,	hAB : is_exposed 𝕜 A B,	hA : convex 𝕜 A,	hB : B.nonempty	⊢ convex 𝕜 B
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : normed_linear_ordered_field 𝕜,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	A : set E,	hA : convex 𝕜 A,	hAB : is_exposed 𝕜 A ∅	⊢ convex 𝕜 ∅
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : normed_linear_ordered_field 𝕜,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	A B : set E,	hAB : is_exposed 𝕜 A B,	hA : convex 𝕜 A,	hB : B.nonempty	⊢ convex 𝕜 B
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : normed_linear_ordered_field 𝕜,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	A : set E,	hA : convex 𝕜 A,	l : E →L[𝕜] 𝕜,	hAB : is_exposed 𝕜 A {x ∈ A | ∀ (y : E), y ∈ A → ⇑l y ≤ ⇑l x},	hB : {x ∈ A | ∀ (y : E), y ∈ A → ⇑l y ≤ ⇑l x}.nonempty	⊢ convex 𝕜 {x ∈ A | ∀ (y : E), y ∈ A → ⇑l y ≤ ⇑l x}
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_group E,	_inst_3 : has_scalar 𝕜 E,	A B C : set E,	hAB : is_extreme 𝕜 A B,	hBC : is_extreme 𝕜 B C	⊢ is_extreme 𝕜 A C
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_group E,	_inst_3 : has_scalar 𝕜 E,	A B C : set E,	hAB : is_extreme 𝕜 A B,	hBC : is_extreme 𝕜 B C	⊢ ∀ (x₁ x₂ : E), x₁ ∈ A → x₂ ∈ A → ∀ (x : E), x ∈ C → x ∈ open_segment 𝕜 x₁ x₂ → x₁ ∈ C ∧ x₂ ∈ C
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_group E,	_inst_3 : has_scalar 𝕜 E,	A B C : set E,	hAB : is_extreme 𝕜 A B,	hBC : is_extreme 𝕜 B C,	x₁ x₂ : E,	hx₁A : x₁ ∈ A,	hx₂A : x₂ ∈ A,	x : E,	hxC : x ∈ C,	hx : x ∈ open_segment 𝕜 x₁ x₂	⊢ x₁ ∈ C ∧ x₂ ∈ C
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_group E,	_inst_3 : has_scalar 𝕜 E,	A B C : set E,	hAB : is_extreme 𝕜 A B,	hBC : is_extreme 𝕜 B C,	x₁ x₂ : E,	hx₁A : x₁ ∈ A,	hx₂A : x₂ ∈ A,	x : E,	hxC : x ∈ C,	hx : x ∈ open_segment 𝕜 x₁ x₂,	hx₁B : x₁ ∈ B,	hx₂B : x₂ ∈ B	⊢ x₁ ∈ C ∧ x₂ ∈ C
𝕜 : Type u_1,	E : Type u_2,	β : Type u_4,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_monoid E,	_inst_4 : ordered_add_comm_monoid β,	_inst_5 : module 𝕜 E,	_inst_6 : module 𝕜 β,	f : E → β,	s : set E,	a : E,	hf : convex_on 𝕜 s f	⊢ convex_on 𝕜 ((λ (z : E), a + z) ⁻¹' s) (f ∘ λ (z : E), z + a)
𝕜 : Type u_1,	E : Type u_2,	β : Type u_4,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_monoid E,	_inst_4 : linear_ordered_cancel_add_comm_monoid β,	_inst_5 : has_scalar 𝕜 E,	_inst_6 : module 𝕜 β,	_inst_7 : ordered_smul 𝕜 β,	s : set E,	f : E → β,	hf : convex_on 𝕜 s f,	x y z : E,	hx : x ∈ s,	hy : y ∈ s,	hz : z ∈ open_segment 𝕜 x y,	hyz : f y ≤ f z	⊢ f z ≤ f x
𝕜 : Type u_1,	E : Type u_2,	β : Type u_4,	_inst_1 : ordered_semiring 𝕜,	_inst_2 : add_comm_monoid E,	_inst_4 : linear_ordered_cancel_add_comm_monoid β,	_inst_5 : has_scalar 𝕜 E,	_inst_6 : module 𝕜 β,	_inst_7 : ordered_smul 𝕜 β,	s : set E,	f : E → β,	hf : convex_on 𝕜 s f,	x y : E,	hx : x ∈ s,	hy : y ∈ s,	a b : 𝕜,	ha : 0 < a,	hb : 0 < b,	hab : a + b = 1,	hyz : f y ≤ f (a • x + b • y)	⊢ f (a • x + b • y) ≤ f x
⊢ fourier_subalgebra.separates_points
x y : ↥circle,	hxy : x ≠ y	⊢ ∃ (f : ↥circle → ℂ) (H : f ∈ (λ (f : C(↥circle, ℂ)), ⇑f) '' ↑fourier_subalgebra), f x ≠ f y
x y : ↥circle,	hxy : x ≠ y	⊢ fourier 1 ∈ ↑fourier_subalgebra		x y : ↥circle,	hxy : x ≠ y	⊢ (λ (f : C(↥circle, ℂ)), ⇑f) (fourier 1) x ≠ (λ (f : C(↥circle, ℂ)), ⇑f) (fourier 1) y
x y : ↥circle,	hxy : x ≠ y	⊢ fourier 1 ∈ ↑fourier_subalgebra
x y : ↥circle,	hxy : x ≠ y	⊢ (λ (f : C(↥circle, ℂ)), ⇑f) (fourier 1) x ≠ (λ (f : C(↥circle, ℂ)), ⇑f) (fourier 1) y
⊢ orthonormal ℂ (fourier_Lp 2)
⊢ ∀ (i j : ℤ), has_inner.inner (fourier_Lp 2 i) (fourier_Lp 2 j) = ite (i = j) 1 0
i j : ℤ	⊢ has_inner.inner (fourier_Lp 2 i) (fourier_Lp 2 j) = ite (i = j) 1 0
i j : ℤ	⊢ ∫ (x : ↥circle), ⇑is_R_or_C.conj (⇑(fourier i) x) * ⇑(fourier j) x ∂haar_circle = ite (i = j) 1 0
i j : ℤ,	h : i = j	⊢ ∫ (x : ↥circle), ⇑is_R_or_C.conj (⇑(fourier i) x) * ⇑(fourier j) x ∂haar_circle = 1
i j : ℤ,	h : i = j	⊢ ∫ (x : ↥circle), ⇑is_R_or_C.conj (⇑(fourier i) x) * ⇑(fourier j) x ∂haar_circle = 1		i j : ℤ,	h : ¬i = j	⊢ ∫ (x : ↥circle), ⇑is_R_or_C.conj (⇑(fourier i) x) * ⇑(fourier j) x ∂haar_circle = 0
i j : ℤ,	h : ¬i = j	⊢ ∫ (x : ↥circle), ⇑is_R_or_C.conj (⇑(fourier i) x) * ⇑(fourier j) x ∂haar_circle = 0
i j : ℤ,	h : ¬i = j	⊢ measure_theory.integral haar_circle ⇑(fourier (-i + j)) = 0
i j : ℤ,	h : ¬i = j	⊢ -i + j ≠ 0
i j : ℤ,	h : ¬i = j	⊢ -i + j ≠ 0		i j : ℤ,	h : ¬i = j,	hij : -i + j ≠ 0	⊢ measure_theory.integral haar_circle ⇑(fourier (-i + j)) = 0
i j : ℤ,	h : ¬i = j	⊢ j + -i ≠ 0
i j : ℤ,	h : ¬i = j,	hij : -i + j ≠ 0	⊢ measure_theory.integral haar_circle ⇑(fourier (-i + j)) = 0
m n : ℤ,	z : ↥circle	⊢ ⇑(fourier (m + n)) z = ⇑(fourier m) z * ⇑(fourier n) z
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : inner_product_space 𝕜 E,	x : E,	r : 𝕜,	hx : x ≠ 0,	hr : r ≠ 0	⊢ ∥x∥ ≠ 0
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : inner_product_space 𝕜 E,	x : E,	r : 𝕜,	hx : x ≠ 0,	hr : r ≠ 0	⊢ is_R_or_C.abs (has_inner.inner x (r • x)) / (∥x∥ * ∥r • x∥) = 1
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : inner_product_space 𝕜 E,	x : E,	r : 𝕜,	hx : x ≠ 0,	hr : r ≠ 0,	hx' : ∥x∥ ≠ 0	⊢ is_R_or_C.abs r ≠ 0
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : inner_product_space 𝕜 E,	x : E,	r : 𝕜,	hx : x ≠ 0,	hr : r ≠ 0,	hx' : ∥x∥ ≠ 0	⊢ is_R_or_C.abs (has_inner.inner x (r • x)) / (∥x∥ * ∥r • x∥) = 1
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : inner_product_space 𝕜 E,	x : E,	r : 𝕜,	hx : x ≠ 0,	hr : r ≠ 0,	hx' : ∥x∥ ≠ 0,	hr' : is_R_or_C.abs r ≠ 0	⊢ is_R_or_C.abs (has_inner.inner x (r • x)) / (∥x∥ * ∥r • x∥) = 1
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : inner_product_space 𝕜 E,	x : E,	r : 𝕜,	hx : x ≠ 0,	hr : r ≠ 0,	hx' : ∥x∥ ≠ 0,	hr' : is_R_or_C.abs r ≠ 0	⊢ is_R_or_C.abs r * (∥x∥ * ∥x∥) / (∥x∥ * (∥r∥ * ∥x∥)) = 1
𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F	⊢ is_R_or_C.abs (has_inner.inner x y) * is_R_or_C.abs (has_inner.inner x y) ≤ ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥)
𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F	⊢ ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ∥y∥ * ∥y∥ * (∥x∥ * ∥x∥)
𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F	⊢ ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)		𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F,	H : ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)	⊢ is_R_or_C.abs (has_inner.inner x y) * is_R_or_C.abs (has_inner.inner x y) ≤ ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥)
𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F	⊢ ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)
𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F,	H : ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)	⊢ is_R_or_C.abs (has_inner.inner x y) * is_R_or_C.abs (has_inner.inner x y) ≤ ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥)
𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F,	H : ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)	⊢ is_R_or_C.abs (has_inner.inner x y) * is_R_or_C.abs (has_inner.inner x y) ≤ ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)
𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F,	H : ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)	⊢ is_R_or_C.abs (has_inner.inner x y) * is_R_or_C.abs (has_inner.inner x y) = ?m_1
𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F,	H : ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)	⊢ is_R_or_C.abs (has_inner.inner x y) = ?m_1		𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F,	H : ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)	⊢ is_R_or_C.abs (has_inner.inner x y) = ?m_1
𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F,	H : ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)	⊢ is_R_or_C.abs (has_inner.inner x y) * is_R_or_C.abs (has_inner.inner x y) ≤ ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x) = ?m_1
𝕜 : Type u_1,	F : Type u_3,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : add_comm_group F,	_inst_3 : module 𝕜 F,	c : inner_product_space.core 𝕜 F,	x y : F,	H : ∥x∥ * ∥y∥ * (∥x∥ * ∥y∥) = ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)	⊢ is_R_or_C.abs (has_inner.inner y x) * is_R_or_C.abs (has_inner.inner x y) ≤ ⇑is_R_or_C.re (has_inner.inner y y) * ⇑is_R_or_C.re (has_inner.inner x x)
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : inner_product_space 𝕜 E,	x : E	⊢ has_inner.inner 0 x = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K	⊢ (∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥) → ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥	⊢ ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥	⊢ convex ℝ ↑K		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥	⊢ v ∈ ↑K
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥	⊢ ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥	⊢ ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0	⊢ ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0	⊢ ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K	⊢ has_inner.inner (u - v) w ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	w' : F := w + v	⊢ has_inner.inner (u - v) w ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	w' : F := w + v,	this : w' ∈ K	⊢ has_inner.inner (u - v) w ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	w' : F := w + v,	this : w' ∈ K,	h₁ : has_inner.inner (u - v) (w' - v) ≤ 0	⊢ w' - v = w		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	w' : F := w + v,	this : w' ∈ K,	h₁ : has_inner.inner (u - v) (w' - v) ≤ 0,	h₂ : w' - v = w	⊢ has_inner.inner (u - v) w ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	w' : F := w + v,	this : w' ∈ K,	h₁ : has_inner.inner (u - v) (w' - v) ≤ 0	⊢ has_inner.inner (u - v) w ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	w' : F := w + v,	this : w' ∈ K,	h₂ : w' - v = w,	h₁ : has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	w' : F := w + v,	this : w' ∈ K,	h₁ : has_inner.inner (u - v) (w' - v) ≤ 0,	h₂ : w' - v = w	⊢ has_inner.inner (u - v) w ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w ≥ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	ge : has_inner.inner (u - v) w ≥ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	w'' : F := -w + v	⊢ has_inner.inner (u - v) w ≥ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	ge : has_inner.inner (u - v) w ≥ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	w'' : F := -w + v,	this : w'' ∈ K	⊢ has_inner.inner (u - v) w ≥ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	ge : has_inner.inner (u - v) w ≥ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	w'' : F := -w + v,	this : w'' ∈ K,	h₁ : has_inner.inner (u - v) (w'' - v) ≤ 0	⊢ w'' - v = -w		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	w'' : F := -w + v,	this : w'' ∈ K,	h₁ : has_inner.inner (u - v) (w'' - v) ≤ 0,	h₂ : w'' - v = -w	⊢ has_inner.inner (u - v) w ≥ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	ge : has_inner.inner (u - v) w ≥ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	w'' : F := -w + v,	this : w'' ∈ K,	h₁ : has_inner.inner (u - v) (w'' - v) ≤ 0	⊢ has_inner.inner (u - v) w ≥ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	ge : has_inner.inner (u - v) w ≥ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	w'' : F := -w + v,	this : w'' ∈ K,	h₁ : has_inner.inner (u - v) (w'' - v) ≤ 0,	h₂ : w'' - v = -w	⊢ has_inner.inner (u - v) w ≥ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	ge : has_inner.inner (u - v) w ≥ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	w'' : F := -w + v,	this : w'' ∈ K,	h₂ : w'' - v = -w,	h₁ : -has_inner.inner (u - v) w ≤ 0	⊢ has_inner.inner (u - v) w ≥ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	ge : has_inner.inner (u - v) w ≥ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0,	w : F,	hw : w ∈ K,	le : has_inner.inner (u - v) w ≤ 0,	ge : has_inner.inner (u - v) w ≥ 0	⊢ has_inner.inner (u - v) w = 0
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K	⊢ (∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0) → (∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥)
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0	⊢ ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0	⊢ ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	this : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0	⊢ ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	w : F,	hw : w ∈ K	⊢ has_inner.inner (u - v) (w - v) ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	this : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0	⊢ ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	w : F,	hw : w ∈ K,	w' : F := w - v	⊢ has_inner.inner (u - v) (w - v) ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	this : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0	⊢ ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	w : F,	hw : w ∈ K,	w' : F := w - v,	this : w' ∈ K	⊢ has_inner.inner (u - v) (w - v) ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	this : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0	⊢ ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	w : F,	hw : w ∈ K,	w' : F := w - v,	this : w' ∈ K,	h₁ : has_inner.inner (u - v) w' = 0	⊢ has_inner.inner (u - v) (w - v) ≤ 0		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	this : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0	⊢ ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	this : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0	⊢ ∥u - v∥ = ⨅ (w : ↥↑K), ∥u - ↑w∥
F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	this : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0	⊢ convex ℝ ↑K		F : Type u_3,	_inst_3 : inner_product_space ℝ F,	K : submodule ℝ F,	u v : F,	hv : v ∈ K,	h : ∀ (w : F), w ∈ K → has_inner.inner (u - v) w = 0,	this : ∀ (w : F), w ∈ K → has_inner.inner (u - v) (w - v) ≤ 0	⊢ v ∈ ↑K
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : inner_product_space 𝕜 E,	v : E,	hv : ∥v∥ = 1,	w : E	⊢ ↑(⇑(orthogonal_projection (submodule.span 𝕜 {v})) w) = ↑∥v∥ ^ 2 • ↑(⇑(orthogonal_projection (submodule.span 𝕜 {v})) w)
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : inner_product_space 𝕜 E,	v : E,	hv : ∥v∥ = 1,	w : E	⊢ ↑(⇑(orthogonal_projection (submodule.span 𝕜 {v})) w) = has_inner.inner v w • v
ι : Type u,	s : finset ι,	f g : ι → ℝ,	p q : ℝ,	hpq : p.is_conjugate_exponent q,	hf : ∀ (i : ι), i ∈ s → 0 ≤ f i,	hg : ∀ (i : ι), i ∈ s → 0 ≤ g i	⊢ ∑ (i : ι) in s, f i * g i ≤ (∑ (i : ι) in s, f i ^ p) ^ (1 / p) * (∑ (i : ι) in s, g i ^ q) ^ (1 / q)
ι : Type u,	s : finset ι,	f g : ι → ℝ,	p q : ℝ,	hpq : p.is_conjugate_exponent q,	hf : ∀ (i : ι), i ∈ s → 0 ≤ f i,	hg : ∀ (i : ι), i ∈ s → 0 ≤ g i	⊢ ∑ (i : ι) in s, f i * g i ≤ (∑ (i : ι) in s, f i ^ p) ^ (1 / p) * (∑ (i : ι) in s, g i ^ q) ^ (1 / q)
ι : Type u,	s : finset ι,	f g : ι → ℝ,	p q : ℝ,	hpq : p.is_conjugate_exponent q,	hf : ∀ (i : ι), i ∈ s → 0 ≤ f i,	hg : ∀ (i : ι), i ∈ s → 0 ≤ g i	⊢ ∑ (i : ι) in s, f i * g i ≤ (∑ (i : ι) in s, f i ^ p) ^ (1 / p) * (∑ (i : ι) in s, g i ^ q) ^ (1 / q)
ι : Type u,	s : finset ι,	f g : ι → ℝ,	p q : ℝ,	hpq : p.is_conjugate_exponent q,	hf : ∀ (i : ι), i ∈ s → 0 ≤ f i,	hg : ∀ (i : ι), i ∈ s → 0 ≤ g i	⊢ ∑ (i : ι) in s, f i * g i ≤ (∑ (i : ι) in s, f i ^ p) ^ (1 / p) * (∑ (i : ι) in s, g i ^ q) ^ (1 / q)
ι : Type u,	s : finset ι,	f g : ι → ℝ,	p q : ℝ,	hpq : p.is_conjugate_exponent q,	hf : ∀ (i : ι), i ∈ s → 0 ≤ f i,	hg : ∀ (i : ι), i ∈ s → 0 ≤ g i	⊢ ∑ (i : ι) in s, f i ^ p = ∑ (i : ι) in s, abs (f i) ^ p
ι : Type u,	s : finset ι,	f g : ι → ℝ,	p q : ℝ,	hpq : p.is_conjugate_exponent q,	hf : ∀ (i : ι), i ∈ s → 0 ≤ f i,	hg : ∀ (i : ι), i ∈ s → 0 ≤ g i	⊢ ∑ (i : ι) in s, g i ^ q = ∑ (i : ι) in s, abs (g i) ^ q
ι : Type u,	s : finset ι,	f g : ι → ℝ,	p q : ℝ,	hpq : p.is_conjugate_exponent q,	hf : ∀ (i : ι), i ∈ s → 0 ≤ f i,	hg : ∀ (i : ι), i ∈ s → 0 ≤ g i	⊢ ∀ (x : ι), x ∈ s → f x ^ p = abs (f x) ^ p
ι : Type u,	s : finset ι,	f g : ι → ℝ,	p q : ℝ,	hpq : p.is_conjugate_exponent q,	hf : ∀ (i : ι), i ∈ s → 0 ≤ f i,	hg : ∀ (i : ι), i ∈ s → 0 ≤ g i	⊢ ∀ (x : ι), x ∈ s → g x ^ q = abs (g x) ^ q
ι : Type u,	s : finset ι,	f g : ι → ℝ,	p q : ℝ,	hpq : p.is_conjugate_exponent q,	hf : ∀ (i : ι), i ∈ s → 0 ≤ f i,	hg : ∀ (i : ι), i ∈ s → 0 ≤ g i,	i : ι,	hi : i ∈ s	⊢ f i ^ p = abs (f i) ^ p
ι : Type u,	s : finset ι,	f g : ι → ℝ,	p q : ℝ,	hpq : p.is_conjugate_exponent q,	hf : ∀ (i : ι), i ∈ s → 0 ≤ f i,	hg : ∀ (i : ι), i ∈ s → 0 ≤ g i,	i : ι,	hi : i ∈ s	⊢ g i ^ q = abs (g i) ^ q
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : a + b = ⊤	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : (a + b) ^ p = ⊤	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : a + b = ⊤	⊢ a ^ p + b ^ p ≤ (a + b) ^ p		p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : (a + b) ^ p = ⊤	⊢ a ^ p + b ^ p ≤ ⊤
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : a + b = 0	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : a + b = 0	⊢ a ^ p + b ^ p ≤ (a + b) ^ p		p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0	⊢ ¬(a = 0 ∧ b = 0)
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0)	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0)	⊢ a / (a + b) + b / (a + b) = 1
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : (a / (a + b)) ^ p + (b / (a + b)) ^ p ≤ 1	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p ≤ 1	⊢ (a + b) ^ p ≠ 0
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p ≤ 1	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p ≤ 1,	hab_0 : (a + b) ^ p ≠ 0	⊢ (a + b) ^ p ≠ ⊤
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p ≤ 1,	hab_0 : (a + b) ^ p ≠ 0	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p ≤ 1,	hab_0 : (a + b) ^ p ≠ 0,	hab_top : (a + b) ^ p ≠ ⊤	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p ≤ 1,	hab_0 : (a + b) ^ p ≠ 0,	hab_top : (a + b) ^ p ≠ ⊤	⊢ (a + b) ^ p * (a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p) ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p ≤ 1,	hab_0 : (a + b) ^ p ≠ 0,	hab_top : (a + b) ^ p ≠ ⊤	⊢ (a + b) ^ p * (a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p) ≤ (a + b) ^ p		p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p ≤ 1,	hab_0 : (a + b) ^ p ≠ 0,	hab_top : (a + b) ^ p ≠ ⊤,	h_mul : (a + b) ^ p * (a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p) ≤ (a + b) ^ p	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p ≤ 1,	hab_0 : (a + b) ^ p ≠ 0,	hab_top : (a + b) ^ p ≠ ⊤	⊢ (a + b) ^ p * (a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p) ≤ (a + b) ^ p * 1
p : ℝ,	a b : ℝ≥0∞,	hp1 : 1 ≤ p,	hp_pos : 0 < p,	h_top : ¬a + b = ⊤,	ha_top : a ≠ ⊤,	hb_top : b ≠ ⊤,	h_zero : ¬a + b = 0,	h_nonzero : ¬(a = 0 ∧ b = 0),	h_add : a / (a + b) + b / (a + b) = 1,	h : a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p ≤ 1,	hab_0 : (a + b) ^ p ≠ 0,	hab_top : (a + b) ^ p ≠ ⊤,	h_mul : (a + b) ^ p * (a ^ p / (a + b) ^ p + b ^ p / (a + b) ^ p) ≤ (a + b) ^ p	⊢ a ^ p + b ^ p ≤ (a + b) ^ p
X Y Z : SemiNormedGroup,	f : X ⟶ Y,	g : Y ⟶ Z,	w : f ≫ g = 0,	e : SemiNormedGroup.explicit_cokernel f ⟶ Z,	he : SemiNormedGroup.explicit_cokernel_π f ≫ e = g	⊢ e = SemiNormedGroup.explicit_cokernel_desc w
X Y Z : SemiNormedGroup,	f : X ⟶ Y,	g : Y ⟶ Z,	w : f ≫ g = 0,	e : SemiNormedGroup.explicit_cokernel f ⟶ Z,	he : SemiNormedGroup.explicit_cokernel_π f ≫ e = g	⊢ f ≫ g = 0 ≫ g
X Y Z : SemiNormedGroup,	f : X ⟶ Y,	g : Y ⟶ Z,	w : f ≫ g = 0,	e : SemiNormedGroup.explicit_cokernel f ⟶ Z,	he : SemiNormedGroup.explicit_cokernel_π f ≫ e = g	⊢ ∀ (j : category_theory.limits.walking_parallel_pair), (SemiNormedGroup.cokernel_cocone f).ι.app j ≫ e = (category_theory.limits.cofork.of_π g _).ι.app j
X Y Z : SemiNormedGroup,	f : X ⟶ Y,	g : Y ⟶ Z,	w : f ≫ g = 0,	e : SemiNormedGroup.explicit_cokernel f ⟶ Z,	he : SemiNormedGroup.explicit_cokernel_π f ≫ e = g	⊢ (SemiNormedGroup.cokernel_cocone f).ι.app category_theory.limits.walking_parallel_pair.zero ≫ e = (category_theory.limits.cofork.of_π g _).ι.app category_theory.limits.walking_parallel_pair.zero
X Y Z : SemiNormedGroup,	f : X ⟶ Y,	g : Y ⟶ Z,	w : f ≫ g = 0,	e : SemiNormedGroup.explicit_cokernel f ⟶ Z,	he : SemiNormedGroup.explicit_cokernel_π f ≫ e = g	⊢ (SemiNormedGroup.cokernel_cocone f).ι.app category_theory.limits.walking_parallel_pair.zero ≫ e = (category_theory.limits.cofork.of_π g _).ι.app category_theory.limits.walking_parallel_pair.zero		X Y Z : SemiNormedGroup,	f : X ⟶ Y,	g : Y ⟶ Z,	w : f ≫ g = 0,	e : SemiNormedGroup.explicit_cokernel f ⟶ Z,	he : SemiNormedGroup.explicit_cokernel_π f ≫ e = g	⊢ (SemiNormedGroup.cokernel_cocone f).ι.app category_theory.limits.walking_parallel_pair.one ≫ e = (category_theory.limits.cofork.of_π g _).ι.app category_theory.limits.walking_parallel_pair.one
X Y Z : SemiNormedGroup,	f : X ⟶ Y,	g : Y ⟶ Z,	w : f ≫ g = 0,	e : SemiNormedGroup.explicit_cokernel f ⟶ Z,	he : SemiNormedGroup.explicit_cokernel_π f ≫ e = g	⊢ (SemiNormedGroup.cokernel_cocone f).ι.app category_theory.limits.walking_parallel_pair.zero ≫ e = 0
X Y Z : SemiNormedGroup,	f : X ⟶ Y,	g : Y ⟶ Z,	w : f ≫ g = 0,	e : SemiNormedGroup.explicit_cokernel f ⟶ Z,	he : SemiNormedGroup.explicit_cokernel_π f ≫ e = g	⊢ (SemiNormedGroup.cokernel_cocone f).ι.app category_theory.limits.walking_parallel_pair.one ≫ e = (category_theory.limits.cofork.of_π g _).ι.app category_theory.limits.walking_parallel_pair.one
X Y : SemiNormedGroup₁,	f : X ⟶ Y,	s : category_theory.limits.cokernel_cofork f	⊢ (SemiNormedGroup₁.cokernel_cocone f).X ⟶ s.X
X Y : SemiNormedGroup₁,	f : X ⟶ Y,	s : category_theory.limits.cokernel_cofork f	⊢ normed_group_hom ↥((SemiNormedGroup₁.cokernel_cocone f).X) ↥(s.X)
X Y : SemiNormedGroup₁,	f : X ⟶ Y,	s : category_theory.limits.cokernel_cofork f	⊢ ∀ (s_1 : ↥((category_theory.limits.parallel_pair f 0).obj category_theory.limits.walking_parallel_pair.one)), s_1 ∈ f.val.range → ⇑((category_theory.limits.cofork.π s).val) s_1 = 0
X Y : SemiNormedGroup₁,	f : X ⟶ Y,	s : category_theory.limits.cokernel_cofork f,	b : ↥X	⊢ ⇑((category_theory.limits.cofork.π s).val) (⇑(f.val.to_add_monoid_hom) b) = 0
X Y : SemiNormedGroup₁,	f : X ⟶ Y,	s : category_theory.limits.cokernel_cofork f	⊢ normed_group_hom ↥((SemiNormedGroup₁.cokernel_cocone f).X) ↥(s.X)		X Y : SemiNormedGroup₁,	f : X ⟶ Y,	s : category_theory.limits.cokernel_cofork f	⊢ ?m_1.norm_noninc
X Y : SemiNormedGroup₁,	f : X ⟶ Y,	s : category_theory.limits.cokernel_cofork f,	b : ↥X	⊢ ⇑(f ≫ category_theory.limits.cofork.π s) b = 0
X Y : SemiNormedGroup₁,	f : X ⟶ Y,	s : category_theory.limits.cokernel_cofork f	⊢ (normed_group_hom.lift f.val.range (category_theory.limits.cofork.π s).val _).norm_noninc
V : Type u_2,	P : Type u_3,	_inst_1 : semi_normed_group V,	_inst_2 : pseudo_metric_space P,	_inst_3 : semi_normed_add_torsor V P,	𝕜 : Type u_6,	_inst_7 : normed_field 𝕜,	_inst_8 : semi_normed_space 𝕜 V,	p₁ p₂ : P,	c : 𝕜	⊢ has_dist.dist p₁ (⇑(affine_map.homothety p₁ c) p₂) = ∥c∥ * has_dist.dist p₁ p₂
V : Type u_2,	P : Type u_3,	_inst_1 : semi_normed_group V,	_inst_2 : pseudo_metric_space P,	_inst_3 : semi_normed_add_torsor V P,	𝕜 : Type u_6,	_inst_7 : normed_field 𝕜,	_inst_8 : semi_normed_space 𝕜 V,	_inst_9 : invertible 2,	p₁ p₂ p₃ p₄ : P	⊢ has_dist.dist (midpoint 𝕜 p₁ p₂) (midpoint 𝕜 p₃ p₄) ≤ (has_dist.dist p₁ p₃ + has_dist.dist p₂ p₄) / ∥2∥
V : Type u_2,	P : Type u_3,	_inst_1 : semi_normed_group V,	_inst_2 : pseudo_metric_space P,	_inst_3 : semi_normed_add_torsor V P,	𝕜 : Type u_6,	_inst_7 : normed_field 𝕜,	_inst_8 : semi_normed_space 𝕜 V,	_inst_9 : invertible 2,	p₁ p₂ p₃ p₄ : P	⊢ has_dist.dist (midpoint 𝕜 p₁ p₂) (midpoint 𝕜 p₃ p₄) ≤ (has_dist.dist p₁ p₃ + has_dist.dist p₂ p₄) / ∥2∥
V : Type u_2,	P : Type u_3,	_inst_1 : semi_normed_group V,	_inst_2 : pseudo_metric_space P,	_inst_3 : semi_normed_add_torsor V P,	𝕜 : Type u_6,	_inst_7 : normed_field 𝕜,	_inst_8 : semi_normed_space 𝕜 V,	_inst_9 : invertible 2,	p₁ p₂ p₃ p₄ : P	⊢ semi_normed_add_torsor V P
V : Type u_2,	P : Type u_3,	_inst_1 : semi_normed_group V,	_inst_2 : pseudo_metric_space P,	_inst_3 : semi_normed_add_torsor V P,	𝕜 : Type u_6,	_inst_7 : normed_field 𝕜,	_inst_8 : semi_normed_space 𝕜 V,	_inst_9 : invertible 2,	p₁ p₂ p₃ p₄ : P	⊢ ∥midpoint 𝕜 (p₁ -ᵥ p₃) (p₂ -ᵥ p₄)∥ ≤ (∥p₁ -ᵥ p₃∥ + ∥p₂ -ᵥ p₄∥) / ∥2∥
V : Type u_2,	P : Type u_3,	_inst_1 : semi_normed_group V,	_inst_2 : pseudo_metric_space P,	_inst_3 : semi_normed_add_torsor V P,	𝕜 : Type u_6,	_inst_7 : normed_field 𝕜,	_inst_8 : semi_normed_space 𝕜 V,	_inst_9 : invertible 2,	p₁ p₂ p₃ p₄ : P	⊢ semi_normed_add_torsor V P
V : Type u_2,	P : Type u_3,	_inst_1 : semi_normed_group V,	_inst_2 : pseudo_metric_space P,	_inst_3 : semi_normed_add_torsor V P,	𝕜 : Type u_6,	_inst_7 : normed_field 𝕜,	_inst_8 : semi_normed_space 𝕜 V,	_inst_9 : invertible 2,	p₁ p₂ p₃ p₄ : P	⊢ ∥midpoint 𝕜 (p₁ -ᵥ p₃) (p₂ -ᵥ p₄)∥ ≤ (∥p₁ -ᵥ p₃∥ + ∥p₂ -ᵥ p₄∥) / ∥2∥
V : Type u_2,	P : Type u_3,	_inst_1 : semi_normed_group V,	_inst_2 : pseudo_metric_space P,	_inst_3 : semi_normed_add_torsor V P,	𝕜 : Type u_6,	_inst_7 : normed_field 𝕜,	_inst_8 : semi_normed_space 𝕜 V,	_inst_9 : invertible 2,	p₁ p₂ p₃ p₄ : P	⊢ ∥p₁ -ᵥ p₃ + (p₂ -ᵥ p₄)∥ / ∥2∥ ≤ (∥p₁ -ᵥ p₃∥ + ∥p₂ -ᵥ p₄∥) / ∥2∥
α : Type u_1,	ι : Type u_4,	_inst_1 : semi_normed_group α,	_inst_3 : complete_space α,	f : ι → α	⊢ summable f ↔ ∀ (ε : ℝ), ε > 0 → (∃ (s : finset ι), ∀ (t : finset ι), disjoint t s → ∥∑ (i : ι) in t, f i∥ < ε)
α : Type u_1,	ι : Type u_4,	_inst_1 : semi_normed_group α,	f : ι → α,	g : ι → ℝ≥0,	a : ℝ≥0,	hg : has_sum g a,	h : ∀ (i : ι), ∥f i∥₊ ≤ g i	⊢ ∥∑' (i : ι), f i∥₊ ≤ a
α : Type u_1,	ι : Type u_4,	_inst_1 : semi_normed_group α,	f : ι → α,	g : ι → ℝ≥0,	a : ℝ≥0,	hg : has_sum (λ (a : ι), ↑(g a)) ↑a,	h : ∀ (i : ι), ∥f i∥ ≤ ↑(g i)	⊢ ∥tsum f∥ ≤ ↑a
V : Type u_5,	_inst_1 : semi_normed_group V	⊢ ∀ (x y : uniform_space.completion V), has_dist.dist x y = ∥x - y∥
V : Type u_5,	_inst_1 : semi_normed_group V,	x y : uniform_space.completion V	⊢ has_dist.dist x y = ∥x - y∥
V : Type u_5,	_inst_1 : semi_normed_group V,	x y : uniform_space.completion V	⊢ is_closed {x : uniform_space.completion V × uniform_space.completion V | has_dist.dist x.fst x.snd = ∥x.fst - x.snd∥}
V : Type u_5,	_inst_1 : semi_normed_group V,	x y : uniform_space.completion V	⊢ ∀ (a b : V), has_dist.dist ↑a ↑b = ∥↑a - ↑b∥
V : Type u_5,	_inst_1 : semi_normed_group V,	x y : uniform_space.completion V	⊢ has_dist.dist x y = ∥x - y∥
V : Type u_5,	_inst_1 : semi_normed_group V	⊢ is_closed {x : uniform_space.completion V × uniform_space.completion V | has_dist.dist x.fst x.snd = ∥x.fst - x.snd∥}
V : Type u_5,	_inst_1 : semi_normed_group V	⊢ is_closed {x : uniform_space.completion V × uniform_space.completion V | has_dist.dist x.fst x.snd = ∥x.fst - x.snd∥}		V : Type u_5,	_inst_1 : semi_normed_group V	⊢ ∀ (a b : V), has_dist.dist ↑a ↑b = ∥↑a - ↑b∥
V : Type u_5,	_inst_1 : semi_normed_group V	⊢ continuous (λ (x : uniform_space.completion V × uniform_space.completion V), ∥x.fst - x.snd∥)
V : Type u_5,	_inst_1 : semi_normed_group V	⊢ ∀ (a b : V), has_dist.dist ↑a ↑b = ∥↑a - ↑b∥
V : Type u_5,	_inst_1 : semi_normed_group V,	x y : V	⊢ has_dist.dist ↑x ↑y = ∥↑x - ↑y∥
V : Type u_5,	_inst_1 : semi_normed_group V	⊢ add_comm_group (uniform_space.completion V)
V : Type u_5,	_inst_1 : semi_normed_group V	⊢ metric_space (uniform_space.completion V)
α : Type u_1,	_inst_1 : semi_normed_group α,	w : α,	r : ℝ	⊢ w ∈ metric.sphere 0 r ↔ ∥w∥ = r
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E	⊢ is_bounded_linear_map 𝕜 (λ (f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F), f.comp_continuous_linear_map (λ (_x : ι), g))
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f₁ f₂ : continuous_multilinear_map 𝕜 (λ (i : ι), E) F	⊢ (f₁ + f₂).comp_continuous_linear_map (λ (_x : ι), g) = f₁.comp_continuous_linear_map (λ (_x : ι), g) + f₂.comp_continuous_linear_map (λ (_x : ι), g)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f₁ f₂ : continuous_multilinear_map 𝕜 (λ (i : ι), E) F,	m : ι → G	⊢ ⇑((f₁ + f₂).comp_continuous_linear_map (λ (_x : ι), g)) m = ⇑(f₁.comp_continuous_linear_map (λ (_x : ι), g) + f₂.comp_continuous_linear_map (λ (_x : ι), g)) m
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	c : 𝕜,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F	⊢ (c • f).comp_continuous_linear_map (λ (_x : ι), g) = c • f.comp_continuous_linear_map (λ (_x : ι), g)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	c : 𝕜,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F,	m : ι → G	⊢ ⇑((c • f).comp_continuous_linear_map (λ (_x : ι), g)) m = ⇑(c • f.comp_continuous_linear_map (λ (_x : ι), g)) m
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F	⊢ ∥continuous_multilinear_map.comp_continuous_linear_map f (λ (_x : ι), g)∥ ≤ ∥g∥ ^ fintype.card ι * ∥f∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F	⊢ 0 ≤ ∥g∥ ^ fintype.card ι * ∥f∥		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F,	m : ι → G	⊢ ∥⇑(continuous_multilinear_map.comp_continuous_linear_map f (λ (_x : ι), g)) m∥ ≤ ∥g∥ ^ fintype.card ι * ∥f∥ * ∏ (i : ι), ∥m i∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F	⊢ 0 ≤ ∥g∥ ^ fintype.card ι * ∥f∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F,	m : ι → G	⊢ ∥⇑(continuous_multilinear_map.comp_continuous_linear_map f (λ (_x : ι), g)) m∥ ≤ ∥g∥ ^ fintype.card ι * ∥f∥ * ∏ (i : ι), ∥m i∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F,	m : ι → G	⊢ ∥f∥ * ∏ (i : ι), ∥⇑g (m i)∥ ≤ ∥f∥ * ∏ (i : ι), ∥g∥ * ∥m i∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F,	m : ι → G	⊢ ∏ (i : ι), ∥⇑g (m i)∥ ≤ ∏ (i : ι), ∥g∥ * ∥m i∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F,	m : ι → G	⊢ ∥f∥ * ∏ (i : ι), ∥g∥ * ∥m i∥ = ∥g∥ ^ fintype.card ι * ∥f∥ * ∏ (i : ι), ∥m i∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	ι : Type u_5,	_inst_8 : decidable_eq ι,	_inst_9 : fintype ι,	g : G →L[𝕜] E,	f : continuous_multilinear_map 𝕜 (λ (i : ι), E) F,	m : ι → G	⊢ ∥f∥ * (∥g∥ ^ fintype.card ι * ∏ (x : ι), ∥m x∥) = ∥g∥ ^ fintype.card ι * ∥f∥ * ∏ (i : ι), ∥m i∥
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	f : E →L[𝕜] F →L[𝕜] G,	x₁ x₂ : E,	y : F	⊢ ⇑(⇑f (x₁ + x₂, y).fst) (x₁ + x₂, y).snd = ⇑(⇑f (x₁, y).fst) (x₁, y).snd + ⇑(⇑f (x₂, y).fst) (x₂, y).snd
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	f : E →L[𝕜] F →L[𝕜] G,	c : 𝕜,	x : E,	y : F	⊢ ⇑(⇑f (c • x, y).fst) (c • x, y).snd = c • ⇑(⇑f (x, y).fst) (x, y).snd
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_3,	_inst_4 : normed_group F,	_inst_5 : normed_space 𝕜 F,	G : Type u_4,	_inst_6 : normed_group G,	_inst_7 : normed_space 𝕜 G,	f : E →L[𝕜] F →L[𝕜] G,	x : E,	y : F	⊢ ∥f∥ * ∥x∥ * ∥y∥ ≤ linear_order.max ∥f∥ 1 * ∥x∥ * ∥y∥
R : Type u_1,	N : Type u_3,	M' : Type u_5,	_inst_1 : normed_field R,	_inst_3 : semi_normed_group N,	_inst_6 : semi_normed_space R N,	_inst_8 : normed_group M',	_inst_9 : normed_space R M',	f' : M' →L[R] N,	h : is_conformal_map f',	_let_match : is_conformal_map f' → function.injective ⇑f',	c : R,	hc : c ≠ 0,	li : M' →ₗᵢ[R] N,	hf' : ⇑f' = c • ⇑li	⊢ function.injective ⇑f'
R : Type u_1,	N : Type u_3,	M' : Type u_5,	_inst_1 : normed_field R,	_inst_3 : semi_normed_group N,	_inst_6 : semi_normed_space R N,	_inst_8 : normed_group M',	_inst_9 : normed_space R M',	f' : M' →L[R] N,	h : is_conformal_map f',	_let_match : is_conformal_map f' → function.injective ⇑f',	c : R,	hc : c ≠ 0,	li : M' →ₗᵢ[R] N,	hf' : ⇑f' = c • ⇑li	⊢ function.injective ⇑f'
R : Type u_1,	N : Type u_3,	M' : Type u_5,	_inst_1 : normed_field R,	_inst_3 : semi_normed_group N,	_inst_6 : semi_normed_space R N,	_inst_8 : normed_group M',	_inst_9 : normed_space R M',	f' : M' →L[R] N,	h : is_conformal_map f',	_let_match : is_conformal_map f' → function.injective ⇑f',	c : R,	hc : c ≠ 0,	li : M' →ₗᵢ[R] N,	hf' : ⇑f' = c • ⇑li	⊢ function.injective (λ (i : M'), c • ⇑li i)
𝕜 : Type u_1,	V : Type u_2,	_inst_1 : normed_field 𝕜,	_inst_2 : add_comm_group V,	_inst_3 : module 𝕜 V,	e : enorm 𝕜 V,	c : 𝕜,	x : ↥(e.finite_subspace)	⊢ ∥c • x∥ = ∥c∥ * ∥x∥
⊢ real.exp = exp ℝ ℝ
x : ℝ	⊢ real.exp x = exp ℝ ℝ x
x : ℝ	⊢ ∑' (z : ℕ), ⇑is_R_or_C.re_clm ((λ (n : ℕ), (1 / ↑n!) • ↑x ^ n) z) = (λ (x : ℝ), ∑' (n : ℕ), x ^ n / ↑n!) x
x : ℝ,	n : ℕ	⊢ ⇑is_R_or_C.re_clm ((λ (n : ℕ), (1 / ↑n!) • ↑x ^ n) n) = x ^ n / ↑n!
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type v,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	_inst_4 : proper_space 𝕜,	_inst_5 : finite_dimensional 𝕜 E	⊢ proper_space E
𝕜 : Type u,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type v,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	_inst_4 : proper_space 𝕜,	_inst_5 : finite_dimensional 𝕜 E,	e : E ≃L[𝕜] fin (finite_dimensional.finrank 𝕜 E) → 𝕜 := continuous_linear_equiv.of_finrank_eq _	⊢ proper_space E
𝕜 : Type u,	G : Type wG,	G' : Type wG',	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	_inst_16 : normed_group G',	_inst_17 : normed_space 𝕜 G',	f : continuous_multilinear_map 𝕜 (λ (i : fin 0), G) G',	x : fin 0 → G	⊢ ∥⇑f x∥ = ∥f∥
𝕜 : Type u,	G : Type wG,	G' : Type wG',	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	_inst_16 : normed_group G',	_inst_17 : normed_space 𝕜 G',	f : continuous_multilinear_map 𝕜 (λ (i : fin 0), G) G',	x : fin 0 → G,	this : x = 0	⊢ ∥⇑f x∥ = ∥f∥
𝕜 : Type u,	G : Type wG,	G' : Type wG',	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	_inst_16 : normed_group G',	_inst_17 : normed_space 𝕜 G',	f : continuous_multilinear_map 𝕜 (λ (i : fin 0), G) G'	⊢ ∥⇑f 0∥ ≤ ∥f∥
𝕜 : Type u,	G : Type wG,	G' : Type wG',	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	_inst_16 : normed_group G',	_inst_17 : normed_space 𝕜 G',	f : continuous_multilinear_map 𝕜 (λ (i : fin 0), G) G'	⊢ ∥⇑f 0∥ = ∥f∥
𝕜 : Type u,	G : Type wG,	G' : Type wG',	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	_inst_16 : normed_group G',	_inst_17 : normed_space 𝕜 G',	f : continuous_multilinear_map 𝕜 (λ (i : fin 0), G) G'	⊢ ∥f∥ ≤ ∥⇑f 0∥
𝕜 : Type u,	G : Type wG,	G' : Type wG',	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	_inst_16 : normed_group G',	_inst_17 : normed_space 𝕜 G',	f : continuous_multilinear_map 𝕜 (λ (i : fin 0), G) G',	m : fin 0 → G	⊢ ∥⇑(continuous_multilinear_map.curry0 𝕜 G f.uncurry0) m∥ ≤ ∥f.uncurry0∥ * ∏ (i : fin 0), ∥m i∥
𝕜 : Type u,	G : Type wG,	G' : Type wG',	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	_inst_16 : normed_group G',	_inst_17 : normed_space 𝕜 G',	f : continuous_multilinear_map 𝕜 (λ (i : fin 0), G) G',	this : ∥continuous_multilinear_map.curry0 𝕜 G f.uncurry0∥ ≤ ∥f.uncurry0∥	⊢ ∥f∥ ≤ ∥⇑f 0∥
𝕜 : Type u,	ι : Type v,	E : ι → Type wE,	G : Type wG,	G' : Type wG',	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_6 : Π (i : ι), normed_group (E i),	_inst_7 : Π (i : ι), normed_space 𝕜 (E i),	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	_inst_16 : normed_group G',	_inst_17 : normed_space 𝕜 G',	f : continuous_multilinear_map 𝕜 E G,	g : continuous_multilinear_map 𝕜 E G',	m : Π (i : ι), E i,	H : 0 ≤ ∏ (i : ι), ∥m i∥	⊢ ∥⇑(f.prod g) m∥ ≤ linear_order.max ∥f∥ ∥g∥ * ∏ (i : ι), ∥m i∥
𝕜 : Type u,	ι : Type v,	G : Type wG,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G	⊢ continuous {to_fun := (continuous_multilinear_map.pi_field_equiv_aux 𝕜 ι G).to_fun, map_add' := _, map_smul' := _, inv_fun := (continuous_multilinear_map.pi_field_equiv_aux 𝕜 ι G).inv_fun, left_inv := _, right_inv := _}.to_fun
𝕜 : Type u,	ι : Type v,	G : Type wG,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	z : G	⊢ ∥⇑((continuous_multilinear_map.pi_field_equiv_aux 𝕜 ι G).to_linear_map) z∥ ≤ 1 * ∥z∥
𝕜 : Type u,	ι : Type v,	G : Type wG,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	z : G	⊢ ∥⇑((continuous_multilinear_map.pi_field_equiv_aux 𝕜 ι G).to_linear_map) z∥ ≤ ∥z∥
𝕜 : Type u,	ι : Type v,	G : Type wG,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	z : G	⊢ ∥continuous_multilinear_map.mk_pi_field 𝕜 ι z∥ ≤ ∥z∥
𝕜 : Type u,	ι : Type v,	G : Type wG,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G	⊢ continuous {to_fun := (continuous_multilinear_map.pi_field_equiv_aux 𝕜 ι G).to_fun, map_add' := _, map_smul' := _, inv_fun := (continuous_multilinear_map.pi_field_equiv_aux 𝕜 ι G).inv_fun, left_inv := _, right_inv := _}.inv_fun
𝕜 : Type u,	ι : Type v,	G : Type wG,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	f : continuous_multilinear_map 𝕜 (λ (i : ι), 𝕜) G	⊢ ∥⇑((continuous_multilinear_map.pi_field_equiv_aux 𝕜 ι G).symm.to_linear_map) f∥ ≤ 1 * ∥f∥
𝕜 : Type u,	ι : Type v,	G : Type wG,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	f : continuous_multilinear_map 𝕜 (λ (i : ι), 𝕜) G	⊢ ∥⇑((continuous_multilinear_map.pi_field_equiv_aux 𝕜 ι G).symm.to_linear_map) f∥ ≤ ∥f∥
𝕜 : Type u,	ι : Type v,	G : Type wG,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	f : continuous_multilinear_map 𝕜 (λ (i : ι), 𝕜) G	⊢ ∥⇑f (λ (i : ι), 1)∥ ≤ ∥f∥
𝕜 : Type u,	ι : Type v,	G : Type wG,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	_inst_5 : nondiscrete_normed_field 𝕜,	_inst_14 : normed_group G,	_inst_15 : normed_space 𝕜 G,	f : continuous_multilinear_map 𝕜 (λ (i : ι), 𝕜) G	⊢ ∥(λ (i : ι), 1)∥ ≤ 1
V₁ : Type u_3,	V₂ : Type u_4,	V₃ : Type u_5,	_inst_3 : semi_normed_group V₁,	_inst_4 : semi_normed_group V₂,	_inst_5 : semi_normed_group V₃,	W₁ : Type u_6,	W₂ : Type u_7,	W₃ : Type u_8,	_inst_6 : semi_normed_group W₁,	_inst_7 : semi_normed_group W₂,	_inst_8 : semi_normed_group W₃,	f₁ : normed_group_hom V₁ W₁,	f₂ : normed_group_hom V₂ W₂,	f₃ : normed_group_hom V₃ W₃,	φ : normed_group_hom V₁ V₂,	ψ : normed_group_hom W₁ W₂,	φ' : normed_group_hom V₂ V₃,	ψ' : normed_group_hom W₂ W₃,	hf : ψ.comp f₁ = f₂.comp φ,	hf' : ψ'.comp f₂ = f₃.comp φ'	⊢ (ψ'.comp ψ).comp f₁ = f₃.comp (φ'.comp φ)
V₁ : Type u_2,	V₂ : Type u_3,	_inst_2 : semi_normed_group V₁,	_inst_3 : semi_normed_group V₂,	f g : normed_group_hom V₁ V₂	⊢ f = g → ∀ (x : V₁), ⇑f x = ⇑g x
V₁ : Type u_2,	V₂ : Type u_3,	_inst_2 : semi_normed_group V₁,	_inst_3 : semi_normed_group V₂,	f g : normed_group_hom V₁ V₂	⊢ f = g → ∀ (x : V₁), ⇑f x = ⇑g x
V₁ : Type u_2,	V₂ : Type u_3,	_inst_2 : semi_normed_group V₁,	_inst_3 : semi_normed_group V₂,	f : normed_group_hom V₁ V₂,	x : V₁	⊢ ⇑f x = ⇑f x
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F	⊢ ∥c.smul_right f∥ = ∥c∥ * ∥f∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F	⊢ ∥c.smul_right f∥ ≤ ∥c∥ * ∥f∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F,	x : E	⊢ ∥⇑(c.smul_right f) x∥ ≤ ∥c∥ * ∥f∥ * ∥x∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F,	x : E	⊢ ∥c∥ * ∥x∥ * ∥f∥ = ∥c∥ * ∥f∥ * ∥x∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F	⊢ ∥c.smul_right f∥ ≤ ∥c∥ * ∥f∥		𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F	⊢ ∥c∥ * ∥f∥ ≤ ∥c.smul_right f∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F	⊢ ∥c∥ * ∥f∥ ≤ ∥c.smul_right f∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F,	h : f = 0	⊢ ∥c∥ * ∥f∥ ≤ ∥c.smul_right f∥		𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F,	h : ¬f = 0	⊢ ∥c∥ * ∥f∥ ≤ ∥c.smul_right f∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F,	h : f = 0	⊢ ∥c∥ * ∥f∥ ≤ ∥c.smul_right f∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F,	h : ¬f = 0	⊢ ∥c∥ * ∥f∥ ≤ ∥c.smul_right f∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F,	h : ¬f = 0,	this : 0 < ∥f∥	⊢ ∥c∥ * ∥f∥ ≤ ∥c.smul_right f∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F,	h : ¬f = 0,	this : 0 < ∥f∥	⊢ ∥c∥ ≤ ∥c.smul_right f∥ / ∥f∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F,	h : ¬f = 0,	this : 0 < ∥f∥,	x : E	⊢ ∥⇑c x∥ ≤ ∥c.smul_right f∥ / ∥f∥ * ∥x∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	c : E →L[𝕜] 𝕜,	f : F,	h : ¬f = 0,	this : 0 < ∥f∥,	x : E	⊢ ∥⇑c x∥ * ∥f∥ ≤ ∥c.smul_right f∥ * ∥x∥
𝕜 : Type u_1,	_inst_4 : nondiscrete_normed_field 𝕜,	𝕜' : Type u_5,	_inst_8 : normed_ring 𝕜',	_inst_9 : normed_algebra 𝕜 𝕜'	⊢ ∥continuous_linear_map.lmul 𝕜 𝕜'∥ = 1
𝕜 : Type u_1,	_inst_4 : nondiscrete_normed_field 𝕜,	𝕜' : Type u_5,	_inst_8 : normed_ring 𝕜',	_inst_9 : normed_algebra 𝕜 𝕜',	_inst : nontrivial 𝕜'	⊢ ∥continuous_linear_map.lmul 𝕜 𝕜'∥ = 1
𝕜 : Type u_1,	_inst_4 : nondiscrete_normed_field 𝕜,	𝕜' : Type u_5,	_inst_8 : normed_ring 𝕜',	_inst_9 : normed_algebra 𝕜 𝕜'	⊢ ∥continuous_linear_map.lmul 𝕜 𝕜'∥ = 1
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : semi_normed_group E,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : semi_normed_space 𝕜 E,	x : E,	c : 𝕜	⊢ ∥⇑(linear_map.to_span_singleton 𝕜 E x) c∥ = ∥c∥ * ∥x∥
𝕜 : Type u_1,	E : Type u_2,	_inst_1 : semi_normed_group E,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : semi_normed_space 𝕜 E,	x : E,	c : 𝕜	⊢ ∥⇑(linear_map.to_span_singleton 𝕜 E x) c∥ = ∥x∥ * ∥c∥
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	_inst_8 : nontrivial E,	f : E →L[𝕜] F,	a : ℝ,	hf : ∀ (x : E), ∥⇑f x∥ = a * ∥x∥	⊢ ∥f∥ = a
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	_inst_8 : nontrivial E,	f : E →L[𝕜] F,	a : ℝ,	hf : ∀ (x : E), ∥⇑f x∥ = a * ∥x∥,	x : E,	hx : x ≠ 0	⊢ ∥f∥ = a
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	_inst_8 : nontrivial E,	f : E →L[𝕜] F,	a : ℝ,	hf : ∀ (x : E), ∥⇑f x∥ = a * ∥x∥,	x : E,	hx : 0 < ∥x∥	⊢ 0 ≤ a
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	_inst_8 : nontrivial E,	f : E →L[𝕜] F,	a : ℝ,	hf : ∀ (x : E), ∥⇑f x∥ = a * ∥x∥,	x : E,	hx : 0 < ∥x∥	⊢ ∥f∥ = a
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	_inst_8 : nontrivial E,	f : E →L[𝕜] F,	a : ℝ,	hf : ∀ (x : E), ∥⇑f x∥ = a * ∥x∥,	x : E,	hx : 0 < ∥x∥,	ha : 0 ≤ a	⊢ ∥f∥ = a
𝕜 : Type u_1,	E : Type u_2,	F : Type u_3,	_inst_1 : normed_group E,	_inst_2 : normed_group F,	_inst_4 : nondiscrete_normed_field 𝕜,	_inst_5 : normed_space 𝕜 E,	_inst_6 : normed_space 𝕜 F,	_inst_8 : nontrivial E,	f : E →L[𝕜] F,	a : ℝ,	hf : ∀ (x : E), ∥⇑f x∥ = a * ∥x∥,	x : E,	hx : 0 < ∥x∥,	ha : 0 ≤ a	⊢ a ≤ ∥f∥
x y : ℍ	⊢ ⇑is_R_or_C.conj (has_inner.inner y x) = has_inner.inner x y
x y z : ℍ	⊢ has_inner.inner (x + y) z = has_inner.inner x z + has_inner.inner y z
x y : ℍ,	r : ℝ	⊢ has_inner.inner (r • x) y = ⇑is_R_or_C.conj r * has_inner.inner x y
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : -(π / 2) ≤ x ∧ x ≤ π / 2	⊢ 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : -(π / 2) ≤ x ∧ x ≤ π / 2	⊢ 0 ≤ (complex.cos ↑x).re
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : -(π / 2) ≤ x ∧ x ≤ π / 2	⊢ 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : -(π / 2) ≤ x ∧ x ≤ π / 2,	hx₄ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ (complex.cos ↑x + complex.sin ↑x * complex.I).arg = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : -(π / 2) ≤ x ∧ x ≤ π / 2,	hx₄ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ (complex.cos ↑x + complex.sin ↑x * complex.I).arg = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : -(π / 2) ≤ x ∧ x ≤ π / 2,	hx₄ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ real.arcsin ((complex.cos ↑x + complex.sin ↑x * complex.I).im / complex.abs (complex.cos ↑x + complex.sin ↑x * complex.I)) = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	this : ¬0 ≤ real.cos x	⊢ ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2)	⊢ real.cos x < 0
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2)	⊢ real.cos x < 0
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2)	⊢ real.cos x < 0
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2)	⊢ π / 2 < -x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2)	⊢ -x < π + π / 2
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2)	⊢ real.cos (-x) < 0
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	this : real.sin x < 0	⊢ ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ real.sin x < 0
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ x < 0
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ -π < x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ real.sin x < 0
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im,	this : -π + -real.arcsin (real.sin x) = x	⊢ (complex.cos ↑x + complex.sin ↑x * complex.I).arg = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im,	this : -π + -real.arcsin (real.sin x) = x	⊢ (complex.cos ↑x + complex.sin ↑x * complex.I).arg = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im,	this : -π + -real.arcsin (real.sin x) = x	⊢ real.arcsin ((-(complex.cos ↑x + complex.sin ↑x * complex.I)).im / complex.abs (complex.cos ↑x + complex.sin ↑x * complex.I)) - π = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ -π + -real.arcsin (real.sin x) = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ -π + -real.arcsin (real.sin x) = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ -π + (x + π) = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ -(π / 2) ≤ x + π
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ x + π ≤ π / 2
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ -π + -real.arcsin (real.sin x) = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ x + π ≤ π / 2
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ -(π / 2) ≤ x + π
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : x < -(π / 2),	hx₅ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ x + π ≤ π / 2
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2)	⊢ π / 2 < x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2)	⊢ π / 2 < x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	h : ¬-(π / 2) ≤ x	⊢ π / 2 < x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	h : ¬x ≤ π / 2	⊢ π / 2 < x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	this : ¬0 ≤ real.cos x	⊢ ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x	⊢ real.cos x < 0
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x	⊢ real.cos x < 0
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x	⊢ π / 2 < x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x	⊢ x < π + π / 2
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	this : 0 ≤ real.sin x	⊢ 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ 0 ≤ real.sin x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ 0 ≤ x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ x ≤ π
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re	⊢ 0 ≤ real.sin x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im,	this : π - real.arcsin (real.sin x) = x	⊢ (complex.cos ↑x + complex.sin ↑x * complex.I).arg = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im,	this : π - real.arcsin (real.sin x) = x	⊢ (complex.cos ↑x + complex.sin ↑x * complex.I).arg = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im,	this : π - real.arcsin (real.sin x) = x	⊢ real.arcsin ((-(complex.cos ↑x + complex.sin ↑x * complex.I)).im / complex.abs (complex.cos ↑x + complex.sin ↑x * complex.I)) + π = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ π - real.arcsin (real.sin x) = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ π - real.arcsin (real.sin x) = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ π - (π - x) = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ -(π / 2) ≤ π - x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ π - x ≤ π / 2
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ π - real.arcsin (real.sin x) = x
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ x ≤ π / 2 + π
x : ℝ,	hx₁ : -π < x,	hx₂ : x ≤ π,	hx₃ : ¬(-(π / 2) ≤ x ∧ x ≤ π / 2),	hx₄ : ¬x < -(π / 2),	hx₅ : π / 2 < x,	hx₆ : ¬0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).re,	hx₇ : 0 ≤ (complex.cos ↑x + complex.sin ↑x * complex.I).im	⊢ π ≤ x + π / 2
⊢ 1.arg = 0
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n	⊢ filter.tendsto (λ (x : ℝ), x ^ n / (b * real.exp x + c)) filter.at_top (𝓝 0)
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n	⊢ ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0)
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	b' c' : ℝ,	h : 0 < b'	⊢ filter.tendsto (λ (x : ℝ), x ^ n / (b' * real.exp x + c')) filter.at_top (𝓝 0)
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	b' c' : ℝ,	h : 0 < b'	⊢ (λ (x : ℝ), x ^ n / (b' * real.exp x + c')) = (λ (x : ℝ), (b' * real.exp x + c') / x ^ n)⁻¹
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n	⊢ ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0)		b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0)	⊢ filter.tendsto (λ (x : ℝ), x ^ n / (b * real.exp x + c)) filter.at_top (𝓝 0)
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	b' c' : ℝ,	h : 0 < b',	x : ℝ	⊢ x ^ n / (b' * real.exp x + c') = (λ (x : ℝ), (b' * real.exp x + c') / x ^ n)⁻¹ x
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0)	⊢ filter.tendsto (λ (x : ℝ), x ^ n / (b * real.exp x + c)) filter.at_top (𝓝 0)
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0),	h : 0 < b	⊢ filter.tendsto (λ (x : ℝ), x ^ n / (b * real.exp x + c)) filter.at_top (𝓝 0)		case or.inr	b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0),	h : 0 > b	⊢ filter.tendsto (λ (x : ℝ), x ^ n / (b * real.exp x + c)) filter.at_top (𝓝 0)
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0),	h : 0 < b	⊢ filter.tendsto (λ (x : ℝ), x ^ n / (b * real.exp x + c)) filter.at_top (𝓝 0)
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0),	h : 0 > b	⊢ filter.tendsto (λ (x : ℝ), x ^ n / (b * real.exp x + c)) filter.at_top (𝓝 0)
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0),	h : 0 > b	⊢ (λ (x : ℝ), x ^ n / (b * real.exp x + c)) = λ (x : ℝ), -(x ^ n / (-b * real.exp x + -c))
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0),	h : 0 > b,	x : ℝ	⊢ x ^ n / (b * real.exp x + c) = -(x ^ n / (-b * real.exp x + -c))
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0),	h : 0 > b	⊢ (λ (x : ℝ), x ^ n / (b * real.exp x + c)) = λ (x : ℝ), -(x ^ n / (-b * real.exp x + -c))		b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0),	h : 0 > b	⊢ 0 = -0
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0),	h : 0 > b,	x : ℝ	⊢ x ^ n / (b * real.exp x + c) = -x ^ n / (-(b * real.exp x) + -c)
b c : ℝ,	n : ℕ,	hb : 0 ≠ b,	hn : 1 ≤ n,	H : ∀ (d e : ℝ), 0 < d → filter.tendsto (λ (x : ℝ), x ^ n / (d * real.exp x + e)) filter.at_top (𝓝 0),	h : 0 > b	⊢ 0 = -0
𝕜 : Type u_1,	_inst_1 : normed_linear_ordered_field 𝕜,	P Q : polynomial 𝕜,	_inst_2 : order_topology 𝕜,	hdeg : Q.degree < P.degree,	hQ : Q ≠ 0	⊢ filter.tendsto (λ (x : 𝕜), abs (polynomial.eval x P / polynomial.eval x Q)) filter.at_top filter.at_top
𝕜 : Type u_1,	_inst_1 : normed_linear_ordered_field 𝕜,	P Q : polynomial 𝕜,	_inst_2 : order_topology 𝕜,	hdeg : Q.degree < P.degree,	hQ : Q ≠ 0,	h : 0 ≤ P.leading_coeff / Q.leading_coeff	⊢ filter.tendsto (λ (x : 𝕜), abs (polynomial.eval x P / polynomial.eval x Q)) filter.at_top filter.at_top
𝕜 : Type u_1,	_inst_1 : normed_linear_ordered_field 𝕜,	P Q : polynomial 𝕜,	_inst_2 : order_topology 𝕜,	hdeg : Q.degree < P.degree,	hQ : Q ≠ 0,	h : 0 ≤ P.leading_coeff / Q.leading_coeff	⊢ filter.tendsto (λ (x : 𝕜), abs (polynomial.eval x P / polynomial.eval x Q)) filter.at_top filter.at_top		𝕜 : Type u_1,	_inst_1 : normed_linear_ordered_field 𝕜,	P Q : polynomial 𝕜,	_inst_2 : order_topology 𝕜,	hdeg : Q.degree < P.degree,	hQ : Q ≠ 0,	h : ¬0 ≤ P.leading_coeff / Q.leading_coeff	⊢ filter.tendsto (λ (x : 𝕜), abs (polynomial.eval x P / polynomial.eval x Q)) filter.at_top filter.at_top
𝕜 : Type u_1,	_inst_1 : normed_linear_ordered_field 𝕜,	P Q : polynomial 𝕜,	_inst_2 : order_topology 𝕜,	hdeg : Q.degree < P.degree,	hQ : Q ≠ 0,	h : ¬0 ≤ P.leading_coeff / Q.leading_coeff	⊢ filter.tendsto (λ (x : 𝕜), abs (polynomial.eval x P / polynomial.eval x Q)) filter.at_top filter.at_top
𝕜 : Type u_1,	_inst_1 : normed_linear_ordered_field 𝕜,	P Q : polynomial 𝕜,	_inst_2 : order_topology 𝕜,	hdeg : Q.degree < P.degree,	hQ : Q ≠ 0,	h : P.leading_coeff / Q.leading_coeff < 0	⊢ filter.tendsto (λ (x : 𝕜), abs (polynomial.eval x P / polynomial.eval x Q)) filter.at_top filter.at_top
x y z : ℝ,	hx : 0 < x,	hy : 0 < y	⊢ x < y ^ z ↔ real.log x < z * real.log y
f : ℝ → ℝ,	s : set ℝ,	f' x : ℝ,	hf : has_deriv_within_at f f' s x,	hx : f x ≠ 0	⊢ has_deriv_within_at (λ (y : ℝ), real.sqrt (f y)) (f' / (2 * real.sqrt (f x))) s x
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2	⊢ real.cos (π / 2 ^ (0 + 1)) = real.sqrt_two_add_series 0 0 / 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ	⊢ real.cos (π / 2 ^ (n + 1 + 1)) = real.sqrt_two_add_series 0 (n + 1) / 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ real.sqrt_two_add_series 0 (n + 1) / 2 = real.cos (π / 2 ^ (n + 1 + 1))
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ real.cos (π / 2 ^ (n + 1 + 1)) * 2 = real.sqrt_two_add_series 0 (n + 1)
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ real.cos (π / 2 ^ (n + 1 + 1)) = real.sqrt_two_add_series 0 (n + 1) / 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ real.sqrt_two_add_series 0 (n + 1) = real.cos (π / 2 ^ (n + 1 + 1)) * 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 1 / 2 * 2 ^ 2 = 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 1 / 2 * 2 ^ 2 = 2		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ real.sqrt_two_add_series 0 n / 2 / 2 * 2 ^ 2 = real.sqrt_two_add_series 0 n		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ 2 + real.sqrt_two_add_series 0 n		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ real.cos (π / 2 ^ (n + 1 + 1)) * 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 1 / 2 * 2 ^ 2 + real.sqrt_two_add_series 0 n / 2 / 2 * 2 ^ 2 = 2 + real.sqrt_two_add_series 0 n		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ 2 + real.sqrt_two_add_series 0 n		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ real.cos (π / 2 ^ (n + 1 + 1)) * 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ real.sqrt_two_add_series 0 n / 2 / 2 * 2 ^ 2 = real.sqrt_two_add_series 0 n
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ real.sqrt_two_add_series 0 n / 2 / 2 * 2 ^ 2 = real.sqrt_two_add_series 0 n		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ 2 + real.sqrt_two_add_series 0 n		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ real.cos (π / 2 ^ (n + 1 + 1)) * 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 2 ≠ 0
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 2 ≠ 0
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ 2		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ real.sqrt_two_add_series 0 n		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ real.cos (π / 2 ^ (n + 1 + 1)) * 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ real.sqrt_two_add_series 0 n		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ real.cos (π / 2 ^ (n + 1 + 1)) * 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ 2 + real.sqrt_two_add_series 0 n		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ real.cos (π / 2 ^ (n + 1 + 1)) * 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ real.cos (π / 2 ^ (n + 1 + 1)) * 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < real.cos (π / 2 ^ (n + 1 + 1))
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 ≤ real.cos (π / 2 ^ (n + 1 + 1))
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ -(π / 2) < 0		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < π / 2 ^ (n + 1 + 1)
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < π / 2		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < π / 2 ^ (n + 1 + 1)
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ -(π / 2) < π / 2 ^ (n + 1 + 1)
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < 2 ^ (n + 1 + 1)
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ -(π / 2) < π / 2 ^ (n + 1 + 1)		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ π / 2 ^ (n + 1 + 1) < π / 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < π / 2 ^ (n + 1 + 1)
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ π / 2 ^ (n + 1 + 1) < π / 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 2 < 2 ^ (n + 1 + 1)		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 1 < 2		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 1 < n + 1 + 1		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 1 < n + 1 + 1		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < n + 1		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 2 ^ 1 < 2 ^ (n + 1 + 1)		cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < 2
cos_pi_over_two_pow : ∀ (n : ℕ), real.cos (π / 2 ^ (n + 1)) = real.sqrt_two_add_series 0 n / 2,	n : ℕ,	this : 2 ≠ 0	⊢ 0 < 2
⊢ real.sin (π / 4) = real.sin (π / 2 ^ 2)		⊢ real.sin (π / 2 ^ 2) = real.sqrt 2 / 2
⊢ 4 = 2 ^ 2		⊢ real.sin (π / 2 ^ 2) = real.sqrt 2 / 2
⊢ real.sin (π / 2 ^ 2) = real.sqrt 2 / 2
⊢ real.sin (π / 4) = real.sqrt 2 / 2
⊢ real.cos (π / 16) = real.cos (π / 2 ^ 4)		⊢ real.cos (π / 2 ^ 4) = real.sqrt (2 + real.sqrt (2 + real.sqrt 2)) / 2
⊢ 16 = 2 ^ 4		⊢ real.cos (π / 2 ^ 4) = real.sqrt (2 + real.sqrt (2 + real.sqrt 2)) / 2
⊢ real.cos (π / 2 ^ 4) = real.sqrt (2 + real.sqrt (2 + real.sqrt 2)) / 2
⊢ real.cos (π / 16) = real.sqrt (2 + real.sqrt (2 + real.sqrt 2)) / 2
x : ℝ,	h : x ≠ 1	⊢ has_deriv_within_at real.arcsin (1 / real.sqrt (1 - x ^ 2)) (set.Iic x) x
h : -1 ≠ 1	⊢ has_deriv_within_at real.arcsin (1 / real.sqrt (1 - (-1) ^ 2)) (set.Iic (-1)) (-1)
h : -1 ≠ 1	⊢ has_deriv_within_at real.arcsin (1 / real.sqrt (1 - (-1) ^ 2)) (set.Iic (-1)) (-1)
h : -1 ≠ 1	⊢ has_deriv_within_at real.arcsin (1 / real.sqrt (1 - (-1) ^ 2)) (set.Iic (-1)) (-1)		x : ℝ,	h : x ≠ 1,	h' : ¬x = -1	⊢ has_deriv_within_at real.arcsin (1 / real.sqrt (1 - x ^ 2)) (set.Iic x) x
h : -1 ≠ 1	⊢ 1 / real.sqrt (1 - (-1) ^ 2) = 0
h : -1 ≠ 1	⊢ ∀ (x : ℝ), x ∈ set.Iic (-1) → real.arcsin x = -(π / 2)
h : -1 ≠ 1	⊢ real.arcsin (-1) = -(π / 2)
x : ℝ,	h : x ≠ 1,	h' : ¬x = -1	⊢ has_deriv_within_at real.arcsin (1 / real.sqrt (1 - x ^ 2)) (set.Iic x) x
α : Type u_1,	_inst_1 : pseudo_emetric_space α,	C : ℝ≥0∞,	f : ℕ → α,	hu : ∀ (n : ℕ), has_edist.edist (f n) (f (n + 1)) ≤ C / 2 ^ n,	a : α,	ha : filter.tendsto f filter.at_top (𝓝 a)	⊢ has_edist.edist (f 0) a ≤ 2 * C
α : Type u_1,	_inst_1 : semi_normed_group α,	u : ℕ → α,	n : ℕ	⊢ has_dist.dist (∑ (k : ℕ) in finset.range (n + 1), u k) (∑ (k : ℕ) in finset.range n, u k) = ∥u n∥
m : ℝ,	f : ℕ → ℕ,	hm : 1 < m,	fi : ∀ (i : ℕ), i ≤ f i	⊢ summable (λ (i : ℕ), 1 / m ^ f i)
m : ℝ,	f : ℕ → ℕ,	hm : 1 < m,	fi : ∀ (i : ℕ), i ≤ f i,	a : ℕ	⊢ 1 / m ^ f a ≤ (1 / m) ^ a
m : ℝ,	f : ℕ → ℕ,	hm : 1 < m,	fi : ∀ (i : ℕ), i ≤ f i,	a : ℕ	⊢ 1 / m ^ f a ≤ 1 / m ^ a
m : ℝ,	f : ℕ → ℕ,	hm : 1 < m,	fi : ∀ (i : ℕ), i ≤ f i,	a : ℕ	⊢ 1 / m ^ f a ≤ 1 / m ^ a
m : ℝ,	f : ℕ → ℕ,	hm : 1 < m,	fi : ∀ (i : ℕ), i ≤ f i,	a : ℕ	⊢ 0 < m ^ f a
m : ℝ,	f : ℕ → ℕ,	hm : 1 < m,	fi : ∀ (i : ℕ), i ≤ f i,	a : ℕ	⊢ 0 < m ^ a
⊢ category_theory.is_equivalence Fintype.skeleton.incl
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.non_preadditive_abelian C,	X Y Z : C,	f : X ⟶ Y,	g h : Y ⟶ Z	⊢ f ≫ (g + h) = f ≫ g + f ≫ h
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.abelian C,	P Q : C,	f : P ⟶ Q,	h : function.surjective ⇑f,	_match : (∃ (a : ↥P), ⇑f a = ↑(𝟙 Q)) → category_theory.epi f,	pbar : ↥P,	hpbar : ⇑f pbar = ↑(𝟙 Q),	_match : (∃ (a : category_theory.over P), ⟦a⟧ = pbar) → category_theory.epi f,	p : category_theory.over P,	hp : ⟦p⟧ = pbar	⊢ ⟦↑(p.hom ≫ f)⟧ = ⟦↑(𝟙 Q)⟧
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.abelian C,	P Q : C,	f : P ⟶ Q,	h : function.surjective ⇑f,	_match : (∃ (a : ↥P), ⇑f a = ↑(𝟙 Q)) → category_theory.epi f,	pbar : ↥P,	_match : (∃ (a : category_theory.over P), ⟦a⟧ = pbar) → category_theory.epi f,	p : category_theory.over P,	hp : ⟦p⟧ = pbar,	hpbar : ⇑f ⟦p⟧ = ↑(𝟙 Q)	⊢ ⟦↑(p.hom ≫ f)⟧ = ⟦↑(𝟙 Q)⟧
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.abelian C,	P Q : C,	f : P ⟶ Q,	h : function.surjective ⇑f,	_match : (∃ (a : ↥P), ⇑f a = ↑(𝟙 Q)) → category_theory.epi f,	pbar : ↥P,	hpbar : ⇑f pbar = ↑(𝟙 Q),	_match : (∃ (a : category_theory.over P), ⟦a⟧ = pbar) → category_theory.epi f,	p : category_theory.over P,	hp : ⟦p⟧ = pbar,	this : ⟦↑(p.hom ≫ f)⟧ = ⟦↑(𝟙 Q)⟧,	_match : ↑(p.hom ≫ f) ≈ ↑(𝟙 Q) → category_theory.epi f,	R : C,	x : R ⟶ ↑(p.hom ≫ f).left,	y : R ⟶ ↑(𝟙 Q).left,	ex : category_theory.epi x,	ey : category_theory.epi y,	comm : x ≫ ↑(p.hom ≫ f).hom = y ≫ ↑(𝟙 Q).hom	⊢ (x ≫ p.hom) ≫ f = y
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.abelian C,	P Q : C,	f : P ⟶ Q,	h : function.surjective ⇑f,	_match : (∃ (a : ↥P), ⇑f a = ↑(𝟙 Q)) → category_theory.epi f,	pbar : ↥P,	hpbar : ⇑f pbar = ↑(𝟙 Q),	_match : (∃ (a : category_theory.over P), ⟦a⟧ = pbar) → category_theory.epi f,	p : category_theory.over P,	hp : ⟦p⟧ = pbar,	this : ⟦↑(p.hom ≫ f)⟧ = ⟦↑(𝟙 Q)⟧,	_match : ↑(p.hom ≫ f) ≈ ↑(𝟙 Q) → category_theory.epi f,	R : C,	x : R ⟶ ↑(p.hom ≫ f).left,	y : R ⟶ ↑(𝟙 Q).left,	ex : category_theory.epi x,	ey : category_theory.epi y,	comm : x ≫ p.hom ≫ f = y ≫ 𝟙 Q	⊢ (x ≫ p.hom) ≫ f = y
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.abelian C,	P Q : C,	f : P ⟶ Q,	h : function.surjective ⇑f,	_match : (∃ (a : ↥P), ⇑f a = ↑(𝟙 Q)) → category_theory.epi f,	pbar : ↥P,	hpbar : ⇑f pbar = ↑(𝟙 Q),	_match : (∃ (a : category_theory.over P), ⟦a⟧ = pbar) → category_theory.epi f,	p : category_theory.over P,	hp : ⟦p⟧ = pbar,	this : ⟦↑(p.hom ≫ f)⟧ = ⟦↑(𝟙 Q)⟧,	_match : ↑(p.hom ≫ f) ≈ ↑(𝟙 Q) → category_theory.epi f,	R : C,	x : R ⟶ ↑(p.hom ≫ f).left,	y : R ⟶ ↑(𝟙 Q).left,	ex : category_theory.epi x,	ey : category_theory.epi y,	comm : x ≫ p.hom ≫ f = y ≫ 𝟙 Q	⊢ y ≫ 𝟙 Q = y
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	L : C ⥤ D,	R : D ⥤ C,	h : L ⊣ R,	_inst_3 : category_theory.full L,	_inst_4 : category_theory.faithful L,	X : C,	x : Cᵒᵖ,	f : (category_theory.yoneda.obj ((𝟭 C).obj X)).obj x	⊢ (category_theory.yoneda.map (h.unit.app X) ≫ {app := λ (Y : Cᵒᵖ) (f : (category_theory.yoneda.obj ((L ⋙ R).obj X)).obj Y), L.preimage (⇑((h.hom_equiv (opposite.unop Y) (L.obj X)).symm) f), naturality' := _}).app x f = (𝟙 (category_theory.yoneda.obj ((𝟭 C).obj X))).app x f
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	L : C ⥤ D,	R : D ⥤ C,	h : L ⊣ R,	_inst_3 : category_theory.full L,	_inst_4 : category_theory.faithful L,	X : C	⊢ category_theory.yoneda.map (h.unit.app X) ≫ {app := λ (Y : Cᵒᵖ) (f : (category_theory.yoneda.obj ((L ⋙ R).obj X)).obj Y), L.preimage (⇑((h.hom_equiv (opposite.unop Y) (L.obj X)).symm) f), naturality' := _} = 𝟙 (category_theory.yoneda.obj ((𝟭 C).obj X))
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	L : C ⥤ D,	R : D ⥤ C,	h : L ⊣ R,	_inst_3 : category_theory.full L,	_inst_4 : category_theory.faithful L,	X : C,	x : Cᵒᵖ,	f : (category_theory.yoneda.obj ((𝟭 C).obj X)).obj x	⊢ L.preimage (⇑((h.hom_equiv (opposite.unop x) (L.obj X)).symm) (f ≫ h.unit.app X)) = f
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	L : C ⥤ D,	R : D ⥤ C,	h : L ⊣ R,	_inst_3 : category_theory.full L,	_inst_4 : category_theory.faithful L,	X : C,	x : Cᵒᵖ,	f : (category_theory.yoneda.obj ((𝟭 C).obj X)).obj x	⊢ L.map (L.preimage (⇑((h.hom_equiv (opposite.unop x) (L.obj X)).symm) (f ≫ h.unit.app X))) = L.map f
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	L : C ⥤ D,	R : D ⥤ C,	h : L ⊣ R,	_inst_3 : category_theory.full L,	_inst_4 : category_theory.faithful L,	X : C,	x : Cᵒᵖ,	f : (category_theory.yoneda.obj ((L ⋙ R).obj X)).obj x	⊢ ({app := λ (Y : Cᵒᵖ) (f : (category_theory.yoneda.obj ((L ⋙ R).obj X)).obj Y), L.preimage (⇑((h.hom_equiv (opposite.unop Y) (L.obj X)).symm) f), naturality' := _} ≫ category_theory.yoneda.map (h.unit.app X)).app x f = (𝟙 (category_theory.yoneda.obj ((L ⋙ R).obj X))).app x f
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	L : C ⥤ D,	R : D ⥤ C,	h : L ⊣ R,	_inst_3 : category_theory.full L,	_inst_4 : category_theory.faithful L,	X : C	⊢ {app := λ (Y : Cᵒᵖ) (f : (category_theory.yoneda.obj ((L ⋙ R).obj X)).obj Y), L.preimage (⇑((h.hom_equiv (opposite.unop Y) (L.obj X)).symm) f), naturality' := _} ≫ category_theory.yoneda.map (h.unit.app X) = 𝟙 (category_theory.yoneda.obj ((L ⋙ R).obj X))
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	L : C ⥤ D,	R : D ⥤ C,	h : L ⊣ R,	_inst_3 : category_theory.full L,	_inst_4 : category_theory.faithful L,	X : C,	x : Cᵒᵖ,	f : (category_theory.yoneda.obj ((L ⋙ R).obj X)).obj x	⊢ L.preimage (⇑((h.hom_equiv (opposite.unop x) (L.obj X)).symm) f) ≫ h.unit.app X = f
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	L : C ⥤ D,	R : D ⥤ C,	h : L ⊣ R,	_inst_3 : category_theory.full L,	_inst_4 : category_theory.faithful L,	X : C,	x : Cᵒᵖ,	f : (category_theory.yoneda.obj ((L ⋙ R).obj X)).obj x	⊢ f ≫ L.preimage (h.counit.app (L.obj X)) ≫ h.unit.app X = f
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	L : C ⥤ D,	R : D ⥤ C,	h : L ⊣ R,	_inst_3 : category_theory.full L,	_inst_4 : category_theory.faithful L,	X : C,	x : Cᵒᵖ,	f : (category_theory.yoneda.obj ((L ⋙ R).obj X)).obj x	⊢ f ≫ h.unit.app (R.obj (L.obj X)) ≫ R.map (L.map (L.preimage (h.counit.app (L.obj X)))) = f
A : Type u₁,	B : Type u₂,	C : Type u₃,	_inst_1 : category_theory.category A,	_inst_2 : category_theory.category B,	_inst_3 : category_theory.category C,	D : Type u₄,	_inst_4 : category_theory.category D,	Q : A ⥤ B,	V : B ⥤ D,	U : A ⥤ C,	R : C ⥤ D,	comm : U ⋙ R ≅ Q ⋙ V,	_inst_5 : category_theory.is_right_adjoint U,	_inst_6 : category_theory.is_right_adjoint V,	_inst_7 : category_theory.is_right_adjoint R,	_inst_8 : Π (X : B), category_theory.regular_epi ((category_theory.adjunction.of_right_adjoint V).counit.app X),	_inst_9 : category_theory.limits.has_reflexive_coequalizers A	⊢ category_theory.is_right_adjoint Q
A : Type u₁,	B : Type u₂,	C : Type u₃,	_inst_1 : category_theory.category A,	_inst_2 : category_theory.category B,	_inst_3 : category_theory.category C,	D : Type u₄,	_inst_4 : category_theory.category D,	Q : A ⥤ B,	V : B ⥤ D,	U : A ⥤ C,	R : C ⥤ D,	comm : U ⋙ R ≅ Q ⋙ V,	_inst_5 : category_theory.is_right_adjoint U,	_inst_6 : category_theory.is_right_adjoint V,	_inst_7 : category_theory.is_right_adjoint R,	_inst_8 : Π (X : B), category_theory.regular_epi ((category_theory.adjunction.of_right_adjoint V).counit.app X),	_inst_9 : category_theory.limits.has_reflexive_coequalizers A,	this : category_theory.is_right_adjoint (Q ⋙ V) := category_theory.adjunction.right_adjoint_of_nat_iso comm	⊢ category_theory.is_right_adjoint Q
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F : C ⥤ D,	G : D ⥤ C,	adj : F ⊣ G,	J : Type v,	_inst_3 : category_theory.small_category J,	K : J ⥤ D,	X : Cᵒᵖ,	t : ((category_theory.cones J C).obj (K ⋙ G)).obj X,	j j' : J,	f : j ⟶ j'	⊢ (opposite.unop ((category_theory.functor.const J).op.obj (F.op.obj X))).map f ≫ ⇑((adj.hom_equiv (opposite.unop X) (K.obj j')).symm) (t.app j') = ⇑((adj.hom_equiv (opposite.unop X) (K.obj j)).symm) (t.app j) ≫ K.map f
X : Type u	⊢ category_theory.discrete.functor (𝟙 X) = 𝟙 (category_theory.Cat.of (category_theory.discrete X))
X : Type u	⊢ ∀ (X_1 Y : category_theory.discrete (has_coe_to_sort.coe (category_theory.Cat.of (category_theory.discrete X)))) (f : X_1 ⟶ Y), (category_theory.discrete.functor (𝟙 X)).map f = category_theory.eq_to_hom _ ≫ (𝟙 (category_theory.Cat.of (category_theory.discrete X))).map f ≫ category_theory.eq_to_hom _		X : Type u	⊢ ∀ (X_1 : category_theory.discrete (has_coe_to_sort.coe (category_theory.Cat.of (category_theory.discrete X)))), (category_theory.discrete.functor (𝟙 X)).obj X_1 = (𝟙 (category_theory.Cat.of (category_theory.discrete X))).obj X_1
X Y Z : Type u,	f : X ⟶ Y,	g : Y ⟶ Z	⊢ category_theory.discrete.functor (f ≫ g) = category_theory.discrete.functor f ≫ category_theory.discrete.functor g
X Y Z : Type u,	f : X ⟶ Y,	g : Y ⟶ Z	⊢ ∀ (X_1 Y_1 : category_theory.discrete (has_coe_to_sort.coe (category_theory.Cat.of (category_theory.discrete X)))) (f_1 : X_1 ⟶ Y_1), (category_theory.discrete.functor (f ≫ g)).map f_1 = category_theory.eq_to_hom _ ≫ (category_theory.discrete.functor f ≫ category_theory.discrete.functor g).map f_1 ≫ category_theory.eq_to_hom _		X Y Z : Type u,	f : X ⟶ Y,	g : Y ⟶ Z	⊢ ∀ (X_1 : category_theory.discrete (has_coe_to_sort.coe (category_theory.Cat.of (category_theory.discrete X)))), (category_theory.discrete.functor (f ≫ g)).obj X_1 = (category_theory.discrete.functor f ≫ category_theory.discrete.functor g).obj X_1
X : Type u,	_inst_1 : preorder X,	x y : X,	h : plift (x ≤ y)	⊢ _.hom = {down := h}
X : Type u,	_inst_1 : preorder X,	x y : X,	h : x ≤ y	⊢ _.hom = {down := {down := h}}
X : Type u,	_inst_1 : preorder X,	x y : X,	h : x ⟶ y	⊢ _.hom = h
C : Type u,	_inst_1 : category_theory.category C,	A B : C,	_inst_2 : category_theory.limits.has_finite_products C,	_inst_3 : category_theory.exponentiable A,	f : B ⟶ A,	_inst_4 : category_theory.exponentiable B,	X : C	⊢ category_theory.cartesian_closed.uncurry ((category_theory.pre f).app X) = category_theory.limits.prod.map f (𝟙 ((category_theory.exp A).obj X)) ≫ (category_theory.ev A).app X
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_finite_products C,	A₁ A₂ A₃ : C,	_inst_4 : category_theory.exponentiable A₁,	_inst_5 : category_theory.exponentiable A₂,	_inst_6 : category_theory.exponentiable A₃,	f : A₁ ⟶ A₂,	g : A₂ ⟶ A₃	⊢ category_theory.pre (f ≫ g) = category_theory.pre g ≫ category_theory.pre f
C : Type u,	_inst_1 : category_theory.category C,	D : Type u',	_inst_2 : category_theory.category D,	_inst_3 : category_theory.limits.has_finite_products C,	_inst_4 : category_theory.limits.has_finite_products D,	F : C ⥤ D,	L : D ⥤ C,	_inst_5 : category_theory.cartesian_closed C,	_inst_6 : category_theory.cartesian_closed D,	_inst_7 : category_theory.limits.preserves_limits_of_shape (category_theory.discrete category_theory.limits.walking_pair) F,	h : L ⊣ F,	A : C,	i : category_theory.is_iso (category_theory.frobenius_morphism F h A)	⊢ category_theory.is_iso (⇑(category_theory.transfer_nat_trans_self (category_theory.adjunction.comp (category_theory.limits.prod.functor.obj A) (category_theory.exp A) h (category_theory.exp.adjunction A)) (category_theory.adjunction.comp L F (category_theory.exp.adjunction (F.obj A)) h)) (category_theory.frobenius_morphism F h A))
C : Type u,	_inst_1 : category_theory.category C,	D : Type u',	_inst_2 : category_theory.category D,	_inst_3 : category_theory.limits.has_finite_products C,	_inst_4 : category_theory.limits.has_finite_products D,	F : C ⥤ D,	L : D ⥤ C,	_inst_5 : category_theory.cartesian_closed C,	_inst_6 : category_theory.cartesian_closed D,	_inst_7 : category_theory.limits.preserves_limits_of_shape (category_theory.discrete category_theory.limits.walking_pair) F,	h : L ⊣ F,	A : C,	i : category_theory.is_iso (category_theory.frobenius_morphism F h A)	⊢ category_theory.is_iso (category_theory.exp_comparison F A)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	F_obj : C → D,	F_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	F_map_id' : auto_param (∀ (X : C), F_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	F_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), F_map (f ≫ g) = F_map f ≫ F_map g) (name.mk_string "obviously" name.anonymous),	h_obj : ∀ (X : C), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.obj X = G.obj X,	h_map : ∀ (X Y : C) (f : X ⟶ Y), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.map f == G.map f	⊢ {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'} = G
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F G : C ⥤ D,	h_obj : ∀ (X : C), F.obj X = G.obj X,	h_map : ∀ (X Y : C) (f : X ⟶ Y), F.map f == G.map f	⊢ F = G
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F_obj : C → D,	F_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	F_map_id' : auto_param (∀ (X : C), F_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	F_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), F_map (f ≫ g) = F_map f ≫ F_map g) (name.mk_string "obviously" name.anonymous),	G_obj : C → D,	G_map : Π {X Y : C}, (X ⟶ Y) → (G_obj X ⟶ G_obj Y),	G_map_id' : auto_param (∀ (X : C), G_map (𝟙 X) = 𝟙 (G_obj X)) (name.mk_string "obviously" name.anonymous),	G_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), G_map (f ≫ g) = G_map f ≫ G_map g) (name.mk_string "obviously" name.anonymous),	h_obj : ∀ (X : C), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.obj X = {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.obj X,	h_map : ∀ (X Y : C) (f : X ⟶ Y), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.map f == {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.map f	⊢ F_obj = G_obj
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F_obj : C → D,	F_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	F_map_id' : auto_param (∀ (X : C), F_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	F_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), F_map (f ≫ g) = F_map f ≫ F_map g) (name.mk_string "obviously" name.anonymous),	G_obj : C → D,	G_map : Π {X Y : C}, (X ⟶ Y) → (G_obj X ⟶ G_obj Y),	G_map_id' : auto_param (∀ (X : C), G_map (𝟙 X) = 𝟙 (G_obj X)) (name.mk_string "obviously" name.anonymous),	G_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), G_map (f ≫ g) = G_map f ≫ G_map g) (name.mk_string "obviously" name.anonymous),	h_obj : ∀ (X : C), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.obj X = {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.obj X,	h_map : ∀ (X Y : C) (f : X ⟶ Y), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.map f == {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.map f	⊢ F_obj = G_obj
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F_obj : C → D,	F_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	F_map_id' : auto_param (∀ (X : C), F_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	F_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), F_map (f ≫ g) = F_map f ≫ F_map g) (name.mk_string "obviously" name.anonymous),	G_obj : C → D,	G_map : Π {X Y : C}, (X ⟶ Y) → (G_obj X ⟶ G_obj Y),	G_map_id' : auto_param (∀ (X : C), G_map (𝟙 X) = 𝟙 (G_obj X)) (name.mk_string "obviously" name.anonymous),	G_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), G_map (f ≫ g) = G_map f ≫ G_map g) (name.mk_string "obviously" name.anonymous),	h_obj : ∀ (X : C), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.obj X = {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.obj X,	h_map : ∀ (X Y : C) (f : X ⟶ Y), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.map f == {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.map f,	X : C	⊢ F_obj X = G_obj X
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F_obj : C → D,	F_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	F_map_id' : auto_param (∀ (X : C), F_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	F_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), F_map (f ≫ g) = F_map f ≫ F_map g) (name.mk_string "obviously" name.anonymous),	G_obj : C → D,	G_map : Π {X Y : C}, (X ⟶ Y) → (G_obj X ⟶ G_obj Y),	G_map_id' : auto_param (∀ (X : C), G_map (𝟙 X) = 𝟙 (G_obj X)) (name.mk_string "obviously" name.anonymous),	G_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), G_map (f ≫ g) = G_map f ≫ G_map g) (name.mk_string "obviously" name.anonymous),	h_obj : ∀ (X : C), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.obj X = {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.obj X,	h_map : ∀ (X Y : C) (f : X ⟶ Y), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.map f == {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.map f	⊢ {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'} = {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F_obj : C → D,	F_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	F_map_id' : auto_param (∀ (X : C), F_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	F_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), F_map (f ≫ g) = F_map f ≫ F_map g) (name.mk_string "obviously" name.anonymous),	G_obj : C → D,	G_map : Π {X Y : C}, (X ⟶ Y) → (G_obj X ⟶ G_obj Y),	G_map_id' : auto_param (∀ (X : C), G_map (𝟙 X) = 𝟙 (G_obj X)) (name.mk_string "obviously" name.anonymous),	G_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), G_map (f ≫ g) = G_map f ≫ G_map g) (name.mk_string "obviously" name.anonymous),	h_obj : ∀ (X : C), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.obj X = {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.obj X,	h_map : ∀ (X Y : C) (f : X ⟶ Y), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.map f == {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.map f,	this : F_obj = G_obj	⊢ {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'} = {obj := G_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F_obj : C → D,	F_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	F_map_id' : auto_param (∀ (X : C), F_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	F_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), F_map (f ≫ g) = F_map f ≫ F_map g) (name.mk_string "obviously" name.anonymous),	G_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	G_map_id' : auto_param (∀ (X : C), G_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	G_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), G_map (f ≫ g) = G_map f ≫ G_map g) (name.mk_string "obviously" name.anonymous),	h_obj : ∀ (X : C), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.obj X = {obj := F_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.obj X,	h_map : ∀ (X Y : C) (f : X ⟶ Y), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.map f == {obj := F_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.map f	⊢ {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'} = {obj := F_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F_obj : C → D,	F_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	F_map_id' : auto_param (∀ (X : C), F_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	F_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), F_map (f ≫ g) = F_map f ≫ F_map g) (name.mk_string "obviously" name.anonymous),	G_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	G_map_id' : auto_param (∀ (X : C), G_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	G_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), G_map (f ≫ g) = G_map f ≫ G_map g) (name.mk_string "obviously" name.anonymous),	h_obj : ∀ (X : C), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.obj X = {obj := F_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.obj X,	h_map : ∀ (X Y : C) (f : X ⟶ Y), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.map f == {obj := F_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.map f	⊢ F_map = G_map
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F_obj : C → D,	F_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	F_map_id' : auto_param (∀ (X : C), F_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	F_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), F_map (f ≫ g) = F_map f ≫ F_map g) (name.mk_string "obviously" name.anonymous),	G_map : Π {X Y : C}, (X ⟶ Y) → (F_obj X ⟶ F_obj Y),	G_map_id' : auto_param (∀ (X : C), G_map (𝟙 X) = 𝟙 (F_obj X)) (name.mk_string "obviously" name.anonymous),	G_map_comp' : auto_param (∀ {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z), G_map (f ≫ g) = G_map f ≫ G_map g) (name.mk_string "obviously" name.anonymous),	h_obj : ∀ (X : C), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.obj X = {obj := F_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.obj X,	h_map : ∀ (X Y : C) (f : X ⟶ Y), {obj := F_obj, map := F_map, map_id' := F_map_id', map_comp' := F_map_comp'}.map f == {obj := F_obj, map := G_map, map_id' := G_map_id', map_comp' := G_map_comp'}.map f,	X Y : C,	f : X ⟶ Y	⊢ F_map f = G_map f
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F : C ⥤ D,	X Y : C,	p : X = Y	⊢ F.map (category_theory.eq_to_hom p) = category_theory.eq_to_hom _
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F : C ⥤ D,	X : C,	p : X = X	⊢ F.map (category_theory.eq_to_hom p) = category_theory.eq_to_hom _
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F : C ⥤ D,	X Y : C,	p : X = Y	⊢ F.map (category_theory.eq_to_hom p) = category_theory.eq_to_hom _
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	e : C ≌ D,	X Y : D,	f f' : X ⟶ Y	⊢ f ≫ e.counit_inv.app Y = f' ≫ e.counit_inv.app Y ↔ f = f'
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C	⊢ nonempty (category_theory.limits.cocone F)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a	⊢ nonempty (category_theory.limits.cocone F)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ	⊢ nonempty (category_theory.limits.cocone F)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	X Y : J,	f : X ⟶ Y	⊢ F.obj X ∈ O
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	X Y : J,	f : X ⟶ Y	⊢ F.obj Y ∈ O
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	H : finset (Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.univ.bUnion (λ (X : J), finset.univ.bUnion (λ (Y : J), finset.image (λ (f : X ⟶ Y), ⟨F.obj X, ⟨F.obj Y, ⟨_, ⟨_, F.map f⟩⟩⟩⟩) finset.univ))	⊢ nonempty (category_theory.limits.cocone F)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	H : finset (Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.univ.bUnion (λ (X : J), finset.univ.bUnion (λ (Y : J), finset.image (λ (f : X ⟶ Y), ⟨F.obj X, ⟨F.obj Y, ⟨_, ⟨_, F.map f⟩⟩⟩⟩) finset.univ)),	Z : C,	f : Π {X : C}, X ∈ O → (X ⟶ Z),	w : ∀ {X Y : C} (mX : X ∈ O) (mY : Y ∈ O) {f_1 : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f_1⟩⟩⟩⟩ ∈ H → f_1 ≫ f mY = f mX,	X : J	⊢ F.obj X ∈ O
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	H : finset (Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.univ.bUnion (λ (X : J), finset.univ.bUnion (λ (Y : J), finset.image (λ (f : X ⟶ Y), ⟨F.obj X, ⟨F.obj Y, ⟨_, ⟨_, F.map f⟩⟩⟩⟩) finset.univ)),	Z : C,	f : Π {X : C}, X ∈ O → (X ⟶ Z),	w : ∀ {X Y : C} (mX : X ∈ O) (mY : Y ∈ O) {f_1 : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f_1⟩⟩⟩⟩ ∈ H → f_1 ≫ f mY = f mX	⊢ nonempty (category_theory.limits.cocone F)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	H : finset (Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.univ.bUnion (λ (X : J), finset.univ.bUnion (λ (Y : J), finset.image (λ (f : X ⟶ Y), ⟨F.obj X, ⟨F.obj Y, ⟨_, ⟨_, F.map f⟩⟩⟩⟩) finset.univ)),	Z : C,	f : Π {X : C}, X ∈ O → (X ⟶ Z),	w : ∀ {X Y : C} (mX : X ∈ O) (mY : Y ∈ O) {f_1 : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f_1⟩⟩⟩⟩ ∈ H → f_1 ≫ f mY = f mX	⊢ auto_param (∀ ⦃X Y : J⦄ (f_1 : X ⟶ Y), F.map f_1 ≫ f _ = f _ ≫ ((category_theory.functor.const J).obj Z).map f_1) (name.mk_string "obviously" name.anonymous)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	H : finset (Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.univ.bUnion (λ (X : J), finset.univ.bUnion (λ (Y : J), finset.image (λ (f : X ⟶ Y), ⟨F.obj X, ⟨F.obj Y, ⟨_, ⟨_, F.map f⟩⟩⟩⟩) finset.univ)),	Z : C,	f : Π {X : C}, X ∈ O → (X ⟶ Z),	w : ∀ {X Y : C} (mX : X ∈ O) (mY : Y ∈ O) {f_1 : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f_1⟩⟩⟩⟩ ∈ H → f_1 ≫ f mY = f mX,	j j' : J,	g : j ⟶ j'	⊢ F.map g ≫ f _ = f _ ≫ ((category_theory.functor.const J).obj Z).map g
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	H : finset (Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.univ.bUnion (λ (X : J), finset.univ.bUnion (λ (Y : J), finset.image (λ (f : X ⟶ Y), ⟨F.obj X, ⟨F.obj Y, ⟨_, ⟨_, F.map f⟩⟩⟩⟩) finset.univ)),	Z : C,	f : Π {X : C}, X ∈ O → (X ⟶ Z),	w : ∀ {X Y : C} (mX : X ∈ O) (mY : Y ∈ O) {f_1 : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f_1⟩⟩⟩⟩ ∈ H → f_1 ≫ f mY = f mX,	j j' : J,	g : j ⟶ j'	⊢ F.map g ≫ f _ = f _ ≫ 𝟙 Z
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	H : finset (Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.univ.bUnion (λ (X : J), finset.univ.bUnion (λ (Y : J), finset.image (λ (f : X ⟶ Y), ⟨F.obj X, ⟨F.obj Y, ⟨_, ⟨_, F.map f⟩⟩⟩⟩) finset.univ)),	Z : C,	f : Π {X : C}, X ∈ O → (X ⟶ Z),	w : ∀ {X Y : C} (mX : X ∈ O) (mY : Y ∈ O) {f_1 : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f_1⟩⟩⟩⟩ ∈ H → f_1 ≫ f mY = f mX,	j j' : J,	g : j ⟶ j'	⊢ F.map g ≫ f _ = f _
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	H : finset (Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.univ.bUnion (λ (X : J), finset.univ.bUnion (λ (Y : J), finset.image (λ (f : X ⟶ Y), ⟨F.obj X, ⟨F.obj Y, ⟨_, ⟨_, F.map f⟩⟩⟩⟩) finset.univ)),	Z : C,	f : Π {X : C}, X ∈ O → (X ⟶ Z),	w : ∀ {X Y : C} (mX : X ∈ O) (mY : Y ∈ O) {f_1 : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f_1⟩⟩⟩⟩ ∈ H → f_1 ≫ f mY = f mX,	j j' : J,	g : j ⟶ j'	⊢ ⟨F.obj j, ⟨F.obj j', ⟨_, ⟨_, F.map g⟩⟩⟩⟩ ∈ H
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	H : finset (Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.univ.bUnion (λ (X : J), finset.univ.bUnion (λ (Y : J), finset.image (λ (f : X ⟶ Y), ⟨F.obj X, ⟨F.obj Y, ⟨_, ⟨_, F.map f⟩⟩⟩⟩) finset.univ)),	Z : C,	f : Π {X : C}, X ∈ O → (X ⟶ Z),	w : ∀ {X Y : C} (mX : X ∈ O) (mY : Y ∈ O) {f_1 : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f_1⟩⟩⟩⟩ ∈ H → f_1 ≫ f mY = f mX,	j j' : J,	g : j ⟶ j'	⊢ ⟨F.obj j', ⟨_, ⟨_, F.map g⟩⟩⟩ == ⟨F.obj j', ⟨_, ⟨_, F.map g⟩⟩⟩
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.is_filtered C,	J : Type v,	_inst_3 : category_theory.small_category J,	_inst_4 : category_theory.fin_category J,	F : J ⥤ C,	_inst : Π (a : Prop), decidable a,	O : finset C := finset.image F.obj finset.univ,	H : finset (Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.univ.bUnion (λ (X : J), finset.univ.bUnion (λ (Y : J), finset.image (λ (f : X ⟶ Y), ⟨F.obj X, ⟨F.obj Y, ⟨_, ⟨_, F.map f⟩⟩⟩⟩) finset.univ)),	Z : C,	f : Π {X : C}, X ∈ O → (X ⟶ Z),	w : ∀ {X Y : C} (mX : X ∈ O) (mY : Y ∈ O) {f_1 : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f_1⟩⟩⟩⟩ ∈ H → f_1 ≫ f mY = f mX,	j j' : J,	g : j ⟶ j'	⊢ ∃ (a : J), F.obj a = F.obj j ∧ ∃ (x : J) (x_1 : a ⟶ x), ⟨F.obj x, ⟨_, ⟨_, F.map x_1⟩⟩⟩ == ⟨F.obj j', ⟨_, ⟨_, F.map g⟩⟩⟩
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F F' : C ⥤ D,	_inst_4 : category_theory.full F,	α : F ≅ F',	X Y : C,	f : F'.obj X ⟶ F'.obj Y	⊢ F'.map (F.preimage ((α.app X).hom ≫ f ≫ (α.app Y).inv)) = f
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F G : C ⥤ D,	α : F ⟶ G,	_inst_4 : ∀ (X : C), category_theory.mono (α.app X),	H : C ⥤ D,	g h : H ⟶ F,	eq : g ≫ α = h ≫ α	⊢ g = h
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F G : C ⥤ D,	α : F ⟶ G,	_inst_4 : ∀ (X : C), category_theory.mono (α.app X),	H : C ⥤ D,	g h : H ⟶ F,	eq : g ≫ α = h ≫ α,	X : C	⊢ g.app X = h.app X
C : Type u,	_inst_1 : category_theory.category C,	β : Type ?,	_inst_2 : add_comm_group β,	s x : β	⊢ (λ (b : β), b + s) ((λ (b : β), b - s) x) = x
C : Type u,	_inst_1 : category_theory.category C,	β : Type ?,	_inst_2 : add_comm_group β,	s x : β	⊢ (λ (b : β), b - s) ((λ (b : β), b + s) x) = x
C : Type u_1,	_inst_1 : category_theory.category C,	F : C ⥤ category_theory.Cat,	X Y : category_theory.grothendieck F,	f g : X ⟶ Y,	h : f = g	⊢ (F.map f.base).obj X.fiber = (F.map g.base).obj X.fiber
C : Type u_1,	_inst_1 : category_theory.category C,	F : C ⥤ category_theory.Cat,	X Y : category_theory.grothendieck F,	f : X ⟶ Y	⊢ f.fiber = category_theory.eq_to_hom _ ≫ f.fiber
C : Type u_1,	_inst_1 : category_theory.category C,	F : C ⥤ category_theory.Cat,	X Y : category_theory.grothendieck F,	f : X ⟶ Y	⊢ f.fiber = 𝟙 ((F.map f.base).obj X.fiber) ≫ f.fiber
C : Type u_1,	_inst_1 : category_theory.category C,	F : C ⥤ category_theory.Cat,	X Y : category_theory.grothendieck F,	f g : X ⟶ Y,	h : f = g	⊢ f.fiber = category_theory.eq_to_hom _ ≫ g.fiber
C : Type u,	_inst_1 : category_theory.groupoid C,	X Y : C,	f : X ⟶ Y	⊢ f ≫ category_theory.groupoid.inv f = 𝟙 X ∧ category_theory.groupoid.inv f ≫ f = 𝟙 Y
J : Type u₁,	_inst_1 : category_theory.category J,	_inst_3 : nonempty J,	j₀ : J,	h : ∀ (p : set J), j₀ ∈ p → (∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → (j₁ ∈ p ↔ j₂ ∈ p)) → ∀ (j : J), j ∈ p,	α : Type u₁,	F : J → α,	a : ∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → F j₁ = F j₂	⊢ ∀ (j j' : J), F j = F j'
J : Type u₁,	_inst_1 : category_theory.category J,	_inst_3 : nonempty J,	j₀ : J,	h : ∀ (p : set J), j₀ ∈ p → (∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → (j₁ ∈ p ↔ j₂ ∈ p)) → ∀ (j : J), j ∈ p,	α : Type u₁,	F : J → α,	a : ∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → F j₁ = F j₂,	_x _x : J,	f : _x ⟶ _x	⊢ _x ∈ {j : J | F j = F j₀} ↔ _x ∈ {j : J | F j = F j₀}
J : Type u₁,	_inst_1 : category_theory.category J,	_inst_3 : nonempty J,	j₀ : J,	h : ∀ (p : set J), j₀ ∈ p → (∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → (j₁ ∈ p ↔ j₂ ∈ p)) → ∀ (j : J), j ∈ p,	α : Type u₁,	F : J → α,	a : ∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → F j₁ = F j₂,	w : ∀ (j : J), j ∈ {j : J | F j = F j₀}	⊢ ∀ (j j' : J), F j = F j'
J : Type u₁,	_inst_1 : category_theory.category J,	_inst_3 : nonempty J,	j₀ : J,	h : ∀ (p : set J), j₀ ∈ p → (∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → (j₁ ∈ p ↔ j₂ ∈ p)) → ∀ (j : J), j ∈ p,	α : Type u₁,	F : J → α,	a : ∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → F j₁ = F j₂,	w : ∀ (j : J), F j = F j₀	⊢ ∀ (j j' : J), F j = F j'
J : Type u₁,	_inst_1 : category_theory.category J,	_inst_3 : nonempty J,	j₀ : J,	h : ∀ (p : set J), j₀ ∈ p → (∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → (j₁ ∈ p ↔ j₂ ∈ p)) → ∀ (j : J), j ∈ p,	α : Type u₁,	F : J → α,	a : ∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → F j₁ = F j₂,	w : ∀ (j : J), F j = F j₀,	j j' : J	⊢ F j = F j'
J : Type u₁,	_inst_1 : category_theory.category J,	_inst_3 : category_theory.is_connected J,	r : J → J → Prop,	hr : equivalence r,	h : ∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → r j₁ j₂	⊢ ∀ (j₁ j₂ : J), r j₁ j₂
J : Type u₁,	_inst_1 : category_theory.category J,	_inst_3 : category_theory.is_connected J,	r : J → J → Prop,	hr : equivalence r,	h : ∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → r j₁ j₂,	z : ∀ (j : J), r (classical.arbitrary J) j,	j₁ j₂ : J	⊢ r j₁ j₂
J : Type u₁,	_inst_1 : category_theory.category J,	_inst_3 : category_theory.is_connected J,	r : J → J → Prop,	hr : equivalence r,	h : ∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → r j₁ j₂,	z : ∀ (j : J), r (classical.arbitrary J) j	⊢ ∀ (j₁ j₂ : J), r j₁ j₂
J : Type u₁,	_inst_1 : category_theory.category J,	C : Type u₂,	_inst_3 : category_theory.category C,	_inst_4 : category_theory.is_connected J,	X Y : C,	f : (category_theory.functor.const J).obj X ⟶ (category_theory.functor.const J).obj Y	⊢ (category_theory.functor.const J).map (f.app (classical.arbitrary J)) = f
J : Type u₁,	_inst_1 : category_theory.category J,	C : Type u₂,	_inst_3 : category_theory.category C,	_inst_4 : category_theory.is_connected J,	X Y : C,	f : (category_theory.functor.const J).obj X ⟶ (category_theory.functor.const J).obj Y,	j : J	⊢ ((category_theory.functor.const J).map (f.app (classical.arbitrary J))).app j = f.app j
C : Type u,	_inst_1 : category_theory.category C,	B : C,	J : Type v,	F : category_theory.discrete J ⥤ category_theory.over B,	c : category_theory.limits.cone (category_theory.over.construct_products.wide_pullback_diagram_of_diagram_over B F),	j : category_theory.discrete J	⊢ auto_param (c.π.app (option.some j) ≫ (F.obj j).hom = (((category_theory.functor.const (category_theory.discrete J)).obj (category_theory.over.mk (c.π.app option.none))).obj j).hom) (name.mk_string "obviously" name.anonymous)
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	j : J	⊢ ∃ (a : J), k a = k j ∧ ⟨kxO, ⟨_, f a⟩⟩ == ⟨kxO, ⟨_, f j⟩⟩
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	j : J	⊢ ⟨kxO, ⟨_, f j⟩⟩ == ⟨kxO, ⟨_, f j⟩⟩
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	j : J	⊢ kxO = kxO ∧ _ = _ ∧ f j = f j
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H,	j : J	⊢ ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩ ∈ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H,	j : J	⊢ ∃ (a : J), k a = k j ∧ ⟨kyO, ⟨_, g a⟩⟩ == ⟨kyO, ⟨_, g j⟩⟩
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H,	j : J	⊢ ⟨kyO, ⟨_, g j⟩⟩ == ⟨kyO, ⟨_, g j⟩⟩
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H,	j : J	⊢ kyO = kyO ∧ _ = _ ∧ g j = g j
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H,	gH : ∀ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩ ∈ H	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H,	gH : ∀ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩ ∈ H	⊢ (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim).map (T kxO) x = (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim).map (T kyO) y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H,	gH : ∀ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩ ∈ H,	j : J	⊢ category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj S) j ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim).map (T kxO) x) = category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj S) j ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim).map (T kyO) y)
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H,	gH : ∀ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩ ∈ H,	j : J	⊢ category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj S) j (category_theory.limits.lim.map ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).map (T kxO)) x) = category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj S) j (category_theory.limits.lim.map ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).map (T kyO)) y)
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H,	gH : ∀ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩ ∈ H,	j : J	⊢ category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj S) j (category_theory.limits.lim.map ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).map (f j ≫ T _)) x) = category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj S) j (category_theory.limits.lim.map ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).map (T kyO)) y)
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	fH : ∀ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ H,	gH : ∀ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩ ∈ H,	j : J	⊢ category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj S) j (category_theory.limits.lim.map ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).map (f j ≫ T _)) x) = category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj S) j (category_theory.limits.lim.map ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).map (g j ≫ T _)) y)
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J	⊢ function.injective (category_theory.limits.colimit_limit_to_limit_colimit F)
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a	⊢ function.injective (category_theory.limits.colimit_limit_to_limit_colimit F)
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	x y : category_theory.limits.colimit (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim),	h : category_theory.limits.colimit_limit_to_limit_colimit F x = category_theory.limits.colimit_limit_to_limit_colimit F y	⊢ x = y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	y : category_theory.limits.colimit (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim),	kx : K,	x : (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim).obj kx,	h : category_theory.limits.colimit_limit_to_limit_colimit F (category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x) = category_theory.limits.colimit_limit_to_limit_colimit F y	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx : K,	x : (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim).obj kx,	ky : K,	y : (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim).obj ky,	h : category_theory.limits.colimit_limit_to_limit_colimit F (category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x) = category_theory.limits.colimit_limit_to_limit_colimit F (category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y)	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : category_theory.limits.colimit_limit_to_limit_colimit F (category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x) = category_theory.limits.colimit_limit_to_limit_colimit F (category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y)	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), category_theory.limits.limit.π (category_theory.curry.obj F ⋙ category_theory.limits.colim) j (category_theory.limits.colimit_limit_to_limit_colimit F (category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x)) = category_theory.limits.limit.π (category_theory.curry.obj F ⋙ category_theory.limits.colim) j (category_theory.limits.colimit_limit_to_limit_colimit F (category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y))	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y)	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y)	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky}	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky}	⊢ kx ∈ {kx, ky}
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O	⊢ ky ∈ {kx, ky}
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	j : J	⊢ k j ∈ finset.image k finset.univ
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	j : J	⊢ k j ∈ finset.image k finset.univ
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX	⊢ category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) kx x = category_theory.limits.colimit.ι (category_theory.curry.obj (category_theory.prod.swap K J ⋙ F) ⋙ category_theory.limits.lim) ky y
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	F : J × K ⥤ Type v,	_inst_3 : category_theory.is_filtered K,	_inst_4 : fintype J,	_inst : Π (a : Prop), decidable a,	kx ky : K,	y : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky),	x : category_theory.limits.limit ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx),	h : ∀ (j : J), ∃ (k : K) (f : kx ⟶ k) (g : ky ⟶ k), F.map (𝟙 j, f) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	k : J → K := λ (j : J), _.some,	f : Π (j : J), kx ⟶ k j := λ (j : J), Exists.some _,	g : Π (j : J), ky ⟶ k j := λ (j : J), Exists.some _,	w : ∀ (j : J), F.map (𝟙 j, f j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj kx) j x) = F.map (𝟙 j, g j) (category_theory.limits.limit.π ((category_theory.curry.obj (category_theory.prod.swap K J ⋙ F)).obj ky) j y),	O : finset K := finset.image k finset.univ ∪ {kx, ky},	kxO : kx ∈ O,	kyO : ky ∈ O,	kjO : ∀ (j : J), k j ∈ O,	H : finset (Σ' (X Y : K) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y) := finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ ∪ finset.image (λ (j : J), ⟨ky, ⟨k j, ⟨kyO, ⟨_, g j⟩⟩⟩⟩) finset.univ,	S : K,	T : Π {X : K}, X ∈ O → (X ⟶ S),	W : ∀ {X Y : K} (mX : X ∈ O) (mY : Y ∈ O) {f : X ⟶ Y}, ⟨X, ⟨Y, ⟨mX, ⟨mY, f⟩⟩⟩⟩ ∈ H → f ≫ T mY = T mX,	j : J	⊢ ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩ ∈ finset.image (λ (j : J), ⟨kx, ⟨k j, ⟨kxO, ⟨_, f j⟩⟩⟩⟩) finset.univ
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ K ⥤ C,	_inst_4 : category_theory.limits.has_limits_of_shape K C,	_inst_5 : category_theory.limits.has_limit (category_theory.uncurry.obj F),	_inst_6 : category_theory.limits.has_limit (F ⋙ category_theory.limits.lim),	j : J,	k : K	⊢ (category_theory.limits.limit_uncurry_iso_limit_comp_lim F).hom ≫ category_theory.limits.limit.π (F ⋙ category_theory.limits.lim) j ≫ category_theory.limits.limit.π (F.obj j) k = category_theory.limits.limit.π (category_theory.uncurry.obj F) (j, k)
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ K ⥤ C,	_inst_4 : category_theory.limits.has_limits_of_shape K C,	_inst_5 : category_theory.limits.has_limit (category_theory.uncurry.obj F),	_inst_6 : category_theory.limits.has_limit (F ⋙ category_theory.limits.lim),	j : J,	k : K	⊢ category_theory.limits.limit.lift (F ⋙ category_theory.limits.lim) (category_theory.limits.cone_of_cone_uncurry (λ (j : J), category_theory.limits.limit.is_limit (F.obj j)) (category_theory.limits.limit.cone (category_theory.uncurry.obj F))) ≫ category_theory.limits.limit.π (F ⋙ category_theory.limits.lim) j ≫ category_theory.limits.limit.π (F.obj j) k = category_theory.limits.limit.π (category_theory.uncurry.obj F) (j, k)
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	_inst_4 : category_theory.limits.has_limit F,	E : K ⥤ J,	_inst_5 : category_theory.limits.has_limit (E ⋙ F),	k : K	⊢ (category_theory.limits.cone.whisker E (category_theory.limits.limit.cone F)).π.app k = category_theory.limits.limit.π F (E.obj k)
J K : Type v,	_inst_1 : category_theory.small_category J,	_inst_2 : category_theory.small_category K,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	_inst_4 : category_theory.limits.has_limit F,	E : K ⥤ J,	_inst_5 : category_theory.limits.has_limit (E ⋙ F),	k : K	⊢ category_theory.limits.limit.pre F E ≫ category_theory.limits.limit.π (E ⋙ F) k = category_theory.limits.limit.π F (E.obj k)
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	J' : Type v,	_inst_4 : category_theory.small_category J',	e : J ≌ J',	_inst_5 : category_theory.limits.has_limits_of_shape J C	⊢ auto_param (∀ (F : J' ⥤ C), category_theory.limits.has_limit F) (name.mk_string "apply_instance" (name.mk_string "tactic" name.anonymous))
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	J' : Type v,	_inst_4 : category_theory.small_category J',	e : J ≌ J',	_inst_5 : category_theory.limits.has_limits_of_shape J C,	F : J' ⥤ C	⊢ category_theory.limits.has_limit F
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	J' : Type v,	_inst_4 : category_theory.small_category J',	e : J ≌ J',	_inst_5 : category_theory.limits.has_limits_of_shape J C,	F : J' ⥤ C	⊢ category_theory.limits.has_limit (e.functor ⋙ F)
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	J' : Type v,	_inst_4 : category_theory.small_category J',	e : J ≌ J',	_inst_5 : category_theory.limits.has_limits_of_shape J C	⊢ category_theory.limits.has_limits_of_shape J' C
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	_inst_4 : category_theory.limits.has_colimit F,	t : category_theory.limits.colimit_cocone F,	j : J	⊢ t.cocone.ι.app j ≫ (category_theory.limits.colimit.iso_colimit_cocone t).inv = category_theory.limits.colimit.ι F j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	_inst_4 : category_theory.limits.has_colimit F,	t : category_theory.limits.colimit_cocone F,	j : J	⊢ t.cocone.ι.app j ≫ t.is_colimit.desc (category_theory.limits.colimit.cocone F) = category_theory.limits.colimit.ι F j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	t : category_theory.limits.cone F,	D : Type u',	_inst_4 : category_theory.category D,	G : C ⥤ D,	_inst_5 : category_theory.faithful G,	ht : category_theory.limits.is_limit (G.map_cone t),	lift : Π (s : category_theory.limits.cone F), s.X ⟶ t.X,	h : ∀ (s : category_theory.limits.cone F), G.map (lift s) = ht.lift (G.map_cone s),	s : category_theory.limits.cone F,	j : J	⊢ lift s ≫ t.π.app j = s.π.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	t : category_theory.limits.cone F,	D : Type u',	_inst_4 : category_theory.category D,	G : C ⥤ D,	_inst_5 : category_theory.faithful G,	ht : category_theory.limits.is_limit (G.map_cone t),	lift : Π (s : category_theory.limits.cone F), s.X ⟶ t.X,	h : ∀ (s : category_theory.limits.cone F), G.map (lift s) = ht.lift (G.map_cone s),	s : category_theory.limits.cone F,	j : J	⊢ lift s ≫ t.π.app j = s.π.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	t : category_theory.limits.cone F,	D : Type u',	_inst_4 : category_theory.category D,	G : C ⥤ D,	_inst_5 : category_theory.faithful G,	ht : category_theory.limits.is_limit (G.map_cone t),	lift : Π (s : category_theory.limits.cone F), s.X ⟶ t.X,	h : ∀ (s : category_theory.limits.cone F), G.map (lift s) = ht.lift (G.map_cone s),	s : category_theory.limits.cone F,	j : J	⊢ lift s ≫ t.π.app j = s.π.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	t : category_theory.limits.cone F,	D : Type u',	_inst_4 : category_theory.category D,	G : C ⥤ D,	_inst_5 : category_theory.faithful G,	ht : category_theory.limits.is_limit (G.map_cone t),	lift : Π (s : category_theory.limits.cone F), s.X ⟶ t.X,	h : ∀ (s : category_theory.limits.cone F), G.map (lift s) = ht.lift (G.map_cone s),	s : category_theory.limits.cone F,	j : J	⊢ G.map (lift s ≫ t.π.app j) = G.map (s.π.app j)
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	t : category_theory.limits.cone F,	D : Type u',	_inst_4 : category_theory.category D,	G : C ⥤ D,	_inst_5 : category_theory.faithful G,	ht : category_theory.limits.is_limit (G.map_cone t),	lift : Π (s : category_theory.limits.cone F), s.X ⟶ t.X,	h : ∀ (s : category_theory.limits.cone F), G.map (lift s) = ht.lift (G.map_cone s),	s : category_theory.limits.cone F,	j : J	⊢ ht.lift (G.map_cone s) ≫ G.map (t.π.app j) = G.map (s.π.app j)
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	t : category_theory.limits.cone F,	D : Type u',	_inst_4 : category_theory.category D,	G : C ⥤ D,	_inst_5 : category_theory.faithful G,	ht : category_theory.limits.is_limit (G.map_cone t),	lift : Π (s : category_theory.limits.cone F), s.X ⟶ t.X,	h : ∀ (s : category_theory.limits.cone F), G.map (lift s) = ht.lift (G.map_cone s),	s : category_theory.limits.cone F,	m : s.X ⟶ t.X,	w : ∀ (j : J), m ≫ t.π.app j = s.π.app j	⊢ G.map m = G.map (lift s)
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	t : category_theory.limits.cone F,	D : Type u',	_inst_4 : category_theory.category D,	G : C ⥤ D,	_inst_5 : category_theory.faithful G,	ht : category_theory.limits.is_limit (G.map_cone t),	lift : Π (s : category_theory.limits.cone F), s.X ⟶ t.X,	h : ∀ (s : category_theory.limits.cone F), G.map (lift s) = ht.lift (G.map_cone s),	s : category_theory.limits.cone F,	m : s.X ⟶ t.X,	w : ∀ (j : J), m ≫ t.π.app j = s.π.app j	⊢ m = lift s
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	t : category_theory.limits.cone F,	D : Type u',	_inst_4 : category_theory.category D,	G : C ⥤ D,	_inst_5 : category_theory.faithful G,	ht : category_theory.limits.is_limit (G.map_cone t),	lift : Π (s : category_theory.limits.cone F), s.X ⟶ t.X,	h : ∀ (s : category_theory.limits.cone F), G.map (lift s) = ht.lift (G.map_cone s),	s : category_theory.limits.cone F,	m : s.X ⟶ t.X,	w : ∀ (j : J), m ≫ t.π.app j = s.π.app j	⊢ G.map m = ht.lift (G.map_cone s)
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	t : category_theory.limits.cone F,	D : Type u',	_inst_4 : category_theory.category D,	G : C ⥤ D,	_inst_5 : category_theory.faithful G,	ht : category_theory.limits.is_limit (G.map_cone t),	lift : Π (s : category_theory.limits.cone F), s.X ⟶ t.X,	h : ∀ (s : category_theory.limits.cone F), G.map (lift s) = ht.lift (G.map_cone s),	s : category_theory.limits.cone F,	m : s.X ⟶ t.X,	w : ∀ (j : J), m ≫ t.π.app j = s.π.app j,	j : J	⊢ G.map m ≫ (G.map_cone t).π.app j = (G.map_cone s).π.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	t : category_theory.limits.cone F,	D : Type u',	_inst_4 : category_theory.category D,	G : C ⥤ D,	_inst_5 : category_theory.faithful G,	ht : category_theory.limits.is_limit (G.map_cone t),	lift : Π (s : category_theory.limits.cone F), s.X ⟶ t.X,	h : ∀ (s : category_theory.limits.cone F), G.map (lift s) = ht.lift (G.map_cone s),	s : category_theory.limits.cone F,	m : s.X ⟶ t.X,	w : ∀ (j : J), m ≫ t.π.app j = s.π.app j,	j : J	⊢ G.map (m ≫ t.π.app j) = G.map m ≫ (G.map_cone t).π.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	s : category_theory.limits.cocone F,	j : J	⊢ (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h s = s.ι.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	s : category_theory.limits.cocone F,	j : J,	h : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extend (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h s) = s	⊢ (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h s = s.ι.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	j : J,	s_X : C,	s_ι : F ⟶ (category_theory.functor.const J).obj s_X,	h : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extend (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι}) = {X := s_X, ι := s_ι}	⊢ (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι} = {X := s_X, ι := s_ι}.ι.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	j : J,	s_X : C,	s_ι : F ⟶ (category_theory.functor.const J).obj s_X,	h : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extend (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι}) = {X := s_X, ι := s_ι},	h₁ : {X := s_X, ι := s_ι}.X = s_X,	h₂ : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extensions.app {X := s_X, ι := s_ι}.X (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι}) == s_ι	⊢ (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι} = {X := s_X, ι := s_ι}.ι.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	j : J,	s_X : C,	s_ι : F ⟶ (category_theory.functor.const J).obj s_X,	h : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extend (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι}) = {X := s_X, ι := s_ι},	h₁ : {X := s_X, ι := s_ι}.X = s_X,	h₂ : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extensions.app {X := s_X, ι := s_ι}.X (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι}) = s_ι	⊢ {X := s_X, ι := s_ι}.ι.app j = ?m_1
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	j : J,	s_X : C,	s_ι : F ⟶ (category_theory.functor.const J).obj s_X,	h : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extend (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι}) = {X := s_X, ι := s_ι},	h₁ : {X := s_X, ι := s_ι}.X = s_X,	h₂ : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extensions.app {X := s_X, ι := s_ι}.X (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι}) = s_ι	⊢ (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι} = {X := s_X, ι := (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extensions.app {X := s_X, ι := s_ι}.X (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι})}.ι.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	j : J,	s_X : C,	s_ι : F ⟶ (category_theory.functor.const J).obj s_X,	h : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extend (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι}) = {X := s_X, ι := s_ι},	h₁ : {X := s_X, ι := s_ι}.X = s_X,	h₂ : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extensions.app {X := s_X, ι := s_ι}.X (category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι}) = s_ι	⊢ (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h {X := s_X, ι := s_ι} = {X := s_X, ι := s_ι}.ι.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	s : category_theory.limits.cocone F,	m : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).X ⟶ s.X,	w : ∀ (j : J), (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ m = s.ι.app j	⊢ m = category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h s
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	s : category_theory.limits.cocone F,	m : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).X ⟶ s.X,	w : ∀ (j : J), (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ m = s.ι.app j	⊢ category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h (category_theory.limits.is_colimit.of_nat_iso.cocone_of_hom h m) = category_theory.limits.is_colimit.of_nat_iso.hom_of_cocone h s
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	s : category_theory.limits.cocone F,	m : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).X ⟶ s.X,	w : ∀ (j : J), (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ m = s.ι.app j	⊢ category_theory.limits.is_colimit.of_nat_iso.cocone_of_hom h m = s
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	s : category_theory.limits.cocone F,	m : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).X ⟶ s.X,	w : ∀ (j : J), (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ m = s.ι.app j	⊢ {X := s.X, ι := (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι ≫ (category_theory.functor.const J).map m} = s
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	s_X : C,	s_ι : F ⟶ (category_theory.functor.const J).obj s_X,	m : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).X ⟶ {X := s_X, ι := s_ι}.X,	w : ∀ (j : J), (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ m = {X := s_X, ι := s_ι}.ι.app j	⊢ {X := {X := s_X, ι := s_ι}.X, ι := (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι ≫ (category_theory.functor.const J).map m} = {X := s_X, ι := s_ι}
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	s_X : C,	s_ι : F ⟶ (category_theory.functor.const J).obj s_X,	m : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).X ⟶ {X := s_X, ι := s_ι}.X,	w : ∀ (j : J), (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ m = {X := s_X, ι := s_ι}.ι.app j,	j : J	⊢ ((category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι ≫ (category_theory.functor.const J).map m).app j = s_ι.app j
J : Type v,	_inst_1 : category_theory.small_category J,	C : Type u,	_inst_3 : category_theory.category C,	F : J ⥤ C,	X : C,	h : category_theory.coyoneda.obj (opposite.op X) ≅ F.cocones,	s : category_theory.limits.cocone F,	m : (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).X ⟶ s.X,	w : ∀ (j : J), (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).ι.app j ≫ m = s.ι.app j	⊢ (category_theory.limits.is_colimit.of_nat_iso.colimit_cocone h).extend m = s
α : Type u,	_inst_2 : complete_lattice α,	J : Type u,	𝒥 : category_theory.small_category J	⊢ category_theory.limits.has_limits_of_shape J α
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	J : Type v,	_inst_4 : category_theory.small_category J,	F : C ⥤ D	⊢ ∀ (a b : category_theory.limits.reflects_limits_of_shape J F), a = b
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	J : Type v,	_inst_4 : category_theory.small_category J,	F : C ⥤ D,	a b : category_theory.limits.reflects_limits_of_shape J F	⊢ a = b
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	J : Type v,	_inst_4 : category_theory.small_category J,	F : C ⥤ D,	b : category_theory.limits.reflects_limits_of_shape J F,	a : auto_param (Π {K : J ⥤ C}, category_theory.limits.reflects_limit K F) (name.mk_string "apply_instance" (name.mk_string "tactic" name.anonymous))	⊢ {reflects_limit := a} = b
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	J : Type v,	_inst_4 : category_theory.small_category J,	F : C ⥤ D,	a b : auto_param (Π {K : J ⥤ C}, category_theory.limits.reflects_limit K F) (name.mk_string "apply_instance" (name.mk_string "tactic" name.anonymous))	⊢ {reflects_limit := a} = {reflects_limit := b}
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	J : Type v,	_inst_4 : category_theory.small_category J,	F : C ⥤ D	⊢ subsingleton (category_theory.limits.reflects_limits_of_shape J F)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	J : Type v,	_inst_3 : category_theory.small_category J,	F : J ⥤ C,	G : C ⥤ D,	_inst_4 : category_theory.reflects_isomorphisms G,	_inst_5 : category_theory.limits.has_colimit F,	_inst_6 : category_theory.limits.preserves_colimit F G,	c : category_theory.limits.cocone F,	t : category_theory.limits.is_colimit (G.map_cocone c)	⊢ category_theory.limits.is_colimit c
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	J : Type v,	_inst_3 : category_theory.small_category J,	F : J ⥤ C,	G : C ⥤ D,	_inst_4 : category_theory.reflects_isomorphisms G,	_inst_5 : category_theory.limits.has_colimit F,	_inst_6 : category_theory.limits.preserves_colimit F G,	c : category_theory.limits.cocone F,	t : category_theory.limits.is_colimit (G.map_cocone c)	⊢ category_theory.is_iso ((category_theory.limits.colimit.is_colimit F).desc c)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	J : Type v,	_inst_3 : category_theory.small_category J,	F : J ⥤ C,	G : C ⥤ D,	_inst_4 : category_theory.reflects_isomorphisms G,	_inst_5 : category_theory.limits.has_colimit F,	_inst_6 : category_theory.limits.preserves_colimit F G,	c : category_theory.limits.cocone F,	t : category_theory.limits.is_colimit (G.map_cocone c)	⊢ category_theory.is_iso ((category_theory.limits.cocones.forget F).map ((category_theory.limits.colimit.is_colimit F).desc_cocone_morphism c))
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	J : Type v,	_inst_3 : category_theory.small_category J,	F : J ⥤ C,	G : C ⥤ D,	_inst_4 : category_theory.reflects_isomorphisms G,	_inst_5 : category_theory.limits.has_colimit F,	_inst_6 : category_theory.limits.preserves_colimit F G,	c : category_theory.limits.cocone F,	t : category_theory.limits.is_colimit (G.map_cocone c)	⊢ category_theory.is_iso ((category_theory.limits.colimit.is_colimit F).desc_cocone_morphism c)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	J : Type v,	_inst_3 : category_theory.small_category J,	F : J ⥤ C,	G : C ⥤ D,	_inst_4 : category_theory.reflects_isomorphisms G,	_inst_5 : category_theory.limits.has_colimit F,	_inst_6 : category_theory.limits.preserves_colimit F G,	c : category_theory.limits.cocone F,	t : category_theory.limits.is_colimit (G.map_cocone c)	⊢ category_theory.is_iso ((category_theory.limits.cocones.functoriality F G).map ((category_theory.limits.colimit.is_colimit F).desc_cocone_morphism c))
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	J : Type v,	_inst_3 : category_theory.small_category J,	F : J ⥤ C,	_inst_4 : category_theory.limits.preserves_limit F G,	_inst_5 : category_theory.limits.has_limit F,	_inst_6 : category_theory.limits.has_limit (F ⋙ G),	t : category_theory.limits.cone F,	j : J	⊢ (G.map (category_theory.limits.limit.lift F t) ≫ (category_theory.preserves_limit_iso G F).hom) ≫ category_theory.limits.limit.π (F ⋙ G) j = category_theory.limits.limit.lift (F ⋙ G) (G.map_cone t) ≫ category_theory.limits.limit.π (F ⋙ G) j
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	J : Type v,	_inst_3 : category_theory.small_category J,	F : J ⥤ C,	_inst_4 : category_theory.limits.preserves_limit F G,	_inst_5 : category_theory.limits.has_limit F,	_inst_6 : category_theory.limits.has_limit (F ⋙ G),	t : category_theory.limits.cone F	⊢ G.map (category_theory.limits.limit.lift F t) ≫ (category_theory.preserves_limit_iso G F).hom = category_theory.limits.limit.lift (F ⋙ G) (G.map_cone t)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	X Y : C,	_inst_3 : category_theory.limits.has_binary_product X Y,	_inst_4 : category_theory.limits.has_binary_product (G.obj X) (G.obj Y),	i : category_theory.is_iso (category_theory.limits.prod_comparison G X Y)	⊢ category_theory.limits.preserves_limit (category_theory.limits.pair X Y) G
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	X Y : C,	_inst_3 : category_theory.limits.has_binary_product X Y,	_inst_4 : category_theory.limits.has_binary_product (G.obj X) (G.obj Y),	i : category_theory.is_iso (category_theory.limits.prod_comparison G X Y)	⊢ category_theory.limits.is_limit (G.map_cone (category_theory.limits.binary_fan.mk category_theory.limits.prod.fst category_theory.limits.prod.snd))
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	X Y : C,	_inst_3 : category_theory.limits.has_binary_product X Y,	_inst_4 : category_theory.limits.has_binary_product (G.obj X) (G.obj Y),	i : category_theory.is_iso (category_theory.limits.prod_comparison G X Y)	⊢ category_theory.limits.is_limit (category_theory.limits.binary_fan.mk (G.map category_theory.limits.prod.fst) (G.map category_theory.limits.prod.snd))
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	X Y : C,	_inst_3 : category_theory.limits.has_binary_product X Y,	_inst_4 : category_theory.limits.has_binary_product (G.obj X) (G.obj Y),	i : category_theory.is_iso (category_theory.limits.prod_comparison G X Y)	⊢ category_theory.is_iso ((category_theory.limits.limit.is_limit (category_theory.limits.pair (G.obj X) (G.obj Y))).lift (category_theory.limits.binary_fan.mk (G.map category_theory.limits.prod.fst) (G.map category_theory.limits.prod.snd)))
C : Type u₁,	_inst_1 : category_theory.small_category C,	P : Cᵒᵖ ⥤ Type u₁	⊢ category_theory.limits.is_colimit (category_theory.cocone_of_representable P)
C : Type u₁,	_inst_1 : category_theory.small_category C,	P : Cᵒᵖ ⥤ Type u₁	⊢ category_theory.is_iso ((category_theory.limits.colimit.is_colimit (category_theory.functor_to_representables P)).desc (category_theory.cocone_of_representable P))
C : Type u₁,	_inst_1 : category_theory.small_category C,	P : Cᵒᵖ ⥤ Type u₁	⊢ category_theory.is_iso (category_theory.limits.colimit.desc (category_theory.functor_to_representables P) ((category_theory.limits.colimit.cocone (category_theory.functor_to_representables P)).extend (category_theory.extend_along_yoneda_yoneda.hom.app P)))
C : Type u₁,	_inst_1 : category_theory.small_category C,	P : Cᵒᵖ ⥤ Type u₁	⊢ category_theory.is_iso (𝟙 (category_theory.limits.colimit (category_theory.functor_to_representables P)) ≫ category_theory.extend_along_yoneda_yoneda.hom.app P)
J : Type v,	_inst_1 : category_theory.small_category J,	F : J ⥤ category_theory.discrete punit,	c : category_theory.limits.cone F	⊢ category_theory.limits.is_limit c
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	_inst_2 : category_theory.limits.has_binary_product X Y,	_inst_3 : category_theory.limits.has_binary_product (X ⨯ Y) (X ⨯ Y)	⊢ category_theory.limits.diag (X ⨯ Y) ≫ category_theory.limits.prod.map category_theory.limits.prod.fst category_theory.limits.prod.snd = 𝟙 (X ⨯ Y)
C : Type u,	_inst_1 : category_theory.category C,	S T U V W : C,	_inst_2 : category_theory.limits.has_binary_coproduct U W,	_inst_3 : category_theory.limits.has_binary_coproduct T V,	f : U ⟶ S,	g : W ⟶ S,	h : T ⟶ U,	k : V ⟶ W	⊢ category_theory.limits.coprod.inl ≫ category_theory.limits.coprod.map h k ≫ category_theory.limits.coprod.desc f g = category_theory.limits.coprod.inl ≫ category_theory.limits.coprod.desc (h ≫ f) (k ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	S T U V W : C,	_inst_2 : category_theory.limits.has_binary_coproduct U W,	_inst_3 : category_theory.limits.has_binary_coproduct T V,	f : U ⟶ S,	g : W ⟶ S,	h : T ⟶ U,	k : V ⟶ W	⊢ category_theory.limits.coprod.inr ≫ category_theory.limits.coprod.map h k ≫ category_theory.limits.coprod.desc f g = category_theory.limits.coprod.inr ≫ category_theory.limits.coprod.desc (h ≫ f) (k ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	S T U V W : C,	_inst_2 : category_theory.limits.has_binary_coproduct U W,	_inst_3 : category_theory.limits.has_binary_coproduct T V,	f : U ⟶ S,	g : W ⟶ S,	h : T ⟶ U,	k : V ⟶ W	⊢ category_theory.limits.coprod.map h k ≫ category_theory.limits.coprod.desc f g = category_theory.limits.coprod.desc (h ≫ f) (k ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	S T U V W : C,	_inst_2 : category_theory.limits.has_binary_coproduct U W,	_inst_3 : category_theory.limits.has_binary_coproduct T V,	f : U ⟶ S,	g : W ⟶ S,	h : T ⟶ U,	k : V ⟶ W	⊢ category_theory.limits.coprod.map h k ≫ category_theory.limits.coprod.desc f g = category_theory.limits.coprod.desc (h ≫ f) (k ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_binary_coproducts C,	X₁ X₂ X₃ Y₁ Y₂ Y₃ : C,	f₁ : X₁ ⟶ Y₁,	f₂ : X₂ ⟶ Y₂,	f₃ : X₃ ⟶ Y₃	⊢ category_theory.limits.coprod.map (category_theory.limits.coprod.map f₁ f₂) f₃ ≫ (category_theory.limits.coprod.associator Y₁ Y₂ Y₃).hom = (category_theory.limits.coprod.associator X₁ X₂ X₃).hom ≫ category_theory.limits.coprod.map f₁ (category_theory.limits.coprod.map f₂ f₃)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.preadditive C,	J : Type v,	_inst_3 : decidable_eq J,	_inst_4 : fintype J,	K : Type v,	_inst_6 : fintype K,	_inst_7 : decidable_eq K,	_inst_8 : category_theory.limits.has_finite_biproducts C,	f : J → C,	g h : K → C,	m : Π (j : J) (k : K), f j ⟶ g k,	n : Π (k : K), g k ⟶ h k,	j : J,	j_1 : K	⊢ (category_theory.limits.biproduct.ι (λ (j : J), f j) j ≫ category_theory.limits.biproduct.matrix m ≫ category_theory.limits.biproduct.map n) ≫ category_theory.limits.biproduct.π (λ (k : K), h k) j_1 = (category_theory.limits.biproduct.ι (λ (j : J), f j) j ≫ category_theory.limits.biproduct.matrix (λ (j : J) (k : K), m j k ≫ n k)) ≫ category_theory.limits.biproduct.π (λ (k : K), h k) j_1
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.preadditive C,	J : Type v,	_inst_3 : decidable_eq J,	_inst_4 : fintype J,	K : Type v,	_inst_6 : fintype K,	_inst_7 : decidable_eq K,	_inst_8 : category_theory.limits.has_finite_biproducts C,	f : J → C,	g h : K → C,	m : Π (j : J) (k : K), f j ⟶ g k,	n : Π (k : K), g k ⟶ h k	⊢ category_theory.limits.biproduct.matrix m ≫ category_theory.limits.biproduct.map n = category_theory.limits.biproduct.matrix (λ (j : J) (k : K), m j k ≫ n k)
C : Type u,	_inst_1 : category_theory.category C,	F : category_theory.limits.walking_parallel_pair ⥤ C,	j : category_theory.limits.walking_parallel_pair	⊢ (category_theory.limits.parallel_pair (F.map category_theory.limits.walking_parallel_pair_hom.left) (F.map category_theory.limits.walking_parallel_pair_hom.right)).obj j = F.obj j
C : Type u,	_inst_1 : category_theory.category C,	F : category_theory.limits.walking_parallel_pair ⥤ C	⊢ (category_theory.limits.parallel_pair (F.map category_theory.limits.walking_parallel_pair_hom.left) (F.map category_theory.limits.walking_parallel_pair_hom.right)).obj category_theory.limits.walking_parallel_pair.zero = F.obj category_theory.limits.walking_parallel_pair.zero
C : Type u,	_inst_1 : category_theory.category C,	F : category_theory.limits.walking_parallel_pair ⥤ C	⊢ (category_theory.limits.parallel_pair (F.map category_theory.limits.walking_parallel_pair_hom.left) (F.map category_theory.limits.walking_parallel_pair_hom.right)).obj category_theory.limits.walking_parallel_pair.one = F.obj category_theory.limits.walking_parallel_pair.one
C : Type u,	_inst_1 : category_theory.category C,	F : category_theory.limits.walking_parallel_pair ⥤ C,	j : category_theory.limits.walking_parallel_pair	⊢ (category_theory.limits.parallel_pair (F.map category_theory.limits.walking_parallel_pair_hom.left) (F.map category_theory.limits.walking_parallel_pair_hom.right)).obj j = F.obj j
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	f g : X ⟶ Y,	t : category_theory.limits.fork f g	⊢ t.ι ≫ f = t.ι ≫ g
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	f g : X ⟶ Y,	s : category_theory.limits.fork f g,	W : C,	k l : W ⟶ s.X,	h : k ≫ s.ι = l ≫ s.ι,	fork.equalizer_ext : ∀ (j : category_theory.limits.walking_parallel_pair), k ≫ s.π.app j = l ≫ s.π.app j	⊢ k ≫ s.π.app category_theory.limits.walking_parallel_pair.one = l ≫ s.π.app category_theory.limits.walking_parallel_pair.one
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	f g : X ⟶ Y,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.limits.has_coequalizer f g,	_inst_4 : category_theory.limits.has_coequalizer (G.map f) (G.map g),	Z : C,	h : Y ⟶ Z,	w : f ≫ h = g ≫ h	⊢ G.map f ≫ G.map h = G.map g ≫ G.map h
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	f g : X ⟶ Y,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.limits.has_coequalizer f g,	_inst_4 : category_theory.limits.has_coequalizer (G.map f) (G.map g),	Z : C,	h : Y ⟶ Z,	w : f ≫ h = g ≫ h	⊢ category_theory.limits.coequalizer.π (G.map f) (G.map g) ≫ category_theory.limits.coequalizer_comparison f g G ≫ G.map (category_theory.limits.coequalizer.desc h w) = category_theory.limits.coequalizer.π (G.map f) (G.map g) ≫ category_theory.limits.coequalizer.desc (G.map h) _
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	f g : X ⟶ Y,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.limits.has_coequalizer f g,	_inst_4 : category_theory.limits.has_coequalizer (G.map f) (G.map g),	Z : C,	h : Y ⟶ Z,	w : f ≫ h = g ≫ h	⊢ category_theory.limits.coequalizer_comparison f g G ≫ G.map (category_theory.limits.coequalizer.desc h w) = category_theory.limits.coequalizer.desc (G.map h) _
C : Type u,	_inst_1 : category_theory.category C,	J : Type v,	_inst_2 : fintype J,	_inst_3 : category_theory.limits.has_finite_wide_pushouts C	⊢ category_theory.limits.has_colimits_of_shape (category_theory.limits.wide_pushout_shape J) C
C : Type u,	_inst_1 : category_theory.category C,	J : Type v,	_inst_2 : fintype J,	_inst_3 : category_theory.limits.has_finite_wide_pushouts C,	_inst : ∀ [_inst_3 : fintype J], category_theory.limits.has_colimits_of_shape (category_theory.limits.wide_pushout_shape J) C	⊢ category_theory.limits.has_colimits_of_shape (category_theory.limits.wide_pushout_shape J) C
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_finite_limits C,	J : Type v,	_x : decidable_eq J,	_x : fintype J	⊢ category_theory.limits.has_limits_of_shape (category_theory.limits.wide_pullback_shape J) C
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	f : X ⟶ Y,	Z : C,	g : Y ⟶ Z,	_inst_2 : category_theory.limits.has_equalizers C,	_inst_3 : category_theory.limits.has_image f,	_inst_4 : category_theory.is_iso g	⊢ category_theory.limits.factor_thru_image (f ≫ g) ≫ (category_theory.limits.image.comp_iso f g).inv ≫ category_theory.limits.image.ι f = category_theory.limits.factor_thru_image (f ≫ g) ≫ category_theory.limits.image.ι (f ≫ g) ≫ category_theory.inv g
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	f : X ⟶ Y,	Z : C,	g : Y ⟶ Z,	_inst_2 : category_theory.limits.has_equalizers C,	_inst_3 : category_theory.limits.has_image f,	_inst_4 : category_theory.is_iso g	⊢ (category_theory.limits.image.comp_iso f g).inv ≫ category_theory.limits.image.ι f = category_theory.limits.image.ι (f ≫ g) ≫ category_theory.inv g
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_zero_morphisms C,	X Y : C,	f : X ⟶ Y,	s : category_theory.limits.kernel_fork f	⊢ s.π.app category_theory.limits.walking_parallel_pair.one = 0
C : Type u,	_inst_1 : category_theory.category C,	_inst_3 : category_theory.limits.has_coequalizers C,	A B : C,	f g : A ⟶ B,	i : category_theory.is_reflexive_pair f g	⊢ category_theory.limits.has_coequalizer f g
J : Type v,	C : Type u,	_inst_1 : category_theory.category C,	B : C,	objs : J → C,	arrows : Π (j : J), objs j ⟶ B,	_inst_2 : category_theory.limits.has_wide_pullback B objs arrows,	X : C,	f : X ⟶ B,	fs : Π (j : J), X ⟶ objs j,	w : ∀ (j : J), fs j ≫ arrows j = f	⊢ ∀ (j : J), fs j ≫ (category_theory.limits.wide_pullback_shape.wide_cospan B (λ (j : J), objs j) arrows).map (category_theory.limits.wide_pullback_shape.hom.term j) = f
J : Type v,	C : Type u,	_inst_1 : category_theory.category C,	B : C,	objs : J → C,	arrows : Π (j : J), B ⟶ objs j,	_inst_2 : category_theory.limits.has_wide_pushout B objs arrows,	j : J	⊢ arrows j ≫ category_theory.limits.wide_pushout.ι arrows j = category_theory.limits.wide_pushout.head arrows
J : Type v,	C : Type u,	_inst_1 : category_theory.category C,	B : C,	objs : J → C,	arrows : Π (j : J), B ⟶ objs j,	_inst_2 : category_theory.limits.has_wide_pushout B objs arrows,	X : C,	f : B ⟶ X,	fs : Π (j : J), objs j ⟶ X,	w : ∀ (j : J), arrows j ≫ fs j = f	⊢ (category_theory.limits.wide_pushout_shape.mk_cocone f fs w).ι.app option.none = f
J : Type v,	C : Type u,	_inst_1 : category_theory.category C,	B : C,	objs : J → C,	arrows : Π (j : J), B ⟶ objs j,	_inst_2 : category_theory.limits.has_wide_pushout B objs arrows,	X : C,	f : B ⟶ X,	fs : Π (j : J), objs j ⟶ X,	w : ∀ (j : J), arrows j ≫ fs j = f	⊢ category_theory.limits.wide_pushout.head arrows ≫ category_theory.limits.wide_pushout.desc f fs w = f
J : Type u,	_inst_1 : category_theory.small_category J,	F : J ⥤ Type u,	j j' : J,	x : F.obj j,	x' : F.obj j',	f : j ⟶ j',	w : F.map f x = x'	⊢ category_theory.limits.colimit.ι F j x = category_theory.limits.colimit.ι F j' x'
J : Type u,	_inst_1 : category_theory.small_category J,	F : J ⥤ Type u,	j j' : J,	x : F.obj j,	x' : F.obj j',	f : j ⟶ j',	w : F.map f x = x'	⊢ category_theory.limits.colimit.ι F j x = category_theory.limits.colimit.ι F j' (F.map f x)
J : Type u,	_inst_1 : category_theory.small_category J,	F : J ⥤ Type u,	c : category_theory.limits.cone F,	t : category_theory.limits.is_limit c,	x : ↥(F.sections),	j : J	⊢ c.π.app j (⇑((category_theory.limits.types.is_limit_equiv_sections t).symm) x) = ↑x j
J : Type u,	_inst_1 : category_theory.small_category J,	F : J ⥤ Type u,	c : category_theory.limits.cone F,	t : category_theory.limits.is_limit c,	j : J,	x : c.X	⊢ c.π.app j x = ↑(⇑(category_theory.limits.types.is_limit_equiv_sections t) x) j
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.preadditive C,	R : Type w,	_inst_3 : semiring R,	_inst_4 : category_theory.linear R C,	X Y Z : C,	g : Y ⟶ Z	⊢ ∀ (x y : X ⟶ Y), (x + y) ≫ g = x ≫ g + y ≫ g
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.preadditive C,	R : Type w,	_inst_3 : semiring R,	_inst_4 : category_theory.linear R C,	X Y Z : C,	g : Y ⟶ Z	⊢ ∀ (r : R) (x : X ⟶ Y), (r • x) ≫ g = ⇑(ring_hom.id R) r • x ≫ g
C : Type u₁,	_inst_1 : category_theory.category C,	T : category_theory.monad C,	A B : T.algebra,	f : A ⟶ B,	_inst_2 : category_theory.is_iso f.f	⊢ ↑T.map (category_theory.inv f.f) ≫ A.a = B.a ≫ category_theory.inv f.f
C : Type u₁,	_inst_1 : category_theory.category C,	T : category_theory.monad C,	A B : T.algebra,	f : A ⟶ B,	_inst_2 : category_theory.is_iso f.f	⊢ ↑T.map (category_theory.inv f.f) ≫ ↑T.map f.f ≫ B.a = B.a
C : Type u₁,	_inst_1 : category_theory.category C,	T : category_theory.monad C,	A B : T.algebra,	f : A ⟶ B,	_inst_2 : category_theory.is_iso f.f	⊢ f ≫ {f := category_theory.inv f.f _inst_2, h' := _} = 𝟙 A ∧ {f := category_theory.inv f.f _inst_2, h' := _} ≫ f = 𝟙 B
C : Type u₁,	_inst_1 : category_theory.category C,	T : category_theory.monad C,	J : Type v₁,	_inst_2 : category_theory.small_category J,	D : J ⥤ T.algebra,	c : category_theory.limits.cocone (D ⋙ T.forget),	t : category_theory.limits.is_colimit c,	_inst_3 : category_theory.limits.preserves_colimit (D ⋙ T.forget) ↑T,	_inst_4 : category_theory.limits.preserves_colimit ((D ⋙ T.forget) ⋙ ↑T) ↑T,	A B : J,	f : A ⟶ B	⊢ D.map f ≫ {f := c.ι.app B, h' := _} = {f := c.ι.app A, h' := _} ≫ ((category_theory.functor.const J).obj (category_theory.monad.forget_creates_colimits.cocone_point c t)).map f
C : Type u₁,	_inst_1 : category_theory.category C,	T : category_theory.monad C,	J : Type v₁,	_inst_2 : category_theory.small_category J,	D : J ⥤ T.algebra,	c : category_theory.limits.cocone (D ⋙ T.forget),	t : category_theory.limits.is_colimit c,	_inst_3 : category_theory.limits.preserves_colimit (D ⋙ T.forget) ↑T,	_inst_4 : category_theory.limits.preserves_colimit ((D ⋙ T.forget) ⋙ ↑T) ↑T,	A B : J,	f : A ⟶ B	⊢ (D.map f ≫ {f := c.ι.app B, h' := _}).f = ({f := c.ι.app A, h' := _} ≫ ((category_theory.functor.const J).obj (category_theory.monad.forget_creates_colimits.cocone_point c t)).map f).f
C : Type u₁,	_inst_1 : category_theory.category C,	T : category_theory.monad C,	J : Type v₁,	_inst_2 : category_theory.small_category J,	D : J ⥤ T.algebra,	c : category_theory.limits.cocone (D ⋙ T.forget),	t : category_theory.limits.is_colimit c,	_inst_3 : category_theory.limits.preserves_colimit (D ⋙ T.forget) ↑T,	_inst_4 : category_theory.limits.preserves_colimit ((D ⋙ T.forget) ⋙ ↑T) ↑T,	A B : J,	f : A ⟶ B	⊢ (D.map f).f ≫ c.ι.app B = c.ι.app A ≫ 𝟙 c.X
C : Type u₁,	_inst_1 : category_theory.category C,	T : category_theory.monad C,	J : Type v₁,	_inst_2 : category_theory.small_category J,	D : J ⥤ T.algebra,	c : category_theory.limits.cocone (D ⋙ T.forget),	t : category_theory.limits.is_colimit c,	_inst_3 : category_theory.limits.preserves_colimit (D ⋙ T.forget) ↑T,	_inst_4 : category_theory.limits.preserves_colimit ((D ⋙ T.forget) ⋙ ↑T) ↑T,	A B : J,	f : A ⟶ B	⊢ (D.map f).f ≫ c.ι.app B = c.ι.app A
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.monoidal_category C,	X Y : C	⊢ (α_ X (𝟙_ C) Y).inv ≫ ((ρ_ X).hom ⊗ 𝟙 Y) = 𝟙 X ⊗ (λ_ Y).hom
C : Type u	⊢ ∀ {X Y : F C} (f : X ⟶ Y), (category_theory.free_monoidal_category.tensor_func C).map f ≫ (category_theory.free_monoidal_category.normalize_iso_aux C Y).hom = (category_theory.free_monoidal_category.normalize_iso_aux C X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map f
C : Type u,	X Y : F C,	f : X ⟶ Y	⊢ (category_theory.free_monoidal_category.tensor_func C).map f ≫ (category_theory.free_monoidal_category.normalize_iso_aux C Y).hom = (category_theory.free_monoidal_category.normalize_iso_aux C X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map f
C : Type u,	X Y : F C,	f : X ⟶ Y	⊢ ∀ (a : X ⟶ᵐ Y), (category_theory.free_monoidal_category.tensor_func C).map ⟦a⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C Y).hom = (category_theory.free_monoidal_category.normalize_iso_aux C X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦a⟧
C : Type u,	X Y : F C,	f : X ⟶ Y,	f : X ⟶ᵐ Y	⊢ (category_theory.free_monoidal_category.tensor_func C).map ⟦f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C Y).hom = (category_theory.free_monoidal_category.normalize_iso_aux C X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f⟧
C : Type u,	X Y : F C,	f : X ⟶ Y,	f : X ⟶ᵐ Y,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f⟧).app n
C : Type u,	X Y f : F C,	f : f ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.id f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.id f⟧).app n
C : Type u,	X Y f : F C,	f : f ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.id f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.id f⟧).app n		case category_theory.free_monoidal_category.hom.α_hom	C : Type u,	X Y f_X f_Y f_Z : F C,	f : (f_X.tensor f_Y).tensor f_Z ⟶ f_X.tensor (f_Y.tensor f_Z),	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.α_hom f_X f_Y f_Z⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_X.tensor (f_Y.tensor f_Z))).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C ((f_X.tensor f_Y).tensor f_Z)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.α_hom f_X f_Y f_Z⟧).app n		case category_theory.free_monoidal_category.hom.α_inv	C : Type u,	X Y f_X f_Y f_Z : F C,	f : f_X.tensor (f_Y.tensor f_Z) ⟶ (f_X.tensor f_Y).tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.α_inv f_X f_Y f_Z⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C ((f_X.tensor f_Y).tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_X.tensor (f_Y.tensor f_Z))).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.α_inv f_X f_Y f_Z⟧).app n		case category_theory.free_monoidal_category.hom.l_hom	C : Type u,	X Y f : F C,	f : category_theory.free_monoidal_category.unit.tensor f ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_hom f⟧).app n		case category_theory.free_monoidal_category.hom.l_inv	C : Type u,	X Y f : F C,	f : f ⟶ category_theory.free_monoidal_category.unit.tensor f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_hom	C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_inv	C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧).app n		case category_theory.free_monoidal_category.hom.comp	C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_X ⟶ f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.comp f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.comp f_g⟧).app n		case category_theory.free_monoidal_category.hom.tensor	C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_W).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_W.tensor f_X ⟶ f_Y.tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.tensor f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_Y.tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_W.tensor f_X)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.tensor f_g⟧).app n
C : Type u,	X Y f_X f_Y f_Z : F C,	f : (f_X.tensor f_Y).tensor f_Z ⟶ f_X.tensor (f_Y.tensor f_Z),	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.α_hom f_X f_Y f_Z⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_X.tensor (f_Y.tensor f_Z))).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C ((f_X.tensor f_Y).tensor f_Z)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.α_hom f_X f_Y f_Z⟧).app n
C : Type u,	X Y f_X f_Y f_Z : F C,	f : (f_X.tensor f_Y).tensor f_Z ⟶ f_X.tensor (f_Y.tensor f_Z),	n : N C	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (α_ f_X f_Y f_Z).hom) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj n) f_X (f_Y ⊗ f_Z)).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 (f_Y ⊗ f_Z)) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj (f_X.normalize_obj n)) f_Y f_Z).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) (f_X ⊗ f_Y) f_Z).inv ≫ ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_X f_Y).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 f_Y) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (α_ f_X f_Y f_Z).hom).app n)
C : Type u,	X Y f_X f_Y f_Z : F C,	f : (f_X.tensor f_Y).tensor f_Z ⟶ f_X.tensor (f_Y.tensor f_Z),	n : N C	⊢ ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_X f_Y).inv ⊗ 𝟙 f_Z) ≫ (((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 f_Y) ⊗ 𝟙 f_Z) ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_X f_Y).inv ⊗ 𝟙 f_Z) ≫ (((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 f_Y) ⊗ 𝟙 f_Z) ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom ≫ 𝟙 (category_theory.free_monoidal_category.inclusion_obj (f_Z.normalize_obj (f_Y.normalize_obj (f_X.normalize_obj n))))
C : Type u,	X Y f_X f_Y f_Z : F C,	f : (f_X.tensor f_Y).tensor f_Z ⟶ f_X.tensor (f_Y.tensor f_Z),	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.α_hom f_X f_Y f_Z⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_X.tensor (f_Y.tensor f_Z))).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C ((f_X.tensor f_Y).tensor f_Z)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.α_hom f_X f_Y f_Z⟧).app n		case category_theory.free_monoidal_category.hom.α_inv	C : Type u,	X Y f_X f_Y f_Z : F C,	f : f_X.tensor (f_Y.tensor f_Z) ⟶ (f_X.tensor f_Y).tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.α_inv f_X f_Y f_Z⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C ((f_X.tensor f_Y).tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_X.tensor (f_Y.tensor f_Z))).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.α_inv f_X f_Y f_Z⟧).app n		case category_theory.free_monoidal_category.hom.l_hom	C : Type u,	X Y f : F C,	f : category_theory.free_monoidal_category.unit.tensor f ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_hom f⟧).app n		case category_theory.free_monoidal_category.hom.l_inv	C : Type u,	X Y f : F C,	f : f ⟶ category_theory.free_monoidal_category.unit.tensor f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_hom	C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_inv	C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧).app n		case category_theory.free_monoidal_category.hom.comp	C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_X ⟶ f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.comp f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.comp f_g⟧).app n		case category_theory.free_monoidal_category.hom.tensor	C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_W).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_W.tensor f_X ⟶ f_Y.tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.tensor f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_Y.tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_W.tensor f_X)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.tensor f_g⟧).app n
C : Type u,	X Y f_X f_Y f_Z : F C,	f : (f_X.tensor f_Y).tensor f_Z ⟶ f_X.tensor (f_Y.tensor f_Z),	n : N C	⊢ ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_X f_Y).inv ⊗ 𝟙 f_Z) ≫ (((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 f_Y) ⊗ 𝟙 f_Z) ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_X f_Y).inv ⊗ 𝟙 f_Z) ≫ (((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 f_Y) ⊗ 𝟙 f_Z) ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom ≫ 𝟙 ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).obj (f_Z.normalize_obj (f_Y.normalize_obj (f_X.normalize_obj n))))
C : Type u,	X Y f_X f_Y f_Z : F C,	f : f_X.tensor (f_Y.tensor f_Z) ⟶ (f_X.tensor f_Y).tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.α_inv f_X f_Y f_Z⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C ((f_X.tensor f_Y).tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_X.tensor (f_Y.tensor f_Z))).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.α_inv f_X f_Y f_Z⟧).app n
C : Type u,	X Y f_X f_Y f_Z : F C,	f : f_X.tensor (f_Y.tensor f_Z) ⟶ (f_X.tensor f_Y).tensor f_Z,	n : N C	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (α_ f_X f_Y f_Z).inv) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj n) (f_X ⊗ f_Y) f_Z).inv ≫ ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_X f_Y).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 f_Y) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_X (f_Y ⊗ f_Z)).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 (f_Y ⊗ f_Z)) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj (f_X.normalize_obj n)) f_Y f_Z).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (α_ f_X f_Y f_Z).inv).app n)
C : Type u,	X Y f_X f_Y f_Z : F C,	f : f_X.tensor (f_Y.tensor f_Z) ⟶ (f_X.tensor f_Y).tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 (f_Y ⊗ f_Z)) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj (f_X.normalize_obj n)) f_Y f_Z).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom = ((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 (f_Y ⊗ f_Z)) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj (f_X.normalize_obj n)) f_Y f_Z).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom ≫ 𝟙 (category_theory.free_monoidal_category.inclusion_obj (f_Z.normalize_obj (f_Y.normalize_obj (f_X.normalize_obj n))))
C : Type u,	X Y f_X f_Y f_Z : F C,	f : f_X.tensor (f_Y.tensor f_Z) ⟶ (f_X.tensor f_Y).tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.α_inv f_X f_Y f_Z⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C ((f_X.tensor f_Y).tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_X.tensor (f_Y.tensor f_Z))).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.α_inv f_X f_Y f_Z⟧).app n		case category_theory.free_monoidal_category.hom.l_hom	C : Type u,	X Y f : F C,	f : category_theory.free_monoidal_category.unit.tensor f ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_hom f⟧).app n		case category_theory.free_monoidal_category.hom.l_inv	C : Type u,	X Y f : F C,	f : f ⟶ category_theory.free_monoidal_category.unit.tensor f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_hom	C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_inv	C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧).app n		case category_theory.free_monoidal_category.hom.comp	C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_X ⟶ f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.comp f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.comp f_g⟧).app n		case category_theory.free_monoidal_category.hom.tensor	C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_W).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_W.tensor f_X ⟶ f_Y.tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.tensor f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_Y.tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_W.tensor f_X)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.tensor f_g⟧).app n
C : Type u,	X Y f_X f_Y f_Z : F C,	f : f_X.tensor (f_Y.tensor f_Z) ⟶ (f_X.tensor f_Y).tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 (f_Y ⊗ f_Z)) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj (f_X.normalize_obj n)) f_Y f_Z).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom = ((category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ⊗ 𝟙 (f_Y ⊗ f_Z)) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj (f_X.normalize_obj n)) f_Y f_Z).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y (f_X.normalize_obj n)).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj (f_X.normalize_obj n))).hom ≫ 𝟙 ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).obj (f_Z.normalize_obj (f_Y.normalize_obj (f_X.normalize_obj n))))
C : Type u,	X Y f : F C,	f : category_theory.free_monoidal_category.unit.tensor f ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_hom f⟧).app n
C : Type u,	X Y f : F C,	f : category_theory.free_monoidal_category.unit.tensor f ⟶ f,	n : N C	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (λ_ f).hom) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) (𝟙_ (F C)) f).inv ≫ ((ρ_ (category_theory.free_monoidal_category.inclusion_obj n)).hom ⊗ 𝟙 f) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (λ_ f).hom).app n)
C : Type u,	X Y f : F C,	f : category_theory.free_monoidal_category.unit.tensor f ⟶ f,	n : N C	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (λ_ f).hom) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom = ((𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (λ_ f).hom) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (λ_ f).hom).app n)
C : Type u,	X Y f : F C,	f : category_theory.free_monoidal_category.unit.tensor f ⟶ f,	n : N C	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (λ_ f).hom) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom = (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (λ_ f).hom) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom ≫ 𝟙 (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))
C : Type u,	X Y f : F C,	f : category_theory.free_monoidal_category.unit.tensor f ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_hom f⟧).app n		case category_theory.free_monoidal_category.hom.l_inv	C : Type u,	X Y f : F C,	f : f ⟶ category_theory.free_monoidal_category.unit.tensor f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_hom	C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_inv	C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧).app n		case category_theory.free_monoidal_category.hom.comp	C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_X ⟶ f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.comp f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.comp f_g⟧).app n		case category_theory.free_monoidal_category.hom.tensor	C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_W).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_W.tensor f_X ⟶ f_Y.tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.tensor f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_Y.tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_W.tensor f_X)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.tensor f_g⟧).app n
C : Type u,	X Y f : F C,	f : category_theory.free_monoidal_category.unit.tensor f ⟶ f,	n : N C	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (λ_ f).hom) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom = (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (λ_ f).hom) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom ≫ 𝟙 ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).obj (f.normalize_obj n))
C : Type u,	X Y f : F C,	f : f ⟶ category_theory.free_monoidal_category.unit.tensor f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧).app n
C : Type u,	X Y f : F C,	f : f ⟶ category_theory.free_monoidal_category.unit.tensor f,	n : N C	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (λ_ f).inv) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj n) (𝟙_ (F C)) f).inv ≫ ((ρ_ (category_theory.free_monoidal_category.inclusion_obj n)).hom ⊗ 𝟙 f) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (λ_ f).inv).app n)
C : Type u,	X Y f : F C,	f : f ⟶ category_theory.free_monoidal_category.unit.tensor f,	n : N C	⊢ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f n).hom ≫ 𝟙 (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))
C : Type u,	X Y f : F C,	f : f ⟶ category_theory.free_monoidal_category.unit.tensor f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (category_theory.free_monoidal_category.unit.tensor f)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.l_inv f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_hom	C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_inv	C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧).app n		case category_theory.free_monoidal_category.hom.comp	C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_X ⟶ f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.comp f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.comp f_g⟧).app n		case category_theory.free_monoidal_category.hom.tensor	C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_W).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_W.tensor f_X ⟶ f_Y.tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.tensor f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_Y.tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_W.tensor f_X)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.tensor f_g⟧).app n
C : Type u,	X Y f : F C,	f : f ⟶ category_theory.free_monoidal_category.unit.tensor f,	n : N C	⊢ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f n).hom ≫ 𝟙 ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).obj (f.normalize_obj n))
C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧).app n
C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (ρ_ f).hom) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f (𝟙_ (F C))).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f n).hom ⊗ 𝟙 (𝟙_ (F C))) ≫ (ρ_ (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (ρ_ f).hom).app n)
C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ (α_ (category_theory.free_monoidal_category.inclusion_obj n) f (𝟙_ (F C))).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f n).hom ⊗ 𝟙 (𝟙_ (F C))) ≫ (ρ_ (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f (𝟙_ (F C))).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f n).hom ⊗ 𝟙 (𝟙_ (F C))) ≫ (ρ_ (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (ρ_ f).hom).app n)
C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.normalize_iso_app C f n).hom ⊗ 𝟙 (𝟙_ (F C))) ≫ (ρ_ (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))).hom = ((category_theory.free_monoidal_category.normalize_iso_app C f n).hom ⊗ 𝟙 (𝟙_ (F C))) ≫ (ρ_ (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))).hom ≫ 𝟙 (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))
C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_hom f⟧).app n		case category_theory.free_monoidal_category.hom.ρ_inv	C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧).app n		case category_theory.free_monoidal_category.hom.comp	C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_X ⟶ f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.comp f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.comp f_g⟧).app n		case category_theory.free_monoidal_category.hom.tensor	C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_W).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_W.tensor f_X ⟶ f_Y.tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.tensor f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_Y.tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_W.tensor f_X)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.tensor f_g⟧).app n
C : Type u,	X Y f : F C,	f : f.tensor category_theory.free_monoidal_category.unit ⟶ f,	n : N C	⊢ ((category_theory.free_monoidal_category.normalize_iso_app C f n).hom ⊗ 𝟙 (𝟙_ (F C))) ≫ (ρ_ (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))).hom = ((category_theory.free_monoidal_category.normalize_iso_app C f n).hom ⊗ 𝟙 (𝟙_ (F C))) ≫ (ρ_ (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))).hom ≫ 𝟙 ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).obj (f.normalize_obj n))
C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧).app n
C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ (ρ_ f).inv) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj n) f (𝟙_ (F C))).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f n).hom ⊗ 𝟙 (𝟙_ (F C))) ≫ (ρ_ (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))).hom = (category_theory.free_monoidal_category.normalize_iso_app C f n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (ρ_ f).inv).app n)
C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f n).hom ≫ 𝟙 (category_theory.free_monoidal_category.inclusion_obj (f.normalize_obj n))
C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f.tensor category_theory.free_monoidal_category.unit)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦category_theory.free_monoidal_category.hom.ρ_inv f⟧).app n		case category_theory.free_monoidal_category.hom.comp	C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_X ⟶ f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.comp f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.comp f_g⟧).app n		case category_theory.free_monoidal_category.hom.tensor	C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_W).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_W.tensor f_X ⟶ f_Y.tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.tensor f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_Y.tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_W.tensor f_X)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.tensor f_g⟧).app n
C : Type u,	X Y f : F C,	f : f ⟶ f.tensor category_theory.free_monoidal_category.unit,	n : N C	⊢ (category_theory.free_monoidal_category.normalize_iso_app C f n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f n).hom ≫ 𝟙 ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).obj (f.normalize_obj n))
C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_X ⟶ f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.comp f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.comp f_g⟧).app n
C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_X ⟶ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧ ≫ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (⟦f_f⟧ ≫ ⟦f_g⟧)).app n)
C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_X ⟶ f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.comp f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.comp f_g⟧).app n		case category_theory.free_monoidal_category.hom.tensor	C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_W).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_W.tensor f_X ⟶ f_Y.tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.tensor f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_Y.tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_W.tensor f_X)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.tensor f_g⟧).app n
C : Type u,	X Y f_X f_Y f_Z : F C,	f_f : f_X ⟶ᵐ f_Y,	f_g : f_Y ⟶ᵐ f_Z,	f_ih_f : (f_X ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_Y ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_X ⟶ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n ≫ (category_theory.free_monoidal_category.normalize_map_aux f_g).app n) = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (⟦f_f⟧ ≫ ⟦f_g⟧)).app n)
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Y).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_W).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f⟧).app n,	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : N C), ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C f_Z).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C f_X).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_g⟧).app n,	f : f_W.tensor f_X ⟶ f_Y.tensor f_Z,	n : N C	⊢ ((category_theory.free_monoidal_category.tensor_func C).map ⟦f_f.tensor f_g⟧ ≫ (category_theory.free_monoidal_category.normalize_iso_aux C (f_Y.tensor f_Z)).hom).app n = ((category_theory.free_monoidal_category.normalize_iso_aux C (f_W.tensor f_X)).hom ≫ (category_theory.free_monoidal_category.normalize' C).map ⟦f_f.tensor f_g⟧).app n
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧ ⊗ ⟦f_g⟧) ≫ (α_ (category_theory.free_monoidal_category.inclusion_obj n) f_Y f_Z).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_W f_X).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ⊗ 𝟙 f_X) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_X (f_W.normalize_obj n)).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (⟦f_f⟧ ⊗ ⟦f_g⟧)).app n)
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ ((𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ⊗ ⟦f_g⟧) ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom ⊗ 𝟙 f_Z) = ?m_1
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ (α_ (category_theory.free_monoidal_category.inclusion_obj n) f_W f_X).inv ≫ ((𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ⊗ ⟦f_g⟧) ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_W f_X).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ⊗ 𝟙 f_X) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_X (f_W.normalize_obj n)).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (⟦f_f⟧ ⊗ ⟦f_g⟧)).app n)
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ (α_ (category_theory.free_monoidal_category.inclusion_obj n) f_W f_X).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ ⟦f_g⟧ ≫ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = ?m_1
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ (α_ (category_theory.free_monoidal_category.inclusion_obj n) f_W f_X).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ ⟦f_g⟧ ≫ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_W f_X).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ⊗ 𝟙 f_X) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_X (f_W.normalize_obj n)).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (⟦f_f⟧ ⊗ ⟦f_g⟧)).app n)
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ (α_ (category_theory.free_monoidal_category.inclusion_obj n) f_W f_X).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ (𝟙 f_X ≫ ⟦f_g⟧) ≫ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = ((α_ (category_theory.free_monoidal_category.inclusion_obj n) f_W f_X).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ⊗ 𝟙 f_X) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_X (f_W.normalize_obj n)).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (⟦f_f⟧ ⊗ ⟦f_g⟧)).app n)
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ (α_ (category_theory.free_monoidal_category.inclusion_obj n) f_W f_X).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ⊗ 𝟙 f_X) ≫ ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = (α_ (category_theory.free_monoidal_category.inclusion_obj n) f_W f_X).inv ≫ ((category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ⊗ 𝟙 f_X) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_X (f_W.normalize_obj n)).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (⟦f_f⟧ ⊗ ⟦f_g⟧)).app n)
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X (f_W.normalize_obj n)).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((quotient.lift category_theory.free_monoidal_category.normalize_map_aux _ (⟦f_f⟧ ⊗ ⟦f_g⟧)).app n)
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X (f_W.normalize_obj n)).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux (f_f.tensor f_g)).app n)
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X (f_W.normalize_obj n)).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app (f_W.normalize_obj n) ≫ (category_theory.discrete.functor f_Z.normalize_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n))
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ ((𝟙 ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).obj (f_W.normalize_obj n)) ⊗ ⟦f_g⟧) ≫ ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ 𝟙 f_Z)) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = ((𝟙 (category_theory.free_monoidal_category.inclusion_obj (f_W.normalize_obj n)) ⊗ ⟦f_g⟧ ≫ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_W.normalize_obj n)).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.discrete.functor f_Z.normalize_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n))
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ ((𝟙 (category_theory.free_monoidal_category.inclusion_obj (f_W.normalize_obj n)) ⊗ ⟦f_g⟧) ≫ ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ 𝟙 f_Z)) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = ((𝟙 (category_theory.free_monoidal_category.inclusion_obj (f_W.normalize_obj n)) ⊗ ⟦f_g⟧ ≫ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_W.normalize_obj n)).hom) ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.discrete.functor f_Z.normalize_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n))
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ (𝟙 (category_theory.free_monoidal_category.inclusion_obj (f_W.normalize_obj n)) ⊗ ⟦f_g⟧) ≫ ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = (𝟙 (category_theory.free_monoidal_category.inclusion_obj (f_W.normalize_obj n)) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_W.normalize_obj n)).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.discrete.functor f_Z.normalize_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n))
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ ((category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ 𝟙 f_Z) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_Y.normalize_obj n)).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_Z (f_W.normalize_obj n)).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.discrete.functor f_Z.normalize_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n))
C : Type u,	X Y f_W f_X f_Y f_Z : F C,	f_f : f_W ⟶ᵐ f_Y,	f_g : f_X ⟶ᵐ f_Z,	f_ih_f : (f_W ⟶ f_Y) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_f⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Y n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_W n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n),	f_ih_g : (f_X ⟶ f_Z) → ∀ (n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)), (𝟙 (category_theory.free_monoidal_category.inclusion_obj n) ⊗ ⟦f_g⟧) ≫ (category_theory.free_monoidal_category.normalize_iso_app C f_Z n).hom = (category_theory.free_monoidal_category.normalize_iso_app C f_X n).hom ≫ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_g).app n),	f : f_W ⊗ f_X ⟶ f_Y ⊗ f_Z,	n : category_theory.discrete (category_theory.free_monoidal_category.normal_monoidal_object C)	⊢ (category_theory.discrete.functor category_theory.free_monoidal_category.inclusion_obj).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n) ⊗ 𝟙 f_Z = ((category_theory.free_monoidal_category.tensor_func C).obj f_Z).map ((category_theory.free_monoidal_category.normalize_map_aux f_f).app n)
C : Type u,	X Y : F C,	f g : X ⟶ Y,	this : (category_theory.free_monoidal_category.full_normalize C).map f = (category_theory.free_monoidal_category.full_normalize C).map g	⊢ f = g
C : Type u,	X Y : F C,	f g : X ⟶ Y,	this : (category_theory.free_monoidal_category.full_normalize C).map f = (category_theory.free_monoidal_category.full_normalize C).map g	⊢ (𝟭 (F C)).map f = (𝟭 (F C)).map g
C : Type u₁,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.monoidal_category C,	D : Type u₂,	_inst_3 : category_theory.category D,	_inst_4 : category_theory.monoidal_category D,	F : category_theory.lax_monoidal_functor C D,	X : C	⊢ (λ_ (F.to_functor.obj X)).inv ≫ (F.ε ⊗ 𝟙 (F.to_functor.obj X)) ≫ F.μ (𝟙_ C) X = F.to_functor.map (λ_ X).inv
C : Type u,	_inst_1 : category_theory.category C,	X : C,	s : category_theory.limits.cone (category_theory.functor.empty C),	P : category_theory.limits.is_limit s,	t : category_theory.limits.binary_fan s.X X,	Q : category_theory.limits.is_limit t	⊢ t.snd ≫ Q.lift (category_theory.limits.binary_fan.mk (P.lift {X := X, π := {app := pempty.rec (λ (n : pempty), ((category_theory.functor.const (category_theory.discrete pempty)).obj X).obj n ⟶ (category_theory.functor.empty C).obj n), naturality' := _}}) (𝟙 X)) = 𝟙 t.X
C : Type u,	_inst_1 : category_theory.category C,	X : C,	s : category_theory.limits.cone (category_theory.functor.empty C),	P : category_theory.limits.is_limit s,	t : category_theory.limits.binary_fan s.X X,	Q : category_theory.limits.is_limit t	⊢ ∀ (j : category_theory.discrete category_theory.limits.walking_pair), (t.snd ≫ Q.lift (category_theory.limits.binary_fan.mk (P.lift {X := X, π := {app := pempty.rec (λ (n : pempty), ((category_theory.functor.const (category_theory.discrete pempty)).obj X).obj n ⟶ (category_theory.functor.empty C).obj n), naturality' := _}}) (𝟙 X))) ≫ t.π.app j = 𝟙 t.X ≫ t.π.app j
C : Type u,	_inst_1 : category_theory.category C,	X : C,	s : category_theory.limits.cone (category_theory.functor.empty C),	P : category_theory.limits.is_limit s,	t : category_theory.limits.binary_fan s.X X,	Q : category_theory.limits.is_limit t	⊢ (t.snd ≫ Q.lift (category_theory.limits.binary_fan.mk (P.lift {X := X, π := {app := pempty.rec (λ (n : pempty), ((category_theory.functor.const (category_theory.discrete pempty)).obj X).obj n ⟶ (category_theory.functor.empty C).obj n), naturality' := _}}) (𝟙 X))) ≫ t.π.app category_theory.limits.walking_pair.left = 𝟙 t.X ≫ t.π.app category_theory.limits.walking_pair.left
C : Type u,	_inst_1 : category_theory.category C,	X : C,	s : category_theory.limits.cone (category_theory.functor.empty C),	P : category_theory.limits.is_limit s,	t : category_theory.limits.binary_fan s.X X,	Q : category_theory.limits.is_limit t	⊢ ∀ (j : category_theory.discrete pempty), ((t.snd ≫ Q.lift (category_theory.limits.binary_fan.mk (P.lift {X := X, π := {app := pempty.rec (λ (n : pempty), ((category_theory.functor.const (category_theory.discrete pempty)).obj X).obj n ⟶ (category_theory.functor.empty C).obj n), naturality' := _}}) (𝟙 X))) ≫ t.π.app category_theory.limits.walking_pair.left) ≫ s.π.app j = (𝟙 t.X ≫ t.π.app category_theory.limits.walking_pair.left) ≫ s.π.app j
C : Type u,	_inst_1 : category_theory.category C,	X : C,	s : category_theory.limits.cone (category_theory.functor.empty C),	P : category_theory.limits.is_limit s,	t : category_theory.limits.binary_fan s.X X,	Q : category_theory.limits.is_limit t	⊢ (t.snd ≫ Q.lift (category_theory.limits.binary_fan.mk (P.lift {X := X, π := {app := pempty.rec (λ (n : pempty), ((category_theory.functor.const (category_theory.discrete pempty)).obj X).obj n ⟶ (category_theory.functor.empty C).obj n), naturality' := _}}) (𝟙 X))) ≫ t.π.app category_theory.limits.walking_pair.left = 𝟙 t.X ≫ t.π.app category_theory.limits.walking_pair.left		C : Type u,	_inst_1 : category_theory.category C,	X : C,	s : category_theory.limits.cone (category_theory.functor.empty C),	P : category_theory.limits.is_limit s,	t : category_theory.limits.binary_fan s.X X,	Q : category_theory.limits.is_limit t	⊢ (t.snd ≫ Q.lift (category_theory.limits.binary_fan.mk (P.lift {X := X, π := {app := pempty.rec (λ (n : pempty), ((category_theory.functor.const (category_theory.discrete pempty)).obj X).obj n ⟶ (category_theory.functor.empty C).obj n), naturality' := _}}) (𝟙 X))) ≫ t.π.app category_theory.limits.walking_pair.right = 𝟙 t.X ≫ t.π.app category_theory.limits.walking_pair.right
C : Type u,	_inst_1 : category_theory.category C,	X : C,	s : category_theory.limits.cone (category_theory.functor.empty C),	P : category_theory.limits.is_limit s,	t : category_theory.limits.binary_fan s.X X,	Q : category_theory.limits.is_limit t	⊢ (t.snd ≫ Q.lift (category_theory.limits.binary_fan.mk (P.lift {X := X, π := {app := pempty.rec (λ (n : pempty), ((category_theory.functor.const (category_theory.discrete pempty)).obj X).obj n ⟶ (category_theory.functor.empty C).obj n), naturality' := _}}) (𝟙 X))) ≫ t.π.app category_theory.limits.walking_pair.right = 𝟙 t.X ≫ t.π.app category_theory.limits.walking_pair.right
C : Type u,	_inst_1 : category_theory.category C,	𝒯 : category_theory.limits.limit_cone (category_theory.functor.empty C),	ℬ : Π (X Y : C), category_theory.limits.limit_cone (category_theory.limits.pair X Y),	X₁ X₂ : C,	f : X₁ ⟶ X₂	⊢ category_theory.monoidal_of_chosen_finite_products.tensor_hom ℬ f (𝟙 𝒯.cone.X) ≫ (category_theory.limits.binary_fan.right_unitor 𝒯.is_limit (ℬ X₂ 𝒯.cone.X).is_limit).hom = (category_theory.limits.binary_fan.right_unitor 𝒯.is_limit (ℬ X₁ 𝒯.cone.X).is_limit).hom ≫ f
C : Type u,	_inst_1 : category_theory.category C,	𝒯 : category_theory.limits.limit_cone (category_theory.functor.empty C),	ℬ : Π (X Y : C), category_theory.limits.limit_cone (category_theory.limits.pair X Y),	X₁ X₂ : C,	f : X₁ ⟶ X₂	⊢ (ℬ X₂ 𝒯.cone.X).is_limit.lift (category_theory.limits.binary_fan.mk (category_theory.limits.binary_fan.fst (ℬ X₁ 𝒯.cone.X).cone ≫ f) (category_theory.limits.binary_fan.snd (ℬ X₁ 𝒯.cone.X).cone ≫ 𝟙 𝒯.cone.X)) ≫ category_theory.limits.binary_fan.fst (ℬ X₂ 𝒯.cone.X).cone = category_theory.limits.binary_fan.fst (ℬ X₁ 𝒯.cone.X).cone ≫ f
C : Type u₁,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.monoidal_category C,	X : C,	_inst_3 : category_theory.has_left_dual X	⊢ ᘁ(𝟙 X) = 𝟙 ᘁX
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	F G : C ⥤ D,	app' : Π (X : C), F.obj X ≅ G.obj X,	naturality : ∀ {X Y : C} (f : X ⟶ Y), F.map f ≫ (app' Y).hom = (app' X).hom ≫ G.map f,	X : C	⊢ (category_theory.nat_iso.of_components app' naturality).app X = app' X
T : Type u₁,	_inst_1 : category_theory.category T,	Y : T,	X : category_theory.over Y	⊢ auto_param ((category_theory.iso.refl ((category_theory.over.map (𝟙 Y)).obj X).left).hom ≫ ((𝟭 (category_theory.over Y)).obj X).hom = ((category_theory.over.map (𝟙 Y)).obj X).hom) (name.mk_string "obviously" name.anonymous)
T : Type u₁,	_inst_1 : category_theory.category T,	Y : T	⊢ ∀ {X Y_1 : category_theory.over Y} (f : X ⟶ Y_1), (category_theory.over.map (𝟙 Y)).map f ≫ (category_theory.over.iso_mk (category_theory.iso.refl ((category_theory.over.map (𝟙 Y)).obj Y_1).left) _).hom = (category_theory.over.iso_mk (category_theory.iso.refl ((category_theory.over.map (𝟙 Y)).obj X).left) _).hom ≫ (𝟭 (category_theory.over Y)).map f
T : Type u₁,	_inst_1 : category_theory.category T,	X : T,	f : category_theory.over X,	g : category_theory.over f	⊢ auto_param ((category_theory.iso.refl ((𝟭 (category_theory.over f)).obj g).left.left).hom ≫ ((f.iterated_slice_forward ⋙ f.iterated_slice_backward).obj g).left.hom = ((𝟭 (category_theory.over f)).obj g).left.hom) (name.mk_string "obviously" name.anonymous)
T : Type u₁,	_inst_1 : category_theory.category T,	X : T,	f : category_theory.over X,	g : category_theory.over f	⊢ auto_param ((category_theory.over.iso_mk (category_theory.iso.refl ((𝟭 (category_theory.over f)).obj g).left.left) _).hom ≫ ((f.iterated_slice_forward ⋙ f.iterated_slice_backward).obj g).hom = ((𝟭 (category_theory.over f)).obj g).hom) (name.mk_string "obviously" name.anonymous)
T : Type u₁,	_inst_1 : category_theory.category T,	X : T,	f : category_theory.over X,	X Y : category_theory.over f,	g : X ⟶ Y	⊢ (𝟭 (category_theory.over f)).map g ≫ (category_theory.over.iso_mk (category_theory.over.iso_mk (category_theory.iso.refl ((𝟭 (category_theory.over f)).obj Y).left.left) _) _).hom = (category_theory.over.iso_mk (category_theory.over.iso_mk (category_theory.iso.refl ((𝟭 (category_theory.over f)).obj X).left.left) _) _).hom ≫ (f.iterated_slice_forward ⋙ f.iterated_slice_backward).map g
T : Type u₁,	_inst_1 : category_theory.category T,	X : T,	f : category_theory.over X,	X Y : category_theory.over f,	g : X ⟶ Y	⊢ ((𝟭 (category_theory.over f)).map g ≫ (category_theory.over.iso_mk (category_theory.over.iso_mk (category_theory.iso.refl ((𝟭 (category_theory.over f)).obj Y).left.left) _) _).hom).left.left = ((category_theory.over.iso_mk (category_theory.over.iso_mk (category_theory.iso.refl ((𝟭 (category_theory.over f)).obj X).left.left) _) _).hom ≫ (f.iterated_slice_forward ⋙ f.iterated_slice_backward).map g).left.left
T : Type u₁,	_inst_1 : category_theory.category T,	X : T,	f : category_theory.over X,	X Y : category_theory.over f,	g : X ⟶ Y	⊢ g.left.left ≫ 𝟙 Y.left.left = 𝟙 X.left.left ≫ g.left.left
T : Type u₁,	_inst_1 : category_theory.category T,	X : T,	f : category_theory.over X,	g : category_theory.over f.left	⊢ auto_param ((category_theory.iso.refl ((f.iterated_slice_backward ⋙ f.iterated_slice_forward).obj g).left).hom ≫ ((𝟭 (category_theory.over f.left)).obj g).hom = ((f.iterated_slice_backward ⋙ f.iterated_slice_forward).obj g).hom) (name.mk_string "obviously" name.anonymous)
T : Type u₁,	_inst_1 : category_theory.category T,	X : T,	f : category_theory.over X,	X Y : category_theory.over f.left,	g : X ⟶ Y	⊢ (f.iterated_slice_backward ⋙ f.iterated_slice_forward).map g ≫ (category_theory.over.iso_mk (category_theory.iso.refl ((f.iterated_slice_backward ⋙ f.iterated_slice_forward).obj Y).left) _).hom = (category_theory.over.iso_mk (category_theory.iso.refl ((f.iterated_slice_backward ⋙ f.iterated_slice_forward).obj X).left) _).hom ≫ (𝟭 (category_theory.over f.left)).map g
T : Type u₁,	_inst_1 : category_theory.category T,	X : T,	f : category_theory.over X,	X Y : category_theory.over f.left,	g : X ⟶ Y	⊢ ((f.iterated_slice_backward ⋙ f.iterated_slice_forward).map g ≫ (category_theory.over.iso_mk (category_theory.iso.refl ((f.iterated_slice_backward ⋙ f.iterated_slice_forward).obj Y).left) _).hom).left = ((category_theory.over.iso_mk (category_theory.iso.refl ((f.iterated_slice_backward ⋙ f.iterated_slice_forward).obj X).left) _).hom ≫ (𝟭 (category_theory.over f.left)).map g).left
T : Type u₁,	_inst_1 : category_theory.category T,	X : T,	f : category_theory.over X,	X Y : category_theory.over f.left,	g : X ⟶ Y	⊢ g.left ≫ 𝟙 Y.left = 𝟙 X.left ≫ g.left
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.preadditive C,	_inst_3 : category_theory.limits.has_binary_biproducts C,	X₁ X₂ Y₁ Y₂ : C,	f : X₁ ⊞ X₂ ⟶ Y₁ ⊞ Y₂	⊢ category_theory.biprod.of_components (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.snd) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.snd) = f
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.preadditive C,	_inst_3 : category_theory.limits.has_binary_biproducts C,	X₁ X₂ Y₁ Y₂ : C,	f : X₁ ⊞ X₂ ⟶ Y₁ ⊞ Y₂	⊢ category_theory.biprod.of_components (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.snd) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.snd) = f
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.preadditive C,	_inst_3 : category_theory.limits.has_binary_biproducts C,	X₁ X₂ Y₁ Y₂ : C,	f : X₁ ⊞ X₂ ⟶ Y₁ ⊞ Y₂	⊢ (category_theory.limits.biprod.inl ≫ category_theory.biprod.of_components (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.snd) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.snd)) ≫ category_theory.limits.biprod.fst = (category_theory.limits.biprod.inl ≫ f) ≫ category_theory.limits.biprod.fst
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.preadditive C,	_inst_3 : category_theory.limits.has_binary_biproducts C,	X₁ X₂ Y₁ Y₂ : C,	f : X₁ ⊞ X₂ ⟶ Y₁ ⊞ Y₂	⊢ (category_theory.limits.biprod.inl ≫ category_theory.biprod.of_components (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.snd) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.snd)) ≫ category_theory.limits.biprod.snd = (category_theory.limits.biprod.inl ≫ f) ≫ category_theory.limits.biprod.snd
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.preadditive C,	_inst_3 : category_theory.limits.has_binary_biproducts C,	X₁ X₂ Y₁ Y₂ : C,	f : X₁ ⊞ X₂ ⟶ Y₁ ⊞ Y₂	⊢ (category_theory.limits.biprod.inr ≫ category_theory.biprod.of_components (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.snd) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.snd)) ≫ category_theory.limits.biprod.fst = (category_theory.limits.biprod.inr ≫ f) ≫ category_theory.limits.biprod.fst
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.preadditive C,	_inst_3 : category_theory.limits.has_binary_biproducts C,	X₁ X₂ Y₁ Y₂ : C,	f : X₁ ⊞ X₂ ⟶ Y₁ ⊞ Y₂	⊢ (category_theory.limits.biprod.inr ≫ category_theory.biprod.of_components (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inl ≫ f ≫ category_theory.limits.biprod.snd) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.fst) (category_theory.limits.biprod.inr ≫ f ≫ category_theory.limits.biprod.snd)) ≫ category_theory.limits.biprod.snd = (category_theory.limits.biprod.inr ≫ f) ≫ category_theory.limits.biprod.snd
C : Type u_1,	_inst_1 : category_theory.category C,	r : hom_rel C,	D : Type u_3,	_inst_2 : category_theory.category D,	F : C ⥤ D,	H : ∀ (x y : C) (f₁ f₂ : x ⟶ y), r f₁ f₂ → F.map f₁ = F.map f₂,	a b : category_theory.quotient r,	hf : a ⟶ b	⊢ ∀ (a_1 b_1 : a.as ⟶ b.as), category_theory.quotient.comp_closure r a_1 b_1 → (λ (f : a.as ⟶ b.as), F.map f) a_1 = (λ (f : a.as ⟶ b.as), F.map f) b_1
C : Type u_1,	_inst_1 : category_theory.category C,	r : hom_rel C,	D : Type u_3,	_inst_2 : category_theory.category D,	F : C ⥤ D,	H : ∀ (x y : C) (f₁ f₂ : x ⟶ y), r f₁ f₂ → F.map f₁ = F.map f₂,	a b : category_theory.quotient r,	hf : a ⟶ b,	ᾰ_a ᾰ_b : C,	ᾰ_f : a.as ⟶ ᾰ_a,	ᾰ_m₁ ᾰ_m₂ : ᾰ_a ⟶ ᾰ_b,	ᾰ_g : ᾰ_b ⟶ b.as,	h : r ᾰ_m₁ ᾰ_m₂,	ᾰ : category_theory.quotient.comp_closure r (ᾰ_f ≫ ᾰ_m₁ ≫ ᾰ_g) (ᾰ_f ≫ ᾰ_m₂ ≫ ᾰ_g)	⊢ (λ (f : a.as ⟶ b.as), F.map f) (ᾰ_f ≫ ᾰ_m₁ ≫ ᾰ_g) = (λ (f : a.as ⟶ b.as), F.map f) (ᾰ_f ≫ ᾰ_m₂ ≫ ᾰ_g)
C : Type u_1,	_inst_1 : category_theory.category C,	r : hom_rel C,	D : Type u_3,	_inst_2 : category_theory.category D,	F : C ⥤ D,	H : ∀ (x y : C) (f₁ f₂ : x ⟶ y), r f₁ f₂ → F.map f₁ = F.map f₂	⊢ ∀ {X Y Z : category_theory.quotient r} (f : X ⟶ Y) (g : Y ⟶ Z), quot.lift_on (f ≫ g) (λ (f : X.as ⟶ Z.as), F.map f) _ = quot.lift_on f (λ (f : X.as ⟶ Y.as), F.map f) _ ≫ quot.lift_on g (λ (f : Y.as ⟶ Z.as), F.map f) _
C : Type u_1,	_inst_1 : category_theory.category C,	r : hom_rel C,	D : Type u_3,	_inst_2 : category_theory.category D,	F : C ⥤ D,	H : ∀ (x y : C) (f₁ f₂ : x ⟶ y), r f₁ f₂ → F.map f₁ = F.map f₂,	a b c : category_theory.quotient r,	f : a.as ⟶ b.as,	g : b.as ⟶ c.as	⊢ quot.lift_on (quot.mk (category_theory.quotient.comp_closure r) f ≫ quot.mk (category_theory.quotient.comp_closure r) g) (λ (f : a.as ⟶ c.as), F.map f) _ = (quot.mk (category_theory.quotient.comp_closure r) f).lift_on (λ (f : a.as ⟶ b.as), F.map f) _ ≫ (quot.mk (category_theory.quotient.comp_closure r) g).lift_on (λ (f : b.as ⟶ c.as), F.map f) _
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X	⊢ S ∈ ⇑J₂ X
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X	⊢ J₂.close S = ⊤
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X	⊢ J₂.is_closed ⊤
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X	⊢ J₂.is_closed ⊤		C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤	⊢ J₂.close S = ⊤
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	Y : C,	f : Y ⟶ X,	hf : J₂.covers ⊤ f	⊢ ⇑⊤ f
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤	⊢ J₂.close S = ⊤
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤,	this : ⟨J₂.close S, _⟩ = ⟨⊤, this⟩	⊢ J₂.close S = ⊤
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤,	this : ⟨J₂.close S, _⟩ = ⟨⊤, this⟩	⊢ J₂.close S = ⊤		C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤	⊢ ⟨J₂.close S, _⟩ = ⟨⊤, this⟩
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤,	this : ↑⟨J₂.close S, _⟩ = ↑⟨⊤, this⟩	⊢ J₂.close S = ⊤
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤	⊢ ⟨J₂.close S, _⟩ = ⟨⊤, this⟩
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤	⊢ ∀ ⦃Y : C⦄ ⦃f : Y ⟶ X⦄, ⇑S f → (category_theory.functor.closed_sieves J₂).map f.op ⟨J₂.close S, _⟩ = (category_theory.functor.closed_sieves J₂).map f.op ⟨⊤, this⟩
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤,	Y : C,	f : Y ⟶ X,	hf : ⇑S f	⊢ (category_theory.functor.closed_sieves J₂).map f.op ⟨J₂.close S, _⟩ = (category_theory.functor.closed_sieves J₂).map f.op ⟨⊤, this⟩
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤,	Y : C,	f : Y ⟶ X,	hf : ⇑S f	⊢ ↑((category_theory.functor.closed_sieves J₂).map f.op ⟨J₂.close S, _⟩) = ↑((category_theory.functor.closed_sieves J₂).map f.op ⟨⊤, this⟩)
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤,	Y : C,	f : Y ⟶ X,	hf : ⇑S f	⊢ category_theory.sieve.pullback f (J₂.close S) = category_theory.sieve.pullback f ⊤
C : Type u,	_inst_1 : category_theory.small_category C,	J₁ J₂ : category_theory.grothendieck_topology C,	h : category_theory.presieve.is_sheaf J₁ (category_theory.functor.closed_sieves J₂),	X : C,	S : category_theory.sieve X,	hS : S ∈ ⇑J₁ X,	this : J₂.is_closed ⊤,	Y : C,	f : Y ⟶ X,	hf : ⇑S f	⊢ ⊤ ∈ ⇑J₂ Y
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	S : category_theory.presieve X	⊢ (S ∈ λ (S : category_theory.presieve X), ∃ (Y : C) (f : Y ⟶ X) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f) → (category_theory.presieve.pullback_arrows f S ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ category_theory.presieve.pullback_arrows f (category_theory.presieve.singleton g) ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ category_theory.is_iso category_theory.limits.pullback.snd
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ (f ≫ category_theory.inv g) ≫ g = 𝟙 Y ≫ f
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ category_theory.limits.pullback.lift (f ≫ category_theory.inv g) (𝟙 Y) _ ≫ category_theory.limits.pullback.snd = 𝟙 Y
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ category_theory.is_iso category_theory.limits.pullback.snd
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ category_theory.limits.pullback.snd ≫ category_theory.limits.pullback.lift (f ≫ category_theory.inv g) (𝟙 Y) _ = 𝟙 (category_theory.limits.pullback g f)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ (category_theory.limits.pullback.snd ≫ category_theory.limits.pullback.lift (f ≫ category_theory.inv g) (𝟙 Y) _) ≫ category_theory.limits.pullback.fst = 𝟙 (category_theory.limits.pullback g f) ≫ category_theory.limits.pullback.fst
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ (category_theory.limits.pullback.snd ≫ category_theory.limits.pullback.lift (f ≫ category_theory.inv g) (𝟙 Y) _) ≫ category_theory.limits.pullback.fst = 𝟙 (category_theory.limits.pullback g f) ≫ category_theory.limits.pullback.fst		C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ (category_theory.limits.pullback.snd ≫ category_theory.limits.pullback.lift (f ≫ category_theory.inv g) (𝟙 Y) _) ≫ category_theory.limits.pullback.snd = 𝟙 (category_theory.limits.pullback g f) ≫ category_theory.limits.pullback.snd
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ category_theory.limits.pullback.fst ≫ g ≫ category_theory.inv g = 𝟙 (category_theory.limits.pullback g f) ≫ category_theory.limits.pullback.fst
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ category_theory.is_iso category_theory.limits.pullback.snd		C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ category_theory.presieve.pullback_arrows f (category_theory.presieve.singleton g) = category_theory.presieve.singleton category_theory.limits.pullback.snd
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ (category_theory.limits.pullback.snd ≫ category_theory.limits.pullback.lift (f ≫ category_theory.inv g) (𝟙 Y) _) ≫ category_theory.limits.pullback.snd = 𝟙 (category_theory.limits.pullback g f) ≫ category_theory.limits.pullback.snd
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Y : C,	f : Y ⟶ X,	Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g	⊢ category_theory.presieve.pullback_arrows f (category_theory.presieve.singleton g) = category_theory.presieve.singleton category_theory.limits.pullback.snd
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C	⊢ ∀ ⦃X : C⦄ (S : category_theory.presieve X) (Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), S f → category_theory.presieve Y), (S ∈ λ (S : category_theory.presieve X), ∃ (Y : C) (f : Y ⟶ X) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f) → (∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : S f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f) → (S.bind Ti ∈ λ (S : category_theory.presieve X), ∃ (Y : C) (f : Y ⟶ X) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f	⊢ (category_theory.presieve.singleton g).bind Ti ∈ λ (S : category_theory.presieve X), ∃ (Y : C) (f : Y ⟶ X) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f	⊢ (category_theory.presieve.singleton g).bind Ti ∈ λ (S : category_theory.presieve X), ∃ (Y : C) (f : Y ⟶ X) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f	⊢ category_theory.is_iso (f ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f	⊢ category_theory.is_iso (f ≫ g)		C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f	⊢ (category_theory.presieve.singleton g).bind Ti = category_theory.presieve.singleton (f ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f	⊢ category_theory.is_iso (f ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f	⊢ (category_theory.presieve.singleton g).bind Ti = category_theory.presieve.singleton (f ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	W : C,	k : W ⟶ X	⊢ k ∈ (category_theory.presieve.singleton g).bind Ti ↔ k ∈ category_theory.presieve.singleton (f ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	W : C,	k : W ⟶ X	⊢ k ∈ (category_theory.presieve.singleton g).bind Ti → k ∈ category_theory.presieve.singleton (f ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	W : C,	h : W ⟶ Z,	ᾰ_h_h_h_w : category_theory.presieve.singleton g g,	hh : Ti g ᾰ_h_h_h_w h	⊢ h ≫ g ∈ category_theory.presieve.singleton (f ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	W : C,	h : W ⟶ Z,	ᾰ_h_h_h_w : category_theory.presieve.singleton g g,	hh : category_theory.presieve.singleton f h	⊢ h ≫ g ∈ category_theory.presieve.singleton (f ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	W : C,	k : W ⟶ X	⊢ k ∈ (category_theory.presieve.singleton g).bind Ti → k ∈ category_theory.presieve.singleton (f ≫ g)		C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	W : C,	k : W ⟶ X	⊢ k ∈ category_theory.presieve.singleton (f ≫ g) → k ∈ (category_theory.presieve.singleton g).bind Ti
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	ᾰ_h_h_h_w : category_theory.presieve.singleton g g,	hh : category_theory.presieve.singleton f f	⊢ f ≫ g ∈ category_theory.presieve.singleton (f ≫ g)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	W : C,	k : W ⟶ X	⊢ k ∈ category_theory.presieve.singleton (f ≫ g) → k ∈ (category_theory.presieve.singleton g).bind Ti
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	ᾰ : f ≫ g ∈ category_theory.presieve.singleton (f ≫ g)	⊢ f ≫ g ∈ (category_theory.presieve.singleton g).bind Ti
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	ᾰ : f ≫ g ∈ category_theory.presieve.singleton (f ≫ g)	⊢ Ti g category_theory.presieve.singleton.mk f
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.limits.has_pullbacks C,	X Z : C,	g : Z ⟶ X,	i : category_theory.is_iso g,	Ti : Π ⦃Y : C⦄ (f : Y ⟶ X), category_theory.presieve.singleton g f → category_theory.presieve Y,	hS : ∀ ⦃Y : C⦄ (f : Y ⟶ X) (H : category_theory.presieve.singleton g f), Ti f H ∈ λ (S : category_theory.presieve Y), ∃ (Y_1 : C) (f : Y_1 ⟶ Y) (h : category_theory.is_iso f), S = category_theory.presieve.singleton f,	Y : C,	f : Y ⟶ Z,	i : category_theory.is_iso f,	hTi : Ti g _ = category_theory.presieve.singleton f,	ᾰ : f ≫ g ∈ category_theory.presieve.singleton (f ≫ g)	⊢ category_theory.presieve.singleton f f
C : Type u,	_inst_1 : category_theory.category C,	P : Cᵒᵖ ⥤ Type v,	X : C,	R : category_theory.presieve X,	t : category_theory.presieve.is_separated_for P R	⊢ (∀ (x : category_theory.presieve.family_of_elements P R), x.compatible → (∃ (t : P.obj (opposite.op X)), x.is_amalgamation t)) → category_theory.presieve.is_sheaf_for P R
C : Type u,	_inst_1 : category_theory.category C,	P : Cᵒᵖ ⥤ Type v,	X : C,	R : category_theory.presieve X,	t : category_theory.presieve.is_separated_for P R	⊢ (∀ (x : category_theory.presieve.family_of_elements P R), x.compatible → (∃ (t : P.obj (opposite.op X)), x.is_amalgamation t)) → (category_theory.presieve.is_separated_for P R ∧ ∀ (x : category_theory.presieve.family_of_elements P R), x.compatible → (∃ (t : P.obj (opposite.op X)), x.is_amalgamation t))
C : Type u,	_inst_1 : category_theory.category C,	X : C,	P : Cᵒᵖ ⥤ Type v	⊢ category_theory.presieve.is_sheaf_for P ⇑⊤
C : Type u,	_inst_1 : category_theory.category C,	X : C,	P : Cᵒᵖ ⥤ Type v	⊢ category_theory.presieve.is_sheaf_for P ⇑(category_theory.sieve.generate (category_theory.presieve.singleton (𝟙 X)))
C : Type u,	_inst_1 : category_theory.category C,	X : C,	P : Cᵒᵖ ⥤ Type v	⊢ category_theory.presieve.is_sheaf_for P (category_theory.presieve.singleton (𝟙 X))
C : Type u₁,	_inst_1 : category_theory.category C,	X Y Z : C,	f : X ⟶ Y,	g : Y ⟶ Z,	_inst_3 : category_theory.mono f,	_inst_4 : category_theory.mono g,	x : category_theory.subobject X	⊢ (category_theory.subobject.map (f ≫ g)).obj x = (category_theory.subobject.map g).obj ((category_theory.subobject.map f).obj x)
C : Type u₁,	_inst_1 : category_theory.category C,	X Y Z : C,	f : X ⟶ Y,	g : Y ⟶ Z,	_inst_3 : category_theory.mono f,	_inst_4 : category_theory.mono g,	x : category_theory.subobject X	⊢ ∀ (a : category_theory.mono_over X), (category_theory.subobject.map (f ≫ g)).obj (quotient.mk' a) = (category_theory.subobject.map g).obj ((category_theory.subobject.map f).obj (quotient.mk' a))
C : Type u₁,	_inst_1 : category_theory.category C,	X Y Z : C,	f : X ⟶ Y,	g : Y ⟶ Z,	_inst_3 : category_theory.mono f,	_inst_4 : category_theory.mono g,	x : category_theory.subobject X,	t : category_theory.mono_over X	⊢ (category_theory.subobject.map (f ≫ g)).obj (quotient.mk' t) = (category_theory.subobject.map g).obj ((category_theory.subobject.map f).obj (quotient.mk' t))
C : Type u₁,	_inst_1 : category_theory.category C,	X Y Z : C,	f : X ⟶ Y,	g : Y ⟶ Z,	_inst_3 : category_theory.mono f,	_inst_4 : category_theory.mono g,	x : category_theory.subobject X,	t : category_theory.mono_over X	⊢ (category_theory.mono_over.map (f ≫ g)).obj t ≈ (category_theory.mono_over.map g).obj ((category_theory.mono_over.map f).obj t)
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	f g : category_theory.mono_over X,	Y : C,	h : Y ⟶ X,	e : f ≅ g,	_x : f.factors h,	_fun_match : f.factors h → g.factors h,	u : Y ⟶ ↑f,	hu : u ≫ f.arrow = h	⊢ (u ≫ ((category_theory.mono_over.forget X).map e.hom).left) ≫ g.arrow = h
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	f g : category_theory.mono_over X,	Y : C,	h : Y ⟶ X,	e : f ≅ g,	_x : g.factors h,	_fun_match : g.factors h → f.factors h,	u : Y ⟶ ↑g,	hu : u ≫ g.arrow = h	⊢ (u ≫ ((category_theory.mono_over.forget X).map e.inv).left) ≫ f.arrow = h
C : Type u₁,	_inst_1 : category_theory.category C,	_inst_3 : category_theory.well_powered C,	A : C,	s : set (category_theory.subobject A),	f : category_theory.subobject A,	k : ∀ (g : category_theory.subobject A), g ∈ s → f ≤ g,	j : ↥(⇑(equiv_shrink (category_theory.subobject A)) '' s)	⊢ ⇑((equiv_shrink (category_theory.subobject A)).symm) ↑j ∈ s
C : Type u₁,	_inst_1 : category_theory.category C,	_inst_3 : category_theory.well_powered C,	A : C,	s : set (category_theory.subobject A),	f : category_theory.subobject A,	k : ∀ (g : category_theory.subobject A), g ∈ s → f ≤ g,	g : category_theory.subobject A,	m : g ∈ s	⊢ ⇑((equiv_shrink (category_theory.subobject A)).symm) ↑⟨⇑(equiv_shrink (category_theory.subobject A)) g, _⟩ ∈ s
C : Type u₁,	_inst_1 : category_theory.category C,	_inst_3 : category_theory.well_powered C,	A : C,	s : set (category_theory.subobject A),	f : category_theory.subobject A,	k : ∀ (g : category_theory.subobject A), g ∈ s → f ≤ g	⊢ ∀ (j : ↥(⇑(equiv_shrink (category_theory.subobject A)) '' s)), category_theory.subobject.underlying.map (category_theory.hom_of_le _) ≫ (category_theory.subobject.wide_cospan s).map (category_theory.limits.wide_pullback_shape.hom.term j) = f.arrow
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	_inst_3 : category_theory.limits.has_zero_morphisms C,	_inst_4 : category_theory.limits.has_zero_object C	⊢ (category_theory.limits.image_subobject_iso 0).hom ≫ category_theory.limits.image.ι 0 = 0
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	_inst_3 : category_theory.limits.has_zero_morphisms C,	_inst_4 : category_theory.limits.has_zero_object C	⊢ (category_theory.limits.image_subobject 0).arrow = 0
C : Type u,	_inst_1 : category_theory.category C,	X Y : C,	f g : X ⟶ Y,	_inst_2 : category_theory.limits.has_equalizer f g	⊢ (category_theory.limits.equalizer_subobject_iso f g).inv ≫ (category_theory.limits.equalizer_subobject f g).arrow = category_theory.limits.equalizer.ι f g
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : category_theory.mono_over.image.obj f ⟶ g	⊢ f ⟶ (category_theory.mono_over.forget X).obj g
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : category_theory.mono_over.image.obj f ⟶ g	⊢ auto_param ((category_theory.limits.factor_thru_image f.hom ≫ k.left) ≫ g.val.hom = f.hom) (name.mk_string "obviously" name.anonymous)
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : category_theory.mono_over.image.obj f ⟶ g	⊢ (category_theory.limits.factor_thru_image f.hom ≫ k.left) ≫ g.val.hom = f.hom
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : category_theory.mono_over.image.obj f ⟶ g	⊢ category_theory.limits.factor_thru_image f.hom ≫ (category_theory.mono_over.image.obj f).val.hom = f.hom
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : f ⟶ (category_theory.mono_over.forget X).obj g	⊢ category_theory.mono_over.image.obj f ⟶ g
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : f ⟶ (category_theory.mono_over.forget X).obj g	⊢ (category_theory.mono_over.image.obj f).val.left ⟶ g.val.left		C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : f ⟶ (category_theory.mono_over.forget X).obj g	⊢ auto_param (?m_1 ≫ g.val.hom = (category_theory.mono_over.image.obj f).val.hom) (name.mk_string "obviously" name.anonymous)
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : f ⟶ (category_theory.mono_over.forget X).obj g	⊢ auto_param (category_theory.limits.image.lift {I := g.val.left, m := g.arrow, m_mono := _, e := k.left, fac' := _} ≫ g.val.hom = (category_theory.mono_over.image.obj f).val.hom) (name.mk_string "obviously" name.anonymous)
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : f ⟶ (category_theory.mono_over.forget X).obj g	⊢ (λ (k : category_theory.mono_over.image.obj f ⟶ g), category_theory.over.hom_mk (category_theory.limits.factor_thru_image f.hom ≫ k.left) _) ((λ (k : f ⟶ (category_theory.mono_over.forget X).obj g), category_theory.over.hom_mk (category_theory.limits.image.lift {I := g.val.left, m := g.arrow, m_mono := _, e := k.left, fac' := _}) _) k) = k
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : f ⟶ (category_theory.mono_over.forget X).obj g	⊢ ((λ (k : category_theory.mono_over.image.obj f ⟶ g), category_theory.over.hom_mk (category_theory.limits.factor_thru_image f.hom ≫ k.left) _) ((λ (k : f ⟶ (category_theory.mono_over.forget X).obj g), category_theory.over.hom_mk (category_theory.limits.image.lift {I := g.val.left, m := g.arrow, m_mono := _, e := k.left, fac' := _}) _) k)).left = k.left
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : f ⟶ (category_theory.mono_over.forget X).obj g	⊢ category_theory.limits.factor_thru_image f.hom ≫ category_theory.limits.image.lift {I := g.val.left, m := g.arrow, m_mono := _, e := k.left, fac' := _} = k.left
C : Type u₁,	_inst_1 : category_theory.category C,	X : C,	_inst_3 : category_theory.limits.has_images C,	f : category_theory.over X,	g : category_theory.mono_over X,	k : f ⟶ (category_theory.mono_over.forget X).obj g	⊢ f.hom = k.left ≫ g.arrow
C : Type u,	_inst_1 : category_theory.category C,	D : Type u,	_inst_2 : category_theory.category D,	E : Type u,	_inst_3 : category_theory.category E	⊢ category_theory.is_equivalence (category_theory.sum.associativity C D E).inverse
C : Type u₁,	_inst_1 : category_theory.category C,	F : Cᵒᵖ ⥤ Type v₁,	_inst_2 : F.representable,	X : Cᵒᵖ,	f : opposite.unop X ⟶ F.repr_X	⊢ (F.repr_w.app X).hom f = F.map f.op F.repr_x
C : Type u₁,	_inst_1 : category_theory.category C,	F : Cᵒᵖ ⥤ Type v₁,	_inst_2 : F.representable,	X : Cᵒᵖ,	f : opposite.unop X ⟶ F.repr_X	⊢ F.repr_f.app X f = (F.repr_f.app (opposite.op F.repr_X) ≫ F.map f.op) (𝟙 F.repr_X)
C : Type u₁,	_inst_1 : category_theory.category C,	F : Cᵒᵖ ⥤ Type v₁,	_inst_2 : F.representable,	X : Cᵒᵖ,	f : opposite.unop X ⟶ F.repr_X	⊢ F.repr_f.app X f = ((category_theory.yoneda.obj F.repr_X).map f.op ≫ F.repr_f.app (opposite.op (opposite.unop X))) (𝟙 F.repr_X)
C : Type u₁,	_inst_1 : category_theory.category C,	F : Cᵒᵖ ⥤ Type v₁,	_inst_2 : F.representable,	X : Cᵒᵖ,	f : opposite.unop X ⟶ F.repr_X	⊢ F.repr_f.app X f = F.repr_f.app X (f ≫ 𝟙 F.repr_X)
C : Type u₁,	_inst_1 : category_theory.category C,	X Y : C,	p : Π {Z : C}, (Z ⟶ X) → (Z ⟶ Y),	q : Π {Z : C}, (Z ⟶ Y) → (Z ⟶ X),	h₁ : ∀ {Z : C} (f : Z ⟶ X), q (p f) = f,	h₂ : ∀ {Z : C} (f : Z ⟶ Y), p (q f) = f,	n : ∀ {Z Z' : C} (f : Z' ⟶ Z) (g : Z ⟶ X), p (f ≫ g) = f ≫ p g	⊢ ∀ {X_1 Y_1 : Cᵒᵖ} (f : X_1 ⟶ Y_1), (category_theory.yoneda.obj X).map f ≫ {hom := p (opposite.unop Y_1), inv := q (opposite.unop Y_1), hom_inv_id' := _, inv_hom_id' := _}.hom = {hom := p (opposite.unop X_1), inv := q (opposite.unop X_1), hom_inv_id' := _, inv_hom_id' := _}.hom ≫ (category_theory.yoneda.obj Y).map f
α : Type u_1,	_inst_1 : linear_order α,	A B : finset α	⊢ (A \ B).to_colex ≤ (B \ A).to_colex ↔ A.to_colex ≤ B.to_colex
n : ℕ,	c : composition n,	j : fin n	⊢ ↑j - c.size_up_to ↑(c.index j) < c.blocks_fun (c.index j)
n : ℕ,	c : composition n,	j : fin n	⊢ ↑j < c.size_up_to (↑(c.index j) + 1)		n : ℕ,	c : composition n,	j : fin n	⊢ c.size_up_to ↑(c.index j) ≤ ↑j
n : ℕ,	c : composition n,	j : fin n	⊢ ↑j < c.size_up_to (↑(c.index j) + 1)
n : ℕ,	c : composition n,	j : fin n	⊢ c.size_up_to ↑(c.index j) ≤ ↑j
V : Type u,	_inst_1 : quiver V,	a : V,	nil_comp : ∀ {b : V} (p : quiver.path a b), quiver.path.nil.comp p = p,	b __mlocal__fresh_851_37602 : V,	p : quiver.path a __mlocal__fresh_851_37602,	e : __mlocal__fresh_851_37602 ⟶ b	⊢ quiver.path.nil.comp (p.cons e) = p.cons e
V : Type u,	G : simple_graph V,	_inst_1 : fintype V,	_inst_2 : decidable_rel G.adj,	_inst_3 : decidable_eq V,	v : V	⊢ (finset.filter (λ (d : G.dart), d.fst = v) finset.univ).card = G.degree v
V : Type u,	G : simple_graph V,	_inst_1 : fintype V,	_inst_2 : decidable_rel G.adj,	_inst_3 : decidable_eq V,	v : V,	hh : (finset.image (G.dart_of_neighbor_set v) finset.univ).card = finset.univ.card	⊢ (finset.filter (λ (d : G.dart), d.fst = v) finset.univ).card = G.degree v
V : Type u,	G : simple_graph V,	_inst_1 : fintype V,	_inst_2 : decidable_rel G.adj,	_inst_3 : decidable_eq V,	v : V,	hh : (finset.image (G.dart_of_neighbor_set v) finset.univ).card = G.degree v	⊢ (finset.filter (λ (d : G.dart), d.fst = v) finset.univ).card = G.degree v
α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ	⊢ M.to_ε_NFA.ε_closure S = S
α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ,	a : σ	⊢ a ∈ M.to_ε_NFA.ε_closure S ↔ a ∈ S
α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ,	a : σ	⊢ a ∈ M.to_ε_NFA.ε_closure S → a ∈ S
α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ,	a : σ,	h : a ∈ S	⊢ a ∈ S		α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ,	a ᾰ_s : σ,	ᾰ_ᾰ : M.to_ε_NFA.ε_closure S ᾰ_s,	h : a ∈ M.to_ε_NFA.step ᾰ_s option.none	⊢ a ∈ S
α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ,	a : σ	⊢ a ∈ M.to_ε_NFA.ε_closure S → a ∈ S		α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ,	a : σ	⊢ a ∈ S → a ∈ M.to_ε_NFA.ε_closure S
α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ,	a ᾰ_s : σ,	ᾰ_ᾰ : M.to_ε_NFA.ε_closure S ᾰ_s,	h : a ∈ M.to_ε_NFA.step ᾰ_s option.none	⊢ a ∈ S
α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ,	a : σ	⊢ a ∈ S → a ∈ M.to_ε_NFA.ε_closure S
α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ,	a : σ,	h : a ∈ S	⊢ a ∈ M.to_ε_NFA.ε_closure S
α : Type u,	σ : Type v,	M : NFA α σ,	S : set σ,	a : σ,	h : a ∈ S	⊢ a ∈ S
f g h : ℕ →. ℕ,	hf : nat.partrec f,	hg : nat.partrec g,	hh : nat.partrec h,	a s : ℕ	⊢ s ∈ nat.mkpair <$> part.some a <*> f a >>= nat.unpaired (λ (a n : ℕ), nat.elim (g a) (λ (y : ℕ) (IH : part ℕ), IH >>= λ (i : ℕ), h (nat.mkpair a (nat.mkpair y i))) n) ↔ s ∈ (f a).bind (λ (n : ℕ), nat.elim (g a) (λ (y : ℕ) (IH : part ℕ), IH >>= λ (i : ℕ), h (nat.mkpair a (nat.mkpair y i))) n)
f g h : ℕ →. ℕ,	hf : nat.partrec f,	hg : nat.partrec g,	hh : nat.partrec h,	a s : ℕ	⊢ s ∈ nat.mkpair <$> part.some a <*> f a >>= nat.unpaired (λ (a n : ℕ), nat.elim (g a) (λ (y : ℕ) (IH : part ℕ), IH >>= λ (i : ℕ), h (nat.mkpair a (nat.mkpair y i))) n) ↔ s ∈ (f a).bind (λ (n : ℕ), nat.elim (g a) (λ (y : ℕ) (IH : part ℕ), IH >>= λ (i : ℕ), h (nat.mkpair a (nat.mkpair y i))) n)
α : Type u_1,	σ : Type u_4,	_inst_1 : primcodable α,	_inst_4 : primcodable σ,	f : α →. σ,	h : partrec (λ (a : α), part.map option.some (f a)),	n : ℕ	⊢ (↑(encodable.decode α n).bind (λ (a : α), part.map encodable.encode ((λ (a : α), part.map option.some (f a)) a)) >>= λ (n : ℕ), ↑(n.ppred)) = ↑(encodable.decode α n).bind (λ (a : α), part.map encodable.encode (f a))
α : Type u_1,	β : Type u_2,	γ : Type u_3,	σ : Type u_4,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable γ,	_inst_4 : primcodable σ,	f : α → β ⊕ γ,	g : α → β →. σ,	h : α → γ → σ,	hf : computable f,	hg : partrec₂ g,	hh : computable₂ h,	a : α	⊢ sum.cases_on ((f a).cases_on (λ (b : β), sum.inr (a, b).snd) (λ (b : γ), sum.inl (a, b).snd)) (λ (b : γ), part.some (h a b)) (g a) = (f a).cases_on (g a) (λ (c : γ), part.some (h a c))
α : Type u_1,	β : Type u_2,	γ : Type u_3,	σ : Type u_4,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable γ,	_inst_4 : primcodable σ,	f : α → β ⊕ γ,	g : α → β →. σ,	h : α → γ → σ,	hf : computable f,	hg : partrec₂ g,	hh : computable₂ h,	a : α,	val : β	⊢ sum.cases_on ((sum.inl val).cases_on (λ (b : β), sum.inr (a, b).snd) (λ (b : γ), sum.inl (a, b).snd)) (λ (b : γ), part.some (h a b)) (g a) = (sum.inl val).cases_on (g a) (λ (c : γ), part.some (h a c))
α : Type u_1,	β : Type u_2,	γ : Type u_3,	σ : Type u_4,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable γ,	_inst_4 : primcodable σ,	f : α → β ⊕ γ,	g : α → β →. σ,	h : α → γ → σ,	hf : computable f,	hg : partrec₂ g,	hh : computable₂ h,	a : α,	val : γ	⊢ sum.cases_on ((sum.inr val).cases_on (λ (b : β), sum.inr (a, b).snd) (λ (b : γ), sum.inl (a, b).snd)) (λ (b : γ), part.some (h a b)) (g a) = (sum.inr val).cases_on (g a) (λ (c : γ), part.some (h a c))
α : Type u_1,	β : Type u_2,	γ : Type u_3,	σ : Type u_4,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable γ,	_inst_4 : primcodable σ,	f : α → β ⊕ γ,	g : α → β →. σ,	h : α → γ → σ,	hf : computable f,	hg : partrec₂ g,	hh : computable₂ h,	a : α	⊢ sum.cases_on ((f a).cases_on (λ (b : β), sum.inr (a, b).snd) (λ (b : γ), sum.inl (a, b).snd)) (λ (b : γ), part.some (h a b)) (g a) = (f a).cases_on (g a) (λ (c : γ), part.some (h a c))
⊢ primrec G
a : primrec (λ (a : list ?m_1), denumerable.of_nat (ℕ × nat.partrec.code) a.length)	⊢ primrec G		⊢ Type ?		⊢ primcodable ?m_1
a : primrec (λ (a : list ?m_1), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list ?m_1), ((λ (a : list ?m_1), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst)	⊢ primrec G		⊢ Type ?		⊢ primcodable ?m_1		⊢ Type ?		⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ?m_1), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primrec (λ (p : list (list (option ℕ)) × ℕ), nat.cases option.none (λ (k' : ℕ), (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).snd.rec_on (option.some 0) (option.some p.snd.succ) (option.some (nat.unpair p.snd).fst) (option.some (nat.unpair p.snd).snd) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) p.snd >>= λ (x : ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cg) p.snd >>= λ (y : ℕ), option.some (nat.mkpair x y)) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cg) p.snd >>= λ (x : ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) x) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), let z : ℕ := (nat.unpair p.snd).fst in nat.cases (lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) z) (λ (y : ℕ), lup p.fst (k', (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cg) (nat.mkpair z (nat.mkpair y i))) (nat.unpair p.snd).snd) (λ (cf : nat.partrec.code) (_x : option ℕ), let z : ℕ := (nat.unpair p.snd).fst, m : ℕ := (nat.unpair p.snd).snd in lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup p.fst (k', (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).snd) (nat.mkpair z (m + 1))) x)) (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst)	⊢ primrec (λ (p : list (list (option ℕ)) × ℕ), nat.cases option.none (λ (k' : ℕ), (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).snd.rec_on (option.some 0) (option.some p.snd.succ) (option.some (nat.unpair p.snd).fst) (option.some (nat.unpair p.snd).snd) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) p.snd >>= λ (x : ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cg) p.snd >>= λ (y : ℕ), option.some (nat.mkpair x y)) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cg) p.snd >>= λ (x : ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) x) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), let z : ℕ := (nat.unpair p.snd).fst in nat.cases (lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) z) (λ (y : ℕ), lup p.fst (k', (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cg) (nat.mkpair z (nat.mkpair y i))) (nat.unpair p.snd).snd) (λ (cf : nat.partrec.code) (_x : option ℕ), let z : ℕ := (nat.unpair p.snd).fst, m : ℕ := (nat.unpair p.snd).snd in lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup p.fst (k', (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).snd) (nat.mkpair z (m + 1))) x)) (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst)
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ?m_1), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primrec (λ (p : list (list (option ℕ)) × ℕ), nat.cases option.none (λ (k' : ℕ), (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).snd.rec_on (option.some 0) (option.some p.snd.succ) (option.some (nat.unpair p.snd).fst) (option.some (nat.unpair p.snd).snd) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) p.snd >>= λ (x : ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cg) p.snd >>= λ (y : ℕ), option.some (nat.mkpair x y)) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cg) p.snd >>= λ (x : ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) x) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), let z : ℕ := (nat.unpair p.snd).fst in nat.cases (lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) z) (λ (y : ℕ), lup p.fst (k', (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cg) (nat.mkpair z (nat.mkpair y i))) (nat.unpair p.snd).snd) (λ (cf : nat.partrec.code) (_x : option ℕ), let z : ℕ := (nat.unpair p.snd).fst, m : ℕ := (nat.unpair p.snd).snd in lup p.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst, cf) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup p.fst (k', (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).snd) (nat.mkpair z (m + 1))) x)) (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.length).fst)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ?m_1), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ?m_1), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ?m_1), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_3		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ?m_1), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_3		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst)	⊢ primrec (λ (p : (list (list (option ℕ)) × ℕ) × ℕ), (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd.rec_on (option.some 0) (option.some p.fst.snd.succ) (option.some (nat.unpair p.fst.snd).fst) (option.some (nat.unpair p.fst.snd).snd) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) p.fst.snd >>= λ (x : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) p.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y)) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) p.fst.snd >>= λ (x : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) x) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), let z : ℕ := (nat.unpair p.fst.snd).fst in nat.cases (lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) z) (λ (y : ℕ), lup p.fst.fst (p.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) (nat.mkpair z (nat.mkpair y i))) (nat.unpair p.fst.snd).snd) (λ (cf : nat.partrec.code) (_x : option ℕ), let z : ℕ := (nat.unpair p.fst.snd).fst, m : ℕ := (nat.unpair p.fst.snd).snd in lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup p.fst.fst (p.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd) (nat.mkpair z (m + 1))) x))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primrec (λ (p : (list (list (option ℕ)) × ℕ) × ℕ), (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd.rec_on (option.some 0) (option.some p.fst.snd.succ) (option.some (nat.unpair p.fst.snd).fst) (option.some (nat.unpair p.fst.snd).snd) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) p.fst.snd >>= λ (x : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) p.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y)) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) p.fst.snd >>= λ (x : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) x) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), let z : ℕ := (nat.unpair p.fst.snd).fst in nat.cases (lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) z) (λ (y : ℕ), lup p.fst.fst (p.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) (nat.mkpair z (nat.mkpair y i))) (nat.unpair p.fst.snd).snd) (λ (cf : nat.partrec.code) (_x : option ℕ), let z : ℕ := (nat.unpair p.fst.snd).fst, m : ℕ := (nat.unpair p.fst.snd).snd in lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup p.fst.fst (p.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd) (nat.mkpair z (m + 1))) x))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd)	⊢ primrec (λ (p : (list (list (option ℕ)) × ℕ) × ℕ), (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd.rec_on (option.some 0) (option.some p.fst.snd.succ) (option.some (nat.unpair p.fst.snd).fst) (option.some (nat.unpair p.fst.snd).snd) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) p.fst.snd >>= λ (x : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) p.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y)) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) p.fst.snd >>= λ (x : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) x) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), let z : ℕ := (nat.unpair p.fst.snd).fst in nat.cases (lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) z) (λ (y : ℕ), lup p.fst.fst (p.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) (nat.mkpair z (nat.mkpair y i))) (nat.unpair p.fst.snd).snd) (λ (cf : nat.partrec.code) (_x : option ℕ), let z : ℕ := (nat.unpair p.fst.snd).fst, m : ℕ := (nat.unpair p.fst.snd).snd in lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup p.fst.fst (p.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd) (nat.mkpair z (m + 1))) x))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd),	k' : primrec prod.snd	⊢ primrec (λ (p : (list (list (option ℕ)) × ℕ) × ℕ), (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd.rec_on (option.some 0) (option.some p.fst.snd.succ) (option.some (nat.unpair p.fst.snd).fst) (option.some (nat.unpair p.fst.snd).snd) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) p.fst.snd >>= λ (x : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) p.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y)) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) p.fst.snd >>= λ (x : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) x) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), let z : ℕ := (nat.unpair p.fst.snd).fst in nat.cases (lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) z) (λ (y : ℕ), lup p.fst.fst (p.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) (nat.mkpair z (nat.mkpair y i))) (nat.unpair p.fst.snd).snd) (λ (cf : nat.partrec.code) (_x : option ℕ), let z : ℕ := (nat.unpair p.fst.snd).fst, m : ℕ := (nat.unpair p.fst.snd).snd in lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup p.fst.fst (p.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd) (nat.mkpair z (m + 1))) x))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd)	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd)	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ?m_13) × ?m_14), ((λ (a : (list (list (option ℕ)) × ?m_13) × ?m_14), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (p : (list (list (option ℕ)) × ℕ) × ℕ), (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd.rec_on (option.some 0) (option.some p.fst.snd.succ) (option.some (nat.unpair p.fst.snd).fst) (option.some (nat.unpair p.fst.snd).snd) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) p.fst.snd >>= λ (x : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) p.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y)) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) p.fst.snd >>= λ (x : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) x) (λ (cf cg : nat.partrec.code) (_x _x : option ℕ), let z : ℕ := (nat.unpair p.fst.snd).fst in nat.cases (lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) z) (λ (y : ℕ), lup p.fst.fst (p.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cg) (nat.mkpair z (nat.mkpair y i))) (nat.unpair p.fst.snd).snd) (λ (cf : nat.partrec.code) (_x : option ℕ), let z : ℕ := (nat.unpair p.fst.snd).fst, m : ℕ := (nat.unpair p.fst.snd).snd in lup p.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).fst, cf) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup p.fst.fst (p.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.length).snd) (nat.mkpair z (m + 1))) x))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd),	k' : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd),	k' : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd),	k' : primrec prod.snd	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd),	k' : primrec prod.snd	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd)	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (?m_1 × ?m_2) × ?m_7), a.fst.snd)	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_5), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y))
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_19 × ?m_20 × ?m_21), a.snd.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_19		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_19		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_19		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_19 × ?m_20 × ?m_21), a.snd.fst),	cg : primrec (λ (a : ?m_25 × ?m_26 × ?m_27 × ?m_28), (λ (a : ?m_26 × ?m_27 × ?m_28), a.snd.fst) a.snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_19 × ?m_20 × ?m_21), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_19 × ?m_20 × ?m_21), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_19 × ?m_20 × ?m_21), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_19 × ?m_20 × ?m_21), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_19 × ?m_20 × ?m_21), a.snd.fst)	⊢ primcodable ?m_25		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_19 × ?m_20 × ?m_21), a.snd.fst)	⊢ primcodable ?m_25		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_19 × ?m_20 × ?m_21), a.snd.fst)	⊢ primcodable ?m_25		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_19 × ?m_20 × ?m_21), a.snd.fst)	⊢ primcodable ?m_25		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_19		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_19		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_17), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_19		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ?m_1) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_7 × ?m_8) × ?m_9) × ?m_10), (λ (a : (?m_7 × ?m_8) × ?m_9), a.fst.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_7
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (y : ℕ), option.some (nat.mkpair x y))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst in nat.cases (lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) z) (λ (y : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) (nat.mkpair z (nat.mkpair y i))) (nat.unpair a.fst.fst.snd).snd)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst, m : ℕ := (nat.unpair a.fst.fst.snd).snd in lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z (m + 1))) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ primcodable ?m_3		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ?m_1), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ primcodable ?m_3		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) x)
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst),	cg : primrec (λ (a : ?m_23 × ?m_24 × ?m_25 × ?m_26), (λ (a : ?m_24 × ?m_25 × ?m_26), a.snd.fst) a.snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) a.fst.fst.snd >>= λ (x : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst in nat.cases (lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) z) (λ (y : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) (nat.mkpair z (nat.mkpair y i))) (nat.unpair a.fst.fst.snd).snd)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst, m : ℕ := (nat.unpair a.fst.fst.snd).snd in lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z (m + 1))) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst in nat.cases (lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) z) (λ (y : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) (nat.mkpair z (nat.mkpair y i))) (nat.unpair a.fst.fst.snd).snd)
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst in nat.cases (lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) z) (λ (y : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) (nat.mkpair z (nat.mkpair y i))) (nat.unpair a.fst.fst.snd).snd)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst in nat.cases (lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) z) (λ (y : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) (nat.mkpair z (nat.mkpair y i))) (nat.unpair a.fst.fst.snd).snd)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst in nat.cases (lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) z) (λ (y : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) (nat.mkpair z (nat.mkpair y i))) (nat.unpair a.fst.fst.snd).snd)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst in nat.cases (lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) z) (λ (y : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) (nat.mkpair z (nat.mkpair y i))) (nat.unpair a.fst.fst.snd).snd)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst),	cg : primrec (λ (a : ?m_23 × ?m_24 × ?m_25 × ?m_26), (λ (a : ?m_24 × ?m_25 × ?m_26), a.snd.fst) a.snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst in nat.cases (lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) z) (λ (y : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) (nat.mkpair z (nat.mkpair y i))) (nat.unpair a.fst.fst.snd).snd)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst),	cg : primrec (λ (a : ?m_23 × ?m_24 × ?m_25 × ?m_26), (λ (a : ?m_24 × ?m_25 × ?m_26), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst in nat.cases (lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) z) (λ (y : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) (nat.mkpair z (nat.mkpair y i))) (nat.unpair a.fst.fst.snd).snd)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_17 × ?m_18 × ?m_19), a.snd.fst)	⊢ primcodable ?m_23		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_15), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_13), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_5 × ?m_6) × ?m_7) × ?m_8), (λ (a : (?m_5 × ?m_6) × ?m_7), a.fst.fst) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst)	⊢ primrec (λ (p : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), lup p.fst.fst.fst.fst (p.fst.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.length).snd) (nat.mkpair (nat.unpair p.fst.fst.fst.snd).fst p.snd) >>= λ (i : ℕ), lup p.fst.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.length).fst, p.fst.snd.snd.fst) (nat.mkpair (nat.unpair p.fst.fst.fst.snd).fst (nat.mkpair p.snd i)))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_15), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst)	⊢ primrec (λ (p : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), lup p.fst.fst.fst.fst (p.fst.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.length).snd) (nat.mkpair (nat.unpair p.fst.fst.fst.snd).fst p.snd) >>= λ (i : ℕ), lup p.fst.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.length).fst, p.fst.snd.snd.fst) (nat.mkpair (nat.unpair p.fst.fst.fst.snd).fst (nat.mkpair p.snd i)))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst)	⊢ primrec (λ (p : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), lup p.fst.fst.fst.fst (p.fst.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.length).snd) (nat.mkpair (nat.unpair p.fst.fst.fst.snd).fst p.snd) >>= λ (i : ℕ), lup p.fst.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.length).fst, p.fst.snd.snd.fst) (nat.mkpair (nat.unpair p.fst.fst.fst.snd).fst (nat.mkpair p.snd i)))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_15), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd	⊢ primrec (λ (p : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), lup p.fst.fst.fst.fst (p.fst.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.length).snd) (nat.mkpair (nat.unpair p.fst.fst.fst.snd).fst p.snd) >>= λ (i : ℕ), lup p.fst.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.length).fst, p.fst.snd.snd.fst) (nat.mkpair (nat.unpair p.fst.fst.fst.snd).fst (nat.mkpair p.snd i)))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_15), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_15), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_15), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_15), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst)	⊢ primcodable ?m_17		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ?m_13), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst)	⊢ primcodable ?m_15		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_5 × ?m_6 × ?m_7 × ?m_8), (λ (a : ?m_6 × ?m_7 × ?m_8), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_5
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst)	⊢ primrec (λ (p : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ℕ), lup p.fst.fst.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.fst.length).fst, p.fst.fst.snd.snd.fst) (nat.mkpair (nat.unpair p.fst.fst.fst.fst.snd).fst (nat.mkpair p.fst.snd p.snd)))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst),	y : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_11), a.fst.snd)	⊢ primrec (λ (p : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ℕ), lup p.fst.fst.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.fst.length).fst, p.fst.fst.snd.snd.fst) (nat.mkpair (nat.unpair p.fst.fst.fst.fst.snd).fst (nat.mkpair p.fst.snd p.snd)))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst)	⊢ primcodable ?m_11		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd	⊢ primrec (λ (p : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ℕ), lup p.fst.fst.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.fst.length).fst, p.fst.fst.snd.snd.fst) (nat.mkpair (nat.unpair p.fst.fst.fst.fst.snd).fst (nat.mkpair p.fst.snd p.snd)))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst),	y : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_11), a.fst.snd),	i : primrec prod.snd	⊢ primrec (λ (p : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ℕ), lup p.fst.fst.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.fst.length).fst, p.fst.fst.snd.snd.fst) (nat.mkpair (nat.unpair p.fst.fst.fst.fst.snd).fst (nat.mkpair p.fst.snd p.snd)))		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst),	y : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_11), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst),	y : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_11), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst),	y : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_11), a.fst.snd)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst),	y : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_11), a.fst.snd)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd,	z : primrec (λ (a : ((((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ) × ?m_9), (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst) a.fst)	⊢ primcodable ?m_11		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst),	cg : primrec (λ (a : ?m_1 × ?m_2 × ?m_3 × ?m_4), (λ (a : ?m_2 × ?m_3 × ?m_4), a.snd.fst) a.snd),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	L : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst) a.fst),	z : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ) × ℕ), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst) a.fst),	y : primrec prod.snd	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), a.snd.fst)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × nat.partrec.code × option ℕ × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst in nat.cases (lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) z) (λ (y : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z y) >>= λ (i : ℕ), lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.snd.fst) (nat.mkpair z (nat.mkpair y i))) (nat.unpair a.fst.fst.snd).snd)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst, m : ℕ := (nat.unpair a.fst.fst.snd).snd in lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z (m + 1))) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst, m : ℕ := (nat.unpair a.fst.fst.snd).snd in lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z (m + 1))) x)
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst, m : ℕ := (nat.unpair a.fst.fst.snd).snd in lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z (m + 1))) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst, m : ℕ := (nat.unpair a.fst.fst.snd).snd in lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z (m + 1))) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst, m : ℕ := (nat.unpair a.fst.fst.snd).snd in lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z (m + 1))) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_11		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_13 × ?m_14 × ?m_15), a.snd.fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst, m : ℕ := (nat.unpair a.fst.fst.snd).snd in lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z (m + 1))) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_11		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_13 × ?m_14 × ?m_15), a.snd.fst),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst, m : ℕ := (nat.unpair a.fst.fst.snd).snd in lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z (m + 1))) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_11		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_11		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ?m_13 × ?m_14 × ?m_15), a.snd.fst),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	m : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).snd)	⊢ primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), let z : ℕ := (nat.unpair a.fst.fst.snd).fst, m : ℕ := (nat.unpair a.fst.fst.snd).snd in lup a.fst.fst.fst ((denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).fst, a.snd.fst) (nat.mkpair z m) >>= λ (x : ℕ), nat.cases (option.some m) (λ (_x : ℕ), lup a.fst.fst.fst (a.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.fst.length).snd) (nat.mkpair z (m + 1))) x)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_11		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_11		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_11), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)	⊢ primcodable ?m_13		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × ?m_9), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst)	⊢ primcodable ?m_11		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((?m_1 × ?m_2) × ?m_3) × ?m_4), (λ (a : (?m_1 × ?m_2) × ?m_3), a.fst.fst) a.fst)	⊢ primcodable ?m_9		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd)	⊢ primcodable ?m_1
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), a.snd.fst),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	m : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).snd)	⊢ primrec (λ (p : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ) × ℕ), nat.cases (option.some (nat.unpair p.fst.fst.fst.snd).snd) (λ (_x : ℕ), lup p.fst.fst.fst.fst (p.fst.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.length).snd) (nat.mkpair (nat.unpair p.fst.fst.fst.snd).fst ((nat.unpair p.fst.fst.fst.snd).snd + 1))) p.snd)
a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), a.snd.fst),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	m : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).snd),	m : primrec (λ (a : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ) × ?m_1), (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).snd) a.fst)	⊢ primrec (λ (p : (((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ) × ℕ), nat.cases (option.some (nat.unpair p.fst.fst.fst.snd).snd) (λ (_x : ℕ), lup p.fst.fst.fst.fst (p.fst.fst.snd, (denumerable.of_nat (ℕ × nat.partrec.code) p.fst.fst.fst.fst.length).snd) (nat.mkpair (nat.unpair p.fst.fst.fst.snd).fst ((nat.unpair p.fst.fst.fst.snd).snd + 1))) p.snd)		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), a.snd.fst),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	m : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).snd)	⊢ Type ?		a : primrec (λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length),	k : primrec (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst),	n : primrec prod.snd,	k : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst),	n : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd),	k' : primrec prod.snd,	c : primrec (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), denumerable.of_nat (ℕ × nat.partrec.code) a.fst.fst.length) a).snd),	L : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.fst) a.fst),	k : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), (λ (a : list (list (option ℕ)) × ℕ), (λ (a : list (list (option ℕ))), ((λ (a : list (list (option ℕ))), denumerable.of_nat (ℕ × nat.partrec.code) a.length) a).fst) a.fst) a.fst) a.fst),	n : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), (λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst),	cf : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), a.snd.fst),	z : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).fst),	m : primrec (λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), ((λ (a : ((list (list (option ℕ)) × ℕ) × ℕ) × nat.partrec.code × option ℕ), nat.unpair ((λ (a : (list (list (option ℕ)) × ℕ) × ℕ), a.fst.snd) a.fst)) a).snd)	⊢ primcodable ?m_1
α : Type u_1,	_inst_1 : primcodable α	⊢ primrec ulower.down
α : Type u_1,	_inst_1 : primcodable α	⊢ primrec ulower.down
α : Type u_1,	_inst_1 : primcodable α,	_inst : Π (a : ℕ), decidable (a ∈ set.range encodable.encode) := encodable.decidable_range_encode α	⊢ primrec ulower.down
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : β → σ,	g : α → β,	hf : primrec f,	hg : primrec g,	n : ℕ	⊢ nat.cases 0 (λ (n : ℕ), encodable.encode (option.map f (encodable.decode β (encodable.encode (option.map g (encodable.decode α n))).pred))) (encodable.encode option.none) = encodable.encode (option.map (λ (a : α), f (g a)) option.none)
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : β → σ,	g : α → β,	hf : primrec f,	hg : primrec g,	n : ℕ	⊢ nat.cases 0 (λ (n : ℕ), encodable.encode (option.map f (encodable.decode β (encodable.encode (option.map g (encodable.decode α n))).pred))) (encodable.encode option.none) = encodable.encode (option.map (λ (a : α), f (g a)) option.none)		case option.some	α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : β → σ,	g : α → β,	hf : primrec f,	hg : primrec g,	n : ℕ,	val : α	⊢ nat.cases 0 (λ (n : ℕ), encodable.encode (option.map f (encodable.decode β (encodable.encode (option.map g (encodable.decode α n))).pred))) (encodable.encode (option.some val)) = encodable.encode (option.map (λ (a : α), f (g a)) (option.some val))
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : β → σ,	g : α → β,	hf : primrec f,	hg : primrec g,	n : ℕ	⊢ nat.cases 0 (λ (n : ℕ), encodable.encode (option.map f (encodable.decode β (encodable.encode (option.map g (encodable.decode α n))).pred))) (encodable.encode (encodable.decode α n)) = encodable.encode (option.map (λ (a : α), f (g a)) (encodable.decode α n))
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : β → σ,	g : α → β,	hf : primrec f,	hg : primrec g,	n : ℕ,	val : α	⊢ nat.cases 0 (λ (n : ℕ), encodable.encode (option.map f (encodable.decode β (encodable.encode (option.map g (encodable.decode α n))).pred))) (encodable.encode (option.some val)) = encodable.encode (option.map (λ (a : α), f (g a)) (option.some val))
α : Type u_1,	_inst_1 : primcodable α,	β : Sort ?,	e : β ≃ α	⊢ Sort ?
α : Type u_1,	_inst_1 : primcodable α,	β : Type ?,	e : β ≃ α,	_inst : primcodable β	⊢ Sort ?
α : Type u_1,	_inst_1 : primcodable α,	β : Sort ?,	e : β ≃ α	⊢ Sort ?
α : Type u_1,	_inst_1 : primcodable α,	β : Type u_2,	e : β ≃ α	⊢ primrec ⇑e
α : Type u_1,	_inst_1 : primcodable α,	β : Type u_2,	e : β ≃ α	⊢ primrec ⇑e
α : Type u_1,	_inst_1 : primcodable α,	β : Type u_2,	e : β ≃ α,	_inst : primcodable β := primcodable.of_equiv α e	⊢ primrec ⇑e
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : α → β → σ	⊢ ∀ (a : option α) (b : option β), option.map (λ (p : α × β), f p.fst p.snd) (a.bind (λ (a : α), option.map (prod.mk a) b)) = a.bind (λ (a : α), option.map (f a) b)
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : α → β → σ	⊢ ∀ (a : option α) (b : option β), option.map (λ (p : α × β), f p.fst p.snd) (a.bind (λ (a : α), option.map (prod.mk a) b)) = a.bind (λ (a : α), option.map (f a) b)
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : α → β → σ,	a : option α,	b : option β	⊢ option.map (λ (p : α × β), f p.fst p.snd) (a.bind (λ (a : α), option.map (prod.mk a) b)) = a.bind (λ (a : α), option.map (f a) b)
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : α → β → σ,	b : option β	⊢ option.map (λ (p : α × β), f p.fst p.snd) (option.none.bind (λ (a : α), option.map (prod.mk a) b)) = option.none.bind (λ (a : α), option.map (f a) b)
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : α → β → σ,	b : option β,	a : α	⊢ option.map (λ (p : α × β), f p.fst p.snd) ((option.some a).bind (λ (a : α), option.map (prod.mk a) b)) = (option.some a).bind (λ (a : α), option.map (f a) b)
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : α → β → σ,	b : option β,	a : α	⊢ option.map (λ (p : α × β), f p.fst p.snd) ((option.some a).bind (λ (a : α), option.map (prod.mk a) b)) = (option.some a).bind (λ (a : α), option.map (f a) b)
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : α → β → σ,	a : α	⊢ option.map (λ (p : α × β), f p.fst p.snd) ((option.some a).bind (λ (a : α), option.map (prod.mk a) option.none)) = (option.some a).bind (λ (a : α), option.map (f a) option.none)
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : α → β → σ,	a : α,	b : β	⊢ option.map (λ (p : α × β), f p.fst p.snd) ((option.some a).bind (λ (a : α), option.map (prod.mk a) (option.some b))) = (option.some a).bind (λ (a : α), option.map (f a) (option.some b))
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : α → β → σ	⊢ ∀ (a : option α) (b : option β), option.map (λ (p : α × β), f p.fst p.snd) (a.bind (λ (a : α), option.map (prod.mk a) b)) = a.bind (λ (a : α), option.map (f a) b)
α : Type u_1,	β : Type u_2,	σ : Type u_3,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_3 : primcodable σ,	f : α → β → σ,	this : ∀ (a : option α) (b : option β), option.map (λ (p : α × β), f p.fst p.snd) (a.bind (λ (a : α), option.map (prod.mk a) b)) = a.bind (λ (a : α), option.map (f a) b)	⊢ primrec₂ f ↔ nat.primrec (nat.unpaired (λ (m n : ℕ), encodable.encode ((encodable.decode α m).bind (λ (a : α), option.map (f a) (encodable.decode β n)))))
α : Type u_1,	β : Type u_2,	σ : Type u_5,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_5 : primcodable σ,	o : α → option β,	f : α → σ,	g : α → β → σ,	ho : primrec o,	hf : primrec f,	hg : primrec₂ g,	a : α	⊢ nat.cases (encodable.encode (f a)) (λ (b : ℕ), (encodable.encode ((encodable.decode α (encodable.encode (a, b).fst)).bind (λ (a : α), option.map (g a) (encodable.decode β b)))).pred) (encodable.encode (o a)) = encodable.encode ((o a).cases_on (f a) (g a))
α : Type u_1,	β : Type u_2,	σ : Type u_5,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_5 : primcodable σ,	o : α → option β,	f : α → σ,	g : α → β → σ,	ho : primrec o,	hf : primrec f,	hg : primrec₂ g,	a : α	⊢ nat.cases (encodable.encode (f a)) (λ (b : ℕ), (encodable.encode ((encodable.decode α (encodable.encode (a, b).fst)).bind (λ (a : α), option.map (g a) (encodable.decode β b)))).pred) (encodable.encode (o a)) = encodable.encode ((o a).cases_on (f a) (g a))
α : Type u_1,	β : Type u_2,	σ : Type u_5,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_5 : primcodable σ,	o : α → option β,	f : α → σ,	g : α → β → σ,	ho : primrec o,	hf : primrec f,	hg : primrec₂ g,	a : α	⊢ nat.cases (encodable.encode (f a)) (λ (b : ℕ), (encodable.encode ((encodable.decode α (encodable.encode (a, b).fst)).bind (λ (a : α), option.map (g a) (encodable.decode β b)))).pred) (encodable.encode option.none) = encodable.encode (option.none.cases_on (f a) (g a))
α : Type u_1,	β : Type u_2,	σ : Type u_5,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_5 : primcodable σ,	o : α → option β,	f : α → σ,	g : α → β → σ,	ho : primrec o,	hf : primrec f,	hg : primrec₂ g,	a : α,	b : β	⊢ nat.cases (encodable.encode (f a)) (λ (b : ℕ), (encodable.encode ((encodable.decode α (encodable.encode (a, b).fst)).bind (λ (a : α), option.map (g a) (encodable.decode β b)))).pred) (encodable.encode (option.some b)) = encodable.encode ((option.some b).cases_on (f a) (g a))
α : Type u_1,	β : Type u_2,	σ : Type u_5,	_inst_1 : primcodable α,	_inst_2 : primcodable β,	_inst_5 : primcodable σ,	o : α → option β,	f : α → σ,	g : α → β → σ,	ho : primrec o,	hf : primrec f,	hg : primrec₂ g,	a : α	⊢ nat.cases (encodable.encode (f a)) (λ (b : ℕ), (encodable.encode ((encodable.decode α (encodable.encode (a, b).fst)).bind (λ (a : α), option.map (g a) (encodable.decode β b)))).pred) (encodable.encode (o a)) = encodable.encode ((o a).cases_on (f a) (g a))
α : Type u_1,	_inst_1 : primcodable α,	p : α → Prop	⊢ ∀ (a : α), p a ↔ p (id a)
c : turing.to_partrec.code,	k k' : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c (k.then k') v = (turing.to_partrec.step_normal c k v).then k'
c : turing.to_partrec.code,	k k' : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c (k.then k') v = (turing.to_partrec.step_normal c k v).then k'
k' k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal turing.to_partrec.code.zero' (k.then k') v = (turing.to_partrec.step_normal turing.to_partrec.code.zero' k v).then k'
k' k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal turing.to_partrec.code.succ (k.then k') v = (turing.to_partrec.step_normal turing.to_partrec.code.succ k v).then k'
k' k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal turing.to_partrec.code.tail (k.then k') v = (turing.to_partrec.step_normal turing.to_partrec.code.tail k v).then k'
k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal (c_ᾰ.cons c_ᾰ_1) (k.then k') v = (turing.to_partrec.step_normal (c_ᾰ.cons c_ᾰ_1) k v).then k'
k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal (c_ᾰ.comp c_ᾰ_1) (k.then k') v = (turing.to_partrec.step_normal (c_ᾰ.comp c_ᾰ_1) k v).then k'
k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal (c_ᾰ.case c_ᾰ_1) (k.then k') v = (turing.to_partrec.step_normal (c_ᾰ.case c_ᾰ_1) k v).then k'
k' : turing.to_partrec.cont,	c_ᾰ : turing.to_partrec.code,	c_ih : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c_ᾰ.fix (k.then k') v = (turing.to_partrec.step_normal c_ᾰ.fix k v).then k'
k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c_ᾰ (turing.to_partrec.cont.cons₁ c_ᾰ_1 v (k.then k')) v = (turing.to_partrec.step_normal c_ᾰ (turing.to_partrec.cont.cons₁ c_ᾰ_1 v k) v).then k'		case turing.to_partrec.code.comp	k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c_ᾰ_1 (turing.to_partrec.cont.comp c_ᾰ (k.then k')) v = (turing.to_partrec.step_normal c_ᾰ_1 (turing.to_partrec.cont.comp c_ᾰ k) v).then k'		case turing.to_partrec.code.case	k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ nat.elim ((turing.to_partrec.step_normal c_ᾰ k v.tail).then k') (λ (y : ℕ) (_x : turing.to_partrec.cfg), (turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)).then k') v.head = (nat.elim (turing.to_partrec.step_normal c_ᾰ k v.tail) (λ (y : ℕ) (_x : turing.to_partrec.cfg), turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)) v.head).then k'		case turing.to_partrec.code.fix	k' : turing.to_partrec.cont,	c_ᾰ : turing.to_partrec.code,	c_ih : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c_ᾰ (turing.to_partrec.cont.fix c_ᾰ (k.then k')) v = (turing.to_partrec.step_normal c_ᾰ (turing.to_partrec.cont.fix c_ᾰ k) v).then k'
k' : turing.to_partrec.cont,	c c' : turing.to_partrec.code,	ih : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c (k.then k') v = (turing.to_partrec.step_normal c k v).then k',	ih' : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c' (k.then k') v = (turing.to_partrec.step_normal c' k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c (turing.to_partrec.cont.cons₁ c' v (k.then k')) v = (turing.to_partrec.step_normal c (turing.to_partrec.cont.cons₁ c' v k) v).then k'
k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c_ᾰ_1 (turing.to_partrec.cont.comp c_ᾰ (k.then k')) v = (turing.to_partrec.step_normal c_ᾰ_1 (turing.to_partrec.cont.comp c_ᾰ k) v).then k'		case turing.to_partrec.code.case	k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ nat.elim ((turing.to_partrec.step_normal c_ᾰ k v.tail).then k') (λ (y : ℕ) (_x : turing.to_partrec.cfg), (turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)).then k') v.head = (nat.elim (turing.to_partrec.step_normal c_ᾰ k v.tail) (λ (y : ℕ) (_x : turing.to_partrec.cfg), turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)) v.head).then k'		case turing.to_partrec.code.fix	k' : turing.to_partrec.cont,	c_ᾰ : turing.to_partrec.code,	c_ih : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c_ᾰ (turing.to_partrec.cont.fix c_ᾰ (k.then k')) v = (turing.to_partrec.step_normal c_ᾰ (turing.to_partrec.cont.fix c_ᾰ k) v).then k'
k' : turing.to_partrec.cont,	c c' : turing.to_partrec.code,	ih : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c (k.then k') v = (turing.to_partrec.step_normal c k v).then k',	ih' : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c' (k.then k') v = (turing.to_partrec.step_normal c' k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c' (turing.to_partrec.cont.comp c (k.then k')) v = (turing.to_partrec.step_normal c' (turing.to_partrec.cont.comp c k) v).then k'
k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ nat.elim ((turing.to_partrec.step_normal c_ᾰ k v.tail).then k') (λ (y : ℕ) (_x : turing.to_partrec.cfg), (turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)).then k') v.head = (nat.elim (turing.to_partrec.step_normal c_ᾰ k v.tail) (λ (y : ℕ) (_x : turing.to_partrec.cfg), turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)) v.head).then k'
k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ nat.elim ((turing.to_partrec.step_normal c_ᾰ k v.tail).then k') (λ (y : ℕ) (_x : turing.to_partrec.cfg), (turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)).then k') 0 = (nat.elim (turing.to_partrec.step_normal c_ᾰ k v.tail) (λ (y : ℕ) (_x : turing.to_partrec.cfg), turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)) 0).then k'
k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ,	n : ℕ	⊢ nat.elim ((turing.to_partrec.step_normal c_ᾰ k v.tail).then k') (λ (y : ℕ) (_x : turing.to_partrec.cfg), (turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)).then k') n.succ = (nat.elim (turing.to_partrec.step_normal c_ᾰ k v.tail) (λ (y : ℕ) (_x : turing.to_partrec.cfg), turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)) n.succ).then k'
k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ nat.elim ((turing.to_partrec.step_normal c_ᾰ k v.tail).then k') (λ (y : ℕ) (_x : turing.to_partrec.cfg), (turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)).then k') v.head = (nat.elim (turing.to_partrec.step_normal c_ᾰ k v.tail) (λ (y : ℕ) (_x : turing.to_partrec.cfg), turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)) v.head).then k'		case turing.to_partrec.code.fix	k' : turing.to_partrec.cont,	c_ᾰ : turing.to_partrec.code,	c_ih : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c_ᾰ (turing.to_partrec.cont.fix c_ᾰ (k.then k')) v = (turing.to_partrec.step_normal c_ᾰ (turing.to_partrec.cont.fix c_ᾰ k) v).then k'
k' : turing.to_partrec.cont,	c_ᾰ c_ᾰ_1 : turing.to_partrec.code,	c_ih_ᾰ : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	c_ih_ᾰ_1 : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ_1 (k.then k') v = (turing.to_partrec.step_normal c_ᾰ_1 k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ nat.elim ((turing.to_partrec.step_normal c_ᾰ k v.tail).then k') (λ (y : ℕ) (_x : turing.to_partrec.cfg), (turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)).then k') v.head = (nat.elim (turing.to_partrec.step_normal c_ᾰ k v.tail) (λ (y : ℕ) (_x : turing.to_partrec.cfg), turing.to_partrec.step_normal c_ᾰ_1 k (y :: v.tail)) v.head).then k'
k' : turing.to_partrec.cont,	c_ᾰ : turing.to_partrec.code,	c_ih : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c_ᾰ (k.then k') v = (turing.to_partrec.step_normal c_ᾰ k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c_ᾰ (turing.to_partrec.cont.fix c_ᾰ (k.then k')) v = (turing.to_partrec.step_normal c_ᾰ (turing.to_partrec.cont.fix c_ᾰ k) v).then k'
k' : turing.to_partrec.cont,	c : turing.to_partrec.code,	ih : ∀ (k : turing.to_partrec.cont) (v : list ℕ), turing.to_partrec.step_normal c (k.then k') v = (turing.to_partrec.step_normal c k v).then k',	k : turing.to_partrec.cont,	v : list ℕ	⊢ turing.to_partrec.step_normal c (turing.to_partrec.cont.fix c (k.then k')) v = (turing.to_partrec.step_normal c (turing.to_partrec.cont.fix c k) v).then k'
Γ : Type ?,	_inst_1 : inhabited Γ,	l : turing.list_blank Γ	⊢ ∀ (a b : list Γ), turing.blank_extends a b → a.head = b.head
Γ : Type ?,	_inst_1 : inhabited Γ,	l : turing.list_blank Γ,	i : ℕ	⊢ list.nil.head = (list.nil ++ list.repeat (inhabited.default Γ) i).head
Γ : Type ?,	_inst_1 : inhabited Γ,	l : turing.list_blank Γ,	i : ℕ	⊢ list.nil.head = (list.nil ++ list.repeat (inhabited.default Γ) i).head
Γ : Type ?,	_inst_1 : inhabited Γ,	l : turing.list_blank Γ	⊢ list.nil.head = (list.nil ++ list.repeat (inhabited.default Γ) 0).head
Γ : Type ?,	_inst_1 : inhabited Γ,	l : turing.list_blank Γ,	i : ℕ	⊢ list.nil.head = (list.nil ++ list.repeat (inhabited.default Γ) i.succ).head
Γ : Type ?,	_inst_1 : inhabited Γ,	l : turing.list_blank Γ,	i : ℕ	⊢ list.nil.head = (list.nil ++ list.repeat (inhabited.default Γ) i).head		case list.cons	Γ : Type ?,	_inst_1 : inhabited Γ,	l : turing.list_blank Γ,	i : ℕ,	a_hd : Γ,	a_tl : list Γ	⊢ (a_hd :: a_tl).head = (a_hd :: a_tl ++ list.repeat (inhabited.default Γ) i).head
Γ : Type ?,	_inst_1 : inhabited Γ,	l : turing.list_blank Γ,	i : ℕ,	a_hd : Γ,	a_tl : list Γ	⊢ (a_hd :: a_tl).head = (a_hd :: a_tl ++ list.repeat (inhabited.default Γ) i).head
Γ : Type ?,	_inst_1 : inhabited Γ,	l : turing.list_blank Γ,	a : list Γ,	i : ℕ	⊢ a.head = (a ++ list.repeat (inhabited.default Γ) i).head
Γ : Type u_1,	Γ' : Type u_2,	_inst_1 : inhabited Γ,	_inst_2 : inhabited Γ',	f : turing.pointed_map Γ Γ',	l : turing.list_blank Γ,	n : ℕ,	l : list Γ	⊢ (turing.list_blank.map f (turing.list_blank.mk l)).nth n = ⇑f ((turing.list_blank.mk l).nth n)
Γ : Type u_1,	Γ' : Type u_2,	_inst_1 : inhabited Γ,	_inst_2 : inhabited Γ',	f : turing.pointed_map Γ Γ',	l : turing.list_blank Γ,	n : ℕ	⊢ ∀ (a : list Γ), (turing.list_blank.map f (turing.list_blank.mk a)).nth n = ⇑f ((turing.list_blank.mk a).nth n)
Γ : Type u_1,	Γ' : Type u_2,	_inst_1 : inhabited Γ,	_inst_2 : inhabited Γ',	f : turing.pointed_map Γ Γ',	l : turing.list_blank Γ,	n : ℕ,	l : list Γ	⊢ (option.map ⇑f option.none).iget = ⇑f option.none.iget
Γ : Type u_1,	Γ' : Type u_2,	_inst_1 : inhabited Γ,	_inst_2 : inhabited Γ',	f : turing.pointed_map Γ Γ',	l : turing.list_blank Γ,	n : ℕ,	l : list Γ	⊢ (option.map ⇑f option.none).iget = ⇑f option.none.iget		case option.some	Γ : Type u_1,	Γ' : Type u_2,	_inst_1 : inhabited Γ,	_inst_2 : inhabited Γ',	f : turing.pointed_map Γ Γ',	l : turing.list_blank Γ,	n : ℕ,	l : list Γ,	val : Γ	⊢ (option.map ⇑f (option.some val)).iget = ⇑f (option.some val).iget
Γ : Type u_1,	Γ' : Type u_2,	_inst_1 : inhabited Γ,	_inst_2 : inhabited Γ',	f : turing.pointed_map Γ Γ',	l : turing.list_blank Γ,	n : ℕ,	l : list Γ,	val : Γ	⊢ (option.map ⇑f (option.some val)).iget = ⇑f (option.some val).iget
Γ : Type u_1,	Γ' : Type u_2,	_inst_1 : inhabited Γ,	_inst_2 : inhabited Γ',	f : turing.pointed_map Γ Γ',	l : turing.list_blank Γ,	n : ℕ,	l : list Γ	⊢ (option.map ⇑f (l.nth n)).iget = ⇑f (l.nth n).iget
Γ : Type u_1,	_inst_1 : inhabited Γ,	T : turing.tape Γ	⊢ turing.tape.move turing.dir.left (turing.tape.move turing.dir.right T) = T
Γ : Type u_1,	_inst_1 : inhabited Γ,	T_head : Γ,	T_left T_right : turing.list_blank Γ	⊢ turing.tape.move turing.dir.left (turing.tape.move turing.dir.right {head := T_head, left := T_left, right := T_right}) = {head := T_head, left := T_left, right := T_right}
Γ : Type u_1,	_inst_1 : inhabited Γ,	T : turing.tape Γ	⊢ turing.tape.move turing.dir.left (turing.tape.move turing.dir.right T) = T
σ : Type u_1,	f : σ → option σ,	a b c : σ,	h₁ : turing.reaches₁ f a c,	h₂ : b ∈ f a	⊢ turing.reaches f b c
σ : Type u_1,	f : σ → option σ,	a b c : σ,	h₁ : turing.reaches₁ f a c,	h₂ hab : b ∈ f a,	hbc : relation.refl_trans_gen (λ (a b : σ), b ∈ f a) b c,	_x : b = b	⊢ turing.reaches f b c
σ : Type u_1,	f : σ → option σ,	a b c : σ,	h₁ : turing.reaches₁ f a c,	h₂ : b ∈ f a,	b' : σ,	hab : b' ∈ f a,	hbc : relation.refl_trans_gen (λ (a b : σ), b ∈ f a) b' c	⊢ turing.reaches f b c
⊢ is_lawful_bifunctor sum
⊢ is_lawful_bifunctor sum
⊢ is_lawful_bifunctor sum
⊢ ∀ {α : Type ?} {β : Type ?} (x : α ⊕ β), bifunctor.bimap id id x = x
⊢ ∀ {α₀ α₁ α₂ : Type ?} {β₀ β₁ β₂ : Type ?} (f : α₀ → α₁) (f' : α₁ → α₂) (g : β₀ → β₁) (g' : β₁ → β₂) (x : α₀ ⊕ β₀), bifunctor.bimap f' g' (bifunctor.bimap f g x) = bifunctor.bimap (f' ∘ f) (g' ∘ g) x
α : Type ?,	β : Type ?,	x : α ⊕ β	⊢ bifunctor.bimap id id x = x
α₀ α₁ α₂ : Type ?,	β₀ β₁ β₂ : Type ?,	f : α₀ → α₁,	f' : α₁ → α₂,	g : β₀ → β₁,	g' : β₁ → β₂,	x : α₀ ⊕ β₀	⊢ bifunctor.bimap f' g' (bifunctor.bimap f g x) = bifunctor.bimap (f' ∘ f) (g' ∘ g) x
α : Type ?,	β : Type ?,	x : α	⊢ bifunctor.bimap id id (sum.inl x) = sum.inl x
α : Type ?,	β : Type ?,	x : β	⊢ bifunctor.bimap id id (sum.inr x) = sum.inr x
α₀ α₁ α₂ : Type ?,	β₀ β₁ β₂ : Type ?,	f : α₀ → α₁,	f' : α₁ → α₂,	g : β₀ → β₁,	g' : β₁ → β₂,	x : α₀	⊢ bifunctor.bimap f' g' (bifunctor.bimap f g (sum.inl x)) = bifunctor.bimap (f' ∘ f) (g' ∘ g) (sum.inl x)
α₀ α₁ α₂ : Type ?,	β₀ β₁ β₂ : Type ?,	f : α₀ → α₁,	f' : α₁ → α₂,	g : β₀ → β₁,	g' : β₁ → β₂,	x : β₀	⊢ bifunctor.bimap f' g' (bifunctor.bimap f g (sum.inr x)) = bifunctor.bimap (f' ∘ f) (g' ∘ g) (sum.inr x)
⊢ is_lawful_bifunctor sum
F : Type u₀ → Type u₁ → Type u₂,	_inst_1 : bifunctor F,	_inst_2 : is_lawful_bifunctor F,	α : Type u₀	⊢ is_lawful_functor (F α)
F : Type u₀ → Type u₁ → Type u₂,	_inst_1 : bifunctor F,	_inst_2 : is_lawful_bifunctor F,	α : Type u₀	⊢ is_lawful_functor (F α)
F : Type u₀ → Type u₁ → Type u₂,	_inst_1 : bifunctor F,	_inst_2 : is_lawful_bifunctor F,	α : Type u₀	⊢ ∀ {α_1 : Type u₁} (x : F α α_1), id <$> x = x
F : Type u₀ → Type u₁ → Type u₂,	_inst_1 : bifunctor F,	_inst_2 : is_lawful_bifunctor F,	α : Type u₀	⊢ ∀ {α_1 β γ : Type u₁} (g : α_1 → β) (h : β → γ) (x : F α α_1), (h ∘ g) <$> x = h <$> g <$> x
F : Type u₀ → Type u₁ → Type u₂,	_inst_1 : bifunctor F,	_inst_2 : is_lawful_bifunctor F,	α : Type u₀,	α_1 : Type u₁,	x : F α α_1	⊢ id <$> x = x
F : Type u₀ → Type u₁ → Type u₂,	_inst_1 : bifunctor F,	_inst_2 : is_lawful_bifunctor F,	α : Type u₀,	α_1 β γ : Type u₁,	g : α_1 → β,	h : β → γ,	x : F α α_1	⊢ (h ∘ g) <$> x = h <$> g <$> x
F : Type u₀ → Type u₁ → Type u₂,	_inst_1 : bifunctor F,	_inst_2 : is_lawful_bifunctor F,	α : Type u₀	⊢ is_lawful_functor (F α)
α β : Type u,	m : Type u → Type u,	_inst_3 : monad m,	_inst_4 : is_lawful_monad m,	f : β → α → m α,	x : β,	x_1 : category_theory.Kleisli.mk (λ {α : Type u}, m α) α	⊢ (monoid.mfoldr.of_free_monoid f ∘ traversable.free.mk) x x_1 = (monoid.mfoldr.mk ∘ f) x x_1
α β : Type u,	m : Type u → Type u,	_inst_3 : monad m,	_inst_4 : is_lawful_monad m,	f : β → α → m α	⊢ monoid.mfoldr.of_free_monoid f ∘ traversable.free.mk = monoid.mfoldr.mk ∘ f
α β γ : Type u,	t : Type u → Type u,	_inst_1 : traversable t,	_inst_2 : is_lawful_traversable t,	m : Type u → Type u,	_inst_3 : monad m,	_inst_4 : is_lawful_monad m,	g : β → γ,	f : α → γ → m α,	a : α,	l : t β	⊢ traversable.mfoldl f a (g <$> l) = traversable.mfoldl (λ (x : α) (y : β), f x (g y)) a l
F : Type u → Type v,	α : Type u,	_inst_1 : functor F,	_inst_2 : is_lawful_functor F	⊢ functor.map id = id
F : Type u → Type v,	α : Type u,	_inst_1 : functor F,	_inst_2 : is_lawful_functor F	⊢ ∀ (x : F α), id <$> x = id x
F : Type u → Type v,	α : Type u,	_inst_1 : functor F,	_inst_2 : is_lawful_functor F	⊢ functor.map id = id
α : Type u_1,	β : α → Type u_2,	f : (Π (a : α), part (β a)) →ₘ Π (a : α), part (β a)	⊢ part.fix.approx ⇑f 0 ≤ part.fix.approx ⇑f 1		case nat.succ	α : Type u_1,	β : α → Type u_2,	f : (Π (a : α), part (β a)) →ₘ Π (a : α), part (β a),	i_n : ℕ,	i_ih : part.fix.approx ⇑f i_n ≤ part.fix.approx ⇑f i_n.succ	⊢ part.fix.approx ⇑f i_n.succ ≤ part.fix.approx ⇑f i_n.succ.succ
α : Type u_1,	β : α → Type u_2,	f : (Π (a : α), part (β a)) →ₘ Π (a : α), part (β a)	⊢ ⊥ ≤ ⇑f ⊥		case nat.succ	α : Type u_1,	β : α → Type u_2,	f : (Π (a : α), part (β a)) →ₘ Π (a : α), part (β a),	i_n : ℕ,	i_ih : part.fix.approx ⇑f i_n ≤ part.fix.approx ⇑f i_n.succ	⊢ part.fix.approx ⇑f i_n.succ ≤ part.fix.approx ⇑f i_n.succ.succ
α : Type u_1,	β : α → Type u_2,	f : (Π (a : α), part (β a)) →ₘ Π (a : α), part (β a),	i : ℕ	⊢ part.fix.approx ⇑f i ≤ part.fix.approx ⇑f i.succ
α : Type u_1,	β : α → Type u_2,	f : (Π (a : α), part (β a)) →ₘ Π (a : α), part (β a),	i_n : ℕ,	i_ih : part.fix.approx ⇑f i_n ≤ part.fix.approx ⇑f i_n.succ,	i : α	⊢ part.fix.approx ⇑f i_n.succ i ≤ part.fix.approx ⇑f i_n.succ.succ i
α : Type u_1,	β : α → Type u_2,	f : (Π (a : α), part (β a)) →ₘ Π (a : α), part (β a),	i_n : ℕ,	i_ih : part.fix.approx ⇑f i_n ≤ part.fix.approx ⇑f i_n.succ,	i : α	⊢ part.fix.approx ⇑f i_n ≤ part.fix.approx ⇑f i_n.succ
α : Type u_1,	β : α → Type u_2,	f : (Π (a : α), part (β a)) →ₘ Π (a : α), part (β a),	i_n : ℕ,	i_ih : part.fix.approx ⇑f i_n ≤ part.fix.approx ⇑f i_n.succ	⊢ part.fix.approx ⇑f i_n.succ ≤ part.fix.approx ⇑f i_n.succ.succ
x : ℕ,	b : bool	⊢ bitvec.add_lsb x b = 2 * x + cond b 1 0
b : bool,	h : decidable ↥b	⊢ decidable.to_bool ↥b = decidable.to_bool ↥b
b : bool,	h : decidable ↥b	⊢ decidable.to_bool ↥b = b
b : bool,	h : decidable ↥b	⊢ decidable.to_bool ↥b = b
h : decidable ↥bool.ff	⊢ decidable.to_bool ↥bool.ff = bool.ff
h : decidable ↥bool.tt	⊢ decidable.to_bool ↥bool.tt = bool.tt
α : Type u_1,	b : buffer α,	a : α,	i : ℕ,	h : i < b.size	⊢ i < (b.push_back a).size
α : Type u_1,	b : buffer α,	a : α,	i : ℕ,	h : i < b.size	⊢ (b.push_back a).size = b.size.succ
α : Type u_1,	a : α,	i b_fst : ℕ,	b_snd : array b_fst α,	h : i < buffer.size ⟨b_fst, b_snd⟩	⊢ (buffer.push_back ⟨b_fst, b_snd⟩ a).read ⟨i, _⟩ = buffer.read ⟨b_fst, b_snd⟩ ⟨i, h⟩
α : Type u_1,	a : α,	i b_fst : ℕ,	b_snd : array b_fst α,	h : i < buffer.size ⟨b_fst, b_snd⟩	⊢ i = ⟨i, h⟩.val
α : Type u_1,	b : buffer α,	a : α,	i : ℕ,	h : i < b.size	⊢ (b.push_back a).read ⟨i, _⟩ = b.read ⟨i, h⟩
α : Type u_1,	b : buffer α,	a : α	⊢ b.size < (b.push_back a).size
α : Type u_1,	a : α,	b_fst : ℕ,	b_snd : array b_fst α	⊢ (buffer.push_back ⟨b_fst, b_snd⟩ a).read ⟨buffer.size ⟨b_fst, b_snd⟩, _⟩ = a
α : Type u_1,	b : buffer α,	a : α	⊢ (b.push_back a).read ⟨b.size, _⟩ = a
α : Type ?,	_inst_1 : decidable_eq α	⊢ decidable_eq (buffer α)
α : Type,	p : parser α,	h : ¬p.bounded	⊢ ∃ (cb : char_buffer) (n n' : ℕ) (a : α), p cb n = parse_result.done n' a ∧ buffer.size cb ≤ n
α : Type,	p : parser α,	h : ∀ (cb : char_buffer) (n n' : ℕ) (a : α), p cb n = parse_result.done n' a → n < buffer.size cb	⊢ p.bounded
α : Type,	p : parser α,	h : ∀ (cb : char_buffer) (n n' : ℕ) (a : α), p cb n = parse_result.done n' a → n < buffer.size cb	⊢ ∀ {cb : char_buffer} {n : ℕ}, buffer.size cb ≤ n → (∃ (n' : ℕ) (err : dlist string), p cb n = parse_result.fail n' err)
α : Type,	p : parser α,	h : ∀ (cb : char_buffer) (n n' : ℕ) (a : α), p cb n = parse_result.done n' a → n < buffer.size cb,	cb : char_buffer,	n : ℕ,	hn : buffer.size cb ≤ n	⊢ ∃ (n' : ℕ) (err : dlist string), p cb n = parse_result.fail n' err
α : Type,	p : parser α,	h : ∀ (cb : char_buffer) (n n' : ℕ) (a : α), p cb n = parse_result.done n' a → n < buffer.size cb,	cb : char_buffer,	n : ℕ,	hn : buffer.size cb ≤ n,	pos : ℕ,	result : α,	hp : p cb n = parse_result.done pos result	⊢ ∃ (n' : ℕ) (err : dlist string), parse_result.done pos result = parse_result.fail n' err		case parse_result.fail	α : Type,	p : parser α,	h : ∀ (cb : char_buffer) (n n' : ℕ) (a : α), p cb n = parse_result.done n' a → n < buffer.size cb,	cb : char_buffer,	n : ℕ,	hn : buffer.size cb ≤ n,	pos : ℕ,	expected : dlist string,	hp : p cb n = parse_result.fail pos expected	⊢ ∃ (n' : ℕ) (err : dlist string), parse_result.fail pos expected = parse_result.fail n' err
α : Type,	p : parser α,	h : ∀ (cb : char_buffer) (n n' : ℕ) (a : α), p cb n = parse_result.done n' a → n < buffer.size cb,	cb : char_buffer,	n : ℕ,	hn : buffer.size cb ≤ n,	pos : ℕ,	result : α,	hp : p cb n = parse_result.done pos result	⊢ ∃ (n' : ℕ) (err : dlist string), parse_result.done pos result = parse_result.fail n' err
α : Type,	p : parser α,	h : ∀ (cb : char_buffer) (n n' : ℕ) (a : α), p cb n = parse_result.done n' a → n < buffer.size cb,	cb : char_buffer,	n : ℕ,	hn : buffer.size cb ≤ n,	pos : ℕ,	expected : dlist string,	hp : p cb n = parse_result.fail pos expected	⊢ ∃ (n' : ℕ) (err : dlist string), parse_result.fail pos expected = parse_result.fail n' err
α β : Type,	mmap'_of_unfailing : ∀ {l : list α} {f : α → parser β} [_inst_1 : ∀ (a : α), (f a).unfailing] [_inst_2 : ∀ (a : α), (f a).err_static], (list.mmap' f l).err_static,	a : α,	l : list α,	_x : α → parser β,	h : ∀ (a : α), (_x a).unfailing,	h' : ∀ (a : α), (_x a).err_static	⊢ (list.mmap' _x (a :: l)).err_static
α β : Type,	mmap'_of_unfailing : ∀ {l : list α} {f : α → parser β} [_inst_1 : ∀ (a : α), (f a).unfailing] [_inst_2 : ∀ (a : α), (f a).err_static], (list.mmap' f l).err_static,	a : α,	l : list α,	_x : α → parser β,	h : ∀ (a : α), (_x a).unfailing,	h' : ∀ (a : α), (_x a).err_static	⊢ (_x a).err_static		α β : Type,	mmap'_of_unfailing : ∀ {l : list α} {f : α → parser β} [_inst_1 : ∀ (a : α), (f a).unfailing] [_inst_2 : ∀ (a : α), (f a).err_static], (list.mmap' f l).err_static,	a : α,	l : list α,	_x : α → parser β,	h : ∀ (a : α), (_x a).unfailing,	h' : ∀ (a : α), (_x a).err_static	⊢ (list.mmap' _x l).unfailing
α β : Type,	mmap'_of_unfailing : ∀ {l : list α} {f : α → parser β} [_inst_1 : ∀ (a : α), (f a).unfailing] [_inst_2 : ∀ (a : α), (f a).err_static], (list.mmap' f l).err_static,	a : α,	l : list α,	_x : α → parser β,	h : ∀ (a : α), (_x a).unfailing,	h' : ∀ (a : α), (_x a).err_static	⊢ (_x a).err_static
α β : Type,	mmap'_of_unfailing : ∀ {l : list α} {f : α → parser β} [_inst_1 : ∀ (a : α), (f a).unfailing] [_inst_2 : ∀ (a : α), (f a).err_static], (list.mmap' f l).err_static,	a : α,	l : list α,	_x : α → parser β,	h : ∀ (a : α), (_x a).unfailing,	h' : ∀ (a : α), (_x a).err_static	⊢ (list.mmap' _x l).unfailing
α β : Type,	mmap'_of_unfailing : ∀ {l : list α} {f : α → parser β} [_inst_1 : ∀ (a : α), (f a).unfailing] [_inst_2 : ∀ (a : α), (f a).err_static], (list.mmap' f l).err_static,	a : α,	l : list α,	_x : α → parser β,	h : ∀ (a : α), (_x a).unfailing,	h' : ∀ (a : α), (_x a).err_static	⊢ ∀ (a : α), (_x a).unfailing
_x : char_buffer,	_x _x : ℕ,	_x : dlist string	⊢ parser.any_char _x _x = parse_result.fail _x _x → _x = _x
_x : char_buffer,	_x _x : ℕ,	_x : dlist string	⊢ (_x = dlist.empty ∧ buffer.size _x ≤ _x) ∧ _x = _x → _x = _x
α : Type,	F : parser α → parser α,	hF : ∀ (p : parser α), p.err_static → (F p).err_static,	cb : char_buffer,	n _x : ℕ,	_x : dlist string,	h : parser.fix F cb n = parse_result.fail _x _x,	_inst : (parser.fix_core (λ (p : parser α), F p) (buffer.size cb - n + 1)).err_static	⊢ n = _x
α : Type,	F : parser α → parser α,	hF : ∀ (p : parser α), p.err_static → (F p).err_static,	cb : char_buffer,	n _x : ℕ,	_x : dlist string,	_inst : (parser.fix_core (λ (p : parser α), F p) (buffer.size cb - n + 1)).err_static,	h : parser.fix_core F (buffer.size cb - n + 1) cb n = parse_result.fail _x _x	⊢ n = _x
α : Type,	F : parser α → parser α,	hF : ∀ (p : parser α), p.err_static → (F p).err_static,	cb : char_buffer,	n _x : ℕ,	_x : dlist string,	h : parser.fix F cb n = parse_result.fail _x _x	⊢ n = _x
α β : Type,	p : parser α,	f : α → parser β,	_inst_1 : p.step,	_inst_2 : ∀ (a : α), (f a).static,	_x : char_buffer,	_x _x : ℕ,	_x : β	⊢ (p >>= f) _x _x = parse_result.done _x _x → _x = _x + 1
α β : Type,	p : parser α,	f : α → parser β,	_inst_1 : p.step,	_inst_2 : ∀ (a : α), (f a).static,	_x : char_buffer,	_x _x : ℕ,	_x : β	⊢ (∃ (np : ℕ) (a : α), p _x _x = parse_result.done np a ∧ f a _x np = parse_result.done _x _x) → _x = _x + 1
α β : Type,	p : parser α,	f : α → parser β,	_inst_1 : p.step,	_inst_2 : ∀ (a : α), (f a).static,	_x : char_buffer,	_x _x : ℕ,	_x : β,	ᾰ_w : ℕ,	ᾰ_h_w : α,	hp : p _x _x = parse_result.done ᾰ_w ᾰ_h_w,	hf : f ᾰ_h_w _x ᾰ_w = parse_result.done _x _x	⊢ _x = _x + 1
α β : Type,	a : α,	f : α → parser β,	_inst_1 : (f a).step	⊢ (list.mmap' f [a]).step
α β : Type,	a : α,	f : α → parser β,	_inst_1 : (f a).step	⊢ (f a).step		α β : Type,	a : α,	f : α → parser β,	_inst_1 : (f a).step	⊢ (list.mmap' f list.nil).static
α β : Type,	a : α,	f : α → parser β,	_inst_1 : (f a).step	⊢ (f a).step
α β : Type,	a : α,	f : α → parser β,	_inst_1 : (f a).step	⊢ (list.mmap' f list.nil).static
α : Type,	_x : char_buffer,	_x _x : ℕ,	_x : α	⊢ failure _x _x = parse_result.done _x _x → _x = _x + 1
α : Type,	p q : parser α,	_inst_1 : p.step,	_inst_2 : q.step,	_x : char_buffer,	_x _x : ℕ,	_x : α	⊢ (p <|> q) _x _x = parse_result.done _x _x → _x = _x + 1
α : Type,	p q : parser α,	_inst_1 : p.step,	_inst_2 : q.step,	_x : char_buffer,	_x _x : ℕ,	_x : α	⊢ (p _x _x = parse_result.done _x _x ∨ q _x _x = parse_result.done _x _x ∧ ∃ (err : dlist string), p _x _x = parse_result.fail _x err) → _x = _x + 1
α : Type,	p q : parser α,	_inst_1 : p.step,	_inst_2 : q.step,	_x : char_buffer,	_x _x : ℕ,	_x : α	⊢ (p _x _x = parse_result.done _x _x ∨ q _x _x = parse_result.done _x _x ∧ ∃ (err : dlist string), p _x _x = parse_result.fail _x err) → _x = _x + 1
α : Type,	p q : parser α,	_inst_1 : p.step,	_inst_2 : q.step,	_x : char_buffer,	_x _x : ℕ,	_x : α,	h : p _x _x = parse_result.done _x _x	⊢ _x = _x + 1
α : Type,	p q : parser α,	_inst_1 : p.step,	_inst_2 : q.step,	_x : char_buffer,	_x _x : ℕ,	_x : α,	h : q _x _x = parse_result.done _x _x	⊢ _x = _x + 1
α β : Type,	p : parser α,	cb : char_buffer,	n n' : ℕ,	b : β,	f : α → parser β	⊢ (p >>= f) cb n = parse_result.done n' b ↔ ∃ (np : ℕ) (a : α), p cb n = parse_result.done np a ∧ f a cb np = parse_result.done n' b
α β : Type,	p : parser α,	cb : char_buffer,	n n' : ℕ,	b : β,	f : α → parser β,	pos : ℕ,	result : α,	hp : p cb n = parse_result.done pos result	⊢ (p >>= f) cb n = parse_result.done n' b ↔ ∃ (np : ℕ) (a : α), parse_result.done pos result = parse_result.done np a ∧ f a cb np = parse_result.done n' b
α β : Type,	p : parser α,	cb : char_buffer,	n n' : ℕ,	b : β,	f : α → parser β,	pos : ℕ,	expected : dlist string,	hp : p cb n = parse_result.fail pos expected	⊢ (p >>= f) cb n = parse_result.done n' b ↔ ∃ (np : ℕ) (a : α), parse_result.fail pos expected = parse_result.done np a ∧ f a cb np = parse_result.done n' b
α β : Type,	p : parser α,	cb : char_buffer,	n n' : ℕ,	b : β,	f : α → parser β	⊢ (p >>= f) cb n = parse_result.done n' b ↔ ∃ (np : ℕ) (a : α), p cb n = parse_result.done np a ∧ f a cb np = parse_result.done n' b
α β : Type,	cb : char_buffer,	n n' : ℕ,	f : α → parser β,	a : α,	l : list α,	b : β,	l' : list β	⊢ list.mmap f (a :: l) cb n = parse_result.done n' (b :: l') ↔ ∃ (np : ℕ), f a cb n = parse_result.done np b ∧ list.mmap f l cb np = parse_result.done n' l'
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p	⊢ parser.sat p cb n = parse_result.done n' c ↔ ∃ (hn : n < buffer.size cb), p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, hn⟩ = c
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb	⊢ parser.sat p cb n = parse_result.done n' c ↔ ∃ (hn : n < buffer.size cb), p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, hn⟩ = c
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : p (buffer.read cb ⟨n, hn⟩)	⊢ parser.sat p cb n = parse_result.done n' c ↔ ∃ (hn : n < buffer.size cb), p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, hn⟩ = c
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : p (buffer.read cb ⟨n, hn⟩)	⊢ n + 1 = n' ∧ buffer.read cb ⟨n, _⟩ = c ↔ p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, _⟩ = c
cb : char_buffer,	n : ℕ,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : p (buffer.read cb ⟨n, hn⟩)	⊢ p (buffer.read cb ⟨n, _⟩) ∧ n + 1 = n + 1 ∧ buffer.read cb ⟨n, _⟩ = buffer.read cb ⟨n, _⟩
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : p (buffer.read cb ⟨n, hn⟩)	⊢ n + 1 = n' ∧ buffer.read cb ⟨n, _⟩ = c → p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, _⟩ = c		cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : p (buffer.read cb ⟨n, hn⟩)	⊢ p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, _⟩ = c → n + 1 = n' ∧ buffer.read cb ⟨n, _⟩ = c
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : p (buffer.read cb ⟨n, hn⟩)	⊢ n + 1 = n' ∧ buffer.read cb ⟨n, _⟩ = c → p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, _⟩ = c
cb : char_buffer,	n : ℕ,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : p (buffer.read cb ⟨n, hn⟩)	⊢ n + 1 = n + 1 ∧ buffer.read cb ⟨n, _⟩ = buffer.read cb ⟨n, _⟩
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : p (buffer.read cb ⟨n, hn⟩)	⊢ parser.sat p cb n = parse_result.done n' c ↔ ∃ (hn : n < buffer.size cb), p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, hn⟩ = c		cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : ¬p (buffer.read cb ⟨n, hn⟩)	⊢ parser.sat p cb n = parse_result.done n' c ↔ ∃ (hn : n < buffer.size cb), p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, hn⟩ = c
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : p (buffer.read cb ⟨n, hn⟩)	⊢ p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, _⟩ = c → n + 1 = n' ∧ buffer.read cb ⟨n, _⟩ = c
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : ¬p (buffer.read cb ⟨n, hn⟩)	⊢ parser.sat p cb n = parse_result.done n' c ↔ ∃ (hn : n < buffer.size cb), p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, hn⟩ = c
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : ¬p (buffer.read cb ⟨n, hn⟩)	⊢ p c → n' = n + 1 → ¬buffer.read cb ⟨n, _⟩ = c
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb	⊢ parser.sat p cb n = parse_result.done n' c ↔ ∃ (hn : n < buffer.size cb), p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, hn⟩ = c		cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : ¬n < buffer.size cb	⊢ parser.sat p cb n = parse_result.done n' c ↔ ∃ (hn : n < buffer.size cb), p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, hn⟩ = c
cb : char_buffer,	n n' : ℕ,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : n < buffer.size cb,	hp : ¬p (buffer.read cb ⟨n, hn⟩),	H : p (buffer.read cb ⟨n, _⟩)	⊢ false
cb : char_buffer,	n n' : ℕ,	c : char,	p : char → Prop,	_inst_1 : decidable_pred p,	hn : ¬n < buffer.size cb	⊢ parser.sat p cb n = parse_result.done n' c ↔ ∃ (hn : n < buffer.size cb), p c ∧ n' = n + 1 ∧ buffer.read cb ⟨n, hn⟩ = c
cb : char_buffer,	n n' : ℕ,	u : unit,	s : string	⊢ parser.str s cb n = parse_result.done n' u ↔ n + s.length = n' ∧ s.to_list <+: list.drop n (buffer.to_list cb)
z : ℂ	⊢ ↑(z.im) = (z - ⇑complex.conj z) / (2 * complex.I)
z : ℂ	⊢ complex.abs z ≤ abs' z.re + abs' z.im
x y : ℝ	⊢ real.sinh (x + y) = real.sinh x * real.cosh y + real.cosh x * real.sinh y
x y : ℝ	⊢ ↑(real.sinh (x + y)) = ↑(real.sinh x * real.cosh y + real.cosh x * real.sinh y)
x y : ℝ	⊢ real.sinh (x + y) = real.sinh x * real.cosh y + real.cosh x * real.sinh y
x : ℝ	⊢ real.cosh (2 * x) = real.cosh x ^ 2 + real.sinh x ^ 2
x : ℝ	⊢ ↑(real.cosh (2 * x)) = ↑(real.cosh x ^ 2 + real.sinh x ^ 2)
x : ℝ	⊢ real.cosh (2 * x) = real.cosh x ^ 2 + real.sinh x ^ 2
x : ℂ	⊢ complex.sinh (2 * x) = 2 * complex.sinh x * complex.cosh x
x : ℂ	⊢ complex.sinh x * complex.cosh x + complex.cosh x * complex.sinh x = 2 * complex.sinh x * complex.cosh x
x : ℂ	⊢ complex.tan (x * complex.I) = complex.tanh x * complex.I
x y : ℂ	⊢ complex.sin (x - y) = complex.sin x * complex.cos y - complex.cos x * complex.sin y
x : ℝ	⊢ (complex.sin ↑x).im = 0
x : ℂ	⊢ complex.cos (2 * x) = 2 * complex.cos x ^ 2 - 1
x : ℂ	⊢ x + 2 * x = 3 * x
x : ℂ	⊢ complex.cos (3 * x) = 4 * complex.cos x ^ 3 - 3 * complex.cos x
x : ℂ,	h1 : x + 2 * x = 3 * x	⊢ complex.cos (3 * x) = 4 * complex.cos x ^ 3 - 3 * complex.cos x
x : ℂ,	h1 : x + 2 * x = 3 * x	⊢ complex.cos x * complex.cos (2 * x) - complex.sin x * complex.sin (2 * x) = 4 * complex.cos x ^ 3 - 3 * complex.cos x
x : ℂ,	h1 : x + 2 * x = 3 * x	⊢ complex.cos x * (2 * (complex.cos x * complex.cos x)) - complex.cos x - complex.sin x * (2 * complex.sin x * complex.cos x) = 4 * complex.cos x ^ 3 - 3 * complex.cos x
x : ℂ,	h1 : x + 2 * x = 3 * x	⊢ 4 * complex.cos x ^ 3 = 2 * complex.cos x * complex.cos x * complex.cos x + 2 * complex.cos x * complex.cos x ^ 2
x : ℂ,	h1 : x + 2 * x = 3 * x,	h2 : 4 * complex.cos x ^ 3 = 2 * complex.cos x * complex.cos x * complex.cos x + 2 * complex.cos x * complex.cos x ^ 2	⊢ complex.cos x * (2 * (complex.cos x * complex.cos x)) - complex.cos x - complex.sin x * (2 * complex.sin x * complex.cos x) = 4 * complex.cos x ^ 3 - 3 * complex.cos x
x : ℂ,	h1 : x + 2 * x = 3 * x,	h2 : 4 * complex.cos x ^ 3 = 2 * complex.cos x * complex.cos x * complex.cos x + 2 * complex.cos x * complex.cos x ^ 2	⊢ complex.cos x * (2 * (complex.cos x * complex.cos x)) - complex.cos x - complex.sin x * (2 * complex.sin x * complex.cos x) = 2 * complex.cos x * complex.cos x * complex.cos x + 2 * complex.cos x * (1 - complex.sin x ^ 2) - 3 * complex.cos x
x y : ℝ	⊢ real.sin (x + y) = real.sin x * real.cos y + real.cos x * real.sin y
x y : ℝ	⊢ ↑(real.sin (x + y)) = ↑(real.sin x * real.cos y + real.cos x * real.sin y)
x y : ℝ	⊢ real.sin (x + y) = real.sin x * real.cos y + real.cos x * real.sin y
x : ℝ	⊢ real.tan x = real.sin x / real.cos x
⊢ real.tan 0 = 0
⊢ 1 / 10 ^ 10 + 2244083 / 825552 < 13591409143 / 5000000000
K : Type u_1,	_inst_1 : is_R_or_C K,	z : K	⊢ ⇑is_R_or_C.re (bit0 z) = bit0 (⇑is_R_or_C.re z)
K : Type u_1,	_inst_1 : is_R_or_C K,	r : ℝ	⊢ ⇑is_R_or_C.re ↑(bit1 r) = ⇑is_R_or_C.re (bit1 ↑r) ∧ ⇑is_R_or_C.im ↑(bit1 r) = ⇑is_R_or_C.im (bit1 ↑r)
K : Type u_1,	_inst_1 : is_R_or_C K,	z : K	⊢ ⇑is_R_or_C.conj (bit0 z) = bit0 (⇑is_R_or_C.conj z)
K : Type u_1,	_inst_1 : is_R_or_C K,	r : ℝ,	z : K	⊢ ⇑is_R_or_C.conj (r • z) = r • ⇑is_R_or_C.conj z
K : Type u_1,	_inst_1 : is_R_or_C K,	r : ℝ,	z : K	⊢ ↑(⇑is_R_or_C.re (r • z)) - ↑(⇑is_R_or_C.im (r • z)) * is_R_or_C.I = r • (↑(⇑is_R_or_C.re z) - ↑(⇑is_R_or_C.im z) * is_R_or_C.I)
K : Type u_1,	_inst_1 : is_R_or_C K,	r : ℝ,	z : K	⊢ ↑r * ↑(⇑is_R_or_C.re z) - ↑r * ↑(⇑is_R_or_C.im z) * is_R_or_C.I = r • (↑(⇑is_R_or_C.re z) - ↑(⇑is_R_or_C.im z) * is_R_or_C.I)
K : Type u_1,	_inst_1 : is_R_or_C K,	r : ℝ,	z : K	⊢ ↑r * ↑(⇑is_R_or_C.re z) - ↑r * ↑(⇑is_R_or_C.im z) * is_R_or_C.I = r • ↑(⇑is_R_or_C.re z) - r • (↑(⇑is_R_or_C.im z) * is_R_or_C.I)
K : Type u_1,	_inst_1 : is_R_or_C K,	r : ℝ,	z : K	⊢ r • 1 * ⇑is_R_or_C.re z • 1 - r • 1 * ⇑is_R_or_C.im z • 1 * is_R_or_C.I = r • ⇑is_R_or_C.re z • 1 - r • (⇑is_R_or_C.im z • 1 * is_R_or_C.I)
K : Type u_1,	_inst_1 : is_R_or_C K,	z : K	⊢ z / is_R_or_C.I = -(z * is_R_or_C.I)
K : Type u_1,	_inst_1 : is_R_or_C K,	z : K,	h : is_R_or_C.I = 0	⊢ z / is_R_or_C.I = -(z * is_R_or_C.I)		K : Type u_1,	_inst_1 : is_R_or_C K,	z : K,	h : ¬is_R_or_C.I = 0	⊢ z / is_R_or_C.I = -(z * is_R_or_C.I)
K : Type u_1,	_inst_1 : is_R_or_C K,	z : K,	h : is_R_or_C.I = 0	⊢ z / is_R_or_C.I = -(z * is_R_or_C.I)
K : Type u_1,	_inst_1 : is_R_or_C K,	z : K,	h : ¬is_R_or_C.I = 0	⊢ z / is_R_or_C.I = -(z * is_R_or_C.I)
K : Type u_1,	_inst_1 : is_R_or_C K,	z : K	⊢ ∥⇑is_R_or_C.conj z∥ = ∥z∥
K : Type u_1,	_inst_1 : is_R_or_C K,	q : ℚ	⊢ ⇑is_R_or_C.re ↑q = ↑q
K : Type u_1,	_inst_1 : is_R_or_C K,	n : ℕ,	h : ↑n = 0	⊢ n = 0
z : ℂ	⊢ (λ (c : fin 2 → ℝ), ↑(c 0) + c 1 • complex.I) ((λ (z : ℂ), ![z.re, z.im]) z) = z
c : fin 2 → ℝ	⊢ (λ (z : ℂ), ![z.re, z.im]) ((λ (c : fin 2 → ℝ), ↑(c 0) + c 1 • complex.I) c) = c
c : fin 2 → ℝ,	i : fin 1.succ	⊢ (λ (z : ℂ), ![z.re, z.im]) ((λ (c : fin 2 → ℝ), ↑(c 0) + c 1 • complex.I) c) i = c i
c : fin 2 → ℝ,	i : fin 1.succ	⊢ (λ (z : ℂ), ![z.re, z.im]) ((λ (c : fin 2 → ℝ), ↑(c 0) + c 1 • complex.I) c) i = c i
c : fin 2 → ℝ	⊢ (λ (z : ℂ), ![z.re, z.im]) ((λ (c : fin 2 → ℝ), ↑(c 0) + c 1 • complex.I) c) 0 = c 0
c : fin 2 → ℝ	⊢ (λ (z : ℂ), ![z.re, z.im]) ((λ (c : fin 2 → ℝ), ↑(c 0) + c 1 • complex.I) c) 1 = c 1
z z' : ℂ	⊢ ![(z + z').re, (z + z').im] = ![z.re, z.im] + ![z'.re, z'.im]
c : ℝ,	z : ℂ	⊢ ![(c • z).re, (c • z).im] = ⇑(ring_hom.id ℝ) c • ![z.re, z.im]
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0	⊢ (Π₀ (i : ι), β₁ i) → (Π₀ (i : ι), β₂ i) → (Π₀ (i : ι), β i)
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι	⊢ i ∈ x.pre_support + y.pre_support ∨ f i (x.to_fun i) (y.to_fun i) = 0
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : i ∈ x.pre_support	⊢ i ∈ x.pre_support + y.pre_support
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : i ∈ x.pre_support	⊢ i ∈ x.pre_support ∨ i ∈ y.pre_support
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : i ∈ x.pre_support	⊢ i ∈ x.pre_support
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : i ∈ x.pre_support	⊢ i ∈ x.pre_support + y.pre_support ∨ f i (x.to_fun i) (y.to_fun i) = 0		case or.inr	ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : x.to_fun i = 0	⊢ i ∈ x.pre_support + y.pre_support ∨ f i (x.to_fun i) (y.to_fun i) = 0
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : i ∈ x.pre_support	⊢ i ∈ x.pre_support + y.pre_support ∨ f i (x.to_fun i) (y.to_fun i) = 0
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : x.to_fun i = 0	⊢ i ∈ x.pre_support + y.pre_support ∨ f i (x.to_fun i) (y.to_fun i) = 0
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : x.to_fun i = 0,	h2 : i ∈ y.pre_support	⊢ i ∈ x.pre_support + y.pre_support
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : x.to_fun i = 0,	h2 : i ∈ y.pre_support	⊢ i ∈ x.pre_support ∨ i ∈ y.pre_support
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : x.to_fun i = 0,	h2 : i ∈ y.pre_support	⊢ i ∈ y.pre_support
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : x.to_fun i = 0,	h2 : i ∈ y.pre_support	⊢ i ∈ x.pre_support + y.pre_support ∨ f i (x.to_fun i) (y.to_fun i) = 0		case or.inr, or.inr	ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : x.to_fun i = 0,	h2 : y.to_fun i = 0	⊢ i ∈ x.pre_support + y.pre_support ∨ f i (x.to_fun i) (y.to_fun i) = 0
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : x.to_fun i = 0,	h2 : i ∈ y.pre_support	⊢ i ∈ x.pre_support + y.pre_support ∨ f i (x.to_fun i) (y.to_fun i) = 0
ι : Type u,	γ : Type w,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), add_zero_class (β i),	_inst_2 : add_comm_monoid γ,	f : Π (i : ι), β i →+ γ,	i : ι	⊢ (⇑dfinsupp.lift_add_hom f).comp (dfinsupp.single_add_hom β i) = f i
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : x.to_fun i = 0,	h2 : y.to_fun i = 0	⊢ f i (x.to_fun i) (y.to_fun i) = 0
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι	⊢ i ∈ x.pre_support + y.pre_support ∨ f i (x.to_fun i) (y.to_fun i) = 0		ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0	⊢ (has_equiv.equiv ⇒ has_equiv.equiv ⇒ has_equiv.equiv) (λ (x : dfinsupp.pre ι (λ (i : ι), β₁ i)) (y : dfinsupp.pre ι (λ (i : ι), β₂ i)), {to_fun := λ (i : ι), f i (x.to_fun i) (y.to_fun i), pre_support := x.pre_support + y.pre_support, zero := λ (i : ι), ?m_1[x, y, i]}) (λ (x : dfinsupp.pre ι (λ (i : ι), β₁ i)) (y : dfinsupp.pre ι (λ (i : ι), β₂ i)), {to_fun := λ (i : ι), f i (x.to_fun i) (y.to_fun i), pre_support := x.pre_support + y.pre_support, zero := λ (i : ι), ?m_1[x, y, i]})
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x : dfinsupp.pre ι (λ (i : ι), β₁ i),	y : dfinsupp.pre ι (λ (i : ι), β₂ i),	i : ι,	h1 : x.to_fun i = 0,	h2 : y.to_fun i = 0	⊢ i ∈ x.pre_support + y.pre_support ∨ f i (x.to_fun i) (y.to_fun i) = 0
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0,	x₁ x₂ : dfinsupp.pre ι (λ (i : ι), β₁ i),	H1 : x₁ ≈ x₂,	y₁ y₂ : dfinsupp.pre ι (λ (i : ι), β₂ i),	H2 : y₁ ≈ y₂,	i : ι	⊢ ((λ (x : dfinsupp.pre ι (λ (i : ι), β₁ i)) (y : dfinsupp.pre ι (λ (i : ι), β₂ i)), {to_fun := λ (i : ι), f i (x.to_fun i) (y.to_fun i), pre_support := x.pre_support + y.pre_support, zero := _}) x₁ y₁).to_fun i = ((λ (x : dfinsupp.pre ι (λ (i : ι), β₁ i)) (y : dfinsupp.pre ι (λ (i : ι), β₂ i)), {to_fun := λ (i : ι), f i (x.to_fun i) (y.to_fun i), pre_support := x.pre_support + y.pre_support, zero := _}) x₂ y₂).to_fun i
ι : Type u,	β : ι → Type v,	β₁ : ι → Type v₁,	β₂ : ι → Type v₂,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι), has_zero (β₁ i),	_inst_3 : Π (i : ι), has_zero (β₂ i),	f : Π (i : ι), β₁ i → β₂ i → β i,	hf : ∀ (i : ι), f i 0 0 = 0	⊢ (has_equiv.equiv ⇒ has_equiv.equiv ⇒ has_equiv.equiv) (λ (x : dfinsupp.pre ι (λ (i : ι), β₁ i)) (y : dfinsupp.pre ι (λ (i : ι), β₂ i)), {to_fun := λ (i : ι), f i (x.to_fun i) (y.to_fun i), pre_support := x.pre_support + y.pre_support, zero := _}) (λ (x : dfinsupp.pre ι (λ (i : ι), β₁ i)) (y : dfinsupp.pre ι (λ (i : ι), β₂ i)), {to_fun := λ (i : ι), f i (x.to_fun i) (y.to_fun i), pre_support := x.pre_support + y.pre_support, zero := _})
ι : Type u,	γ : Type w,	β : ι → Type v,	_inst_1 : monoid γ,	_inst_2 : Π (i : ι), add_monoid (β i),	_inst_3 : Π (i : ι), distrib_mul_action γ (β i),	c : γ,	i : ι	⊢ ⇑(c • 0) i = ⇑0 i
ι : Type u,	γ : Type w,	β : ι → Type v,	_inst_1 : monoid γ,	_inst_2 : Π (i : ι), add_monoid (β i),	_inst_3 : Π (i : ι), distrib_mul_action γ (β i),	c : γ,	x y : Π₀ (i : ι), β i,	i : ι	⊢ ⇑(c • (x + y)) i = ⇑(c • x + c • y) i
ι : Type u,	γ : Type w,	β : ι → Type v,	_inst_1 : monoid γ,	_inst_2 : Π (i : ι), add_monoid (β i),	_inst_3 : Π (i : ι), distrib_mul_action γ (β i),	x : Π₀ (i : ι), β i,	i : ι	⊢ ⇑(1 • x) i = ⇑x i
ι : Type u,	γ : Type w,	β : ι → Type v,	_inst_1 : monoid γ,	_inst_2 : Π (i : ι), add_monoid (β i),	_inst_3 : Π (i : ι), distrib_mul_action γ (β i),	r s : γ,	x : Π₀ (i : ι), β i,	i : ι	⊢ ⇑((r * s) • x) i = ⇑(r • s • x) i
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i)	⊢ ∀ (i_1 : ι), i_1 ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b i_1 = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	j : ι	⊢ j ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b j = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i)	⊢ i ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b i = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	hb : b = 0	⊢ i ∈ x.pre_support.erase i ∨ function.update x.to_fun i b i = 0		ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	hb : ¬b = 0	⊢ i ∈ i ::ₘ x.pre_support ∨ function.update x.to_fun i b i = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	hb : b = 0	⊢ i ∈ x.pre_support.erase i ∨ function.update x.to_fun i b i = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i)	⊢ i ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b i = 0		ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	j : ι,	hi : i ≠ j	⊢ j ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b j = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	hb : ¬b = 0	⊢ i ∈ i ::ₘ x.pre_support ∨ function.update x.to_fun i b i = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	j : ι,	hi : i ≠ j	⊢ j ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b j = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	j : ι,	hi : i ≠ j,	hj : j ∈ x.pre_support	⊢ j ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b j = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	j : ι,	hi : i ≠ j,	hj : j ∈ x.pre_support	⊢ j ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b j = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	j : ι,	hi : i ≠ j,	hj : j ∈ x.pre_support	⊢ j ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b j = 0		case or.inr	ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	j : ι,	hi : i ≠ j,	hj : x.to_fun j = 0	⊢ j ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b j = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	j : ι,	hi : i ≠ j,	hj : j ∈ x.pre_support,	h : b = 0	⊢ j ∈ x.pre_support.erase i ∨ function.update x.to_fun i b j = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	j : ι,	hi : i ≠ j,	hj : j ∈ x.pre_support,	h : ¬b = 0	⊢ j ∈ i ::ₘ x.pre_support ∨ function.update x.to_fun i b j = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x : dfinsupp.pre ι (λ (i : ι), β i),	j : ι,	hi : i ≠ j,	hj : x.to_fun j = 0	⊢ j ∈ ite (b = 0) (x.pre_support.erase i) (i ::ₘ x.pre_support) ∨ function.update x.to_fun i b j = 0
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	f : Π₀ (i : ι), β i,	i : ι,	b : β i,	_inst_2 : decidable (b = 0),	x y : dfinsupp.pre ι (λ (i : ι), β i),	h : x ≈ y,	j : ι	⊢ function.update x.to_fun i b j = function.update y.to_fun i b j
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι) (x : β i), decidable (x ≠ 0),	i : ι,	b : β i,	hb : b ≠ 0,	j : ι	⊢ j ∈ (dfinsupp.single i b).support ↔ j ∈ {i}
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι) (x : β i), decidable (x ≠ 0),	i : ι,	b : β i,	hb : b ≠ 0	⊢ (dfinsupp.single i b).support = {i}
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι) (x : β i), decidable (x ≠ 0),	i : ι,	b : β i,	hb : b ≠ 0	⊢ i ∈ (dfinsupp.single i b).support ↔ i ∈ {i}
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι) (x : β i), decidable (x ≠ 0),	i : ι,	b : β i,	hb : b ≠ 0,	j : ι,	h : i = j	⊢ j ∈ (dfinsupp.single i b).support ↔ j ∈ {i}		ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι) (x : β i), decidable (x ≠ 0),	i : ι,	b : β i,	hb : b ≠ 0,	j : ι,	h : ¬i = j	⊢ j ∈ (dfinsupp.single i b).support ↔ j ∈ {i}
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι) (x : β i), decidable (x ≠ 0),	i : ι,	b : β i,	hb : b ≠ 0,	j : ι,	h : i = j	⊢ j ∈ (dfinsupp.single i b).support ↔ j ∈ {i}
ι : Type u,	β : ι → Type v,	dec : decidable_eq ι,	_inst_1 : Π (i : ι), has_zero (β i),	_inst_2 : Π (i : ι) (x : β i), decidable (x ≠ 0),	i : ι,	b : β i,	hb : b ≠ 0,	j : ι,	h : ¬i = j	⊢ j ∈ (dfinsupp.single i b).support ↔ j ∈ {i}
α₁ : Type u_1,	β₁ : Type u_2,	_inst_1 : decidable_eq α₁,	e : equiv.perm β₁,	a a' : α₁,	b : β₁,	h : a' ≠ a	⊢ ⇑(equiv.perm.prod_extend_right a e) (a', b) = (a', b)
α₁ : Type u_1,	β₁ : Type u_2,	_inst_1 : decidable_eq α₁,	e : equiv.perm β₁,	a a' : α₁,	b : β₁,	h : ⇑(equiv.perm.prod_extend_right a e) (a', b) ≠ (a', b)	⊢ a' = a
α : Type ?,	β : Type ?,	e : α ≃ β,	l : list α	⊢ list.map ⇑(e.symm) (list.map ⇑e l) = l
α : Type ?,	β : Type ?,	e : α ≃ β,	l : list β	⊢ list.map ⇑e (list.map ⇑(e.symm) l) = l
α : Sort u,	β : Sort v,	p : α → Prop,	q : β → Prop,	e : α ≃ β,	h : ∀ (a : α), p a ↔ q (⇑e a),	a : β	⊢ q a ↔ p (⇑(e.symm) a)
α : Sort u,	β : Sort v,	p : α → Prop,	q : β → Prop,	e : α ≃ β,	h : ∀ (a : α), p a ↔ q (⇑e a),	a : β	⊢ a = ⇑e (⇑(e.symm) a)
α : Type u_1,	β : Type u_2,	f : α → β,	hf : function.injective f,	u s : set α	⊢ (λ (x : ↥(f '' s)), ↑(⇑((equiv.set.image f s hf).symm) x)) ⁻¹' u = coe ⁻¹' (f '' u)
α : Type u_1,	β : Type u_2,	f : α → β,	hf : function.injective f,	u s : set α,	a : α,	has : a ∈ s	⊢ ⟨f a, _⟩ ∈ (λ (x : ↥(f '' s)), ↑(⇑((equiv.set.image f s hf).symm) x)) ⁻¹' u ↔ ⟨f a, _⟩ ∈ coe ⁻¹' (f '' u)
α : Type u_1,	β : Type u_2,	f : α → β,	hf : function.injective f,	u s : set α,	a : α,	has : a ∈ s,	this : ∀ (h : ∃ (a' : α), a' ∈ s ∧ a' = a), classical.some h = a	⊢ ⟨f a, _⟩ ∈ (λ (x : ↥(f '' s)), ↑(⇑((equiv.set.image f s hf).symm) x)) ⁻¹' u ↔ ⟨f a, _⟩ ∈ coe ⁻¹' (f '' u)
α : Type u_1,	β : Type u_2,	f : α → β,	f_inv : β → α,	hf : function.left_inverse f_inv f,	x : α	⊢ ↑(⇑(equiv.of_left_inverse' f f_inv hf) x) = ↑(⇑(equiv.of_injective f _) x)
α : Type u_1,	β : Type u_2,	f : α → β,	f_inv : β → α,	hf : function.left_inverse f_inv f	⊢ equiv.of_left_inverse' f f_inv hf = equiv.of_injective f _
α : Sort u,	_inst_1 : decidable_eq α,	i j a : α	⊢ ⇑(equiv.swap i j) (⇑(equiv.swap i j) a) = a
α : Sort u,	β : Sort v,	p : α → Prop,	f : α ≃ β,	x : α	⊢ p x ↔ p (⇑(f.symm) (⇑f x))
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p	⊢ function.left_inverse (λ (a : α), dite (p a) (λ (h : p a), sum.inl ⟨a, h⟩) (λ (h : ¬p a), sum.inr ⟨a, h⟩)) (sum.elim coe coe)
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p	⊢ function.left_inverse (λ (a : α), dite (p a) (λ (h : p a), sum.inl ⟨a, h⟩) (λ (h : ¬p a), sum.inr ⟨a, h⟩)) (sum.elim coe coe)
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p	⊢ function.left_inverse (λ (a : α), dite (p a) (λ (h : p a), sum.inl ⟨a, h⟩) (λ (h : ¬p a), sum.inr ⟨a, h⟩)) (sum.elim coe coe)
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p,	x : α,	hx : p x	⊢ (λ (a : α), dite (p a) (λ (h : p a), sum.inl ⟨a, h⟩) (λ (h : ¬p a), sum.inr ⟨a, h⟩)) (sum.elim coe coe (sum.inl ⟨x, hx⟩)) = sum.inl ⟨x, hx⟩
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p,	x : α,	hx : ¬p x	⊢ (λ (a : α), dite (p a) (λ (h : p a), sum.inl ⟨a, h⟩) (λ (h : ¬p a), sum.inr ⟨a, h⟩)) (sum.elim coe coe (sum.inr ⟨x, hx⟩)) = sum.inr ⟨x, hx⟩
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p,	x : α,	hx : p x	⊢ dite (p x) (λ (h : p x), sum.inl ⟨x, h⟩) (λ (h : ¬p x), sum.inr ⟨x, h⟩) = sum.inl ⟨x, hx⟩
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p,	x : α,	hx : ¬p x	⊢ dite (p x) (λ (h : p x), sum.inl ⟨x, h⟩) (λ (h : ¬p x), sum.inr ⟨x, h⟩) = sum.inr ⟨x, hx⟩
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p,	a : α	⊢ sum.elim coe coe ((λ (a : α), dite (p a) (λ (h : p a), sum.inl ⟨a, h⟩) (λ (h : ¬p a), sum.inr ⟨a, h⟩)) a) = a
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p,	a : α	⊢ sum.elim coe coe (dite (p a) (λ (h : p a), sum.inl ⟨a, h⟩) (λ (h : ¬p a), sum.inr ⟨a, h⟩)) = a
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p,	a : α	⊢ sum.elim coe coe (dite (p a) (λ (h : p a), sum.inl ⟨a, h⟩) (λ (h : ¬p a), sum.inr ⟨a, h⟩)) = a
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p,	a : α,	h : p a	⊢ sum.elim coe coe (sum.inl ⟨a, h⟩) = a
α : Type ?,	p : α → Prop,	_inst_1 : decidable_pred p,	a : α,	h : ¬p a	⊢ sum.elim coe coe (sum.inr ⟨a, h⟩) = a
α : Sort u,	β : Sort v,	coe_fn_injective : function.injective coe_fn,	f₁ : α → β,	g₁ : β → α,	l₁ : function.left_inverse g₁ f₁,	r₁ : function.right_inverse g₁ f₁,	f₂ : α → β,	g₂ : β → α,	l₂ : function.left_inverse g₂ f₂,	r₂ : function.right_inverse g₂ f₂,	h : ⇑{to_fun := f₁, inv_fun := g₁, left_inv := l₁, right_inv := r₁} = ⇑{to_fun := f₂, inv_fun := g₂, left_inv := l₂, right_inv := r₂},	this : f₁ = f₂,	this : g₁ = g₂	⊢ {to_fun := f₁, inv_fun := g₁, left_inv := l₁, right_inv := r₁} = {to_fun := f₂, inv_fun := g₂, left_inv := l₂, right_inv := r₂}
α : Type u_1,	β : Type u_2,	_inst_1 : encodable α,	_inst_2 : inhabited α,	r : β → β → Prop,	f : α → β,	hf : directed r f,	n : ℕ	⊢ r (f (directed.sequence f hf n)) (f (directed.sequence f hf (n + 1)))
α : Type u_1,	β : Type u_2,	_inst_1 : encodable α,	_inst_2 : inhabited α,	r : β → β → Prop,	f : α → β,	hf : directed r f,	n : ℕ	⊢ r (f (directed.sequence f hf n)) (f (directed.sequence._match_1 f hf (directed.sequence f hf n) (encodable.decode α n)))
α : Type u_1,	β : Type u_2,	_inst_1 : encodable α,	_inst_2 : inhabited α,	r : β → β → Prop,	f : α → β,	hf : directed r f,	n : ℕ,	p : α,	eq : directed.sequence f hf n = p	⊢ r (f p) (f (directed.sequence._match_1 f hf p (encodable.decode α n)))
α : Type u_1,	β : Type u_2,	_inst_1 : encodable α,	_inst_2 : inhabited α,	r : β → β → Prop,	f : α → β,	hf : directed r f,	n : ℕ,	p : α,	eq : directed.sequence f hf n = p,	h : encodable.decode α n = option.none	⊢ r (f p) (f (directed.sequence._match_1 f hf p option.none))		case option.some	α : Type u_1,	β : Type u_2,	_inst_1 : encodable α,	_inst_2 : inhabited α,	r : β → β → Prop,	f : α → β,	hf : directed r f,	n : ℕ,	p : α,	eq : directed.sequence f hf n = p,	a : α,	h : encodable.decode α n = option.some a	⊢ r (f p) (f (directed.sequence._match_1 f hf p (option.some a)))
α : Type u_1,	β : Type u_2,	_inst_1 : encodable α,	_inst_2 : inhabited α,	r : β → β → Prop,	f : α → β,	hf : directed r f,	n : ℕ,	p : α,	eq : directed.sequence f hf n = p,	h : encodable.decode α n = option.none	⊢ r (f p) (f (directed.sequence._match_1 f hf p option.none))
α : Type u_1,	β : Type u_2,	_inst_1 : encodable α,	_inst_2 : inhabited α,	r : β → β → Prop,	f : α → β,	hf : directed r f,	n : ℕ,	p : α,	eq : directed.sequence f hf n = p,	a : α,	h : encodable.decode α n = option.some a	⊢ r (f p) (f (directed.sequence._match_1 f hf p (option.some a)))
n : ℕ	⊢ ⇑(fin_rotate (n + 1)) ⟨n, _⟩ = ⟨0, _⟩
n : ℕ	⊢ ⇑(fin_congr _) (⇑fin_add_flip ⟨n, _⟩) = 0
n : ℕ	⊢ ⇑(fin_congr _) ⟨n - n, _⟩ = 0		n : ℕ	⊢ n ≤ n
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α	⊢ fin.snoc v a = λ (i : fin (n + 1)), fin.cons a v (⇑(fin_rotate (n + 1)) i)
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1	⊢ fin.snoc v a ⟨i, h⟩ = fin.cons a v (⇑(fin_rotate (n + 1)) ⟨i, h⟩)
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1,	h' : i < n	⊢ fin.snoc v a ⟨i, h⟩ = fin.cons a v (⇑(fin_rotate (n + 1)) ⟨i, h⟩)
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1,	h' : i < n	⊢ fin.snoc v a ⟨i, h⟩ = fin.cons a v (⇑(fin_rotate (n + 1)) ⟨i, h⟩)		n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1,	h' : ¬i < n	⊢ fin.snoc v a ⟨i, h⟩ = fin.cons a v (⇑(fin_rotate (n + 1)) ⟨i, h⟩)
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1,	h' : i < n	⊢ cast _ (v (fin.cast_lt ⟨i, h⟩ h')) = (λ (j : fin (n + 1)), fin.cases a v j) ⟨i + 1, _⟩
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1,	h' : ¬i < n	⊢ fin.snoc v a ⟨i, h⟩ = fin.cons a v (⇑(fin_rotate (n + 1)) ⟨i, h⟩)
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1,	h' : n ≤ i	⊢ n = i
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1,	h' : ¬i < n	⊢ n = i		n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1,	h' : ¬i < n,	h'' : n = i	⊢ fin.snoc v a ⟨i, h⟩ = fin.cons a v (⇑(fin_rotate (n + 1)) ⟨i, h⟩)
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1,	h' : ¬i < n	⊢ n = i
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	i : ℕ,	h : i < n + 1,	h' : ¬i < n,	h'' : n = i	⊢ fin.snoc v a ⟨i, h⟩ = fin.cons a v (⇑(fin_rotate (n + 1)) ⟨i, h⟩)
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	h : n < n + 1,	h' : ¬n < n	⊢ fin.snoc v a ⟨n, h⟩ = fin.cons a v (⇑(fin_rotate (n + 1)) ⟨n, h⟩)
n : ℕ,	α : Type u_1,	v : fin n → α,	a : α,	h : n < n + 1,	h' : ¬n < n	⊢ cast _ a = (λ (j : fin (n + 1)), fin.cases a v j) ⟨0, _⟩
u : list unit	⊢ (list.repeat () u.length).length = u.length
α : Type u_1,	β : Type u_2,	γ : Type u_3,	e e' : local_equiv α β,	f f' : local_equiv β γ,	he : e ≈ e',	hf : f ≈ f'	⊢ e.trans f ≈ e'.trans f'
α : Type u_1,	β : Type u_2,	γ : Type u_3,	e e' : local_equiv α β,	f f' : local_equiv β γ,	he : e ≈ e',	hf : f ≈ f'	⊢ (e.trans f).source = (e'.trans f').source
α : Type u_1,	β : Type u_2,	γ : Type u_3,	e e' : local_equiv α β,	f f' : local_equiv β γ,	he : e ≈ e',	hf : f ≈ f'	⊢ ⇑(e.symm) '' (e.target ∩ f.source) = ⇑(e'.symm) '' (e.target ∩ f.source)
α : Type u_1,	β : Type u_2,	γ : Type u_3,	e e' : local_equiv α β,	f f' : local_equiv β γ,	he : e ≈ e',	hf : f ≈ f'	⊢ (e.trans f).source = (e'.trans f').source		α : Type u_1,	β : Type u_2,	γ : Type u_3,	e e' : local_equiv α β,	f f' : local_equiv β γ,	he : e ≈ e',	hf : f ≈ f'	⊢ set.eq_on ⇑(e.trans f) ⇑(e'.trans f') (e.trans f).source
α : Type u_1,	β : Type u_2,	γ : Type u_3,	e e' : local_equiv α β,	f f' : local_equiv β γ,	he : e ≈ e',	hf : f ≈ f'	⊢ set.eq_on ⇑(e.trans f) ⇑(e'.trans f') (e.trans f).source
α : Type u_1,	β : Type u_2,	γ : Type u_3,	e e' : local_equiv α β,	f f' : local_equiv β γ,	he : e ≈ e',	hf : f ≈ f',	x : α,	hx : x ∈ (e.trans f).source	⊢ ⇑(e.trans f) x = ⇑(e'.trans f') x
α : Type u_1,	β : Type u_2,	γ : Type u_3,	e e' : local_equiv α β,	f f' : local_equiv β γ,	he : e ≈ e',	hf : f ≈ f',	x : α,	hx : x ∈ e.source ∩ ⇑e ⁻¹' f.source	⊢ ⇑(e.trans f) x = ⇑(e'.trans f') x
α : Type u_1,	β : Type u_2,	e e' : local_equiv α β,	he : e ≈ e',	s : set β	⊢ e.source ∩ ⇑e ⁻¹' s = e'.source ∩ ⇑e' ⁻¹' s
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	η : Type u_5,	ε : Type u_6,	e : local_equiv α β,	f : local_equiv β γ,	e' : local_equiv δ η,	f' : local_equiv η ε,	x : α × δ	⊢ (⇑((e.prod e').trans (f.prod f')) x).fst = (⇑((e.trans f).prod (e'.trans f')) x).fst
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	η : Type u_5,	ε : Type u_6,	e : local_equiv α β,	f : local_equiv β γ,	e' : local_equiv δ η,	f' : local_equiv η ε,	x : α × δ	⊢ (⇑((e.prod e').trans (f.prod f')) x).snd = (⇑((e.trans f).prod (e'.trans f')) x).snd
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	η : Type u_5,	ε : Type u_6,	e : local_equiv α β,	f : local_equiv β γ,	e' : local_equiv δ η,	f' : local_equiv η ε	⊢ ∀ (x : γ × ε), ⇑(((e.prod e').trans (f.prod f')).symm) x = ⇑(((e.trans f).prod (e'.trans f')).symm) x
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	η : Type u_5,	ε : Type u_6,	e : local_equiv α β,	f : local_equiv β γ,	e' : local_equiv δ η,	f' : local_equiv η ε	⊢ ((e.prod e').trans (f.prod f')).source = ((e.trans f).prod (e'.trans f')).source
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	η : Type u_5,	ε : Type u_6,	e : local_equiv α β,	f : local_equiv β γ,	e' : local_equiv δ η,	f' : local_equiv η ε	⊢ ∀ (a : α) (b : δ), (a ∈ e.source ∧ b ∈ e'.source) ∧ ⇑e a ∈ f.source ∧ ⇑e' b ∈ f'.source ↔ (a ∈ e.source ∧ ⇑e a ∈ f.source) ∧ b ∈ e'.source ∧ ⇑e' b ∈ f'.source
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	η : Type u_5,	ε : Type u_6,	e : local_equiv α β,	f : local_equiv β γ,	e' : local_equiv δ η,	f' : local_equiv η ε	⊢ (e.prod e').trans (f.prod f') = (e.trans f).prod (e'.trans f')
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	η : Type u_5,	ε : Type u_6,	e : local_equiv α β,	f : local_equiv β γ,	e' : local_equiv δ η,	f' : local_equiv η ε	⊢ (e.prod e').trans (f.prod f') = (e.trans f).prod (e'.trans f')
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	η : Type u_5,	ε : Type u_6,	e : local_equiv α β,	f : local_equiv β γ,	e' : local_equiv δ η,	f' : local_equiv η ε	⊢ (e.prod e').trans (f.prod f') = (e.trans f).prod (e'.trans f')
A : Type ?,	B : Type ?,	_inst_1 : monoid A,	_inst_2 : monoid B,	f : A →* B,	g : B → A,	h₁ : function.left_inverse g ⇑f,	h₂ : function.right_inverse g ⇑f	⊢ g 1 = 1
R : Type u_1,	S : Type u_2,	_inst_1 : non_assoc_semiring R,	_inst_2 : non_assoc_semiring S,	e : R ≃+* S,	x : R	⊢ ⇑(e.symm.to_ring_hom.comp e.to_ring_hom) x = ⇑(ring_hom.id R) x
R : Type u_1,	S : Type u_2,	_inst_1 : non_assoc_semiring R,	_inst_2 : non_assoc_semiring S,	e : R ≃+* S	⊢ e.symm.to_ring_hom.comp e.to_ring_hom = ring_hom.id R
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ division_ring α
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ division_ring α
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ division_ring α
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ division_ring α
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ ⇑e 0 = 0
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ ⇑e 1 = 1
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ ∀ (x y : α), ⇑e (x + y) = ⇑e x + ⇑e y
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ ∀ (x y : α), ⇑e (x * y) = ⇑e x * ⇑e y
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ ∀ (x : α), ⇑e (-x) = -⇑e x
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ ∀ (x y : α), ⇑e (x - y) = ⇑e x - ⇑e y
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ ∀ (x : α), ⇑e x⁻¹ = (⇑e x)⁻¹
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ ∀ (x y : α), ⇑e (x / y) = ⇑e x / ⇑e y
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ division_ring α
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ ⇑e 0 = 0
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div	⊢ ⇑e 1 = 1
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div,	x y : α	⊢ ⇑e (x + y) = ⇑e x + ⇑e y
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div,	x y : α	⊢ ⇑e (x * y) = ⇑e x * ⇑e y
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div,	x : α	⊢ ⇑e (-x) = -⇑e x
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div,	x y : α	⊢ ⇑e (x - y) = ⇑e x - ⇑e y
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div,	x : α	⊢ ⇑e x⁻¹ = (⇑e x)⁻¹
α : Type u,	β : Type v,	e : α ≃ β,	_inst_1 : division_ring β,	zero : has_zero α := e.has_zero,	add : has_add α := e.has_add,	one : has_one α := e.has_one,	mul : has_mul α := e.has_mul,	neg : has_neg α := e.has_neg,	sub : has_sub α := e.has_sub,	inv : has_inv α := e.has_inv,	div : has_div α := e.has_div,	x y : α	⊢ ⇑e (x / y) = ⇑e x / ⇑e y
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b	⊢ (λ (p : fin n), p.pred_above i) a ≤ (λ (p : fin n), p.pred_above i) b
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b	⊢ dite (⇑fin.cast_succ a < i) (λ (h : ⇑fin.cast_succ a < i), i.pred _) (λ (h : ¬⇑fin.cast_succ a < i), i.cast_lt _) ≤ dite (⇑fin.cast_succ b < i) (λ (h : ⇑fin.cast_succ b < i), i.pred _) (λ (h : ¬⇑fin.cast_succ b < i), i.cast_lt _)
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ⇑fin.cast_succ a < i,	hb : ⇑fin.cast_succ b < i	⊢ i.pred _ ≤ i.pred _
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ⇑fin.cast_succ a < i,	hb : ¬⇑fin.cast_succ b < i	⊢ i.pred _ ≤ i.cast_lt _
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ¬⇑fin.cast_succ a < i,	hb : ⇑fin.cast_succ b < i	⊢ i.cast_lt _ ≤ i.pred _
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ¬⇑fin.cast_succ a < i,	hb : ¬⇑fin.cast_succ b < i	⊢ i.cast_lt _ ≤ i.cast_lt _
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ⇑fin.cast_succ a < i,	hb : ⇑fin.cast_succ b < i	⊢ i.pred _ ≤ i.pred _		n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ⇑fin.cast_succ a < i,	hb : ¬⇑fin.cast_succ b < i	⊢ i.pred _ ≤ i.cast_lt _		n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ¬⇑fin.cast_succ a < i,	hb : ⇑fin.cast_succ b < i	⊢ i.cast_lt _ ≤ i.pred _		n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ¬⇑fin.cast_succ a < i,	hb : ¬⇑fin.cast_succ b < i	⊢ i.cast_lt _ ≤ i.cast_lt _
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ⇑fin.cast_succ a < i,	hb : ¬⇑fin.cast_succ b < i	⊢ ↑i - 1 ≤ ↑(i.cast_lt _)		n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ¬⇑fin.cast_succ a < i,	hb : ⇑fin.cast_succ b < i	⊢ ↑(i.cast_lt _) ≤ ↑i - 1
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ⇑fin.cast_succ a < i,	hb : ¬⇑fin.cast_succ b < i	⊢ ↑i - 1 ≤ ↑(i.cast_lt _)
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ¬⇑fin.cast_succ a < i,	hb : ⇑fin.cast_succ b < i	⊢ ↑(i.cast_lt _) ≤ ↑i - 1
n : ℕ,	i : fin (n + 1),	a b : fin n,	H : a ≤ b,	ha : ¬⇑fin.cast_succ a < i,	hb : ⇑fin.cast_succ b < i,	this : b < a	⊢ ↑(i.cast_lt _) ≤ ↑i - 1
n : ℕ,	p : fin (n + 1),	i : fin (n + 2),	h : i ≤ ⇑fin.cast_succ p	⊢ p.pred_above i = i.cast_pred
n : ℕ,	p : fin (n + 1),	i : fin (n + 2),	h : i ≤ ⇑fin.cast_succ p,	this : i ≤ ⇑fin.cast_succ (fin.last n)	⊢ p.pred_above i = i.cast_pred
n : ℕ,	i : fin (n + 2)	⊢ ↑(i.cast_pred) ≤ ↑i
n : ℕ	⊢ ↑((fin.last (n + 1)).cast_pred) ≤ ↑(fin.last (n + 1))		n : ℕ,	i : fin (n + 2),	h : i < fin.last (n + 1)	⊢ ↑(i.cast_pred) ≤ ↑i
n : ℕ	⊢ ↑((fin.last (n + 1)).cast_pred) ≤ ↑(fin.last (n + 1))
n : ℕ,	i : fin (n + 2),	h : i < fin.last (n + 1)	⊢ ↑(i.cast_pred) ≤ ↑i
n : ℕ,	i : fin (n + 2),	h : i < fin.last (n + 1)	⊢ ↑(i.cast_lt _) ≤ ↑i		n : ℕ,	i : fin (n + 2),	h : i < fin.last (n + 1)	⊢ ¬⇑fin.cast_succ (fin.last n) < i
n : ℕ,	i : fin (n + 2),	h : i < fin.last (n + 1)	⊢ ↑(i.cast_lt _) ≤ ↑i
n : ℕ,	i : fin (n + 2),	h : i < fin.last (n + 1)	⊢ ¬⇑fin.cast_succ (fin.last n) < i
n : ℕ,	α : fin (n + 1) → Type u,	x : α (fin.last n),	p : Π (i : fin n), α (⇑fin.cast_succ i)	⊢ fin.snoc p x (fin.last n) = x
n : ℕ,	α : fin (n + 1) → Type u,	q : Π (i : fin (n + 1)), α i,	i : fin n,	y : α (⇑fin.cast_succ i)	⊢ fin.init (function.update q (⇑fin.cast_succ i) y) = function.update (fin.init q) i y
n : ℕ,	α : fin (n + 1) → Type u,	q : Π (i : fin (n + 1)), α i,	i : fin n,	y : α (⇑fin.cast_succ i),	j : fin n	⊢ fin.init (function.update q (⇑fin.cast_succ i) y) j = function.update (fin.init q) i y j
n : ℕ,	α : fin (n + 1) → Type u,	q : Π (i : fin (n + 1)), α i,	i : fin n,	y : α (⇑fin.cast_succ i),	j : fin n,	h : j = i	⊢ fin.init (function.update q (⇑fin.cast_succ i) y) i = function.update (fin.init q) i y i
n : ℕ,	α : fin (n + 1) → Type u,	q : Π (i : fin (n + 1)), α i,	i : fin n,	y : α (⇑fin.cast_succ i),	j : fin n,	h : j = i	⊢ fin.init (function.update q (⇑fin.cast_succ i) y) j = function.update (fin.init q) i y j		n : ℕ,	α : fin (n + 1) → Type u,	q : Π (i : fin (n + 1)), α i,	i : fin n,	y : α (⇑fin.cast_succ i),	j : fin n,	h : ¬j = i	⊢ fin.init (function.update q (⇑fin.cast_succ i) y) j = function.update (fin.init q) i y j
n : ℕ,	α : fin (n + 1) → Type u,	q : Π (i : fin (n + 1)), α i,	i : fin n,	y : α (⇑fin.cast_succ i),	j : fin n,	h : j = i	⊢ fin.init (function.update q (⇑fin.cast_succ i) y) j = function.update (fin.init q) i y j
n : ℕ,	α : fin (n + 1) → Type u,	q : Π (i : fin (n + 1)), α i,	i : fin n,	y : α (⇑fin.cast_succ i),	j : fin n,	h : ¬j = i	⊢ fin.init (function.update q (⇑fin.cast_succ i) y) j = function.update (fin.init q) i y j
n : ℕ,	k : fin (n + 1)	⊢ k + 0 = k
n m : ℕ,	h : n.succ ≤ m.succ	⊢ ⇑(fin.cast_le h) 0 = 0
n j_val : ℕ,	j_property : j_val < n + 1,	h : ⟨j_val, j_property⟩ ≠ 0	⊢ ↑(fin.pred ⟨j_val, j_property⟩ h) = ↑⟨j_val, j_property⟩ - 1
n : ℕ,	j : fin (n + 1),	h : j ≠ 0	⊢ ↑(j.pred h) = ↑j - 1
α : Type u,	_inst_1 : decidable_eq α,	xs : list α,	h : ∀ (x : α), x ∈ xs	⊢ ∀ (x : α), x ∈ xs.erase_dup
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a a' : α,	s : finmap β,	s : alist β	⊢ (finmap.erase a (finmap.erase a' ⟦s⟧)).entries = (finmap.erase a' (finmap.erase a ⟦s⟧)).entries
α : Type u_1,	p : α → Prop,	_inst_1 : decidable_pred p,	_inst_3 : decidable_eq α,	s t : finset α,	a : α	⊢ a ∈ finset.filter p s ∩ t ↔ a ∈ finset.filter p (s ∩ t)
α : Type u_1,	p : α → Prop,	_inst_1 : decidable_pred p,	_inst_3 : decidable_eq α,	s t : finset α	⊢ finset.filter p s ∩ t = finset.filter p (s ∩ t)
α : Type u_1,	_inst_1 : decidable_eq α,	s : finset α,	a : α	⊢ a ∈ s.val.to_finset ↔ a ∈ s
α : Type u_1,	_inst_1 : decidable_eq α,	s : finset α	⊢ s.val.to_finset = s
α : Type u_1,	_inst_1 : decidable_eq α,	s : finset α	⊢ ∃ (a : list α), a.to_finset = s
α : Type u_1,	_inst_1 : decidable_eq α	⊢ function.surjective list.to_finset
α : Type u_1,	_inst_1 : decidable_eq α,	s : finset α,	l : list α,	hls : l.to_finset = s	⊢ ∃ (a : list α), a.to_finset = s
α : Type u_1,	β : Type u_2,	_inst_1 : decidable_eq β,	f : α → β,	s : finset α,	t : finset β,	h : ∀ (x : α), x ∈ s → f x ∈ t,	a : β	⊢ a ∈ finset.filter (λ (y : β), y ∈ finset.image f s) t ↔ a ∈ finset.image f s
α : Type u_1,	β : Type u_2,	_inst_1 : decidable_eq β,	f : α → β,	s : finset α,	t : finset β,	h : ∀ (x : α), x ∈ s → f x ∈ t	⊢ finset.filter (λ (y : β), y ∈ finset.image f s) t = finset.image f s
α : Type u_1,	β : Type u_2,	_inst_1 : decidable_eq β,	f : α → β,	s : finset α,	t : finset β,	h : ∀ (x : α), x ∈ s → f x ∈ t,	a : β	⊢ (a ∈ t ∧ ∃ (a_1 : α) (H : a_1 ∈ s), f a_1 = a) ↔ ∃ (a_1 : α) (H : a_1 ∈ s), f a_1 = a
α : Type u_1,	β : Type u_2,	_inst_1 : decidable_eq β,	f : α → β,	s : finset α,	t : finset β,	h : ∀ (x : α), x ∈ s → f x ∈ t,	x : α,	xel : x ∈ s	⊢ f x ∈ t
α : Type u_1,	β : Type u_2,	_inst_1 : decidable_eq β,	f : α → β,	s : finset α,	t : finset β,	h : ∀ (x : α), x ∈ s → f x ∈ t,	a : β	⊢ ∀ (x : α), x ∈ s → f x = a → a ∈ t
α : Type u_1,	s : finset α	⊢ ¬1 < s.card ↔ ¬∃ (a : α) (H : a ∈ s) (b : α) (H : b ∈ s), a ≠ b
α : Type u_1,	s : finset α	⊢ s.card ≤ 1 ↔ ∀ (a : α), a ∈ s → ∀ (b : α), b ∈ s → a = b
α : Type u_1,	s : finset α	⊢ 1 < s.card ↔ ∃ (a : α) (H : a ∈ s) (b : α) (H : b ∈ s), a ≠ b
α : Type u_1,	n : ℕ,	s : finset α,	f : ℕ → α,	hf : ∀ (i : ℕ), i < n → f i ∈ s,	f_inj : ∀ (i : ℕ), i < n → ∀ (j : ℕ), j < n → f i = f j → i = j	⊢ ∀ (a : ℕ), a ∈ finset.range n → f a ∈ s
α : Type u_1,	n : ℕ,	s : finset α,	f : ℕ → α,	hf : ∀ (i : ℕ), i < n → f i ∈ s,	f_inj : ∀ (i : ℕ), i < n → ∀ (j : ℕ), j < n → f i = f j → i = j	⊢ ∀ (a₁ : ℕ), a₁ ∈ finset.range n → ∀ (a₂ : ℕ), a₂ ∈ finset.range n → f a₁ = f a₂ → a₁ = a₂
α : Type u_1,	β : Type u_2,	γ : Type u_3,	_inst_1 : decidable_eq β,	_inst_2 : decidable_eq γ,	s : finset α,	f : α → finset β,	g : β → finset γ	⊢ (s.bUnion f).bUnion g = s.bUnion (λ (a : α), (f a).bUnion g)
α : Type u_1,	β : Type u_2,	γ : Type u_3,	_inst_1 : decidable_eq β,	_inst_2 : decidable_eq γ,	s : finset α,	f : α → finset β,	g : β → finset γ,	a : γ	⊢ a ∈ (s.bUnion f).bUnion g ↔ a ∈ s.bUnion (λ (a : α), (f a).bUnion g)
α : Type u_1,	β : Type u_2,	γ : Type u_3,	_inst_1 : decidable_eq β,	_inst_2 : decidable_eq γ,	s : finset α,	f : α → finset β,	g : β → finset γ,	a : γ	⊢ (∃ (a_1 : β), (∃ (a : α), a ∈ s ∧ a_1 ∈ f a) ∧ a ∈ g a_1) ↔ ∃ (a_1 : α), a_1 ∈ s ∧ ∃ (a_2 : β), a_2 ∈ f a_1 ∧ a ∈ g a_2
α : Type u_1,	β : Type u_2,	γ : Type u_3,	_inst_1 : decidable_eq β,	_inst_2 : decidable_eq γ,	s : finset α,	f : α → finset β,	g : β → finset γ,	a : γ	⊢ (∃ (a_1 : β) (x : α), x ∈ s ∧ a_1 ∈ f x ∧ a ∈ g a_1) ↔ ∃ (a_1 : α) (x : β), a_1 ∈ s ∧ x ∈ f a_1 ∧ a ∈ g x
α : Type u_1,	_inst_1 : decidable_eq α,	U V : finset α	⊢ decidable (U ⊓ V = ⊥)
α : Type u_1,	s : finset α,	_inst_1 : decidable_eq α	⊢ s.off_diag.card = s.card * s.card - s.card
α : Type u_1,	s : finset α,	_inst_1 : decidable_eq α,	this : s.diag.card + s.off_diag.card = s.card * s.card	⊢ s.off_diag.card = s.card * s.card - s.diag.card
α : Type u_1,	s : finset α,	_inst_1 : decidable_eq α,	this : s.diag.card + s.off_diag.card = s.card * s.card	⊢ s.off_diag.card = s.card * s.card - s.card		α : Type u_1,	s : finset α,	_inst_1 : decidable_eq α	⊢ s.diag.card + s.off_diag.card = s.card * s.card
α : Type u_1,	s : finset α,	_inst_1 : decidable_eq α,	this : s.diag.card + s.off_diag.card = s.card * s.card	⊢ s.off_diag.card = s.card * s.card - s.card
α : Type u_1,	s : finset α,	_inst_1 : decidable_eq α	⊢ s.diag.card + s.off_diag.card = s.card * s.card
α : Type u_1,	s : finset α,	_inst_1 : decidable_eq α	⊢ s.diag.card + s.off_diag.card = (s.product s).card
α : Type u_1,	_inst_1 : decidable_eq α,	a : α,	s : finset α,	h : a ∉ s	⊢ (has_insert.insert a s).val = a ::ₘ s.val
α : Type u_1,	_inst_1 : decidable_eq α,	s₁ s₂ : finset α,	x : α	⊢ x ∈ s₁ ∪ s₂ ↔ x ∈ s₂ ∪ s₁
l n m k : ℕ	⊢ k ∈ finset.Ico n m \ finset.Ico n l ↔ k ∈ finset.Ico (linear_order.max n l) m
l n m k : ℕ,	h : n ≤ k	⊢ k ∈ finset.Ico n m \ finset.Ico n l ↔ k ∈ finset.Ico (linear_order.max n l) m
l n m k : ℕ,	h : ¬n ≤ k	⊢ k ∈ finset.Ico n m \ finset.Ico n l ↔ k ∈ finset.Ico (linear_order.max n l) m
l n m : ℕ	⊢ finset.Ico n m \ finset.Ico n l = finset.Ico (linear_order.max n l) m
l n m : ℕ	⊢ finset.Ico n m \ finset.Ico n l = finset.Ico (linear_order.max n l) m
l n m : ℕ	⊢ finset.Ico n m \ finset.Ico n l = finset.Ico (linear_order.max n l) m
α : Type u_1,	_inst_1 : linear_order α,	s : finset α,	H : s.nonempty,	_let_match : s.nonempty → ↥(s.min.is_some),	k : α,	hk : k ∈ s,	_let_match : (∃ (b : α), b ∈ s.min) → ↥(s.min.is_some),	b : α,	hb : b ∈ s.min	⊢ ↥(s.min.is_some)
α : Type u_1,	_inst_1 : linear_order α,	s : finset α,	H : s.nonempty,	_let_match : s.nonempty → ↥(s.min.is_some),	k : α,	hk : k ∈ s,	_let_match : (∃ (b : α), b ∈ s.min) → ↥(s.min.is_some),	b : α,	hb : b ∈ s.min	⊢ ↥(s.min.is_some)
α : Type u_1,	_inst_1 : linear_order α,	s : finset α,	H : s.nonempty,	_let_match : s.nonempty → ↥(s.min.is_some),	k : α,	hk : k ∈ s,	_let_match : (∃ (b : α), b ∈ s.min) → ↥(s.min.is_some),	b : α,	hb : s.min = option.some b	⊢ ↥(s.min.is_some)
α : Type u_1,	β : Type u_2,	γ : Type u_3,	_inst_1 : semilattice_sup_bot α,	f : β → α,	_inst_2 : decidable_eq β,	s : finset γ,	t : γ → finset β,	c : α	⊢ (s.bUnion t).sup f ≤ c ↔ s.sup (λ (x : γ), (t x).sup f) ≤ c
α : Type u_1,	n : ℕ,	s : finset α,	h : n < s.card	⊢ (finset.powerset_len n s).nonempty
α : Type u_1,	n : ℕ,	s : finset α,	h : n < s.card,	_inst : Π (a : Prop), decidable a	⊢ (finset.powerset_len n s).nonempty
α : Type u_1,	_inst : Π (a : Prop), decidable a,	n : ℕ,	h : n < ∅.card	⊢ (finset.powerset_len n ∅).nonempty		case h₂	α : Type u_1,	_inst : Π (a : Prop), decidable a,	x : α,	s : finset α,	hx : x ∉ s,	IH : ∀ {n : ℕ}, n < s.card → (finset.powerset_len n s).nonempty,	n : ℕ,	h : n < (has_insert.insert x s).card	⊢ (finset.powerset_len n (has_insert.insert x s)).nonempty
α : Type u_1,	_inst : Π (a : Prop), decidable a,	n : ℕ,	h : n < ∅.card	⊢ (finset.powerset_len n ∅).nonempty
α : Type u_1,	_inst : Π (a : Prop), decidable a,	x : α,	s : finset α,	hx : x ∉ s,	IH : ∀ {n : ℕ}, n < s.card → (finset.powerset_len n s).nonempty,	n : ℕ,	h : n < (has_insert.insert x s).card	⊢ (finset.powerset_len n (has_insert.insert x s)).nonempty
α : Type u_1,	_inst : Π (a : Prop), decidable a,	x : α,	s : finset α,	hx : x ∉ s,	IH : ∀ {n : ℕ}, n < s.card → (finset.powerset_len n s).nonempty,	h : 0 < (has_insert.insert x s).card	⊢ (finset.powerset_len 0 (has_insert.insert x s)).nonempty		case h₂, nat.succ	α : Type u_1,	_inst : Π (a : Prop), decidable a,	x : α,	s : finset α,	hx : x ∉ s,	IH : ∀ {n : ℕ}, n < s.card → (finset.powerset_len n s).nonempty,	n : ℕ,	h : n.succ < (has_insert.insert x s).card	⊢ (finset.powerset_len n.succ (has_insert.insert x s)).nonempty
α : Type u_1,	_inst : Π (a : Prop), decidable a,	x : α,	s : finset α,	hx : x ∉ s,	IH : ∀ {n : ℕ}, n < s.card → (finset.powerset_len n s).nonempty,	h : 0 < (has_insert.insert x s).card	⊢ (finset.powerset_len 0 (has_insert.insert x s)).nonempty
α : Type u_1,	_inst : Π (a : Prop), decidable a,	x : α,	s : finset α,	hx : x ∉ s,	IH : ∀ {n : ℕ}, n < s.card → (finset.powerset_len n s).nonempty,	n : ℕ,	h : n.succ < (has_insert.insert x s).card	⊢ (finset.powerset_len n.succ (has_insert.insert x s)).nonempty
α : Type u_1,	_inst : Π (a : Prop), decidable a,	x : α,	s : finset α,	hx : x ∉ s,	IH : ∀ {n : ℕ}, n < s.card → (finset.powerset_len n s).nonempty,	n : ℕ,	h : n < s.card	⊢ (finset.powerset_len n.succ (has_insert.insert x s)).nonempty
α : Type u_1,	_inst : Π (a : Prop), decidable a,	x : α,	s : finset α,	hx : x ∉ s,	IH : ∀ {n : ℕ}, n < s.card → (finset.powerset_len n s).nonempty,	n : ℕ,	h : n < s.card	⊢ (finset.powerset_len n.succ s ∪ finset.image (has_insert.insert x) (finset.powerset_len n s)).nonempty
α : Type u_1,	_inst : Π (a : Prop), decidable a,	x : α,	s : finset α,	hx : x ∉ s,	IH : ∀ {n : ℕ}, n < s.card → (finset.powerset_len n s).nonempty,	n : ℕ,	h : n < s.card	⊢ finset.image (has_insert.insert x) (finset.powerset_len n s) ⊆ finset.powerset_len n.succ s ∪ finset.image (has_insert.insert x) (finset.powerset_len n s)
α : Type u_1,	_inst_1 : decidable_eq (finset α),	s : finset α	⊢ s.powerset = (finset.range (s.card + 1)).bUnion (λ (i : ℕ), finset.powerset_len i s)
α : Type u_1,	_inst_1 : decidable_eq (finset α),	s a : finset α,	ha : a ∈ s.powerset	⊢ a ∈ (finset.range (s.card + 1)).bUnion (λ (i : ℕ), finset.powerset_len i s)
α : Type u_1,	_inst_1 : decidable_eq (finset α),	s a : finset α,	ha : a ∈ s.powerset	⊢ ∃ (a_1 : ℕ) (H : a_1 ∈ finset.range (s.card + 1)), a ∈ finset.powerset_len a_1 s
α : Type u_1,	_inst_1 : decidable_eq (finset α),	s a : finset α,	ha : a ∈ s.powerset	⊢ a ∈ (finset.range (s.card + 1)).bUnion (λ (i : ℕ), finset.powerset_len i s)		α : Type u_1,	_inst_1 : decidable_eq (finset α),	s a : finset α,	ha : a ∈ (finset.range (s.card + 1)).bUnion (λ (i : ℕ), finset.powerset_len i s)	⊢ a ∈ s.powerset
α : Type u_1,	_inst_1 : decidable_eq (finset α),	s a : finset α,	ha : a ∈ (finset.range (s.card + 1)).bUnion (λ (i : ℕ), finset.powerset_len i s)	⊢ a ∈ s.powerset
α : Type u_1,	_inst_1 : decidable_eq (finset α),	s a : finset α,	ha : a ∈ (finset.range (s.card + 1)).bUnion (λ (i : ℕ), finset.powerset_len i s),	i : ℕ,	hi : i ∈ finset.range (s.card + 1),	ha : a ∈ finset.powerset_len i s	⊢ a ∈ s.powerset
α : Type u_1,	_inst_1 : linear_order α,	s : finset α,	h : s.nonempty	⊢ (finset.sort has_le.le s).length - 1 < (finset.sort has_le.le s).length
α : Type u_1,	m n : α →₀ ℕ	⊢ m ∈ n.Iic_finset ↔ m ≤ n
α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : add_comm_monoid M,	v : α →₀ M,	f g : α → β,	h : ∀ (x : α), x ∈ v.support → f x = g x,	_x : α,	H : _x ∈ v.support	⊢ (λ (a : α), finsupp.single (f a)) _x (⇑v _x) = (λ (a : α), finsupp.single (g a)) _x (⇑v _x)
α : Type u_1,	M : Type u_5,	_inst_1 : has_zero M,	f : α →₀ M	⊢ f.support.nonempty ↔ f ≠ 0
α : Type u_1,	β : Type u_2,	M : Type u_5,	N : Type u_7,	_inst_1 : has_zero M,	_inst_2 : add_comm_monoid N,	f : α → β,	l : β →₀ M,	g : β → M → N,	hf : set.bij_on f (f ⁻¹' ↑(l.support)) ↑(l.support)	⊢ (finsupp.comap_domain f l _).sum (g ∘ f) = l.sum g
α : Type u_1,	β : Type u_2,	M : Type u_5,	N : Type u_7,	_inst_1 : has_zero M,	_inst_2 : add_comm_monoid N,	f : α → β,	l : β →₀ M,	g : β → M → N,	hf : set.bij_on f (f ⁻¹' ↑(l.support)) ↑(l.support)	⊢ ∑ (a : α) in (finsupp.comap_domain f l _).support, g (f a) (⇑l (f a)) = ∑ (a : β) in l.support, g a (⇑l a)
α : Type u_1,	s : multiset α,	a : α	⊢ a ∈ s.to_finset ↔ multiset.count a s ≠ 0
α : Type u_1,	f : α →₀ ℕ,	a : α	⊢ ⇑((λ (s : multiset α), {support := s.to_finset, to_fun := λ (a : α), multiset.count a s, mem_support_to_fun := _}) ((λ (f : α →₀ ℕ), f.sum (λ (a : α) (n : ℕ), n • {a})) f)) a = ⇑f a
α : Type u_1,	f : α →₀ ℕ,	a : α	⊢ ⇑f a = 0 → 0 = ⇑f a
α : Type u_1,	s : multiset α	⊢ (λ (f : α →₀ ℕ), f.sum (λ (a : α) (n : ℕ), n • {a})) ((λ (s : multiset α), {support := s.to_finset, to_fun := λ (a : α), multiset.count a s, mem_support_to_fun := _}) s) = s
α : Type u_1,	M : Type u_5,	_inst_1 : has_zero M,	a : α,	b : M,	x : α	⊢ ⇑(finsupp.single a b) x = {a}.indicator (λ (_x : α), b) x
α : Type u_1,	M : Type u_5,	_inst_1 : has_zero M,	a : α,	b : M	⊢ ⇑(finsupp.single a b) = {a}.indicator (λ (_x : α), b)
α : Type u_1,	m n : α →₀ ℕ,	h : m < n	⊢ m.sum (λ (_x : α), id) < n.sum (λ (_x : α), id)
α : Type u_1,	m n : α →₀ ℕ,	h : m < n	⊢ ⇑multiset.card (⇑finsupp.to_multiset m) < ⇑multiset.card (⇑finsupp.to_multiset n)
α : Type u_1,	m n : α →₀ ℕ,	h : m < n	⊢ ⇑finsupp.to_multiset m < ⇑finsupp.to_multiset n
α : Type u_1,	M : Type u_5,	_inst_1 : has_zero M,	a₁ a₂ : α,	b : M	⊢ ⇑(finsupp.single a₁ b) a₂ = ⇑(finsupp.single a₂ b) a₁
α : Type u_1,	M : Type u_5,	_inst_1 : has_zero M,	a₁ a₂ : α,	b : M	⊢ ite (a₁ = a₂) b 0 = ite (a₂ = a₁) b 0
α : Type u_1,	M : Type u_5,	_inst_1 : has_zero M,	a₁ a₂ : α,	b : M	⊢ ⇑(finsupp.single a₁ b) a₂ = ⇑(finsupp.single a₂ b) a₁
α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : has_zero M,	f : α ↪ β,	v : α →₀ M,	a : α	⊢ ⇑(finsupp.emb_domain f v) (⇑f a) = ⇑v a
α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : has_zero M,	f : α ↪ β,	v : α →₀ M,	a : α	⊢ dite (⇑f a ∈ finset.map f v.support) (λ (h : ⇑f a ∈ finset.map f v.support), ⇑v (finset.choose (λ (a₁ : α), ⇑f a₁ = ⇑f a) v.support _)) (λ (h : ⇑f a ∉ finset.map f v.support), 0) = ⇑v a
α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : has_zero M,	f : α ↪ β,	v : α →₀ M,	a : α,	h : ⇑f a ∈ finset.map f v.support	⊢ ⇑v (finset.choose (λ (a₁ : α), ⇑f a₁ = ⇑f a) v.support _) = ⇑v a
α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : has_zero M,	f : α ↪ β,	v : α →₀ M,	a : α,	h : ⇑f a ∉ finset.map f v.support	⊢ 0 = ⇑v a
α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : has_zero M,	f : α ↪ β,	v : α →₀ M,	a : α	⊢ dite (⇑f a ∈ finset.map f v.support) (λ (h : ⇑f a ∈ finset.map f v.support), ⇑v (finset.choose (λ (a₁ : α), ⇑f a₁ = ⇑f a) v.support _)) (λ (h : ⇑f a ∉ finset.map f v.support), 0) = ⇑v a
α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : has_zero M,	f : α ↪ β,	v : α →₀ M,	a : α,	h : ⇑f a ∈ finset.map f v.support,	h : a ∈ v.support	⊢ ⇑v (finset.choose (λ (a₁ : α), ⇑f a₁ = ⇑f a) v.support _) = ⇑v a
α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : has_zero M,	f : α ↪ β,	v : α →₀ M,	a : α,	h : ⇑f a ∈ finset.map f v.support,	h : a ∈ v.support	⊢ ⇑v (finset.choose (λ (a₁ : α), ⇑f a₁ = ⇑f a) v.support _) = ⇑v a		α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : has_zero M,	f : α ↪ β,	v : α →₀ M,	a : α,	h : a ∉ v.support	⊢ 0 = ⇑v a
α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : has_zero M,	f : α ↪ β,	v : α →₀ M,	a : α,	h : ⇑f a ∈ finset.map f v.support,	h : a ∈ v.support	⊢ f.to_fun (finset.choose (λ (a₁ : α), ⇑f a₁ = ⇑f a) v.support _) = f.to_fun a
α : Type u_1,	β : Type u_2,	M : Type u_5,	_inst_1 : has_zero M,	f : α ↪ β,	v : α →₀ M,	a : α,	h : a ∉ v.support	⊢ 0 = ⇑v a
α : Type u_1,	M : Type u_5,	N : Type u_7,	_inst_1 : has_zero M,	_inst_3 : comm_monoid N,	_inst_4 : decidable_eq α,	f : α →₀ M,	a : α,	b : α → M → N	⊢ ∏ (a_1 : α) in f.support, ite (a = a_1) (b a_1 (⇑f a_1)) 1 = ite (a ∈ f.support) (b a (⇑f a)) 1
α : Type u_1,	M : Type u_5,	N : Type u_7,	_inst_1 : has_zero M,	_inst_3 : comm_monoid N,	_inst_4 : decidable_eq α,	f : α →₀ M,	a : α,	b : α → M → N	⊢ f.prod (λ (x : α) (v : M), ite (a = x) (b x v) 1) = ite (a ∈ f.support) (b a (⇑f a)) 1
ι : Type u_1,	η : ι → Type u_4,	N : Type u_5,	_inst_2 : has_zero N,	f : (Σ (i : ι), η i) →₀ N	⊢ (⇑sigma_finsupp_equiv_dfinsupp f).support = f.split_support
ι : Type u_1,	η : ι → Type u_4,	N : Type u_5,	_inst_2 : has_zero N,	f : (Σ (i : ι), η i) →₀ N,	a : ι	⊢ a ∈ (⇑sigma_finsupp_equiv_dfinsupp f).support ↔ a ∈ f.split_support
ι : Type u_1,	η : ι → Type u_4,	N : Type u_5,	_inst_2 : has_zero N,	f : (Σ (i : ι), η i) →₀ N,	a : ι	⊢ ⇑(⇑sigma_finsupp_equiv_dfinsupp f) a ≠ 0 ↔ a ∈ f.split_support
ι : Type ?,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	α : ι → Type ?,	S : Π (i : ι), setoid (α i),	f : Π (i : ι), quotient (S i)	⊢ setoid (Π (i : ι), α i)
ι : Type ?,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	α : ι → Type ?,	S : Π (i : ι), setoid (α i),	f : Π (i : ι), quotient (S i),	l : multiset ι	⊢ setoid (Π (i : ι), i ∈ l → α i)
ι : Type ?,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	α : ι → Type ?,	S : Π (i : ι), setoid (α i),	f : Π (i : ι), quotient (S i),	a b : list ι,	h : a ≈ b	⊢ eq.rec ((λ (l : list ι), quotient.fin_choice_aux l (λ (i : ι) (_x : i ∈ l), f i)) a) _ = (λ (l : list ι), quotient.fin_choice_aux l (λ (i : ι) (_x : i ∈ l), f i)) b
ι : Type ?,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	α : ι → Type ?,	S : Π (i : ι), setoid (α i),	f : Π (i : ι), quotient (S i),	a b : list ι,	h : a ≈ b,	this : ∀ (a : list ι), quotient.fin_choice_aux a (λ (i : ι) (h : i ∈ a), ⟦(λ (i : ι) (h : i ∈ a), (f i).out) i h⟧) = ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧	⊢ eq.rec ((λ (l : list ι), quotient.fin_choice_aux l (λ (i : ι) (_x : i ∈ l), f i)) a) _ = (λ (l : list ι), quotient.fin_choice_aux l (λ (i : ι) (_x : i ∈ l), f i)) b
ι : Type ?,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	α : ι → Type ?,	S : Π (i : ι), setoid (α i),	f : Π (i : ι), quotient (S i),	a b : list ι,	h : a ≈ b,	this : ∀ (a : list ι), quotient.fin_choice_aux a (λ (i : ι) (h : i ∈ a), f i) = ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧	⊢ eq.rec ((λ (l : list ι), quotient.fin_choice_aux l (λ (i : ι) (_x : i ∈ l), f i)) a) _ = (λ (l : list ι), quotient.fin_choice_aux l (λ (i : ι) (_x : i ∈ l), f i)) b
ι : Type ?,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	α : ι → Type ?,	S : Π (i : ι), setoid (α i),	f : Π (i : ι), quotient (S i),	a b : list ι,	h : a ≈ b,	this : ∀ (a : list ι), quotient.fin_choice_aux a (λ (i : ι) (h : i ∈ a), f i) = ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧	⊢ eq.rec ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧ _ = ⟦λ (i : ι) (h : i ∈ b), (f i).out⟧
ι : Type ?,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	α : ι → Type ?,	S : Π (i : ι), setoid (α i),	f : Π (i : ι), quotient (S i),	a b : list ι,	h : a ≈ b,	this : ∀ (a : list ι), quotient.fin_choice_aux a (λ (i : ι) (h : i ∈ a), f i) = ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧,	g : Π (a : multiset ι), quotient pi_setoid := λ (a : multiset ι), ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧	⊢ eq.rec ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧ _ = ⟦λ (i : ι) (h : i ∈ b), (f i).out⟧
ι : Type ?,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	α : ι → Type ?,	S : Π (i : ι), setoid (α i),	f : Π (i : ι), quotient (S i),	a b : list ι,	h : a ≈ b,	this : ∀ (a : list ι), quotient.fin_choice_aux a (λ (i : ι) (h : i ∈ a), f i) = ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧,	g : Π (a : multiset ι), quotient pi_setoid := λ (a : multiset ι), ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧	⊢ ↑a = ↑b
ι : Type ?,	_inst_1 : decidable_eq ι,	_inst_2 : fintype ι,	α : ι → Type ?,	S : Π (i : ι), setoid (α i),	f : Π (i : ι), quotient (S i),	a b : list ι,	h : a ≈ b,	this : ∀ (a : list ι), quotient.fin_choice_aux a (λ (i : ι) (h : i ∈ a), f i) = ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧,	g : Π (a : multiset ι), quotient pi_setoid := λ (a : multiset ι), ⟦λ (i : ι) (h : i ∈ a), (f i).out⟧	⊢ g ↑a == g ↑b
α : Type u_1,	_inst_1 : infinite α	⊢ function.injective (nat_embedding_aux α)
α : Type u_1,	_inst_1 : infinite α,	m n : ℕ,	h : nat_embedding_aux α m = nat_embedding_aux α n	⊢ m = n
α : Type u_1,	_inst_1 : infinite α,	m n : ℕ,	h : nat_embedding_aux α m = nat_embedding_aux α n,	_inst : decidable_eq α := classical.dec_eq α	⊢ m = n
α : Type u_1,	_inst_1 : infinite α,	_inst : decidable_eq α := classical.dec_eq α,	m n : ℕ,	hmlen : m ≤ n,	h : nat_embedding_aux α m = nat_embedding_aux α n	⊢ m = n
α : Type u_1,	_inst_1 : infinite α,	_inst : decidable_eq α := classical.dec_eq α,	m n : ℕ,	hmlen : m ≤ n,	h : nat_embedding_aux α m = nat_embedding_aux α n,	hmn : ¬m = n	⊢ m < n		α : Type u_1,	_inst_1 : infinite α,	_inst : decidable_eq α := classical.dec_eq α,	m n : ℕ,	hmlen : m ≤ n,	h : nat_embedding_aux α m = nat_embedding_aux α n,	hmn : ¬m = n,	hmn : m < n	⊢ false
α : Type u_1,	_inst_1 : infinite α,	_inst : decidable_eq α := classical.dec_eq α,	m n : ℕ,	hmlen : m ≤ n,	h : nat_embedding_aux α m = nat_embedding_aux α n,	hmn : ¬m = n	⊢ false
α : Type u_1,	_inst_1 : infinite α,	_inst : decidable_eq α := classical.dec_eq α,	m n : ℕ,	hmlen : m ≤ n,	h : nat_embedding_aux α m = nat_embedding_aux α n,	hmn : ¬m = n,	hmn : m < n	⊢ false
α : Type u_1,	_inst_1 : infinite α,	_inst : decidable_eq α := classical.dec_eq α,	m n : ℕ,	hmlen : m ≤ n,	h : nat_embedding_aux α m = nat_embedding_aux α n,	hmn : ¬m = n,	hmn : m < n	⊢ classical.some _ ∈ (multiset.pmap (λ (m : ℕ) (hm : m < n), nat_embedding_aux α m) (multiset.range n) _).to_finset
α : Type u_1,	_inst_1 : infinite α,	_inst : decidable_eq α := classical.dec_eq α,	m n : ℕ,	hmlen : m ≤ n,	h : nat_embedding_aux α m = nat_embedding_aux α n,	hmn : ¬m = n,	hmn : m < n	⊢ nat_embedding_aux α m = classical.some _
α : Type ?,	β : α → Type ?,	_inst_1 : Π (a : α), decidable_eq (β a),	_inst_2 : fintype α,	f g : Π (a : α), β a	⊢ (∀ (a : α), a ∈ fintype.elems α → f a = g a) ↔ f = g
α : Type u_1,	_inst_1 : fintype α	⊢ ⇑multiset.card (multiset.map option.some finset.univ.val) + 1 = fintype.card α + 1
α : Type u_1,	_inst_1 : fintype α	⊢ ⇑multiset.card (multiset.map option.some finset.univ.val) + 1 = fintype.card α + 1
α : Type u_1,	_inst_1 : fintype α	⊢ ⇑multiset.card finset.univ.val + 1 = fintype.card α + 1
β : Type u_2,	_inst_1 : comm_monoid β,	n : ℕ,	f : fin n → β	⊢ (list.of_fn f).prod = ∏ (i : fin n), f i
α : Type u_1,	β : Type u_2,	γ : Type u_3,	_inst_1 : fintype α,	_inst_2 : decidable_eq β,	_inst_3 : fintype β,	_inst_4 : comm_monoid γ,	f : α → β,	g : α → γ	⊢ ∏ (b : β) (a : {a // f a = b}), g ↑a = ∏ (a : α), g a
α : Type u_1,	β : Type u_2,	γ : Type u_3,	_inst_1 : fintype α,	_inst_2 : decidable_eq β,	_inst_3 : fintype β,	_inst_4 : comm_monoid γ,	f : α → β,	g : α → γ	⊢ ∏ (b : β) (a : {a // f a = b}), g ↑a = ∏ (a : β) (s : {x // f x = a}), g (⇑(equiv.sigma_preimage_equiv f) ⟨a, s⟩)
l u n : ℕ	⊢ n ∈ finset.Ico l u ↔ n ∈ set.Ico l u
l u n : ℕ	⊢ n ∈ finset.Ico l (u + 1) ↔ n ∈ set.Icc l u
m n : ℕ,	h : m < n.succ	⊢ int.of_nat m + -[1+ n] = -[1+ n - m]
m n : ℕ,	h : m < n.succ	⊢ int.sub_nat_nat m n.succ = -[1+ n - m]
m n : ℕ,	h : m < n.succ	⊢ n.succ - m = (n - m).succ		m n : ℕ,	h : m < n.succ,	h' : n.succ - m = (n - m).succ	⊢ int.sub_nat_nat m n.succ = -[1+ n - m]
m n : ℕ,	h : m < n.succ	⊢ m ≤ n		m n : ℕ,	h : m < n.succ,	h' : n.succ - m = (n - m).succ	⊢ int.sub_nat_nat m n.succ = -[1+ n - m]
m n : ℕ,	h : m < n.succ,	h' : n.succ - m = (n - m).succ	⊢ int.sub_nat_nat m n.succ = -[1+ n - m]
n : ℕ	⊢ (int.neg_of_nat n).nat_abs = n
⊢ (int.neg_of_nat 0).nat_abs = 0
n : ℕ	⊢ (int.neg_of_nat n.succ).nat_abs = n.succ
n : ℕ	⊢ (int.neg_of_nat n).nat_abs = n
a b : ℤ,	Ha : 0 ≤ a,	Hb : b ≤ 0	⊢ 0 ≤ -(a / b)
a b : ℤ,	Ha : 0 ≤ a,	Hb : b ≤ 0	⊢ 0 ≤ -(a / b)
a b : ℤ,	Ha : 0 ≤ a,	Hb : b ≤ 0	⊢ 0 ≤ a / -b
a b : ℤ,	H : b ≠ 0	⊢ a * b / b = a
a b : ℤ,	H : b ≠ 0	⊢ a * b / b = a
a b : ℤ,	H : b ≠ 0,	this : (0 + a * b) / b = 0 / b + a	⊢ a * b / b = a
m : ℕ,	b : ℤ,	bpos : 0 < b	⊢ -[1+ m] % b = b - 1 - ↑m % b
m : ℕ,	b : ℤ,	bpos : 0 < b	⊢ -[1+ m] % b = b - (↑m % b + 1)
m : ℕ,	b : ℤ,	bpos : 0 < b	⊢ -[1+ m] % b = b - 1 - ↑m % b
a b : ℤ	⊢ (a + b) % b = a % b
a b : ℤ,	this : (a + b * 1) % b = a % b	⊢ (a + b) % b = a % b
a b : ℤ	⊢ (a + b) % b = a % b
a b : ℤ,	H : a % b = 0	⊢ a / b * b = a
a : ℤ,	mul_div_assoc : ∀ {b c : ℤ}, c ∣ b → a * b / c = a * (b / c),	c d : ℤ,	cz : c = 0	⊢ a * (c * d) / c = a * (c * d / c)
a : ℤ,	mul_div_assoc : ∀ {b c : ℤ}, c ∣ b → a * b / c = a * (b / c),	c d : ℤ,	cz : ¬c = 0	⊢ a * (c * d) / c = a * (c * d / c)
α : Type u_1,	β : Type u_2,	_inst_1 : has_zero β,	_inst_2 : has_one β,	_inst_3 : has_add β,	_inst_4 : has_neg β,	int_apply : ∀ (n : ℤ) (a : α), ↑n a = ↑n,	n : ℕ,	a : α	⊢ ↑-[1+ n] a = ↑-[1+ n]
i : ℤ	⊢ i.nat_abs.lcm i.nat_abs = i.nat_abs
i : ℤ	⊢ i.lcm i = i.nat_abs
n a b : ℤ,	h : a ≡ b [ZMOD n]	⊢ a ^ 0 ≡ b ^ 0 [ZMOD n]
n a b : ℤ,	h : a ≡ b [ZMOD n]	⊢ a ^ 0 ≡ b ^ 0 [ZMOD n]		case nat.succ	n a b : ℤ,	h : a ≡ b [ZMOD n],	d : ℕ,	hd : a ^ d ≡ b ^ d [ZMOD n]	⊢ a ^ d.succ ≡ b ^ d.succ [ZMOD n]
n a b : ℤ,	m : ℕ,	h : a ≡ b [ZMOD n]	⊢ a ^ m ≡ b ^ m [ZMOD n]
n a b : ℤ,	h : a ≡ b [ZMOD n],	d : ℕ,	hd : a ^ d ≡ b ^ d [ZMOD n]	⊢ a ^ d.succ ≡ b ^ d.succ [ZMOD n]
n a b : ℤ,	h : a ≡ b [ZMOD n],	d : ℕ,	hd : a ^ d ≡ b ^ d [ZMOD n]	⊢ a * a ^ d ≡ b * b ^ d [ZMOD n]
a b m n : ℤ,	hmn : m.nat_abs.coprime n.nat_abs,	h : a ≡ b [ZMOD m] ∧ a ≡ b [ZMOD n]	⊢ a ≡ b [ZMOD m * n]
a b m n : ℤ,	hmn : m.nat_abs.coprime n.nat_abs,	h : m ∣ b - a ∧ n ∣ b - a	⊢ a ≡ b [ZMOD m * n]
a b m n : ℤ,	hmn : m.nat_abs.coprime n.nat_abs,	h : m ∣ b - a ∧ n ∣ b - a	⊢ m.nat_abs * n.nat_abs ∣ (b - a).nat_abs
a b m n : ℤ,	hmn : m.nat_abs.coprime n.nat_abs,	h : m ∣ b - a ∧ n ∣ b - a	⊢ m.nat_abs * n.nat_abs ∣ (b - a).nat_abs
a b m n : ℤ,	hmn : m.nat_abs.coprime n.nat_abs,	h : m ∣ b - a ∧ n ∣ b - a	⊢ m.nat_abs * n.nat_abs ∣ (b - a).nat_abs
a b m n : ℤ,	hmn : m.nat_abs.coprime n.nat_abs,	h : m ∣ b - a ∧ n ∣ b - a	⊢ m ∣ b - a
a b m n : ℤ,	hmn : m.nat_abs.coprime n.nat_abs,	h : m ∣ b - a ∧ n ∣ b - a	⊢ n ∣ b - a
a b m n : ℤ,	hmn : m.nat_abs.coprime n.nat_abs,	h : m ∣ b - a ∧ n ∣ b - a	⊢ m.nat_abs ∣ (b - a).nat_abs
a b m n : ℤ,	hmn : m.nat_abs.coprime n.nat_abs,	h : m ∣ b - a ∧ n ∣ b - a	⊢ n.nat_abs ∣ (b - a).nat_abs
α : Type u_1	⊢ lazy_list.nil.append (λ («_» : unit), lazy_list.nil) = lazy_list.nil		case lazy_list.cons	α : Type u_1,	xs_hd : α,	xs_tl : thunk (lazy_list α),	xs_ih : ∀ (ᾰ : unit), (λ (xs : lazy_list α), xs.append (λ («_» : unit), lazy_list.nil) = xs) (xs_tl ᾰ)	⊢ (lazy_list.cons xs_hd xs_tl).append (λ («_» : unit), lazy_list.nil) = lazy_list.cons xs_hd xs_tl
α : Type u_1,	xs : lazy_list α	⊢ xs.append (λ («_» : unit), lazy_list.nil) = xs
α : Type u_1,	xs_hd : α,	xs_tl : thunk (lazy_list α),	xs_ih : ∀ (ᾰ : unit), (λ (xs : lazy_list α), xs.append (λ («_» : unit), lazy_list.nil) = xs) (xs_tl ᾰ)	⊢ (lazy_list.cons xs_hd xs_tl).append (λ («_» : unit), lazy_list.nil) = lazy_list.cons xs_hd xs_tl
α : Type u_1,	xs_hd : α,	xs_tl : thunk (lazy_list α),	xs_ih : ∀ (ᾰ : unit), (λ (xs : lazy_list α), xs.append (λ («_» : unit), lazy_list.nil) = xs) (xs_tl ᾰ)	⊢ (λ («_» : unit), xs_tl ()) = xs_tl
α : Type u_1,	xs_hd : α,	xs_tl : thunk (lazy_list α),	xs_ih : ∀ (ᾰ : unit), (λ (xs : lazy_list α), xs.append (λ («_» : unit), lazy_list.nil) = xs) (xs_tl ᾰ),	x : unit	⊢ xs_tl () = xs_tl x
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : x = y,	_match : decidable (xs () = ys ()) → decidable (lazy_list.cons x xs = lazy_list.cons y ys),	h2 : ¬xs () = ys ()	⊢ ¬lazy_list.cons x xs = lazy_list.cons y ys
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : x = y,	_match : decidable (xs () = ys ()) → decidable (lazy_list.cons x xs = lazy_list.cons y ys),	h2 : ¬xs () = ys ()	⊢ ¬lazy_list.cons x xs = lazy_list.cons y ys
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : x = y,	_match : decidable (xs () = ys ()) → decidable (lazy_list.cons x xs = lazy_list.cons y ys),	h2 : ¬xs () = ys (),	ᾰ : lazy_list.cons x xs = lazy_list.cons y ys	⊢ false
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : x = y,	_match : decidable (xs () = ys ()) → decidable (lazy_list.cons x xs = lazy_list.cons y ys),	h2 : xs () = ys ()	⊢ xs = ys
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : x = y,	_match : decidable (xs () = ys ()) → decidable (lazy_list.cons x xs = lazy_list.cons y ys),	h2 : xs () = ys ()	⊢ xs = ys
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : x = y,	_match : decidable (xs () = ys ()) → decidable (lazy_list.cons x xs = lazy_list.cons y ys),	h2 : xs () = ys ()	⊢ xs = ys
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : x = y,	_match : decidable (xs () = ys ()) → decidable (lazy_list.cons x xs = lazy_list.cons y ys),	h2 : xs () = ys (),	u : unit	⊢ xs u = ys u
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : x = y,	_match : decidable (xs () = ys ()) → decidable (lazy_list.cons x xs = lazy_list.cons y ys),	h2 : xs () = ys ()	⊢ xs punit.star = ys punit.star
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : x = y,	_match : decidable (xs () = ys ()) → decidable (lazy_list.cons x xs = lazy_list.cons y ys),	h2 : xs () = ys (),	this : xs = ys	⊢ lazy_list.cons x xs = lazy_list.cons y ys
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : ¬x = y	⊢ ¬lazy_list.cons x xs = lazy_list.cons y ys
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : ¬x = y	⊢ ¬lazy_list.cons x xs = lazy_list.cons y ys
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	x : α,	xs : thunk (lazy_list α),	y : α,	ys : thunk (lazy_list α),	h : ¬x = y,	ᾰ : lazy_list.cons x xs = lazy_list.cons y ys	⊢ false
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	_x : α,	_x : thunk (lazy_list α)	⊢ ¬lazy_list.nil = lazy_list.cons _x _x
α : Type u,	_inst_1 : _root_.decidable_eq α,	decidable_eq : _root_.decidable_eq (lazy_list α),	_x : α,	_x : thunk (lazy_list α)	⊢ ¬lazy_list.cons _x _x = lazy_list.nil
α : Type u_1,	_inst_1 : decidable_eq α,	a : α,	l₁ l₂ : list α,	h : a ∈ l₂	⊢ (a :: l₁).bag_inter l₂ = a :: l₁.bag_inter (l₂.erase a)
α : Type u_1,	_inst_1 : decidable_eq α,	a : α,	l₁ : list α,	h : a ∈ list.nil	⊢ (a :: l₁).bag_inter list.nil = a :: l₁.bag_inter (list.nil.erase a)
α : Type u_1,	_inst_1 : decidable_eq α,	a : α,	l₁ : list α,	l₂_hd : α,	l₂_tl : list α,	h : a ∈ l₂_hd :: l₂_tl	⊢ (a :: l₁).bag_inter (l₂_hd :: l₂_tl) = a :: l₁.bag_inter ((l₂_hd :: l₂_tl).erase a)
α : Type u_1,	_inst_1 : decidable_eq α,	a : α,	l₁ l₂ : list α,	h : a ∈ l₂	⊢ (a :: l₁).bag_inter l₂ = a :: l₁.bag_inter (l₂.erase a)
α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	l₂ : list α	⊢ list.nil.bag_inter l₂ <+ list.nil
α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	b : α,	l₁ l₂ : list α	⊢ (b :: l₁).bag_inter l₂ <+ b :: l₁
α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	b : α,	l₁ l₂ : list α,	h : b ∈ l₂	⊢ (b :: l₁).bag_inter l₂ <+ b :: l₁
α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	b : α,	l₁ l₂ : list α,	h : b ∉ l₂	⊢ (b :: l₁).bag_inter l₂ <+ b :: l₁
α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	b : α,	l₁ l₂ : list α	⊢ (b :: l₁).bag_inter l₂ <+ b :: l₁
α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	b : α,	l₁ l₂ : list α,	h : b ∈ l₂	⊢ l₁.bag_inter (l₂.erase b) <+ l₁
α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	b : α,	l₁ l₂ : list α,	h : b ∈ l₂	⊢ b :: l₁.bag_inter (l₂.erase b) <+ b :: l₁		α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	b : α,	l₁ l₂ : list α,	h : b ∉ l₂	⊢ l₁.bag_inter l₂ <+ b :: l₁
α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	b : α,	l₁ l₂ : list α,	h : b ∈ l₂	⊢ b :: l₁.bag_inter (l₂.erase b) <+ b :: l₁
α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	b : α,	l₁ l₂ : list α,	h : b ∉ l₂	⊢ l₁.bag_inter l₂ <+ l₁
α : Type u_1,	_inst_1 : decidable_eq α,	bag_inter_sublist_left : ∀ (l₁ l₂ : list α), l₁.bag_inter l₂ <+ l₁,	b : α,	l₁ l₂ : list α,	h : b ∉ l₂	⊢ l₁.bag_inter l₂ <+ b :: l₁
α : Type u,	nth_concat_length : ∀ (l : list α) (a : α), (l ++ [a]).nth l.length = option.some a,	b : α,	l : list α,	a : α	⊢ (b :: l ++ [a]).nth (b :: l).length = option.some a
α : Type u,	β : Type v,	f : α → β,	l : list α	⊢ list.map f l = list.nil → l = list.nil
α : Type u,	β : Type v,	f : α → β	⊢ list.map f list.nil = list.nil → list.nil = list.nil
α : Type u,	β : Type v,	f : α → β,	l_hd : α,	l_tl : list α	⊢ list.map f (l_hd :: l_tl) = list.nil → l_hd :: l_tl = list.nil
α : Type u,	β : Type v,	f : α → β,	l : list α	⊢ list.map f l = list.nil → l = list.nil
α : Type u,	β : Type v,	γ : Type w,	g : β → list γ,	f : α → β,	map_bind : ∀ (l : list α), (list.map f l).bind g = l.bind (λ (a : α), g (f a)),	a : α,	l : list α	⊢ (list.map f (a :: l)).bind g = (a :: l).bind (λ (a : α), g (f a))
α : Type u,	β : Type v,	f g : α → β → α,	a : α,	l : list β,	H : ∀ (a : α) (b : β), b ∈ l → f a b = g a b	⊢ list.foldl f a l = list.foldl g a l
α : Type u,	β : Type v,	f g : α → β → α,	H : ∀ (a : α) (b : β), b ∈ list.nil → f a b = g a b,	a : α	⊢ list.foldl f a list.nil = list.foldl g a list.nil
α : Type u,	β : Type v,	f g : α → β → α,	H : ∀ (a : α) (b : β), b ∈ list.nil → f a b = g a b,	a : α	⊢ list.foldl f a list.nil = list.foldl g a list.nil		case list.cons	α : Type u,	β : Type v,	f g : α → β → α,	hd : β,	tl : list β,	ih : (∀ (a : α) (b : β), b ∈ tl → f a b = g a b) → ∀ (a : α), list.foldl f a tl = list.foldl g a tl,	H : ∀ (a : α) (b : β), b ∈ hd :: tl → f a b = g a b,	a : α	⊢ list.foldl f a (hd :: tl) = list.foldl g a (hd :: tl)
α : Type u,	β : Type v,	f g : α → β → α,	hd : β,	tl : list β,	ih : (∀ (a : α) (b : β), b ∈ tl → f a b = g a b) → ∀ (a : α), list.foldl f a tl = list.foldl g a tl,	H : ∀ (a : α) (b : β), b ∈ hd :: tl → f a b = g a b,	a : α	⊢ list.foldl f a (hd :: tl) = list.foldl g a (hd :: tl)
α : Type u,	β : Type v,	f g : α → β → α,	hd : β,	tl : list β,	ih : (∀ (a : α) (b : β), b ∈ tl → f a b = g a b) → ∀ (a : α), list.foldl f a tl = list.foldl g a tl,	H : ∀ (a : α) (b : β), b ∈ hd :: tl → f a b = g a b,	a : α	⊢ list.foldl f (f a hd) tl = list.foldl g (g a hd) tl
α : Type u,	β : Type v,	f : β → α → β,	length_scanl : ∀ (a : β) (l : list α), (list.scanl f a l).length = l.length + 1,	a : β,	x : α,	l : list α	⊢ (list.scanl f a (x :: l)).length = (x :: l).length + 1
α : Type u,	β : Type v,	f : α → β → α,	hf : ∀ (a : α) (b c : β), f (f a b) c = f (f a c) b,	foldl_eq_of_comm' : ∀ (a : α) (b : β) (l : list β), list.foldl f a (b :: l) = f (list.foldl f a l) b,	a : α,	b c : β,	l : list β	⊢ list.foldl f a (b :: c :: l) = f (list.foldl f a (c :: l)) b
M₀ : Type u_1,	_inst_2 : monoid_with_zero M₀,	_inst_3 : nontrivial M₀,	_inst_4 : no_zero_divisors M₀,	L : list M₀	⊢ L.prod = 0 ↔ 0 ∈ L
M₀ : Type u_1,	_inst_2 : monoid_with_zero M₀,	_inst_3 : nontrivial M₀,	_inst_4 : no_zero_divisors M₀	⊢ list.nil.prod = 0 ↔ 0 ∈ list.nil		case list.cons	M₀ : Type u_1,	_inst_2 : monoid_with_zero M₀,	_inst_3 : nontrivial M₀,	_inst_4 : no_zero_divisors M₀,	a : M₀,	L : list M₀,	ihL : L.prod = 0 ↔ 0 ∈ L	⊢ (a :: L).prod = 0 ↔ 0 ∈ a :: L
M₀ : Type u_1,	_inst_2 : monoid_with_zero M₀,	_inst_3 : nontrivial M₀,	_inst_4 : no_zero_divisors M₀	⊢ list.nil.prod = 0 ↔ 0 ∈ list.nil
M₀ : Type u_1,	_inst_2 : monoid_with_zero M₀,	_inst_3 : nontrivial M₀,	_inst_4 : no_zero_divisors M₀,	a : M₀,	L : list M₀,	ihL : L.prod = 0 ↔ 0 ∈ L	⊢ (a :: L).prod = 0 ↔ 0 ∈ a :: L
α : Type u,	i : ℕ	⊢ list.drop (list.take i (list.map list.length list.nil)).sum list.nil.join = (list.drop i list.nil).join
α : Type u,	i : ℕ	⊢ list.drop (list.take i (list.map list.length list.nil)).sum list.nil.join = (list.drop i list.nil).join		case list.cons	α : Type u,	L_hd : list α,	L_tl : list (list α),	L_ih : ∀ (i : ℕ), list.drop (list.take i (list.map list.length L_tl)).sum L_tl.join = (list.drop i L_tl).join,	i : ℕ	⊢ list.drop (list.take i (list.map list.length (L_hd :: L_tl))).sum (L_hd :: L_tl).join = (list.drop i (L_hd :: L_tl)).join
α : Type u,	L : list (list α),	i : ℕ	⊢ list.drop (list.take i (list.map list.length L)).sum L.join = (list.drop i L).join
α : Type u,	L_hd : list α,	L_tl : list (list α),	L_ih : ∀ (i : ℕ), list.drop (list.take i (list.map list.length L_tl)).sum L_tl.join = (list.drop i L_tl).join	⊢ list.drop (list.take 0 (list.map list.length (L_hd :: L_tl))).sum (L_hd :: L_tl).join = (list.drop 0 (L_hd :: L_tl)).join
α : Type u,	L_hd : list α,	L_tl : list (list α),	L_ih : ∀ (i : ℕ), list.drop (list.take i (list.map list.length L_tl)).sum L_tl.join = (list.drop i L_tl).join	⊢ list.drop (list.take 0 (list.map list.length (L_hd :: L_tl))).sum (L_hd :: L_tl).join = (list.drop 0 (L_hd :: L_tl)).join		case list.cons, nat.succ	α : Type u,	L_hd : list α,	L_tl : list (list α),	L_ih : ∀ (i : ℕ), list.drop (list.take i (list.map list.length L_tl)).sum L_tl.join = (list.drop i L_tl).join,	i : ℕ	⊢ list.drop (list.take i.succ (list.map list.length (L_hd :: L_tl))).sum (L_hd :: L_tl).join = (list.drop i.succ (L_hd :: L_tl)).join
α : Type u,	L_hd : list α,	L_tl : list (list α),	L_ih : ∀ (i : ℕ), list.drop (list.take i (list.map list.length L_tl)).sum L_tl.join = (list.drop i L_tl).join,	i : ℕ	⊢ list.drop (list.take i (list.map list.length (L_hd :: L_tl))).sum (L_hd :: L_tl).join = (list.drop i (L_hd :: L_tl)).join
α : Type u,	L_hd : list α,	L_tl : list (list α),	L_ih : ∀ (i : ℕ), list.drop (list.take i (list.map list.length L_tl)).sum L_tl.join = (list.drop i L_tl).join,	i : ℕ	⊢ list.drop (list.take i.succ (list.map list.length (L_hd :: L_tl))).sum (L_hd :: L_tl).join = (list.drop i.succ (L_hd :: L_tl)).join
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	xs ys : list α	⊢ list.split_on_p_aux' P xs ys = list.split_on_p_aux P xs (has_append.append ys)
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	xs ys : list α	⊢ list.split_on_p_aux' P xs ys = list.split_on_p_aux P xs (has_append.append ys)
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	ys : list α	⊢ list.split_on_p_aux' P list.nil ys = list.split_on_p_aux P list.nil (has_append.append ys)
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α	⊢ list.split_on_p_aux' P (a :: t) ys = list.split_on_p_aux P (a :: t) (has_append.append ys)
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α	⊢ ite (P a) (ys :: list.split_on_p_aux' P t list.nil) (list.split_on_p_aux' P t (ys ++ [a])) = ite (P a) (ys :: list.split_on_p_aux P t id) (list.split_on_p_aux P t (λ (l : list α), ys ++ a :: l))
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α,	h : P a	⊢ ys = ys ∧ list.split_on_p_aux' P t list.nil = list.split_on_p_aux P t id
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α,	h : ¬P a	⊢ list.split_on_p_aux' P t (ys ++ [a]) = list.split_on_p_aux P t (λ (l : list α), ys ++ a :: l)
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α	⊢ ite (P a) (ys :: list.split_on_p_aux' P t list.nil) (list.split_on_p_aux' P t (ys ++ [a])) = ite (P a) (ys :: list.split_on_p_aux P t id) (list.split_on_p_aux P t (λ (l : list α), ys ++ a :: l))
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α,	h : P a	⊢ ys = ys ∧ list.split_on_p_aux P t (has_append.append list.nil) = list.split_on_p_aux P t id		α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α,	h : ¬P a	⊢ list.split_on_p_aux P t (has_append.append (ys ++ [a])) = list.split_on_p_aux P t (λ (l : list α), ys ++ a :: l)
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α,	h : P a	⊢ ys = ys ∧ list.split_on_p_aux P t (has_append.append list.nil) = list.split_on_p_aux P t id
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α,	h : ¬P a	⊢ has_append.append (ys ++ [a]) = λ (l : list α), ys ++ a :: l
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α,	h : ¬P a,	x : list α,	n : ℕ,	a_1 : α	⊢ a_1 ∈ (ys ++ [a] ++ x).nth n ↔ a_1 ∈ (ys ++ a :: x).nth n
α : Type u,	P : α → Prop,	_inst_1 : decidable_pred P,	a : α,	t : list α,	ih : ∀ (ys : list α), list.split_on_p_aux' P t ys = list.split_on_p_aux P t (has_append.append ys),	ys : list α,	h : ¬P a	⊢ list.split_on_p_aux P t (has_append.append (ys ++ [a])) = list.split_on_p_aux P t (λ (l : list α), ys ++ a :: l)
α : Type u,	β : Type v,	f : α → option α,	g : α → β,	h : ∀ (a b : α), b ∈ f a → g a = g b,	lookmap_map_eq : ∀ (l : list α), list.map g (list.lookmap f l) = list.map g l,	a : α,	l : list α	⊢ list.map g (list.lookmap f (a :: l)) = list.map g (a :: l)
α : Type u,	β : Type v,	f : α → option α,	g : α → β,	h : ∀ (a b : α), b ∈ f a → g a = g b,	lookmap_map_eq : ∀ (l : list α), list.map g (list.lookmap f l) = list.map g l,	a : α,	l : list α,	h' : f a = option.none	⊢ list.map g (list.lookmap f (a :: l)) = list.map g (a :: l)		case option.some	α : Type u,	β : Type v,	f : α → option α,	g : α → β,	h : ∀ (a b : α), b ∈ f a → g a = g b,	lookmap_map_eq : ∀ (l : list α), list.map g (list.lookmap f l) = list.map g l,	a : α,	l : list α,	b : α,	h' : f a = option.some b	⊢ list.map g (list.lookmap f (a :: l)) = list.map g (a :: l)
α : Type u,	β : Type v,	f : α → option α,	g : α → β,	h : ∀ (a b : α), b ∈ f a → g a = g b,	lookmap_map_eq : ∀ (l : list α), list.map g (list.lookmap f l) = list.map g l,	a : α,	l : list α,	h' : f a = option.none	⊢ list.map g (list.lookmap f (a :: l)) = list.map g (a :: l)
α : Type u,	β : Type v,	f : α → option α,	g : α → β,	h : ∀ (a b : α), b ∈ f a → g a = g b,	lookmap_map_eq : ∀ (l : list α), list.map g (list.lookmap f l) = list.map g l,	a : α,	l : list α,	b : α,	h' : f a = option.some b	⊢ list.map g (list.lookmap f (a :: l)) = list.map g (a :: l)
α : Type u,	l₁ l₂ : list α,	_x : l₁ <:+: l₂,	_fun_match : l₁ <:+: l₂ → (∃ (t : list α), l₁ <+: t ∧ t <:+ l₂),	s t : list α,	e : s ++ l₁ ++ t = l₂	⊢ l₁ ++ t <:+ l₂
α : Type u,	l₁ l₂ : list α,	_x : l₁ <:+: l₂,	_fun_match : l₁ <:+: l₂ → (∃ (t : list α), l₁ <+: t ∧ t <:+ l₂),	s t : list α,	e : s ++ l₁ ++ t = l₂	⊢ l₁ ++ t <:+ l₂
α : Type u,	l₁ l₂ : list α,	_x : l₁ <:+: l₂,	_fun_match : l₁ <:+: l₂ → (∃ (t : list α), l₁ <+: t ∧ t <:+ l₂),	s t : list α,	e : s ++ l₁ ++ t = l₂	⊢ l₁ ++ t <:+ s ++ (l₁ ++ t)
α : Type u,	l₁ l₂ : list α,	_x : ∃ (t : list α), l₁ <+: t ∧ t <:+ l₂,	_fun_match : (∃ (t : list α), l₁ <+: t ∧ t <:+ l₂) → l₁ <:+: l₂,	t s : list α,	e : s ++ (l₁ ++ t) = l₂	⊢ s ++ l₁ ++ t = l₂
α : Type u,	l₁ l₂ : list α,	_x : ∃ (t : list α), l₁ <+: t ∧ t <:+ l₂,	_fun_match : (∃ (t : list α), l₁ <+: t ∧ t <:+ l₂) → l₁ <:+: l₂,	t s : list α,	e : s ++ (l₁ ++ t) = l₂	⊢ s ++ l₁ ++ t = l₂
α : Type u,	l₁ l₂ : list α,	_x : ∃ (t : list α), l₁ <+: t ∧ t <:+ l₂,	_fun_match : (∃ (t : list α), l₁ <+: t ∧ t <:+ l₂) → l₁ <:+: l₂,	t s : list α,	e : s ++ (l₁ ++ t) = l₂	⊢ s ++ (l₁ ++ t) = l₂
α : Type u,	_inst_1 : decidable_eq α,	a : α,	l : list α,	h : a ∈ l	⊢ (l.erase a).length = l.length.pred
α : Type u,	_inst_1 : decidable_eq α,	a : α,	l : list α,	h : a ∈ l	⊢ (list.erasep (eq a) l).length = l.length.pred
α : Type u,	_inst_1 : decidable_eq α,	a : α,	l : list α,	h : a ∈ l	⊢ (l.erase a).length = l.length.pred
α : Type u,	β : Type v,	f : α → β,	l : list α,	s₁ s₂ : list β,	h this : list.map f l = s₁ ++ s₂	⊢ ∃ (l₁ l₂ : list α), l = l₁ ++ l₂ ∧ list.map f l₁ = s₁ ∧ list.map f l₂ = s₂
α : Type u,	β : Type v,	f : α → β,	l : list α,	s₁ s₂ : list β,	h : list.map f l = s₁ ++ s₂	⊢ ∃ (l₁ l₂ : list α), l = l₁ ++ l₂ ∧ list.map f l₁ = s₁ ∧ list.map f l₂ = s₂
α : Type u,	β : Type v,	f : α → β,	l : list α,	s₁ s₂ : list β,	h : list.map f l = s₁ ++ s₂,	this : list.map f (list.take s₁.length l ++ list.drop s₁.length l) = s₁ ++ s₂	⊢ ∃ (l₁ l₂ : list α), list.take s₁.length l ++ list.drop s₁.length l = l₁ ++ l₂ ∧ list.map f l₁ = s₁ ∧ list.map f l₂ = s₂
α : Type u,	β : Type v,	f : α → β,	l : list α,	s₁ s₂ : list β,	h : list.map f l = s₁ ++ s₂,	this : list.map f (list.take s₁.length l) ++ list.map f (list.drop s₁.length l) = s₁ ++ s₂	⊢ ∃ (l₁ l₂ : list α), list.take s₁.length l ++ list.drop s₁.length l = l₁ ++ l₂ ∧ list.map f l₁ = s₁ ∧ list.map f l₂ = s₂
α : Type u,	β : Type v,	f : α → β,	l : list α,	s₁ s₂ : list β,	h : list.map f l = s₁ ++ s₂,	this : list.map f (list.take s₁.length l) ++ list.map f (list.drop s₁.length l) = s₁ ++ s₂	⊢ (list.map f (list.take s₁.length l)).length = s₁.length
α : Type u,	β : Type v,	f : α → β,	l : list α,	s₁ s₂ : list β,	h : list.map f l = s₁ ++ s₂,	this : list.map f (list.take s₁.length l) ++ list.map f (list.drop s₁.length l) = s₁ ++ s₂	⊢ s₁.length ≤ l.length
α : Type u,	β : Type v,	f : α → β,	l : list α,	s₁ s₂ : list β,	h : list.map f l = s₁ ++ s₂,	this : list.map f (list.take s₁.length l) ++ list.map f (list.drop s₁.length l) = s₁ ++ s₂	⊢ s₁.length ≤ s₁.length + s₂.length
α : Type u,	β : Type v,	l : list α,	b : β	⊢ list.map (function.const α b) l = list.repeat b l.length
α : Type u,	β : Type v,	l : list α,	b : β	⊢ list.map (function.const α b) l = list.repeat b l.length
α : Type u,	β : Type v,	l : list α,	b : β	⊢ list.map (function.const α b) l = list.repeat b l.length
α : Type u,	β : Type v,	b : β	⊢ list.map (function.const α b) list.nil = list.repeat b list.nil.length
α : Type u,	β : Type v,	b : β,	l_hd : α,	l_tl : list α,	l_ih : list.map (function.const α b) l_tl = list.repeat b l_tl.length	⊢ list.map (function.const α b) (l_hd :: l_tl) = list.repeat b (l_hd :: l_tl).length
α : Type u,	β : Type v,	b : β,	l_hd : α,	l_tl : list α,	l_ih : list.map (function.const α b) l_tl = list.repeat b l_tl.length	⊢ function.const α b l_hd :: list.repeat b l_tl.length = list.repeat b (l_hd :: l_tl).length
α : Type u,	β : Type v,	l : list α,	b : β	⊢ list.map (function.const α b) l = list.repeat b l.length
α : Type u,	last'_is_some : ∀ {l : list α}, ↥(l.last'.is_some) ↔ l ≠ list.nil	⊢ ↥(list.nil.last'.is_some) ↔ list.nil ≠ list.nil
α : Type u,	last'_is_some : ∀ {l : list α}, ↥(l.last'.is_some) ↔ l ≠ list.nil,	a : α	⊢ ↥([a].last'.is_some) ↔ [a] ≠ list.nil
α : Type u,	last'_is_some : ∀ {l : list α}, ↥(l.last'.is_some) ↔ l ≠ list.nil,	a b : α,	l : list α	⊢ ↥((a :: b :: l).last'.is_some) ↔ a :: b :: l ≠ list.nil
α : Type u,	l₁ l₂ : list α,	h : l₁ <+ l₂,	l : list α	⊢ l₁ ++ l <+ l₂ ++ l
α : Type u,	l l₁ l₂ : list α	⊢ list.nil ++ l <+ list.nil ++ l		case list.sublist.cons	α : Type u,	l l₁ l₂ h_l₁ h_l₂ : list α,	a : α,	h_ᾰ : h_l₁ <+ h_l₂,	ih : h_l₁ ++ l <+ h_l₂ ++ l	⊢ h_l₁ ++ l <+ a :: h_l₂ ++ l		case list.sublist.cons2	α : Type u,	l l₁ l₂ h_l₁ h_l₂ : list α,	a : α,	h_ᾰ : h_l₁ <+ h_l₂,	ih : h_l₁ ++ l <+ h_l₂ ++ l	⊢ a :: h_l₁ ++ l <+ a :: h_l₂ ++ l
α : Type u,	l l₁ l₂ : list α	⊢ list.nil ++ l <+ list.nil ++ l
α : Type u,	l l₁ l₂ h_l₁ h_l₂ : list α,	a : α,	h_ᾰ : h_l₁ <+ h_l₂,	ih : h_l₁ ++ l <+ h_l₂ ++ l	⊢ h_l₁ ++ l <+ a :: h_l₂ ++ l		case list.sublist.cons2	α : Type u,	l l₁ l₂ h_l₁ h_l₂ : list α,	a : α,	h_ᾰ : h_l₁ <+ h_l₂,	ih : h_l₁ ++ l <+ h_l₂ ++ l	⊢ a :: h_l₁ ++ l <+ a :: h_l₂ ++ l
α : Type u,	l l₁ l₂ h_l₁ h_l₂ : list α,	a : α,	h_ᾰ : h_l₁ <+ h_l₂,	ih : h_l₁ ++ l <+ h_l₂ ++ l	⊢ h_l₁ ++ l <+ a :: h_l₂ ++ l
α : Type u,	l l₁ l₂ h_l₁ h_l₂ : list α,	a : α,	h_ᾰ : h_l₁ <+ h_l₂,	ih : h_l₁ ++ l <+ h_l₂ ++ l	⊢ a :: h_l₁ ++ l <+ a :: h_l₂ ++ l
α : Type u_1,	_inst_1 : decidable_eq α,	l : list α,	x y : α,	h : x ∈ y :: l,	hy : x ≠ y,	hx : x ≠ (y :: l).last _	⊢ x ∈ l
α : Type u_1,	_inst_1 : decidable_eq α,	l : list α,	x y : α,	h : x ∈ y :: l,	hy : x ≠ y,	hx : x ≠ (y :: l).last _	⊢ (y :: l).next x h = l.next x _
α : Type u_1,	_inst_1 : decidable_eq α,	l : list α,	x y : α,	h : x ∈ y :: l,	hy : x ≠ y,	hx : x ≠ (y :: l).last _	⊢ x ≠ l.last _		α : Type u_1,	_inst_1 : decidable_eq α,	l : list α,	x y : α,	h : x ∈ y :: l,	hy : x ≠ y,	hx : x ≠ (y :: l).last _	⊢ x ∈ l
α : Type u_1,	_inst_1 : decidable_eq α,	l : list α,	x y : α,	h : x ∈ y :: l,	hy : x ≠ y,	hx : x ≠ (y :: l).last _	⊢ x ≠ l.last _
α : Type u_1,	s : cycle α,	l₁ l₂ : list α,	h : l₁ ~r l₂	⊢ (λ (l : list α), ↑(l.cyclic_permutations)) l₁ = (λ (l : list α), ↑(l.cyclic_permutations)) l₂
α : Type u_1,	_inst_1 : decidable_eq α,	s : cycle α,	hs : s.nodup,	x : α,	hx : x ∈ s	⊢ s.reverse.next _ x _ = s.prev hs x hx
α : Type u_1,	x : α,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : x ∈+ l₁ → x ∈+ l₂,	hx : x ∈+ y :: l₁	⊢ x ∈+ y :: l₂
α : Type u_1,	x : α,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : x ∈+ l₁ → x ∈+ l₂,	hx : y = x ∧ x ∈ l₁ ∨ x ∈+ l₁	⊢ y = x ∧ x ∈ l₂ ∨ x ∈+ l₂
α : Type u_1,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : y ∈+ l₁ → y ∈+ l₂,	hx : y ∈ l₁	⊢ y = y ∧ y ∈ l₂ ∨ y ∈+ l₂		α : Type u_1,	x : α,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : x ∈+ l₁ → x ∈+ l₂,	hx : x ∈+ l₁	⊢ y = x ∧ x ∈ l₂ ∨ x ∈+ l₂
α : Type u_1,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : y ∈+ l₁ → y ∈+ l₂,	hx : y ∈ l₁	⊢ y = y ∧ y ∈ l₂ ∨ y ∈+ l₂
α : Type u_1,	x : α,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : x ∈+ l₁ → x ∈+ l₂,	hx : x ∈+ l₁	⊢ y = x ∧ x ∈ l₂ ∨ x ∈+ l₂
α : Type u_1,	l : list α	⊢ l.nodup ↔ ∀ (x : α), ¬x ∈+ l
α : Type u_1,	l : list α,	x : α,	_inst_1 : decidable_eq α	⊢ x ∈+ l ↔ 2 ≤ list.count x l
α : Type u_1,	l : list α,	x : α,	l' : list α,	hx : x ∈+ l,	h : l <+ l'	⊢ x ∈+ l'
α : Type u_1,	x : α,	l l' : list α,	hx : x ∈+ list.nil	⊢ x ∈+ list.nil		case list.sublist.cons	α : Type u_1,	x : α,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : x ∈+ l₁ → x ∈+ l₂,	hx : x ∈+ l₁	⊢ x ∈+ y :: l₂		case list.sublist.cons2	α : Type u_1,	x : α,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : x ∈+ l₁ → x ∈+ l₂,	hx : x ∈+ y :: l₁	⊢ x ∈+ y :: l₂
α : Type u_1,	x : α,	l l' : list α,	hx : x ∈+ list.nil	⊢ x ∈+ list.nil
α : Type u_1,	x : α,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : x ∈+ l₁ → x ∈+ l₂,	hx : x ∈+ l₁	⊢ x ∈+ y :: l₂		case list.sublist.cons2	α : Type u_1,	x : α,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : x ∈+ l₁ → x ∈+ l₂,	hx : x ∈+ y :: l₁	⊢ x ∈+ y :: l₂
α : Type u_1,	x : α,	l l' l₁ l₂ : list α,	y : α,	h : l₁ <+ l₂,	IH : x ∈+ l₁ → x ∈+ l₂,	hx : x ∈+ l₁	⊢ x ∈+ y :: l₂
α : Type u_1,	β : Type u_2,	R : α → β → Prop,	a : α,	b : β,	l₁ : list α,	l₂ : list β,	h : list.forall₂ R (a :: l₁) (b :: l₂)	⊢ R a b ∧ list.forall₂ R l₁ l₂
α : Type u_1,	β : Type u_2,	R : α → β → Prop,	a : α,	b : β,	l₁ : list α,	l₂ : list β,	h : list.forall₂ R (a :: l₁) (b :: l₂)	⊢ R a b ∧ list.forall₂ R l₁ l₂
α : Type u_1,	β : Type u_2,	R : α → β → Prop,	a : α,	b : β,	l₁ : list α,	l₂ : list β,	h : list.forall₂ R (a :: l₁) (b :: l₂)	⊢ R a b ∧ list.forall₂ R l₁ l₂
α : Type u_1,	β : Type u_2,	R : α → β → Prop,	a : α,	b : β,	l₁ : list α,	l₂ : list β,	h_ᾰ : R a b,	h_ᾰ_1 : list.forall₂ R l₁ l₂	⊢ R a b ∧ list.forall₂ R l₁ l₂
α : Type u_1,	β : Type u_2,	R : α → β → Prop,	a : α,	b : β,	l₁ : list α,	l₂ : list β,	h_ᾰ : R a b,	h_ᾰ_1 : list.forall₂ R l₁ l₂	⊢ R a b
α : Type u_1,	β : Type u_2,	R : α → β → Prop,	a : α,	b : β,	l₁ : list α,	l₂ : list β,	h_ᾰ : R a b,	h_ᾰ_1 : list.forall₂ R l₁ l₂	⊢ list.forall₂ R l₁ l₂
m : Type u → Type v,	_inst_1 : applicative m,	α : Type u_1,	β : Type u,	f : ℕ → α → m β,	as : list α	⊢ list.mmap_with_index f as = list.traverse (function.uncurry f) as.enum
α : Type u,	β : Type v,	l : list α,	f : ℕ → α → β,	n : ℕ	⊢ list.map_with_index_core f n l = list.map_with_index (λ (i : ℕ) (a : α), f (i + n) a) l
α : Type u,	β : Type v,	f : ℕ → α → β,	n : ℕ	⊢ list.map_with_index_core f n list.nil = list.map_with_index (λ (i : ℕ) (a : α), f (i + n) a) list.nil		case list.cons	α : Type u,	β : Type v,	hd : α,	tl : list α,	hl : ∀ (f : ℕ → α → β) (n : ℕ), list.map_with_index_core f n tl = list.map_with_index (λ (i : ℕ) (a : α), f (i + n) a) tl,	f : ℕ → α → β,	n : ℕ	⊢ list.map_with_index_core f n (hd :: tl) = list.map_with_index (λ (i : ℕ) (a : α), f (i + n) a) (hd :: tl)
α : Type u,	β : Type v,	f : ℕ → α → β,	n : ℕ	⊢ list.map_with_index_core f n list.nil = list.map_with_index (λ (i : ℕ) (a : α), f (i + n) a) list.nil
α : Type u,	β : Type v,	hd : α,	tl : list α,	hl : ∀ (f : ℕ → α → β) (n : ℕ), list.map_with_index_core f n tl = list.map_with_index (λ (i : ℕ) (a : α), f (i + n) a) tl,	f : ℕ → α → β,	n : ℕ	⊢ list.map_with_index_core f n (hd :: tl) = list.map_with_index (λ (i : ℕ) (a : α), f (i + n) a) (hd :: tl)
α : Type u,	β : Type v,	hd : α,	tl : list α,	hl : ∀ (f : ℕ → α → β) (n : ℕ), list.map_with_index_core f n tl = list.map_with_index (λ (i : ℕ) (a : α), f (i + n) a) tl,	f : ℕ → α → β,	n : ℕ	⊢ list.map_with_index_core f n (hd :: tl) = list.map_with_index_core (λ (i : ℕ) (a : α), f (i + n) a) 0 (hd :: tl)
α : Type u_1,	R : α → α → Prop,	a : α	⊢ list.pairwise R [a]
α : Type u_1,	R : α → α → Prop,	pairwise_sublists' : ∀ {l : list α}, list.pairwise R l → list.pairwise (list.lex (function.swap R)) l.sublists',	a : α,	l : list α,	H₁ : ∀ (a' : α), a' ∈ l → R a a',	H₂ : list.pairwise R l	⊢ list.pairwise (list.lex (function.swap R)) (a :: l).sublists'
α : Type u_1,	R : α → α → Prop,	pairwise_sublists' : ∀ {l : list α}, list.pairwise R l → list.pairwise (list.lex (function.swap R)) l.sublists',	a : α,	l : list α,	H₁ : ∀ (a' : α), a' ∈ l → R a a',	H₂ : list.pairwise R l	⊢ list.pairwise (list.lex (function.swap R)) l.sublists' ∧ list.pairwise (λ (a_1 b : list α), list.lex (function.swap R) (a :: a_1) (a :: b)) l.sublists' ∧ ∀ (x : list α), x <+ l → ∀ (y x_1 : list α), x_1 <+ l → a :: x_1 = y → list.lex (function.swap R) x y
α : Type u_1,	R : α → α → Prop,	pairwise_sublists' : ∀ {l : list α}, list.pairwise R l → list.pairwise (list.lex (function.swap R)) l.sublists',	a : α,	l : list α,	H₁ : ∀ (a' : α), a' ∈ l → R a a',	H₂ : list.pairwise R l,	IH : list.pairwise (list.lex (function.swap R)) l.sublists'	⊢ list.pairwise (list.lex (function.swap R)) l.sublists' ∧ list.pairwise (λ (a_1 b : list α), list.lex (function.swap R) (a :: a_1) (a :: b)) l.sublists' ∧ ∀ (x : list α), x <+ l → ∀ (y x_1 : list α), x_1 <+ l → a :: x_1 = y → list.lex (function.swap R) x y
α : Type u_1,	R : α → α → Prop,	pairwise_sublists' : ∀ {l : list α}, list.pairwise R l → list.pairwise (list.lex (function.swap R)) l.sublists',	a : α,	l : list α,	H₁ : ∀ (a' : α), a' ∈ l → R a a',	H₂ : list.pairwise R l,	IH : list.pairwise (list.lex (function.swap R)) l.sublists',	l₁ : list α,	sl₁ : l₁ <+ l,	x l₂ : list α,	sl₂ : l₂ <+ l,	e : a :: l₂ = x	⊢ list.lex (function.swap R) l₁ x
α : Type u_1,	R : α → α → Prop,	pairwise_sublists' : ∀ {l : list α}, list.pairwise R l → list.pairwise (list.lex (function.swap R)) l.sublists',	a : α,	l : list α,	H₁ : ∀ (a' : α), a' ∈ l → R a a',	H₂ : list.pairwise R l,	IH : list.pairwise (list.lex (function.swap R)) l.sublists'	⊢ ∀ (x : list α), x <+ l → ∀ (y x_1 : list α), x_1 <+ l → a :: x_1 = y → list.lex (function.swap R) x y
α : Type u_1,	R : α → α → Prop,	pairwise_sublists' : ∀ {l : list α}, list.pairwise R l → list.pairwise (list.lex (function.swap R)) l.sublists',	a : α,	l : list α,	H₁ : ∀ (a' : α), a' ∈ l → R a a',	H₂ : list.pairwise R l,	IH : list.pairwise (list.lex (function.swap R)) l.sublists',	l₂ : list α,	sl₂ : l₂ <+ l,	sl₁ : list.nil <+ l	⊢ list.lex (function.swap R) list.nil (a :: l₂)
α : Type u_1,	R : α → α → Prop,	pairwise_sublists' : ∀ {l : list α}, list.pairwise R l → list.pairwise (list.lex (function.swap R)) l.sublists',	a : α,	l : list α,	H₁ : ∀ (a' : α), a' ∈ l → R a a',	H₂ : list.pairwise R l,	IH : list.pairwise (list.lex (function.swap R)) l.sublists',	l₂ : list α,	sl₂ : l₂ <+ l,	sl₁ : list.nil <+ l	⊢ list.lex (function.swap R) list.nil (a :: l₂)		case list.cons	α : Type u_1,	R : α → α → Prop,	pairwise_sublists' : ∀ {l : list α}, list.pairwise R l → list.pairwise (list.lex (function.swap R)) l.sublists',	a : α,	l : list α,	H₁ : ∀ (a' : α), a' ∈ l → R a a',	H₂ : list.pairwise R l,	IH : list.pairwise (list.lex (function.swap R)) l.sublists',	l₂ : list α,	sl₂ : l₂ <+ l,	b : α,	l₁ : list α,	sl₁ : b :: l₁ <+ l	⊢ list.lex (function.swap R) (b :: l₁) (a :: l₂)
α : Type u_1,	R : α → α → Prop,	pairwise_sublists' : ∀ {l : list α}, list.pairwise R l → list.pairwise (list.lex (function.swap R)) l.sublists',	a : α,	l : list α,	H₁ : ∀ (a' : α), a' ∈ l → R a a',	H₂ : list.pairwise R l,	IH : list.pairwise (list.lex (function.swap R)) l.sublists',	l₁ : list α,	sl₁ : l₁ <+ l,	l₂ : list α,	sl₂ : l₂ <+ l	⊢ list.lex (function.swap R) l₁ (a :: l₂)
α : Type u_1,	R : α → α → Prop,	pairwise_sublists' : ∀ {l : list α}, list.pairwise R l → list.pairwise (list.lex (function.swap R)) l.sublists',	a : α,	l : list α,	H₁ : ∀ (a' : α), a' ∈ l → R a a',	H₂ : list.pairwise R l,	IH : list.pairwise (list.lex (function.swap R)) l.sublists',	l₂ : list α,	sl₂ : l₂ <+ l,	b : α,	l₁ : list α,	sl₁ : b :: l₁ <+ l	⊢ list.lex (function.swap R) (b :: l₁) (a :: l₂)
α : Type uu,	s : list α,	x : α,	n : ℕ,	hn : n < (list.permutations'_aux x s).length	⊢ (list.permutations'_aux x s).nth_le n hn = list.insert_nth n x s
α : Type uu,	x : α,	n : ℕ,	hn : n < (list.permutations'_aux x list.nil).length	⊢ (list.permutations'_aux x list.nil).nth_le n hn = list.insert_nth n x list.nil
α : Type uu,	x : α,	n : ℕ,	hn : n < (list.permutations'_aux x list.nil).length	⊢ (list.permutations'_aux x list.nil).nth_le n hn = list.insert_nth n x list.nil		case list.cons	α : Type uu,	x y : α,	s : list α,	IH : ∀ (n : ℕ) (hn : n < (list.permutations'_aux x s).length), (list.permutations'_aux x s).nth_le n hn = list.insert_nth n x s,	n : ℕ,	hn : n < (list.permutations'_aux x (y :: s)).length	⊢ (list.permutations'_aux x (y :: s)).nth_le n hn = list.insert_nth n x (y :: s)
α : Type uu,	x : α,	n : ℕ,	hn : n < (list.permutations'_aux x list.nil).length,	hn : n = 0	⊢ (list.permutations'_aux x list.nil).nth_le n hn = list.insert_nth n x list.nil
α : Type uu,	x y : α,	s : list α,	IH : ∀ (n : ℕ) (hn : n < (list.permutations'_aux x s).length), (list.permutations'_aux x s).nth_le n hn = list.insert_nth n x s,	n : ℕ,	hn : n < (list.permutations'_aux x (y :: s)).length	⊢ (list.permutations'_aux x (y :: s)).nth_le n hn = list.insert_nth n x (y :: s)
α : Type uu,	x y : α,	s : list α,	IH : ∀ (n : ℕ) (hn : n < (list.permutations'_aux x s).length), (list.permutations'_aux x s).nth_le n hn = list.insert_nth n x s,	hn : 0 < (list.permutations'_aux x (y :: s)).length	⊢ (list.permutations'_aux x (y :: s)).nth_le 0 hn = list.insert_nth 0 x (y :: s)		case list.cons, nat.succ	α : Type uu,	x y : α,	s : list α,	IH : ∀ (n : ℕ) (hn : n < (list.permutations'_aux x s).length), (list.permutations'_aux x s).nth_le n hn = list.insert_nth n x s,	n : ℕ,	hn : n.succ < (list.permutations'_aux x (y :: s)).length	⊢ (list.permutations'_aux x (y :: s)).nth_le n.succ hn = list.insert_nth n.succ x (y :: s)
α : Type uu,	x y : α,	s : list α,	IH : ∀ (n : ℕ) (hn : n < (list.permutations'_aux x s).length), (list.permutations'_aux x s).nth_le n hn = list.insert_nth n x s,	hn : 0 < (list.permutations'_aux x (y :: s)).length	⊢ (list.permutations'_aux x (y :: s)).nth_le 0 hn = list.insert_nth 0 x (y :: s)
α : Type uu,	x y : α,	s : list α,	IH : ∀ (n : ℕ) (hn : n < (list.permutations'_aux x s).length), (list.permutations'_aux x s).nth_le n hn = list.insert_nth n x s,	n : ℕ,	hn : n.succ < (list.permutations'_aux x (y :: s)).length	⊢ (list.permutations'_aux x (y :: s)).nth_le n.succ hn = list.insert_nth n.succ x (y :: s)
α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	l l' : list α,	hl : l ~ l',	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b)	⊢ list.rec b f l == list.rec b f l'
α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' : list α	⊢ list.rec b f list.nil == list.rec b f list.nil
α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' : list α	⊢ list.rec b f list.nil == list.rec b f list.nil		case list.perm.cons	α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' : list α,	hl_x : α,	hl_l₁ hl_l₂ : list α,	hl_ᾰ : hl_l₁ ~ hl_l₂,	hl_ih : list.rec b f hl_l₁ == list.rec b f hl_l₂	⊢ list.rec b f (hl_x :: hl_l₁) == list.rec b f (hl_x :: hl_l₂)		case list.perm.swap	α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' : list α,	hl_x hl_y : α,	hl_l : list α	⊢ list.rec b f (hl_y :: hl_x :: hl_l) == list.rec b f (hl_x :: hl_y :: hl_l)		case list.perm.trans	α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' hl_l₁ hl_l₂ hl_l₃ : list α,	hl_ᾰ : hl_l₁ ~ hl_l₂,	hl_ᾰ_1 : hl_l₂ ~ hl_l₃,	hl_ih_ᾰ : list.rec b f hl_l₁ == list.rec b f hl_l₂,	hl_ih_ᾰ_1 : list.rec b f hl_l₂ == list.rec b f hl_l₃	⊢ list.rec b f hl_l₁ == list.rec b f hl_l₃
α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' : list α,	a : α,	l l' : list α,	h : l ~ l',	ih : list.rec b f l == list.rec b f l'	⊢ list.rec b f (a :: l) == list.rec b f (a :: l')
α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' : list α,	hl_x : α,	hl_l₁ hl_l₂ : list α,	hl_ᾰ : hl_l₁ ~ hl_l₂,	hl_ih : list.rec b f hl_l₁ == list.rec b f hl_l₂	⊢ list.rec b f (hl_x :: hl_l₁) == list.rec b f (hl_x :: hl_l₂)		case list.perm.swap	α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' : list α,	hl_x hl_y : α,	hl_l : list α	⊢ list.rec b f (hl_y :: hl_x :: hl_l) == list.rec b f (hl_x :: hl_y :: hl_l)		case list.perm.trans	α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' hl_l₁ hl_l₂ hl_l₃ : list α,	hl_ᾰ : hl_l₁ ~ hl_l₂,	hl_ᾰ_1 : hl_l₂ ~ hl_l₃,	hl_ih_ᾰ : list.rec b f hl_l₁ == list.rec b f hl_l₂,	hl_ih_ᾰ_1 : list.rec b f hl_l₂ == list.rec b f hl_l₃	⊢ list.rec b f hl_l₁ == list.rec b f hl_l₃
α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' : list α,	a a' : α,	l : list α	⊢ list.rec b f (a' :: a :: l) == list.rec b f (a :: a' :: l)
α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' : list α,	hl_x hl_y : α,	hl_l : list α	⊢ list.rec b f (hl_y :: hl_x :: hl_l) == list.rec b f (hl_x :: hl_y :: hl_l)		case list.perm.trans	α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' hl_l₁ hl_l₂ hl_l₃ : list α,	hl_ᾰ : hl_l₁ ~ hl_l₂,	hl_ᾰ_1 : hl_l₂ ~ hl_l₃,	hl_ih_ᾰ : list.rec b f hl_l₁ == list.rec b f hl_l₂,	hl_ih_ᾰ_1 : list.rec b f hl_l₂ == list.rec b f hl_l₃	⊢ list.rec b f hl_l₁ == list.rec b f hl_l₃
α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' hl_l₁ hl_l₂ hl_l₃ : list α,	hl_ᾰ : hl_l₁ ~ hl_l₂,	hl_ᾰ_1 : hl_l₂ ~ hl_l₃,	hl_ih_ᾰ : list.rec b f hl_l₁ == list.rec b f hl_l₂,	hl_ih_ᾰ_1 : list.rec b f hl_l₂ == list.rec b f hl_l₃	⊢ list.rec b f hl_l₁ == list.rec b f hl_l₃
α : Type uu,	β : list α → Sort u_1,	f : Π (a : α) (l : list α), β l → β (a :: l),	b : β list.nil,	f_congr : ∀ {a : α} {l l' : list α} {b : β l} {b' : β l'}, l ~ l' → b == b' → f a l b == f a l' b',	f_swap : ∀ {a a' : α} {l : list α} {b : β l}, f a (a' :: l) (f a' l b) == f a' (a :: l) (f a l b),	l l' l₁ l₂ l₃ : list α,	h₁ : l₁ ~ l₂,	h₂ : l₂ ~ l₃,	ih₁ : list.rec b f l₁ == list.rec b f l₂,	ih₂ : list.rec b f l₂ == list.rec b f l₃	⊢ list.rec b f l₁ == list.rec b f l₃
α : Type uu,	f : α → option α,	l₁ l₂ : list α,	H : list.pairwise (λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d) l₁,	p : l₁ ~ l₂	⊢ list.lookmap f l₁ ~ list.lookmap f l₂
α : Type uu,	f : α → option α,	l₁ l₂ : list α,	H : list.pairwise (λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d) l₁,	p : l₁ ~ l₂,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d	⊢ list.lookmap f l₁ ~ list.lookmap f l₂
α : Type uu,	f : α → option α,	l₁ l₂ : list α,	p : l₁ ~ l₂,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	H : list.pairwise F l₁	⊢ list.lookmap f l₁ ~ list.lookmap f l₂
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	H : list.pairwise F list.nil	⊢ list.lookmap f list.nil ~ list.lookmap f list.nil
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	H : list.pairwise F list.nil	⊢ list.lookmap f list.nil ~ list.lookmap f list.nil		case list.perm.cons	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a : α,	l₁ l₂ : list α,	p : l₁ ~ l₂,	IH : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	H : list.pairwise F (a :: l₁)	⊢ list.lookmap f (a :: l₁) ~ list.lookmap f (a :: l₂)		case list.perm.swap	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l)	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)		case list.perm.trans	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ l₁ l₂ l₃ : list α,	p₁ : l₁ ~ l₂,	p₂ : l₂ ~ l₃,	IH₁ : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	IH₂ : list.pairwise F l₂ → list.lookmap f l₂ ~ list.lookmap f l₃,	H : list.pairwise F l₁	⊢ list.lookmap f l₁ ~ list.lookmap f l₃
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a : α,	l₁ l₂ : list α,	p : l₁ ~ l₂,	IH : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	H : list.pairwise F (a :: l₁)	⊢ list.lookmap f (a :: l₁) ~ list.lookmap f (a :: l₂)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a : α,	l₁ l₂ : list α,	p : l₁ ~ l₂,	IH : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	H : list.pairwise F (a :: l₁),	h : f a = option.none	⊢ list.lookmap f l₁ ~ list.lookmap f l₂
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a : α,	l₁ l₂ : list α,	p : l₁ ~ l₂,	IH : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	H : list.pairwise F (a :: l₁),	h : f a = option.none	⊢ list.lookmap f (a :: l₁) ~ list.lookmap f (a :: l₂)		case list.perm.cons, option.some	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a : α,	l₁ l₂ : list α,	p : l₁ ~ l₂,	IH : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	H : list.pairwise F (a :: l₁),	val : α,	h : f a = option.some val	⊢ list.lookmap f (a :: l₁) ~ list.lookmap f (a :: l₂)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a : α,	l₁ l₂ : list α,	p : l₁ ~ l₂,	IH : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	H : list.pairwise F (a :: l₁),	h : f a = option.none	⊢ list.lookmap f (a :: l₁) ~ list.lookmap f (a :: l₂)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a : α,	l₁ l₂ : list α,	p : l₁ ~ l₂,	IH : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	H : list.pairwise F (a :: l₁)	⊢ list.lookmap f (a :: l₁) ~ list.lookmap f (a :: l₂)		case list.perm.swap	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l)	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)		case list.perm.trans	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ l₁ l₂ l₃ : list α,	p₁ : l₁ ~ l₂,	p₂ : l₂ ~ l₃,	IH₁ : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	IH₂ : list.pairwise F l₂ → list.lookmap f l₂ ~ list.lookmap f l₃,	H : list.pairwise F l₁	⊢ list.lookmap f l₁ ~ list.lookmap f l₃
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a : α,	l₁ l₂ : list α,	p : l₁ ~ l₂,	IH : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	H : list.pairwise F (a :: l₁),	val : α,	h : f a = option.some val	⊢ list.lookmap f (a :: l₁) ~ list.lookmap f (a :: l₂)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l)	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	h₁ : f a = option.none	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l)	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	h₁ : f a = option.none,	h₂ : f b = option.none	⊢ b :: a :: list.lookmap f l ~ a :: b :: list.lookmap f l
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	h₁ : f a = option.none,	h₂ : f b = option.none	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)		case list.perm.swap, option.none, option.some	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	h₁ : f a = option.none,	d : α,	h₂ : f b = option.some d	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)		case list.perm.swap, option.some, option.none	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c,	h₂ : f b = option.none	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)		case list.perm.swap, option.some, option.some	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c,	d : α,	h₂ : f b = option.some d	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	h₁ : f a = option.none,	h₂ : f b = option.none	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	h₁ : f a = option.none,	d : α,	h₂ : f b = option.some d	⊢ d :: a :: l ~ a :: d :: l
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	h₁ : f a = option.none,	d : α,	h₂ : f b = option.some d	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)		case list.perm.swap, option.some, option.none	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c,	h₂ : f b = option.none	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)		case list.perm.swap, option.some, option.some	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c,	d : α,	h₂ : f b = option.some d	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	h₁ : f a = option.none,	d : α,	h₂ : f b = option.some d	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c,	h₂ : f b = option.none	⊢ b :: c :: l ~ c :: b :: l
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c,	h₂ : f b = option.none	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)		case list.perm.swap, option.some, option.some	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c,	d : α,	h₂ : f b = option.some d	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c,	h₂ : f b = option.none	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c,	d : α,	h₂ : f b = option.some d	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l),	c : α,	h₁ : f a = option.some c,	d : α,	h₂ : f b = option.some d	⊢ d :: a :: l ~ c :: b :: l
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	a b : α,	l : list α,	H : list.pairwise F (b :: a :: l)	⊢ list.lookmap f (b :: a :: l) ~ list.lookmap f (a :: b :: l)		case list.perm.trans	α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ l₁ l₂ l₃ : list α,	p₁ : l₁ ~ l₂,	p₂ : l₂ ~ l₃,	IH₁ : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	IH₂ : list.pairwise F l₂ → list.lookmap f l₂ ~ list.lookmap f l₃,	H : list.pairwise F l₁	⊢ list.lookmap f l₁ ~ list.lookmap f l₃
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ : list α,	b : α,	l : list α,	d : α,	h₂ : f b = option.some d,	H : list.pairwise F (b :: b :: l),	h₁ : f b = option.some d	⊢ d :: b :: l ~ d :: b :: l
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ l₁ l₂ l₃ : list α,	p₁ : l₁ ~ l₂,	p₂ : l₂ ~ l₃,	IH₁ : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	IH₂ : list.pairwise F l₂ → list.lookmap f l₂ ~ list.lookmap f l₃,	H : list.pairwise F l₁	⊢ list.lookmap f l₁ ~ list.lookmap f l₃
α : Type uu,	f : α → option α,	F : α → α → Prop := λ (a b : α), ∀ (c : α), c ∈ f a → ∀ (d : α), d ∈ f b → a = b ∧ c = d,	l₁ l₂ l₁ l₂ l₃ : list α,	p₁ : l₁ ~ l₂,	p₂ : l₂ ~ l₃,	IH₁ : list.pairwise F l₁ → list.lookmap f l₁ ~ list.lookmap f l₂,	IH₂ : list.pairwise F l₂ → list.lookmap f l₂ ~ list.lookmap f l₃,	H : list.pairwise F l₁	⊢ symmetric F
n : ℕ	⊢ list.pairwise has_lt.lt (list.range n)
m n : ℕ	⊢ list.range m <+ list.range n ↔ m ≤ n
α : Type u,	l : list α,	n : ℕ	⊢ l.rotate n = list.drop (n % l.length) l ++ list.take (n % l.length) l
α : Type u,	l : list α,	n : ℕ,	hl : 0 = l.length	⊢ l.rotate n = list.drop (n % l.length) l ++ list.take (n % l.length) l		case or.inr	α : Type u,	l : list α,	n : ℕ,	hl : 0 < l.length	⊢ l.rotate n = list.drop (n % l.length) l ++ list.take (n % l.length) l
α : Type u,	l : list α,	n : ℕ,	hl : 0 = l.length	⊢ l.rotate n = list.drop (n % l.length) l ++ list.take (n % l.length) l
α : Type u,	l : list α,	n : ℕ,	hl : 0 < l.length	⊢ l.rotate n = list.drop (n % l.length) l ++ list.take (n % l.length) l
α : Type u,	l : list α	⊢ list.nil ~r l ↔ list.nil = l
α : Type u,	l l' : list α	⊢ l ∈ l'.cyclic_permutations ↔ l ~r l'
α : Type u,	l l' : list α	⊢ l ∈ l'.cyclic_permutations → l ~r l'
α : Type u,	l l' : list α,	h : l ∈ l'.cyclic_permutations	⊢ l ~r l'
α : Type u,	l l' : list α	⊢ l ∈ l'.cyclic_permutations → l ~r l'		α : Type u,	l l' : list α	⊢ l ~r l' → l ∈ l'.cyclic_permutations
α : Type u,	l' : list α,	k : ℕ,	hk : k < l'.cyclic_permutations.length,	h : l'.cyclic_permutations.nth_le k hk ∈ l'.cyclic_permutations	⊢ l'.cyclic_permutations.nth_le k hk ~r l'
α : Type u,	l l' : list α	⊢ l ~r l' → l ∈ l'.cyclic_permutations
α : Type u,	l l' : list α,	h : l ~r l'	⊢ l ∈ l'.cyclic_permutations
α : Type u,	l' : list α,	k : ℕ,	h : l'.rotate k ~r l'	⊢ l'.rotate k ∈ l'.cyclic_permutations
α : Type u,	l' : list α,	k : ℕ,	h : l'.rotate k ~r l'	⊢ ∃ (n : ℕ) (h : n < l'.cyclic_permutations.length), l'.cyclic_permutations.nth_le n h = l'.rotate k
α : Type u,	l' : list α,	k : ℕ,	h : l'.rotate k ~r l'	⊢ ∃ (n : ℕ), n < l'.cyclic_permutations.length ∧ l'.rotate n = l'.rotate k
α : Type u,	k : ℕ,	h : list.nil.rotate k ~r list.nil	⊢ ∃ (n : ℕ), n < list.nil.cyclic_permutations.length ∧ list.nil.rotate n = list.nil.rotate k		case list.cons	α : Type u,	k : ℕ,	x : α,	l : list α,	h : (x :: l).rotate k ~r (x :: l)	⊢ ∃ (n : ℕ), n < (x :: l).cyclic_permutations.length ∧ (x :: l).rotate n = (x :: l).rotate k
α : Type u,	k : ℕ,	h : list.nil.rotate k ~r list.nil	⊢ ∃ (n : ℕ), n < list.nil.cyclic_permutations.length ∧ list.nil.rotate n = list.nil.rotate k
α : Type u,	k : ℕ,	x : α,	l : list α,	h : (x :: l).rotate k ~r (x :: l)	⊢ ∃ (n : ℕ), n < (x :: l).cyclic_permutations.length ∧ (x :: l).rotate n = (x :: l).rotate k
α : Type u,	k : ℕ,	x : α,	l : list α,	h : (x :: l).rotate k ~r (x :: l)	⊢ k % (x :: l).length < (x :: l).cyclic_permutations.length
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	map_lookup_eq_find : ∀ (l : list (sigma β)), option.map (sigma.mk a) (list.lookup a l) = list.find (λ (s : sigma β), a = s.fst) l,	a' : α,	b' : β a',	l : list (sigma β)	⊢ option.map (sigma.mk a) (list.lookup a (⟨a', b'⟩ :: l)) = list.find (λ (s : sigma β), a = s.fst) (⟨a', b'⟩ :: l)
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	map_lookup_eq_find : ∀ (l : list (sigma β)), option.map (sigma.mk a) (list.lookup a l) = list.find (λ (s : sigma β), a = s.fst) l,	l : list (sigma β),	b' : β a	⊢ option.map (sigma.mk a) (list.lookup a (⟨a, b'⟩ :: l)) = list.find (λ (s : sigma β), a = s.fst) (⟨a, b'⟩ :: l)
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	map_lookup_eq_find : ∀ (l : list (sigma β)), option.map (sigma.mk a) (list.lookup a l) = list.find (λ (s : sigma β), a = s.fst) l,	a' : α,	b' : β a',	l : list (sigma β),	h : a = a'	⊢ option.map (sigma.mk a) (list.lookup a (⟨a', b'⟩ :: l)) = list.find (λ (s : sigma β), a = s.fst) (⟨a', b'⟩ :: l)		α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	map_lookup_eq_find : ∀ (l : list (sigma β)), option.map (sigma.mk a) (list.lookup a l) = list.find (λ (s : sigma β), a = s.fst) l,	a' : α,	b' : β a',	l : list (sigma β),	h : ¬a = a'	⊢ option.map (sigma.mk a) (list.lookup a (⟨a', b'⟩ :: l)) = list.find (λ (s : sigma β), a = s.fst) (⟨a', b'⟩ :: l)
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	map_lookup_eq_find : ∀ (l : list (sigma β)), option.map (sigma.mk a) (list.lookup a l) = list.find (λ (s : sigma β), a = s.fst) l,	a' : α,	b' : β a',	l : list (sigma β),	h : a = a'	⊢ option.map (sigma.mk a) (list.lookup a (⟨a', b'⟩ :: l)) = list.find (λ (s : sigma β), a = s.fst) (⟨a', b'⟩ :: l)
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	map_lookup_eq_find : ∀ (l : list (sigma β)), option.map (sigma.mk a) (list.lookup a l) = list.find (λ (s : sigma β), a = s.fst) l,	a' : α,	b' : β a',	l : list (sigma β),	h : ¬a = a'	⊢ option.map (sigma.mk a) (list.lookup a (⟨a', b'⟩ :: l)) = list.find (λ (s : sigma β), a = s.fst) (⟨a', b'⟩ :: l)
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l	⊢ list.kreplace a b l = l
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a' : α,	b' : β a',	h' : ⟨a', b'⟩ ∈ l	⊢ dite (a = ⟨a', b'⟩.fst) (λ (h : a = ⟨a', b'⟩.fst), option.some ⟨a, b⟩) (λ (h : ¬a = ⟨a', b'⟩.fst), option.none) = option.guard (λ (s : Σ {a : α}, β a), a = s.fst) ⟨a', b'⟩
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a' : α,	b' : β a',	h' : ⟨a', b'⟩ ∈ l	⊢ ite (a = a') (option.some ⟨a, b⟩) option.none = ite (a = a') (option.some ⟨a', b'⟩) option.none
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l	⊢ ∀ (a_1 : Σ {a : α}, β a), a_1 ∈ l → dite (a = a_1.fst) (λ (h : a = a_1.fst), option.some ⟨a, b⟩) (λ (h : ¬a = a_1.fst), option.none) = option.guard (λ (s : Σ {a : α}, β a), a = s.fst) a_1
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	b' : β a,	h' : ⟨a, b'⟩ ∈ l	⊢ a = a ∧ b == b'
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a' : α,	b' : β a',	h' : ⟨a', b'⟩ ∈ l,	h_1 : a = a'	⊢ a = a' ∧ b == b'		α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a' : α,	b' : β a',	h' : ⟨a', b'⟩ ∈ l,	h_1 : ¬a = a'	⊢ option.none = option.none
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a' : α,	b' : β a',	h' : ⟨a', b'⟩ ∈ l,	h_1 : a = a'	⊢ a = a' ∧ b == b'
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l	⊢ ∀ (a_1 : Σ {a : α}, β a), a_1 ∈ l → dite (a = a_1.fst) (λ (h : a = a_1.fst), option.some ⟨a, b⟩) (λ (h : ¬a = a_1.fst), option.none) = option.guard (λ (s : Σ {a : α}, β a), a = s.fst) a_1		α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l	⊢ ∀ (a_1 b : Σ {a : α}, β a), b ∈ option.guard (λ (s : Σ {a : α}, β a), a = s.fst) a_1 → a_1 = b
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a' : α,	b' : β a',	h' : ⟨a', b'⟩ ∈ l,	h_1 : ¬a = a'	⊢ option.none = option.none
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a₁ : α,	b₁ : β a₁,	a₂ : α,	b₂ : β a₂	⊢ ⟨a₂, b₂⟩ ∈ option.guard (λ (s : Σ {a : α}, β a), a = s.fst) ⟨a₁, b₁⟩ → ⟨a₁, b₁⟩ = ⟨a₂, b₂⟩
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a₁ : α,	b₁ : β a₁,	a₂ : α,	b₂ : β a₂	⊢ ⟨a₂, b₂⟩ ∈ ite (a = a₁) (option.some ⟨a₁, b₁⟩) option.none → ⟨a₁, b₁⟩ = ⟨a₂, b₂⟩
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l	⊢ ∀ (a_1 b : Σ {a : α}, β a), b ∈ option.guard (λ (s : Σ {a : α}, β a), a = s.fst) a_1 → a_1 = b
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a₂ : α,	b₂ : β a₂,	b₁ : β a	⊢ ⟨a₂, b₂⟩ ∈ option.some ⟨a, b₁⟩ → a = a₂ ∧ b₁ == b₂
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	b₁ : β a,	H : ⟨a, b₁⟩ ∈ option.some ⟨a, b₁⟩	⊢ a = a ∧ b₁ == b₁
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a₁ : α,	b₁ : β a₁,	a₂ : α,	b₂ : β a₂,	h_1 : a = a₁	⊢ ⟨a₂, b₂⟩ ∈ option.some ⟨a₁, b₁⟩ → a₁ = a₂ ∧ b₁ == b₂		α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a₁ : α,	b₁ : β a₁,	a₂ : α,	b₂ : β a₂,	h_1 : ¬a = a₁	⊢ ⟨a₂, b₂⟩ ∈ option.none → a₁ = a₂ ∧ b₁ == b₂
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a₁ : α,	b₁ : β a₁,	a₂ : α,	b₂ : β a₂,	h_1 : ¬a = a₁	⊢ ⟨a₂, b₂⟩ ∈ option.none → a₁ = a₂ ∧ b₁ == b₂
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a : α,	b : β a,	l : list (sigma β),	nd : l.nodupkeys,	h : ⟨a, b⟩ ∈ l,	a₁ : α,	b₁ : β a₁,	a₂ : α,	b₂ : β a₂,	h_1 : a = a₁	⊢ ⟨a₂, b₂⟩ ∈ option.some ⟨a₁, b₁⟩ → a₁ = a₂ ∧ b₁ == b₂
α : Type u,	β : α → Type v,	_inst_1 : decidable_eq α,	a a' : α,	b' : β a',	l : list (sigma β),	h : a ≠ a'	⊢ list.lookup a (list.kinsert a' b' l) = list.lookup a l
α : Type uu,	length_split_le : ∀ {l l₁ l₂ : list α}, l.split = (l₁, l₂) → l₁.length ≤ l.length ∧ l₂.length ≤ l.length,	a : α,	l l₁' l₂' : list α,	h : (a :: l).split = (l₁', l₂')	⊢ l₁'.length ≤ (a :: l).length ∧ l₂'.length ≤ (a :: l).length
α : Type uu,	length_split_le : ∀ {l l₁ l₂ : list α}, l.split = (l₁, l₂) → l₁.length ≤ l.length ∧ l₂.length ≤ l.length,	a : α,	l l₁' l₂' : list α,	h : (a :: l).split = (l₁', l₂'),	l₁ l₂ : list α,	e : l.split = (l₁, l₂)	⊢ l₁'.length ≤ (a :: l).length ∧ l₂'.length ≤ (a :: l).length
α : Type uu,	length_split_le : ∀ {l l₁ l₂ : list α}, l.split = (l₁, l₂) → l₁.length ≤ l.length ∧ l₂.length ≤ l.length,	a : α,	l l₁' l₂' : list α,	h : (a :: l).split = (l₁', l₂'),	l₁ l₂ : list α,	e : l.split = (l₁, l₂),	h_1 : a :: l₂ = l₁',	h_2 : l₁ = l₂'	⊢ l₁'.length ≤ (a :: l).length ∧ l₂'.length ≤ (a :: l).length
α : Type uu,	length_split_le : ∀ {l l₁ l₂ : list α}, l.split = (l₁, l₂) → l₁.length ≤ l.length ∧ l₂.length ≤ l.length,	a : α,	l l₁ l₂ : list α,	e : l.split = (l₁, l₂),	h : (a :: l).split = (a :: l₂, l₁)	⊢ (a :: l₂).length ≤ (a :: l).length ∧ l₁.length ≤ (a :: l).length
α : Type uu,	length_split_le : ∀ {l l₁ l₂ : list α}, l.split = (l₁, l₂) → l₁.length ≤ l.length ∧ l₂.length ≤ l.length,	a : α,	l l₁ l₂ : list α,	e : l.split = (l₁, l₂),	h : (a :: l).split = (a :: l₂, l₁),	h₁ : l₁.length ≤ l.length,	h₂ : l₂.length ≤ l.length	⊢ (a :: l₂).length ≤ (a :: l).length ∧ l₁.length ≤ (a :: l).length
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l : list α	⊢ list.nil ∉ (a :: l).sublists_aux list.cons
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l : list α	⊢ list.nil ∉ [a] :: list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil (l.sublists_aux list.cons)
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l : list α,	this : list.nil ∉ l.sublists_aux list.cons	⊢ list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil (l.sublists_aux list.cons)
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l : list α	⊢ list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil (l.sublists_aux list.cons)
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l : list α	⊢ list.nil ∉ l.sublists_aux list.cons → list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil (l.sublists_aux list.cons)
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l : list α	⊢ list.nil ∉ list.nil → list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil list.nil
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l hd : list α,	tl : list (list α),	ih : list.nil ∉ tl → list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil tl	⊢ list.nil ∉ hd :: tl → list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil (hd :: tl)
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l : list α	⊢ list.nil ∉ l.sublists_aux list.cons → list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil (l.sublists_aux list.cons)
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l : list α,	this : list.nil ∉ list.nil	⊢ list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil list.nil
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l : list α,	this : list.nil ∉ list.nil	⊢ list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil list.nil		case list.cons	α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l hd : list α,	tl : list (list α),	ih : list.nil ∉ tl → list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil tl,	this : list.nil ∉ hd :: tl	⊢ list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil (hd :: tl)
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l hd : list α,	tl : list (list α),	ih : list.nil ∉ tl → list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil tl,	this : list.nil ∉ hd :: tl	⊢ list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil (hd :: tl)
α : Type u,	sublists_aux_ne_nil : ∀ (l : list α), list.nil ∉ l.sublists_aux list.cons,	a : α,	l hd : list α,	tl : list (list α),	ih : list.nil ∉ tl → list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil tl,	this : list.nil ∉ hd :: tl	⊢ ¬list.nil = hd ∧ list.nil ∉ list.foldr (λ (ys : list α) (r : list (list α)), ys :: (a :: ys) :: r) list.nil tl
α : Type u,	β : Type v,	γ : Type w,	g : list β → list γ,	l : list α,	f : list α → list β,	r : list (list β)	⊢ list.map g (l.sublists'_aux f r) = l.sublists'_aux (g ∘ f) (list.map g r)
α : Type u,	β : Type v,	γ : Type w,	g : list β → list γ,	f : list α → list β,	r : list (list β)	⊢ list.map g (list.nil.sublists'_aux f r) = list.nil.sublists'_aux (g ∘ f) (list.map g r)
α : Type u,	β : Type v,	γ : Type w,	g : list β → list γ,	l_hd : α,	l_tl : list α,	l_ih : ∀ (f : list α → list β) (r : list (list β)), list.map g (l_tl.sublists'_aux f r) = l_tl.sublists'_aux (g ∘ f) (list.map g r),	f : list α → list β,	r : list (list β)	⊢ list.map g ((l_hd :: l_tl).sublists'_aux f r) = (l_hd :: l_tl).sublists'_aux (g ∘ f) (list.map g r)
α : Type u,	β : Type v,	γ : Type w,	g : list β → list γ,	l : list α,	f : list α → list β,	r : list (list β)	⊢ list.map g (l.sublists'_aux f r) = l.sublists'_aux (g ∘ f) (list.map g r)
α : Type u,	β : Type u_1,	f : α → α → β,	comm : ∀ (x y : α), f x y = f y x,	l l' : list α	⊢ list.zip_with f l l' = list.zip_with f l' l
α : Type u,	β : Type u_1,	f : α → α → β,	comm : ∀ (x y : α), f x y = f y x,	l' : list α	⊢ list.zip_with f list.nil l' = list.zip_with f l' list.nil		case list.cons	α : Type u,	β : Type u_1,	f : α → α → β,	comm : ∀ (x y : α), f x y = f y x,	hd : α,	tl : list α,	hl : ∀ (l' : list α), list.zip_with f tl l' = list.zip_with f l' tl,	l' : list α	⊢ list.zip_with f (hd :: tl) l' = list.zip_with f l' (hd :: tl)
α : Type u,	β : Type u_1,	f : α → α → β,	comm : ∀ (x y : α), f x y = f y x,	l' : list α	⊢ list.zip_with f list.nil l' = list.zip_with f l' list.nil
α : Type u,	β : Type u_1,	f : α → α → β,	comm : ∀ (x y : α), f x y = f y x,	hd : α,	tl : list α,	hl : ∀ (l' : list α), list.zip_with f tl l' = list.zip_with f l' tl,	l' : list α	⊢ list.zip_with f (hd :: tl) l' = list.zip_with f l' (hd :: tl)
α : Type u,	β : Type u_1,	f : α → α → β,	comm : ∀ (x y : α), f x y = f y x,	hd : α,	tl : list α,	hl : ∀ (l' : list α), list.zip_with f tl l' = list.zip_with f l' tl	⊢ list.zip_with f (hd :: tl) list.nil = list.zip_with f list.nil (hd :: tl)		case list.cons, list.cons	α : Type u,	β : Type u_1,	f : α → α → β,	comm : ∀ (x y : α), f x y = f y x,	hd : α,	tl : list α,	hl : ∀ (l' : list α), list.zip_with f tl l' = list.zip_with f l' tl,	l'_hd : α,	l'_tl : list α	⊢ list.zip_with f (hd :: tl) (l'_hd :: l'_tl) = list.zip_with f (l'_hd :: l'_tl) (hd :: tl)
α : Type u,	β : Type u_1,	f : α → α → β,	comm : ∀ (x y : α), f x y = f y x,	hd : α,	tl : list α,	hl : ∀ (l' : list α), list.zip_with f tl l' = list.zip_with f l' tl	⊢ list.zip_with f (hd :: tl) list.nil = list.zip_with f list.nil (hd :: tl)
α : Type u,	β : Type u_1,	f : α → α → β,	comm : ∀ (x y : α), f x y = f y x,	hd : α,	tl : list α,	hl : ∀ (l' : list α), list.zip_with f tl l' = list.zip_with f l' tl,	l'_hd : α,	l'_tl : list α	⊢ list.zip_with f (hd :: tl) (l'_hd :: l'_tl) = list.zip_with f (l'_hd :: l'_tl) (hd :: tl)
α : Type u,	l : list α	⊢ list.map prod.fst l.revzip = l
α : Type u,	β : Type u_1,	γ : Type u_2,	_inst_1 : semiring γ,	f : α → β → γ,	n : γ,	l : list α,	l' : list β	⊢ (list.zip_with (λ (x : α) (y : β), n * f x y) l l').sum = n * (list.zip_with f l l').sum
α : Type u,	β : Type u_1,	γ : Type u_2,	_inst_1 : semiring γ,	f : α → β → γ,	n : γ,	l' : list β	⊢ (list.zip_with (λ (x : α) (y : β), n * f x y) list.nil l').sum = n * (list.zip_with f list.nil l').sum		case list.cons	α : Type u,	β : Type u_1,	γ : Type u_2,	_inst_1 : semiring γ,	hd : α,	tl : list α,	hl : ∀ (f : α → β → γ) (n : γ) (l' : list β), (list.zip_with (λ (x : α) (y : β), n * f x y) tl l').sum = n * (list.zip_with f tl l').sum,	f : α → β → γ,	n : γ,	l' : list β	⊢ (list.zip_with (λ (x : α) (y : β), n * f x y) (hd :: tl) l').sum = n * (list.zip_with f (hd :: tl) l').sum
α : Type u,	β : Type u_1,	γ : Type u_2,	_inst_1 : semiring γ,	f : α → β → γ,	n : γ,	l' : list β	⊢ (list.zip_with (λ (x : α) (y : β), n * f x y) list.nil l').sum = n * (list.zip_with f list.nil l').sum
α : Type u,	β : Type u_1,	γ : Type u_2,	_inst_1 : semiring γ,	hd : α,	tl : list α,	hl : ∀ (f : α → β → γ) (n : γ) (l' : list β), (list.zip_with (λ (x : α) (y : β), n * f x y) tl l').sum = n * (list.zip_with f tl l').sum,	f : α → β → γ,	n : γ,	l' : list β	⊢ (list.zip_with (λ (x : α) (y : β), n * f x y) (hd :: tl) l').sum = n * (list.zip_with f (hd :: tl) l').sum
α : Type u,	β : Type u_1,	γ : Type u_2,	_inst_1 : semiring γ,	hd : α,	tl : list α,	hl : ∀ (f : α → β → γ) (n : γ) (l' : list β), (list.zip_with (λ (x : α) (y : β), n * f x y) tl l').sum = n * (list.zip_with f tl l').sum,	f : α → β → γ,	n : γ	⊢ (list.zip_with (λ (x : α) (y : β), n * f x y) (hd :: tl) list.nil).sum = n * (list.zip_with f (hd :: tl) list.nil).sum		case list.cons, list.cons	α : Type u,	β : Type u_1,	γ : Type u_2,	_inst_1 : semiring γ,	hd : α,	tl : list α,	hl : ∀ (f : α → β → γ) (n : γ) (l' : list β), (list.zip_with (λ (x : α) (y : β), n * f x y) tl l').sum = n * (list.zip_with f tl l').sum,	f : α → β → γ,	n : γ,	hd' : β,	tl' : list β	⊢ (list.zip_with (λ (x : α) (y : β), n * f x y) (hd :: tl) (hd' :: tl')).sum = n * (list.zip_with f (hd :: tl) (hd' :: tl')).sum
α : Type u,	β : Type u_1,	γ : Type u_2,	_inst_1 : semiring γ,	hd : α,	tl : list α,	hl : ∀ (f : α → β → γ) (n : γ) (l' : list β), (list.zip_with (λ (x : α) (y : β), n * f x y) tl l').sum = n * (list.zip_with f tl l').sum,	f : α → β → γ,	n : γ	⊢ (list.zip_with (λ (x : α) (y : β), n * f x y) (hd :: tl) list.nil).sum = n * (list.zip_with f (hd :: tl) list.nil).sum
α : Type u,	β : Type u_1,	γ : Type u_2,	_inst_1 : semiring γ,	hd : α,	tl : list α,	hl : ∀ (f : α → β → γ) (n : γ) (l' : list β), (list.zip_with (λ (x : α) (y : β), n * f x y) tl l').sum = n * (list.zip_with f tl l').sum,	f : α → β → γ,	n : γ,	hd' : β,	tl' : list β	⊢ (list.zip_with (λ (x : α) (y : β), n * f x y) (hd :: tl) (hd' :: tl')).sum = n * (list.zip_with f (hd :: tl) (hd' :: tl')).sum
m : Type u_2,	n : Type u_3,	o : Type u_4,	α : Type v,	_inst_1 : non_unital_non_assoc_semiring α,	_inst_2 : fintype n,	L : matrix m n α,	M N : matrix n o α	⊢ L ⬝ (M + N) = L ⬝ M + L ⬝ N
m : Type u_2,	n : Type u_3,	o : Type u_4,	α : Type v,	_inst_1 : non_unital_non_assoc_semiring α,	_inst_2 : fintype n,	L : matrix m n α,	M N : matrix n o α,	i : m,	j : o	⊢ (L ⬝ (M + N)) i j = (L ⬝ M + L ⬝ N) i j
m : Type u_2,	n : Type u_3,	o : Type u_4,	α : Type v,	_inst_1 : ring α,	_inst_2 : fintype n,	M : matrix m n α,	N : matrix n o α,	i : m,	j : o	⊢ (M ⬝ -N) i j = (-(M ⬝ N)) i j
m : Type u_2,	n : Type u_3,	o : Type u_4,	α : Type v,	_inst_1 : ring α,	_inst_2 : fintype n,	M : matrix m n α,	N : matrix n o α	⊢ M ⬝ -N = -(M ⬝ N)
m : Type u_2,	n : Type u_3,	o : Type u_4,	α : Type u_9,	M : o → matrix m n α,	_inst_1 : decidable_eq o,	R : Type u_1,	_inst_2 : semiring R,	_inst_3 : add_comm_monoid α,	_inst_4 : module R α,	x : R,	i : m × o,	j : n × o	⊢ matrix.block_diagonal (x • M) i j = (x • matrix.block_diagonal M) i j
m : Type u_2,	n : Type u_3,	o : Type u_4,	α : Type u_9,	M : o → matrix m n α,	_inst_1 : decidable_eq o,	R : Type u_1,	_inst_2 : semiring R,	_inst_3 : add_comm_monoid α,	_inst_4 : module R α,	x : R,	i : m × o,	j : n × o	⊢ ite (i.snd = j.snd) (x • M i.snd i.fst j.fst) 0 = x • ite (i.snd = j.snd) (M i.snd i.fst j.fst) 0
m : Type u_2,	n : Type u_3,	o : Type u_4,	α : Type u_9,	M : o → matrix m n α,	_inst_1 : decidable_eq o,	R : Type u_1,	_inst_2 : semiring R,	_inst_3 : add_comm_monoid α,	_inst_4 : module R α,	x : R,	i : m × o,	j : n × o	⊢ ite (i.snd = j.snd) (x • M i.snd i.fst j.fst) 0 = x • ite (i.snd = j.snd) (M i.snd i.fst j.fst) 0
m : Type u_2,	n : Type u_3,	o : Type u_4,	α : Type u_9,	M : o → matrix m n α,	_inst_1 : decidable_eq o,	R : Type u_1,	_inst_2 : semiring R,	_inst_3 : add_comm_monoid α,	_inst_4 : module R α,	x : R	⊢ matrix.block_diagonal (x • M) = x • matrix.block_diagonal M
m : Type u_2,	n : Type u_3,	o : Type u_4,	α : Type u_9,	M : o → matrix m n α,	_inst_1 : decidable_eq o,	R : Type u_1,	_inst_2 : semiring R,	_inst_3 : add_comm_monoid α,	_inst_4 : module R α,	x : R,	i : m × o,	j : n × o,	h : i.snd = j.snd	⊢ x • M i.snd i.fst j.fst = x • M i.snd i.fst j.fst
m : Type u_2,	n : Type u_3,	o : Type u_4,	α : Type u_9,	M : o → matrix m n α,	_inst_1 : decidable_eq o,	R : Type u_1,	_inst_2 : semiring R,	_inst_3 : add_comm_monoid α,	_inst_4 : module R α,	x : R,	i : m × o,	j : n × o,	h : ¬i.snd = j.snd	⊢ 0 = x • 0
o : Type u_4,	m' : o → Type u_5,	n' : o → Type u_6,	α : Type u_9,	M N : Π (i : o), matrix (m' i) (n' i) α,	_inst_1 : decidable_eq o,	_inst_2 : add_monoid α	⊢ matrix.block_diagonal' (M + N) = matrix.block_diagonal' M + matrix.block_diagonal' N
o : Type u_4,	m' : o → Type u_5,	n' : o → Type u_6,	α : Type u_9,	M N : Π (i : o), matrix (m' i) (n' i) α,	_inst_1 : decidable_eq o,	_inst_2 : add_monoid α,	i : Σ (i : o), (λ (i : o), m' i) i,	j : Σ (i : o), (λ (i : o), n' i) i	⊢ matrix.block_diagonal' (M + N) i j = (matrix.block_diagonal' M + matrix.block_diagonal' N) i j
o : Type u_4,	m' : o → Type u_5,	n' : o → Type u_6,	α : Type u_9,	M N : Π (i : o), matrix (m' i) (n' i) α,	_inst_1 : decidable_eq o,	_inst_2 : add_monoid α,	i : Σ (i : o), (λ (i : o), m' i) i,	j : Σ (i : o), (λ (i : o), n' i) i	⊢ dite (i.fst = j.fst) (λ (h : i.fst = j.fst), M i.fst i.snd (cast _ j.snd) + N i.fst i.snd (cast _ j.snd)) (λ (h : ¬i.fst = j.fst), 0) = dite (i.fst = j.fst) (λ (h : i.fst = j.fst), M i.fst i.snd (cast _ j.snd)) (λ (h : ¬i.fst = j.fst), 0) + dite (i.fst = j.fst) (λ (h : i.fst = j.fst), N i.fst i.snd (cast _ j.snd)) (λ (h : ¬i.fst = j.fst), 0)
o : Type u_4,	m' : o → Type u_5,	n' : o → Type u_6,	α : Type u_9,	M N : Π (i : o), matrix (m' i) (n' i) α,	_inst_1 : decidable_eq o,	_inst_2 : add_monoid α,	i : Σ (i : o), (λ (i : o), m' i) i,	j : Σ (i : o), (λ (i : o), n' i) i,	h : i.fst = j.fst	⊢ M i.fst i.snd (cast _ j.snd) + N i.fst i.snd (cast _ j.snd) = M i.fst i.snd (cast _ j.snd) + N i.fst i.snd (cast _ j.snd)
o : Type u_4,	m' : o → Type u_5,	n' : o → Type u_6,	α : Type u_9,	M N : Π (i : o), matrix (m' i) (n' i) α,	_inst_1 : decidable_eq o,	_inst_2 : add_monoid α,	i : Σ (i : o), (λ (i : o), m' i) i,	j : Σ (i : o), (λ (i : o), n' i) i,	h : ¬i.fst = j.fst	⊢ 0 = 0 + 0
o : Type u_4,	m' : o → Type u_5,	n' : o → Type u_6,	α : Type u_9,	M N : Π (i : o), matrix (m' i) (n' i) α,	_inst_1 : decidable_eq o,	_inst_2 : add_monoid α,	i : Σ (i : o), (λ (i : o), m' i) i,	j : Σ (i : o), (λ (i : o), n' i) i	⊢ dite (i.fst = j.fst) (λ (h : i.fst = j.fst), M i.fst i.snd (cast _ j.snd) + N i.fst i.snd (cast _ j.snd)) (λ (h : ¬i.fst = j.fst), 0) = dite (i.fst = j.fst) (λ (h : i.fst = j.fst), M i.fst i.snd (cast _ j.snd)) (λ (h : ¬i.fst = j.fst), 0) + dite (i.fst = j.fst) (λ (h : i.fst = j.fst), N i.fst i.snd (cast _ j.snd)) (λ (h : ¬i.fst = j.fst), 0)
α : Type u_1,	n : Type u_5,	_inst_1 : decidable_eq n,	_inst_2 : mul_zero_one_class α,	M : matrix n n α,	i j : n	⊢ (1 ⊙ M) i j = matrix.diagonal (λ (i : n), M i i) i j
α : Type u_1,	n : Type u_5,	_inst_1 : decidable_eq n,	_inst_2 : mul_zero_one_class α,	M : matrix n n α,	i j : n	⊢ (1 ⊙ M) i j = matrix.diagonal (λ (i : n), M i i) i j
α : Type u_1,	n : Type u_5,	_inst_1 : decidable_eq n,	_inst_2 : mul_zero_one_class α,	M : matrix n n α,	i j : n,	h : i = j	⊢ (1 ⊙ M) i j = matrix.diagonal (λ (i : n), M i i) i j
α : Type u_1,	n : Type u_5,	_inst_1 : decidable_eq n,	_inst_2 : mul_zero_one_class α,	M : matrix n n α,	i j : n,	h : ¬i = j	⊢ (1 ⊙ M) i j = matrix.diagonal (λ (i : n), M i i) i j
α : Type u_1,	n : Type u_5,	_inst_1 : decidable_eq n,	_inst_2 : mul_zero_one_class α,	M : matrix n n α	⊢ 1 ⊙ M = matrix.diagonal (λ (i : n), M i i)
R : Type u_1,	α : Type u_2,	β : Type u_4,	γ : Type u_6,	l : Type u_8,	m : Type u_9,	n : Type u_10,	l' : Type u_14,	m' : Type u_15,	n' : Type u_16,	_inst_1 : comm_semiring R,	_inst_2 : fintype m,	_inst_3 : fintype m',	_inst_4 : non_unital_non_assoc_semiring α,	_inst_5 : non_unital_non_assoc_semiring β,	_inst_6 : non_unital_non_assoc_semiring γ,	_inst_7 : module R α,	_inst_8 : module R β,	_inst_9 : module R γ,	f : α →ₗ[R] β →ₗ[R] γ,	h_comm : ∀ (a b : α) (a' b' : β), ⇑(⇑f (a * b)) (a' * b') = ⇑(⇑f a) a' * ⇑(⇑f b) b',	A : matrix l m α,	B : matrix m n α,	A' : matrix l' m' β,	B' : matrix m' n' β	⊢ ⇑(⇑(matrix.kronecker_map_bilinear f) (A ⬝ B)) (A' ⬝ B') = ⇑(⇑(matrix.kronecker_map_bilinear f) A) A' ⬝ ⇑(⇑(matrix.kronecker_map_bilinear f) B) B'
R : Type u_1,	α : Type u_2,	β : Type u_4,	γ : Type u_6,	l : Type u_8,	m : Type u_9,	n : Type u_10,	l' : Type u_14,	m' : Type u_15,	n' : Type u_16,	_inst_1 : comm_semiring R,	_inst_2 : fintype m,	_inst_3 : fintype m',	_inst_4 : non_unital_non_assoc_semiring α,	_inst_5 : non_unital_non_assoc_semiring β,	_inst_6 : non_unital_non_assoc_semiring γ,	_inst_7 : module R α,	_inst_8 : module R β,	_inst_9 : module R γ,	f : α →ₗ[R] β →ₗ[R] γ,	h_comm : ∀ (a b : α) (a' b' : β), ⇑(⇑f (a * b)) (a' * b') = ⇑(⇑f a) a' * ⇑(⇑f b) b',	A : matrix l m α,	B : matrix m n α,	A' : matrix l' m' β,	B' : matrix m' n' β,	i : l,	i' : l',	j : n,	j' : n'	⊢ ⇑(⇑(matrix.kronecker_map_bilinear f) (A ⬝ B)) (A' ⬝ B') (i, i') (j, j') = (⇑(⇑(matrix.kronecker_map_bilinear f) A) A' ⬝ ⇑(⇑(matrix.kronecker_map_bilinear f) B) B') (i, i') (j, j')
R : Type u_1,	α : Type u_2,	β : Type u_4,	γ : Type u_6,	l : Type u_8,	m : Type u_9,	n : Type u_10,	l' : Type u_14,	m' : Type u_15,	n' : Type u_16,	_inst_1 : comm_semiring R,	_inst_2 : fintype m,	_inst_3 : fintype m',	_inst_4 : non_unital_non_assoc_semiring α,	_inst_5 : non_unital_non_assoc_semiring β,	_inst_6 : non_unital_non_assoc_semiring γ,	_inst_7 : module R α,	_inst_8 : module R β,	_inst_9 : module R γ,	f : α →ₗ[R] β →ₗ[R] γ,	h_comm : ∀ (a b : α) (a' b' : β), ⇑(⇑f (a * b)) (a' * b') = ⇑(⇑f a) a' * ⇑(⇑f b) b',	A : matrix l m α,	B : matrix m n α,	A' : matrix l' m' β,	B' : matrix m' n' β,	i : l,	i' : l',	j : n,	j' : n'	⊢ ⇑(⇑f (finset.univ.sum (λ (j_1 : m), A i j_1 * B j_1 j))) (finset.univ.sum (λ (j : m'), A' i' j * B' j j')) = finset.univ.sum (λ (x : m), finset.univ.sum (λ (y : m'), ⇑(⇑f (A i x)) (A' i' y) * ⇑(⇑f (B x j)) (B' y j')))
α : Type u,	m n : ℕ,	_inst_1 : has_repr α	⊢ has_repr (fin m → fin n → α)
m : Type u_3,	n : Type u_4,	α : Type v,	_inst_1 : fintype m,	_inst_2 : decidable_eq m,	_inst_3 : semiring α,	f : m ≃ m,	M : matrix m n α,	i : m,	j : n	⊢ (f.to_pequiv.to_matrix ⬝ M) i j = M (⇑f i) j
m : Type u_3,	n : Type u_4,	α : Type v,	_inst_1 : fintype m,	_inst_2 : decidable_eq m,	_inst_3 : semiring α,	f : m ≃ m,	M : matrix m n α	⊢ f.to_pequiv.to_matrix ⬝ M = λ (i : m), M (⇑f i)
α : Type u_1,	s : multiset α,	x : multiset α × multiset α,	l : list α	⊢ x ∈ (multiset.powerset_aux l).revzip ↔ x.fst + x.snd = ↑l
α : Type u_1,	s : multiset α,	x : multiset α × multiset α,	l : list α	⊢ x ∈ multiset.antidiagonal ⟦l⟧ ↔ x.fst + x.snd = ⟦l⟧
α : Type u_1,	s : multiset α,	x : multiset α × multiset α,	l : list α,	h : x.fst + x.snd = ↑l	⊢ x ∈ (multiset.powerset_aux l).revzip
α : Type u_1,	s : multiset α,	x : multiset α × multiset α,	l : list α,	h : x.fst + x.snd = ↑l,	_inst : decidable_eq α	⊢ x ∈ (multiset.powerset_aux l).revzip
α : Type u_1,	s : multiset α,	x : multiset α × multiset α,	l : list α,	h : x.fst + x.snd = ↑l,	_inst : decidable_eq α	⊢ ∃ (a : multiset α), a ≤ x.fst + x.snd ∧ (a, x.fst + x.snd - a) = x
α : Type u_1,	s : multiset α,	l : list α,	_inst : decidable_eq α,	x₁ x₂ : multiset α,	h : (x₁, x₂).fst + (x₁, x₂).snd = ↑l	⊢ ((x₁, x₂).fst, (x₁, x₂).fst + (x₁, x₂).snd - (x₁, x₂).fst) = (x₁, x₂)
α : Type u_1,	s : multiset α,	l : list α,	_inst : decidable_eq α,	x₁ x₂ : multiset α,	h : (x₁, x₂).fst + (x₁, x₂).snd = ↑l	⊢ ∃ (a : multiset α), a ≤ (x₁, x₂).fst + (x₁, x₂).snd ∧ (a, (x₁, x₂).fst + (x₁, x₂).snd - a) = (x₁, x₂)
α : Type u_1,	β : Type u_2,	_inst_1 : comm_monoid α,	_inst_2 : comm_monoid β,	s : multiset α,	f : α →* β,	l : list α	⊢ (multiset.map ⇑f ⟦l⟧).prod = ⇑f (multiset.prod ⟦l⟧)
α : Type u_1,	_inst_1 : decidable_eq α,	s t : multiset α,	h : t ≤ s	⊢ s - t + t = s
α : Type u_1,	_inst_1 : decidable_eq α,	s t : multiset α,	h : t ≤ s	⊢ ⇑multiset.card s = ⇑multiset.card t + ⇑multiset.card (s - t)
α : Type u_1,	_inst_1 : decidable_eq α,	s t u : multiset α	⊢ s ∩ t + u = (s + u) ∩ (t + u)
α : Type u_1,	_inst_1 : decidable_eq α,	s t u : multiset α,	h : ¬s ∩ t + u = (s + u) ∩ (t + u)	⊢ false
α : Type u_1,	_inst_1 : decidable_eq α,	s t u : multiset α,	h : ¬s ∩ t + u = (s + u) ∩ (t + u),	a : α,	hl : a ::ₘ (s ∩ t + u) ≤ (s + u) ∩ (t + u)	⊢ false
α : Type u_1,	_inst_1 : decidable_eq α,	s t u : multiset α,	h : ¬s ∩ t + u = (s + u) ∩ (t + u),	a : α,	hl : a ::ₘ s ∩ t + u ≤ (s + u) ∩ (t + u)	⊢ false
α : Type u_1,	p : α → Prop,	_inst_1 : decidable_pred p,	a : α,	s : multiset α	⊢ multiset.filter p (a ::ₘ s) = ite (p a) {a} 0 + multiset.filter p s
α : Type u_1,	p : α → Prop,	_inst_1 : decidable_pred p,	a : α,	s : multiset α,	h : p a	⊢ multiset.filter p (a ::ₘ s) = {a} + multiset.filter p s		α : Type u_1,	p : α → Prop,	_inst_1 : decidable_pred p,	a : α,	s : multiset α,	h : ¬p a	⊢ multiset.filter p (a ::ₘ s) = 0 + multiset.filter p s
α : Type u_1,	p : α → Prop,	_inst_1 : decidable_pred p,	a : α,	s : multiset α,	h : p a	⊢ multiset.filter p (a ::ₘ s) = {a} + multiset.filter p s
α : Type u_1,	p : α → Prop,	_inst_1 : decidable_pred p,	a : α,	s : multiset α,	h : ¬p a	⊢ multiset.filter p (a ::ₘ s) = 0 + multiset.filter p s
α : Type u_1,	a : α,	s : multiset α,	n : ℕ,	h0 : n ≠ 0	⊢ a ∈ n • s ↔ a ∈ s
α : Type u_1,	a : α,	s : multiset α,	n : ℕ,	h0 : n ≠ 0,	h : a ∈ s	⊢ a ∈ n • s
α : Type u_1,	a : α,	s : multiset α,	h : a ∈ s,	n : ℕ,	h0 : n.succ ≠ 0	⊢ a ∈ n.succ • s
α : Type u_1,	a : α,	s : multiset α,	h : a ∈ s,	n : ℕ,	h0 : n.succ ≠ 0	⊢ a ∈ s ∨ a ∈ n • s
α : Type u_1,	β : Type u_2,	f : α → β,	a : α	⊢ multiset.map f (multiset.repeat a 0) = multiset.repeat (f a) 0		case nat.succ	α : Type u_1,	β : Type u_2,	f : α → β,	a : α,	k_n : ℕ,	k_ih : multiset.map f (multiset.repeat a k_n) = multiset.repeat (f a) k_n	⊢ multiset.map f (multiset.repeat a k_n.succ) = multiset.repeat (f a) k_n.succ
α : Type u_1,	β : Type u_2,	f : α → β,	a : α,	k_n : ℕ,	k_ih : multiset.map f (multiset.repeat a k_n) = multiset.repeat (f a) k_n	⊢ multiset.map f (multiset.repeat a k_n.succ) = multiset.repeat (f a) k_n.succ
α : Type u_1,	β : Type u_2,	f : α → β,	a : α,	k : ℕ	⊢ multiset.map f (multiset.repeat a k) = multiset.repeat (f a) k
α : Type u_1,	β : Type u_2,	s : multiset α,	f : α → β	⊢ multiset.map f s = 0 ↔ s = 0
α : Type u_1,	_inst_1 : comm_monoid α,	s : multiset α,	x y z : α	⊢ x * (y * z) = y * (x * z)
α : Type u_1,	γ : Type u_3,	_inst_1 : comm_monoid γ,	m : multiset α	⊢ (multiset.map (λ (a : α), 1) m).prod = 1
α : Type u_1,	x : multiset α	⊢ ∀ (a : list α), multiset.traverse id.mk ⟦a⟧ = ⟦a⟧
α : Type u_1,	x : multiset α,	a : list α	⊢ multiset.traverse id.mk ⟦a⟧ = ⟦a⟧
α : Type u_1,	x : multiset α,	a : list α	⊢ coe <$> a = ↑a
α : Type u_1,	_inst_3 : decidable_eq α,	m : multiset (multiset α)	⊢ m.sup.nodup ↔ ∀ (a : multiset α), a ∈ m → a.nodup
α : Type u_1,	_inst_3 : decidable_eq α,	m : multiset (multiset α)	⊢ 0.sup.nodup ↔ ∀ (a : multiset α), a ∈ 0 → a.nodup		α : Type u_1,	_inst_3 : decidable_eq α,	m : multiset (multiset α)	⊢ ∀ ⦃a : multiset α⦄ {s : multiset (multiset α)}, (s.sup.nodup ↔ ∀ (a : multiset α), a ∈ s → a.nodup) → ((a ::ₘ s).sup.nodup ↔ ∀ (a_1 : multiset α), a_1 ∈ a ::ₘ s → a_1.nodup)
α : Type u_1,	_inst_3 : decidable_eq α,	m : multiset (multiset α)	⊢ 0.sup.nodup ↔ ∀ (a : multiset α), a ∈ 0 → a.nodup
α : Type u_1,	_inst_3 : decidable_eq α,	m : multiset (multiset α)	⊢ ∀ ⦃a : multiset α⦄ {s : multiset (multiset α)}, (s.sup.nodup ↔ ∀ (a : multiset α), a ∈ s → a.nodup) → ((a ::ₘ s).sup.nodup ↔ ∀ (a_1 : multiset α), a_1 ∈ a ::ₘ s → a_1.nodup)
α : Type u_1,	_inst_3 : decidable_eq α,	m : multiset (multiset α),	a : multiset α,	s : multiset (multiset α),	h : s.sup.nodup ↔ ∀ (a : multiset α), a ∈ s → a.nodup	⊢ (a ::ₘ s).sup.nodup ↔ ∀ (a_1 : multiset α), a_1 ∈ a ::ₘ s → a_1.nodup
α : Type u_1,	σ : α → Type u_2,	s : multiset α,	t : Π (a : α), multiset (σ a),	l₁ : list α	⊢ multiset.nodup (quot.mk setoid.r l₁) → (∀ (a : α), (t a).nodup) → (multiset.sigma (quot.mk setoid.r l₁) t).nodup
α : Type u_1,	σ : α → Type u_2,	s : multiset α,	t : Π (a : α), multiset (σ a),	l₁ : list α,	f : Π (a : α), list (σ a),	hf : ∀ (a : α), ⟦f a⟧ = t a	⊢ multiset.nodup (quot.mk setoid.r l₁) → (∀ (a : α), (t a).nodup) → (multiset.sigma (quot.mk setoid.r l₁) t).nodup
α : Type u_1,	σ : α → Type u_2,	s : multiset α,	t : Π (a : α), multiset (σ a),	l₁ : list α,	f : Π (a : α), list (σ a),	hf : ∀ (a : α), ⟦f a⟧ = t a	⊢ multiset.nodup (quot.mk setoid.r l₁) → (∀ (a : α), ((λ (a : α), ↑(f a)) a).nodup) → (multiset.sigma (quot.mk setoid.r l₁) (λ (a : α), ↑(f a))).nodup
α : Type u_1,	s : multiset α,	h : ∀ (a : α) (t : multiset α), s ≠ a ::ₘ a ::ₘ t,	a : α,	le : a ::ₘ a ::ₘ 0 ≤ s,	_let_match : (∃ (u : multiset α), s = a ::ₘ a ::ₘ 0 + u) → false,	t : multiset α,	s_eq : s = a ::ₘ a ::ₘ 0 + t	⊢ s = a ::ₘ a ::ₘ t
R : Type u_1,	_inst_3 : comm_semiring R,	σ : Type u_2,	_inst_4 : is_empty σ	⊢ function.surjective ⇑mv_polynomial.C
R : Type u_1,	_inst_3 : comm_semiring R,	σ : Type u_2,	_inst_4 : is_empty σ,	p : mv_polynomial σ R,	a : σ →₀ ℕ	⊢ ⇑(⇑mv_polynomial.C (p.to_fun 0)) a = ⇑p a
R : Type u,	σ : Type u_1,	a : R,	e : ℕ,	n : σ,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R	⊢ mv_polynomial.monomial (finsupp.single n e + s) a = mv_polynomial.X n ^ e * mv_polynomial.monomial s a
R : Type u,	σ : Type u_1,	a : R,	e : ℕ,	n : σ,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R	⊢ mv_polynomial.monomial (finsupp.single n e + s) a = mv_polynomial.X n ^ e * mv_polynomial.monomial s a
R : Type u,	σ : Type u_1,	a : R,	e : ℕ,	n : σ,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R	⊢ finsupp.single (finsupp.single n e + s) a = finsupp.single (finsupp.single n e + s) (1 * a)
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R	⊢ mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R	⊢ mv_polynomial.monomial 0 a = ⇑mv_polynomial.C a * 0.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R	⊢ mv_polynomial.monomial 0 a = mv_polynomial.monomial 0 a * 1
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R	⊢ mv_polynomial.monomial 0 a = ⇑mv_polynomial.C a * 0.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R	⊢ mv_polynomial.monomial 0 a = ⇑mv_polynomial.C a * 0.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)		R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R	⊢ ∀ (a_1 : σ) (b : ℕ) (f : σ →₀ ℕ), a_1 ∉ f.support → b ≠ 0 → mv_polynomial.monomial f a = ⇑mv_polynomial.C a * f.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e) → mv_polynomial.monomial (finsupp.single a_1 b + f) a = ⇑mv_polynomial.C a * (finsupp.single a_1 b + f).prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R	⊢ ∀ (a_1 : σ) (b : ℕ) (f : σ →₀ ℕ), a_1 ∉ f.support → b ≠ 0 → mv_polynomial.monomial f a = ⇑mv_polynomial.C a * f.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e) → mv_polynomial.monomial (finsupp.single a_1 b + f) a = ⇑mv_polynomial.C a * (finsupp.single a_1 b + f).prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)	⊢ mv_polynomial.monomial (finsupp.single n e + s) a = ⇑mv_polynomial.C a * (finsupp.single n e + s).prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)	⊢ mv_polynomial.X n ^ 0 = 1		R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)	⊢ ∀ (a : σ), mv_polynomial.X a ^ 0 = 1		R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)	⊢ ∀ (a : σ) (b₁ b₂ : ℕ), mv_polynomial.X a ^ (b₁ + b₂) = mv_polynomial.X a ^ b₁ * mv_polynomial.X a ^ b₂
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)	⊢ mv_polynomial.X n ^ 0 = 1
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e),	a : σ	⊢ mv_polynomial.X a ^ 0 = 1
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)	⊢ ∀ (a : σ), mv_polynomial.X a ^ 0 = 1		R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)	⊢ ∀ (a : σ) (b₁ b₂ : ℕ), mv_polynomial.X a ^ (b₁ + b₂) = mv_polynomial.X a ^ b₁ * mv_polynomial.X a ^ b₂
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)	⊢ ∀ (a : σ), mv_polynomial.X a ^ 0 = 1
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e),	a_1 : σ,	b₁ b₂ : ℕ	⊢ mv_polynomial.X a_1 ^ (b₁ + b₂) = mv_polynomial.X a_1 ^ b₁ * mv_polynomial.X a_1 ^ b₂
R : Type u,	σ : Type u_1,	a : R,	s : σ →₀ ℕ,	_inst_1 : comm_semiring R,	n : σ,	e : ℕ,	s : σ →₀ ℕ,	hns : n ∉ s.support,	he : e ≠ 0,	ih : mv_polynomial.monomial s a = ⇑mv_polynomial.C a * s.prod (λ (n : σ) (e : ℕ), mv_polynomial.X n ^ e)	⊢ ∀ (a : σ) (b₁ b₂ : ℕ), mv_polynomial.X a ^ (b₁ + b₂) = mv_polynomial.X a ^ b₁ * mv_polynomial.X a ^ b₂
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p : mv_polynomial σ R,	m : σ →₀ ℕ	⊢ m ∉ p.support ↔ mv_polynomial.coeff m p = 0
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	_inst_3 : fintype σ,	g : R →+* S₁,	x : σ → S₁,	f : mv_polynomial σ R	⊢ ∑ (d : σ →₀ ℕ) in f.support, ⇑g (mv_polynomial.coeff d f) * ∏ (i : σ) in d.support, x i ^ ⇑d i = ∑ (d : σ →₀ ℕ) in f.support, ⇑g (mv_polynomial.coeff d f) * d.prod (λ (a : σ), has_pow.pow (x a))
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	_inst_3 : fintype σ,	g : R →+* S₁,	x : σ → S₁,	f : mv_polynomial σ R	⊢ mv_polynomial.eval₂ g x f = ∑ (d : σ →₀ ℕ) in f.support, ⇑g (mv_polynomial.coeff d f) * ∏ (i : σ), x i ^ ⇑d i
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ mv_polynomial.eval₂ f g p = ⇑(mv_polynomial.eval₂_hom (ring_hom.id S₁) g) (⇑(mv_polynomial.eval₂_hom (mv_polynomial.C.comp f) mv_polynomial.X) p)
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ mv_polynomial.eval₂ f g p = ⇑(mv_polynomial.eval g) (⇑(mv_polynomial.map f) p)
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ mv_polynomial.eval₂ f g p = mv_polynomial.eval₂ (ring_hom.id S₁) g (mv_polynomial.eval₂ (mv_polynomial.C.comp f) mv_polynomial.X p)
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R,	h : ∀ (f : ?m_1 →+* mv_polynomial σ ?m_2) (g_1 : ?m_5 → mv_polynomial σ ?m_2) (p : mv_polynomial ?m_5 ?m_1), ⇑(mv_polynomial.eval₂_hom ?m_6 g) (mv_polynomial.eval₂ f g_1 p) = mv_polynomial.eval₂ ((mv_polynomial.eval₂_hom ?m_6 g).comp f) (⇑(mv_polynomial.eval₂_hom ?m_6 g) ∘ g_1) p	⊢ mv_polynomial.eval₂ f g p = mv_polynomial.eval₂ (ring_hom.id S₁) g (mv_polynomial.eval₂ (mv_polynomial.C.comp f) mv_polynomial.X p)		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ Type ?		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ Type ?		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ comm_semiring ?m_1		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ Type ?		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ comm_semiring ?m_1		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ ?m_1 →+* S₁
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R,	h : ∀ (f : ?m_1 →+* mv_polynomial σ ?m_2) (g_1 : ?m_5 → mv_polynomial σ ?m_2) (p : mv_polynomial ?m_5 ?m_1), mv_polynomial.eval₂ ?m_6 g (mv_polynomial.eval₂ f g_1 p) = mv_polynomial.eval₂ ((mv_polynomial.eval₂_hom ?m_6 g).comp f) (mv_polynomial.eval₂ ?m_6 g ∘ g_1) p	⊢ mv_polynomial.eval₂ f g p = mv_polynomial.eval₂ (ring_hom.id S₁) g (mv_polynomial.eval₂ (mv_polynomial.C.comp f) mv_polynomial.X p)		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ Type ?		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ Type ?		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ comm_semiring ?m_1		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ Type ?		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ comm_semiring ?m_1		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R	⊢ ?m_1 →+* S₁
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R,	h : ∀ (f : R →+* mv_polynomial σ S₁) (g_1 : σ → mv_polynomial σ S₁) (p : mv_polynomial σ R), mv_polynomial.eval₂ (ring_hom.id S₁) g (mv_polynomial.eval₂ f g_1 p) = mv_polynomial.eval₂ ((mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp f) (mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ g_1) p	⊢ mv_polynomial.eval₂ f g p = mv_polynomial.eval₂ ((mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp (mv_polynomial.C.comp f)) (mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ mv_polynomial.X) p
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R,	h : ∀ (f : R →+* mv_polynomial σ S₁) (g_1 : σ → mv_polynomial σ S₁) (p : mv_polynomial σ R), mv_polynomial.eval₂ (ring_hom.id S₁) g (mv_polynomial.eval₂ f g_1 p) = mv_polynomial.eval₂ ((mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp f) (mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ g_1) p,	a : R	⊢ ⇑f a = ⇑((mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp (mv_polynomial.C.comp f)) a
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R,	h : ∀ (f : R →+* mv_polynomial σ S₁) (g_1 : σ → mv_polynomial σ S₁) (p : mv_polynomial σ R), mv_polynomial.eval₂ (ring_hom.id S₁) g (mv_polynomial.eval₂ f g_1 p) = mv_polynomial.eval₂ ((mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp f) (mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ g_1) p	⊢ f = (mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp (mv_polynomial.C.comp f)
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R,	h : ∀ (f : R →+* mv_polynomial σ S₁) (g_1 : σ → mv_polynomial σ S₁) (p : mv_polynomial σ R), mv_polynomial.eval₂ (ring_hom.id S₁) g (mv_polynomial.eval₂ f g_1 p) = mv_polynomial.eval₂ ((mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp f) (mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ g_1) p	⊢ f = (mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp (mv_polynomial.C.comp f)		R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R,	h : ∀ (f : R →+* mv_polynomial σ S₁) (g_1 : σ → mv_polynomial σ S₁) (p : mv_polynomial σ R), mv_polynomial.eval₂ (ring_hom.id S₁) g (mv_polynomial.eval₂ f g_1 p) = mv_polynomial.eval₂ ((mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp f) (mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ g_1) p	⊢ g = mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ mv_polynomial.X
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R,	h : ∀ (f : R →+* mv_polynomial σ S₁) (g_1 : σ → mv_polynomial σ S₁) (p : mv_polynomial σ R), mv_polynomial.eval₂ (ring_hom.id S₁) g (mv_polynomial.eval₂ f g_1 p) = mv_polynomial.eval₂ ((mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp f) (mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ g_1) p,	n : σ	⊢ g n = (mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ mv_polynomial.X) n
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	f : R →+* S₁,	g : σ → S₁,	p : mv_polynomial σ R,	h : ∀ (f : R →+* mv_polynomial σ S₁) (g_1 : σ → mv_polynomial σ S₁) (p : mv_polynomial σ R), mv_polynomial.eval₂ (ring_hom.id S₁) g (mv_polynomial.eval₂ f g_1 p) = mv_polynomial.eval₂ ((mv_polynomial.eval₂_hom (ring_hom.id S₁) g).comp f) (mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ g_1) p	⊢ g = mv_polynomial.eval₂ (ring_hom.id S₁) g ∘ mv_polynomial.X
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	_inst_3 : algebra R S₁,	φ : mv_polynomial σ R →ₐ[R] S₁,	i : σ	⊢ ⇑φ (mv_polynomial.X i) = ⇑(mv_polynomial.aeval (⇑φ ∘ mv_polynomial.X)) (mv_polynomial.X i)
R : Type u,	S₁ : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S₁,	_inst_3 : algebra R S₁,	φ : mv_polynomial σ R →ₐ[R] S₁	⊢ φ = mv_polynomial.aeval (⇑φ ∘ mv_polynomial.X)
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	A₁ : Type u_2,	A₂ : Type u_3,	_inst_2 : comm_semiring A₁,	_inst_3 : comm_semiring A₂,	_inst_5 : algebra R A₁,	_inst_6 : algebra R A₂,	e : A₁ ≃ₐ[R] A₂,	r : R	⊢ (mv_polynomial.map_equiv σ ↑e).to_fun (⇑(algebra_map R (mv_polynomial σ A₁)) r) = ⇑(algebra_map R (mv_polynomial σ A₂)) r
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	A₁ : Type u_2,	A₂ : Type u_3,	_inst_2 : comm_semiring A₁,	_inst_3 : comm_semiring A₂,	_inst_5 : algebra R A₁,	_inst_6 : algebra R A₂,	e : A₁ ≃ₐ[R] A₂,	r : R	⊢ ⇑(mv_polynomial.map ↑↑e) (⇑(algebra_map R (mv_polynomial σ A₁)) r) = ⇑(algebra_map R (mv_polynomial σ A₂)) r
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	A₁ : Type u_2,	A₂ : Type u_3,	_inst_2 : comm_semiring A₁,	_inst_3 : comm_semiring A₂,	_inst_5 : algebra R A₁,	_inst_6 : algebra R A₂,	e : A₁ ≃ₐ[R] A₂,	r : R,	h₁ : ⇑(algebra_map R (mv_polynomial σ A₁)) r = ⇑mv_polynomial.C (⇑(algebra_map R A₁) r)	⊢ ⇑(mv_polynomial.map ↑↑e) (⇑(algebra_map R (mv_polynomial σ A₁)) r) = ⇑(algebra_map R (mv_polynomial σ A₂)) r
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	A₁ : Type u_2,	A₂ : Type u_3,	_inst_2 : comm_semiring A₁,	_inst_3 : comm_semiring A₂,	_inst_5 : algebra R A₁,	_inst_6 : algebra R A₂,	e : A₁ ≃ₐ[R] A₂,	r : R,	h₁ : ⇑(algebra_map R (mv_polynomial σ A₁)) r = ⇑mv_polynomial.C (⇑(algebra_map R A₁) r),	h₂ : ⇑(algebra_map R (mv_polynomial σ A₂)) r = ⇑mv_polynomial.C (⇑(algebra_map R A₂) r)	⊢ ⇑(mv_polynomial.map ↑↑e) (⇑(algebra_map R (mv_polynomial σ A₁)) r) = ⇑(algebra_map R (mv_polynomial σ A₂)) r
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ mv_polynomial (S₁ ⊕ S₂) R ≃+* mv_polynomial S₁ (mv_polynomial S₂ R)
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ((mv_polynomial.sum_to_iter R S₁ S₂).comp (mv_polynomial.iter_to_sum R S₁ S₂)).comp mv_polynomial.C = mv_polynomial.C
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	p : mv_polynomial S₂ R	⊢ ⇑(((mv_polynomial.sum_to_iter R S₁ S₂).comp (mv_polynomial.iter_to_sum R S₁ S₂)).comp mv_polynomial.C) p = ⇑mv_polynomial.C p
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	p : mv_polynomial S₂ R	⊢ ⇑((mv_polynomial.sum_to_iter R S₁ S₂).comp (mv_polynomial.iter_to_sum R S₁ S₂)) (⇑mv_polynomial.C p) = ⇑mv_polynomial.C p
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	p : mv_polynomial S₂ R,	a : R	⊢ ⇑(((mv_polynomial.sum_to_iter R S₁ S₂).comp ((mv_polynomial.iter_to_sum R S₁ S₂).comp mv_polynomial.C)).comp mv_polynomial.C) a = ⇑(mv_polynomial.C.comp mv_polynomial.C) a
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	p : mv_polynomial S₂ R,	a : R	⊢ ⇑(mv_polynomial.sum_to_iter R S₁ S₂) (⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑mv_polynomial.C (⇑mv_polynomial.C a))) = ⇑mv_polynomial.C (⇑mv_polynomial.C a)
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	p : mv_polynomial S₂ R	⊢ ((mv_polynomial.sum_to_iter R S₁ S₂).comp ((mv_polynomial.iter_to_sum R S₁ S₂).comp mv_polynomial.C)).comp mv_polynomial.C = mv_polynomial.C.comp mv_polynomial.C		R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	p : mv_polynomial S₂ R	⊢ ∀ (n : S₂), ⇑((mv_polynomial.sum_to_iter R S₁ S₂).comp ((mv_polynomial.iter_to_sum R S₁ S₂).comp mv_polynomial.C)) (mv_polynomial.X n) = ⇑mv_polynomial.C (mv_polynomial.X n)
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	p : mv_polynomial S₂ R	⊢ ((mv_polynomial.sum_to_iter R S₁ S₂).comp ((mv_polynomial.iter_to_sum R S₁ S₂).comp mv_polynomial.C)).comp mv_polynomial.C = mv_polynomial.C.comp mv_polynomial.C
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	p : mv_polynomial S₂ R,	c : S₂	⊢ ⇑((mv_polynomial.sum_to_iter R S₁ S₂).comp ((mv_polynomial.iter_to_sum R S₁ S₂).comp mv_polynomial.C)) (mv_polynomial.X c) = ⇑mv_polynomial.C (mv_polynomial.X c)
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	p : mv_polynomial S₂ R,	c : S₂	⊢ ⇑(mv_polynomial.sum_to_iter R S₁ S₂) (⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑mv_polynomial.C (mv_polynomial.X c))) = ⇑mv_polynomial.C (mv_polynomial.X c)
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ((mv_polynomial.sum_to_iter R S₁ S₂).comp (mv_polynomial.iter_to_sum R S₁ S₂)).comp mv_polynomial.C = mv_polynomial.C		R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ∀ (n : S₁), ⇑(mv_polynomial.sum_to_iter R S₁ S₂) (⇑(mv_polynomial.iter_to_sum R S₁ S₂) (mv_polynomial.X n)) = mv_polynomial.X n		R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ((mv_polynomial.iter_to_sum R S₁ S₂).comp (mv_polynomial.sum_to_iter R S₁ S₂)).comp mv_polynomial.C = mv_polynomial.C		R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ∀ (n : S₁ ⊕ S₂), ⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑(mv_polynomial.sum_to_iter R S₁ S₂) (mv_polynomial.X n)) = mv_polynomial.X n
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	p : mv_polynomial S₂ R	⊢ ∀ (n : S₂), ⇑((mv_polynomial.sum_to_iter R S₁ S₂).comp ((mv_polynomial.iter_to_sum R S₁ S₂).comp mv_polynomial.C)) (mv_polynomial.X n) = ⇑mv_polynomial.C (mv_polynomial.X n)
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	b : S₁	⊢ ⇑(mv_polynomial.sum_to_iter R S₁ S₂) (⇑(mv_polynomial.iter_to_sum R S₁ S₂) (mv_polynomial.X b)) = mv_polynomial.X b
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ∀ (n : S₁), ⇑(mv_polynomial.sum_to_iter R S₁ S₂) (⇑(mv_polynomial.iter_to_sum R S₁ S₂) (mv_polynomial.X n)) = mv_polynomial.X n
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ∀ (n : S₁), ⇑(mv_polynomial.sum_to_iter R S₁ S₂) (⇑(mv_polynomial.iter_to_sum R S₁ S₂) (mv_polynomial.X n)) = mv_polynomial.X n		R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ((mv_polynomial.iter_to_sum R S₁ S₂).comp (mv_polynomial.sum_to_iter R S₁ S₂)).comp mv_polynomial.C = mv_polynomial.C		R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ∀ (n : S₁ ⊕ S₂), ⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑(mv_polynomial.sum_to_iter R S₁ S₂) (mv_polynomial.X n)) = mv_polynomial.X n
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	a : R	⊢ ⇑(((mv_polynomial.iter_to_sum R S₁ S₂).comp (mv_polynomial.sum_to_iter R S₁ S₂)).comp mv_polynomial.C) a = ⇑mv_polynomial.C a
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ((mv_polynomial.iter_to_sum R S₁ S₂).comp (mv_polynomial.sum_to_iter R S₁ S₂)).comp mv_polynomial.C = mv_polynomial.C
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ((mv_polynomial.iter_to_sum R S₁ S₂).comp (mv_polynomial.sum_to_iter R S₁ S₂)).comp mv_polynomial.C = mv_polynomial.C		R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ∀ (n : S₁ ⊕ S₂), ⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑(mv_polynomial.sum_to_iter R S₁ S₂) (mv_polynomial.X n)) = mv_polynomial.X n
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	n : S₁ ⊕ S₂	⊢ ⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑(mv_polynomial.sum_to_iter R S₁ S₂) (mv_polynomial.X n)) = mv_polynomial.X n
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R	⊢ ∀ (n : S₁ ⊕ S₂), ⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑(mv_polynomial.sum_to_iter R S₁ S₂) (mv_polynomial.X n)) = mv_polynomial.X n
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	b : S₁	⊢ ⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑(mv_polynomial.sum_to_iter R S₁ S₂) (mv_polynomial.X (sum.inl b))) = mv_polynomial.X (sum.inl b)		case sum.inr	R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	c : S₂	⊢ ⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑(mv_polynomial.sum_to_iter R S₁ S₂) (mv_polynomial.X (sum.inr c))) = mv_polynomial.X (sum.inr c)
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	b : S₁	⊢ ⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑(mv_polynomial.sum_to_iter R S₁ S₂) (mv_polynomial.X (sum.inl b))) = mv_polynomial.X (sum.inl b)
R : Type u,	S₁ : Type v,	S₂ : Type w,	_inst_1 : comm_semiring R,	c : S₂	⊢ ⇑(mv_polynomial.iter_to_sum R S₁ S₂) (⇑(mv_polynomial.sum_to_iter R S₁ S₂) (mv_polynomial.X (sum.inr c))) = mv_polynomial.X (sum.inr c)
σ : Type u_1,	R : Type u_3,	S : Type u_4,	T : Type u_5,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	_inst_3 : comm_semiring T,	f : S →+* T,	g : σ → T,	h : R →+* mv_polynomial σ S	⊢ (mv_polynomial.eval₂_hom f g).comp (mv_polynomial.bind₂ h) = mv_polynomial.eval₂_hom ((mv_polynomial.eval₂_hom f g).comp h) g
σ : Type u_1,	R : Type u_3,	S : Type u_4,	T : Type u_5,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	_inst_3 : comm_semiring T,	f : S →+* T,	g : σ → T,	h : R →+* mv_polynomial σ S,	x : R	⊢ ⇑(((mv_polynomial.eval₂_hom f g).comp (mv_polynomial.bind₂ h)).comp mv_polynomial.C) x = ⇑((mv_polynomial.eval₂_hom ((mv_polynomial.eval₂_hom f g).comp h) g).comp mv_polynomial.C) x
σ : Type u_1,	R : Type u_3,	S : Type u_4,	T : Type u_5,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	_inst_3 : comm_semiring T,	f : S →+* T,	g : σ → T,	h : R →+* mv_polynomial σ S	⊢ ∀ (i : σ), ⇑((mv_polynomial.eval₂_hom f g).comp (mv_polynomial.bind₂ h)) (mv_polynomial.X i) = ⇑(mv_polynomial.eval₂_hom ((mv_polynomial.eval₂_hom f g).comp h) g) (mv_polynomial.X i)
σ : Type u_1,	R : Type u_3,	S : Type u_4,	T : Type u_5,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	_inst_3 : comm_semiring T,	f : S →+* T,	g : σ → T,	h : R →+* mv_polynomial σ S	⊢ (mv_polynomial.eval₂_hom f g).comp (mv_polynomial.bind₂ h) = mv_polynomial.eval₂_hom ((mv_polynomial.eval₂_hom f g).comp h) g
R : Type u,	σ : Type u_1,	a : R,	_inst_1 : comm_semiring R,	f : mv_polynomial σ R,	i : σ	⊢ ⇑(mv_polynomial.pderiv i) (⇑mv_polynomial.C a * f) = ⇑mv_polynomial.C a * ⇑(mv_polynomial.pderiv i) f
R : Type u,	σ : Type u_1,	a : R,	_inst_1 : comm_semiring R,	f : mv_polynomial σ R,	i : σ	⊢ ⇑mv_polynomial.C a * f = a • f
R : Type u,	σ : Type u_1,	a : R,	_inst_1 : comm_semiring R,	f : mv_polynomial σ R,	i : σ	⊢ ⇑mv_polynomial.C a * ⇑(mv_polynomial.pderiv i) f = a • ⇑(mv_polynomial.pderiv i) f
R : Type u,	σ : Type u_1,	a : R,	_inst_1 : comm_semiring R,	f : mv_polynomial σ R,	i : σ	⊢ ⇑(mv_polynomial.pderiv i) (⇑mv_polynomial.C a * f) = ⇑mv_polynomial.C a * ⇑(mv_polynomial.pderiv i) f
σ : Type u_1,	R : Type u,	_inst_1 : comm_semiring R,	s t : set σ,	_inst_2 : nontrivial R	⊢ mv_polynomial.supported R s ≤ mv_polynomial.supported R t ↔ s ⊆ t
σ : Type u_1,	R : Type u,	_inst_1 : comm_semiring R,	s t : set σ,	_inst_2 : nontrivial R	⊢ mv_polynomial.supported R s ≤ mv_polynomial.supported R t → s ⊆ t
σ : Type u_1,	R : Type u,	_inst_1 : comm_semiring R,	s t : set σ,	_inst_2 : nontrivial R	⊢ mv_polynomial.supported R s ≤ mv_polynomial.supported R t → s ⊆ t		σ : Type u_1,	R : Type u,	_inst_1 : comm_semiring R,	s t : set σ,	_inst_2 : nontrivial R	⊢ s ⊆ t → mv_polynomial.supported R s ≤ mv_polynomial.supported R t
σ : Type u_1,	R : Type u,	_inst_1 : comm_semiring R,	s t : set σ,	_inst_2 : nontrivial R,	h : mv_polynomial.supported R s ≤ mv_polynomial.supported R t,	i : σ	⊢ i ∈ s → i ∈ t
σ : Type u_1,	R : Type u,	_inst_1 : comm_semiring R,	s t : set σ,	_inst_2 : nontrivial R	⊢ s ⊆ t → mv_polynomial.supported R s ≤ mv_polynomial.supported R t
σ : Type u_1,	R : Type u,	_inst_1 : comm_semiring R,	s : set σ	⊢ mv_polynomial.supported R s = (mv_polynomial.rename coe).range
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p q : mv_polynomial σ R,	h : p.degrees.disjoint q.degrees	⊢ (p + q).degrees = p.degrees ∪ q.degrees
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p q : mv_polynomial σ R,	h : p.degrees.disjoint q.degrees	⊢ (p + q).degrees ≤ p.degrees ∪ q.degrees		R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p q : mv_polynomial σ R,	h : p.degrees.disjoint q.degrees	⊢ p.degrees ∪ q.degrees ≤ (p + q).degrees
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p q : mv_polynomial σ R,	h : p.degrees.disjoint q.degrees	⊢ (p + q).degrees ≤ p.degrees ∪ q.degrees
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p q : mv_polynomial σ R,	h : p.degrees.disjoint q.degrees	⊢ p.degrees ∪ q.degrees ≤ (p + q).degrees
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p q : mv_polynomial σ R,	h : p.degrees.disjoint q.degrees	⊢ p.degrees ≤ (p + q).degrees		R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p q : mv_polynomial σ R,	h : p.degrees.disjoint q.degrees	⊢ q.degrees ≤ (p + q).degrees
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p q : mv_polynomial σ R,	h : p.degrees.disjoint q.degrees	⊢ p.degrees ≤ (p + q).degrees
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p q : mv_polynomial σ R,	h : p.degrees.disjoint q.degrees	⊢ q.degrees ≤ (q + p).degrees
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	p q : mv_polynomial σ R,	h : p.degrees.disjoint q.degrees	⊢ q.degrees ≤ (p + q).degrees
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	ι : Type u_3,	t : finset ι,	φ : ι → mv_polynomial σ R	⊢ (∑ (i : ι) in t, φ i).vars ⊆ t.bUnion (λ (i : ι), (φ i).vars)
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	ι : Type u_3,	t : finset ι,	φ : ι → mv_polynomial σ R	⊢ (∑ (i : ι) in ∅, φ i).vars ⊆ ∅.bUnion (λ (i : ι), (φ i).vars)		R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	ι : Type u_3,	t : finset ι,	φ : ι → mv_polynomial σ R	⊢ ∀ ⦃a : ι⦄ {s : finset ι}, a ∉ s → (∑ (i : ι) in s, φ i).vars ⊆ s.bUnion (λ (i : ι), (φ i).vars) → (∑ (i : ι) in has_insert.insert a s, φ i).vars ⊆ (has_insert.insert a s).bUnion (λ (i : ι), (φ i).vars)
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	ι : Type u_3,	t : finset ι,	φ : ι → mv_polynomial σ R	⊢ (∑ (i : ι) in ∅, φ i).vars ⊆ ∅.bUnion (λ (i : ι), (φ i).vars)
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	ι : Type u_3,	t : finset ι,	φ : ι → mv_polynomial σ R	⊢ ∀ ⦃a : ι⦄ {s : finset ι}, a ∉ s → (∑ (i : ι) in s, φ i).vars ⊆ s.bUnion (λ (i : ι), (φ i).vars) → (∑ (i : ι) in has_insert.insert a s, φ i).vars ⊆ (has_insert.insert a s).bUnion (λ (i : ι), (φ i).vars)
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	ι : Type u_3,	t : finset ι,	φ : ι → mv_polynomial σ R,	a : ι,	s : finset ι,	has : a ∉ s,	hsum : (∑ (i : ι) in s, φ i).vars ⊆ s.bUnion (λ (i : ι), (φ i).vars)	⊢ (∑ (i : ι) in has_insert.insert a s, φ i).vars ⊆ (has_insert.insert a s).bUnion (λ (i : ι), (φ i).vars)
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	ι : Type u_3,	t : finset ι,	φ : ι → mv_polynomial σ R,	a : ι,	s : finset ι,	has : a ∉ s,	hsum : (∑ (i : ι) in s, φ i).vars ⊆ s.bUnion (λ (i : ι), (φ i).vars)	⊢ (φ a + ∑ (x : ι) in s, φ x).vars ⊆ (φ a).vars ∪ s.bUnion (λ (i : ι), (φ i).vars)
R : Type u,	σ : Type u_1,	_inst_1 : comm_semiring R,	ι : Type u_3,	t : finset ι,	φ : ι → mv_polynomial σ R,	a : ι,	s : finset ι,	has : a ∉ s,	hsum : (∑ (i : ι) in s, φ i).vars ⊆ s.bUnion (λ (i : ι), (φ i).vars)	⊢ (∑ (x : ι) in s, φ x).vars ⊆ s.bUnion (λ (i : ι), (φ i).vars)
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0	⊢ ⇑(mv_polynomial.eval₂_hom f g) p = ?m_1
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0	⊢ ⇑(mv_polynomial.eval₂_hom f g) p = ⇑f (⇑mv_polynomial.constant_coeff p)
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0	⊢ ⇑(mv_polynomial.eval₂_hom f g) (∑ (v : σ →₀ ℕ) in p.support, mv_polynomial.monomial v (mv_polynomial.coeff v p)) = ⇑f (⇑mv_polynomial.constant_coeff p)
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0	⊢ ∑ (x : σ →₀ ℕ) in p.support, ⇑f (mv_polynomial.coeff x p) * x.prod (λ (i : σ), has_pow.pow (g i)) = ⇑f (⇑mv_polynomial.constant_coeff p)
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0	⊢ ∑ (x : σ →₀ ℕ) in p.support, ⇑f (mv_polynomial.coeff x p) * x.prod (λ (i : σ), has_pow.pow (g i)) = ⇑f (⇑mv_polynomial.constant_coeff p)		R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ ∑ (x : σ →₀ ℕ) in p.support, ⇑f (mv_polynomial.coeff x p) * x.prod (λ (i : σ), has_pow.pow (g i)) = ⇑f (⇑mv_polynomial.constant_coeff p)
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0	⊢ ∑ (x : σ →₀ ℕ) in p.support, ⇑f (mv_polynomial.coeff x p) * x.prod (λ (i : σ), has_pow.pow (g i)) = ⇑f (⇑mv_polynomial.constant_coeff p)
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0	⊢ ∀ (x : σ →₀ ℕ), x ∈ p.support → ⇑f (mv_polynomial.coeff x p) * x.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support	⊢ ⇑f (mv_polynomial.coeff d p) * d.prod (λ (i : σ), has_pow.pow (g i)) = 0		R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ ∑ (x : σ →₀ ℕ) in p.support, ⇑f (mv_polynomial.coeff x p) * x.prod (λ (i : σ), has_pow.pow (g i)) = ⇑f (⇑mv_polynomial.constant_coeff p)
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ ∑ (x : σ →₀ ℕ) in p.support, ⇑f (mv_polynomial.coeff x p) * x.prod (λ (i : σ), has_pow.pow (g i)) = ⇑f (⇑mv_polynomial.constant_coeff p)
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ ⇑f (mv_polynomial.coeff 0 p) * 0.prod (λ (i : σ), has_pow.pow (g i)) = ⇑f (⇑mv_polynomial.constant_coeff p)
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ ⇑f (mv_polynomial.coeff 0 p) * 0.prod (λ (i : σ), has_pow.pow (g i)) = ⇑f (⇑mv_polynomial.constant_coeff p)		R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ ∀ (b : σ →₀ ℕ), b ∈ p.support → b ≠ 0 → ⇑f (mv_polynomial.coeff b p) * b.prod (λ (i : σ), has_pow.pow (g i)) = 0		R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ 0 ∉ p.support → ⇑f (mv_polynomial.coeff 0 p) * 0.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ ⇑f (mv_polynomial.coeff 0 p) = ⇑f (⇑mv_polynomial.constant_coeff p)
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ ∀ (b : σ →₀ ℕ), b ∈ p.support → b ≠ 0 → ⇑f (mv_polynomial.coeff b p) * b.prod (λ (i : σ), has_pow.pow (g i)) = 0		R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ 0 ∉ p.support → ⇑f (mv_polynomial.coeff 0 p) * 0.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support	⊢ ⇑f (mv_polynomial.coeff d p) * d.prod (λ (i : σ), has_pow.pow (g i)) = 0		R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0	⊢ ⇑f (mv_polynomial.coeff d p) * d.prod (λ (i : σ), has_pow.pow (g i)) = 0		R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ 0 ∉ p.support → ⇑f (mv_polynomial.coeff 0 p) * 0.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support	⊢ ⇑f (mv_polynomial.coeff d p) * d.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0	⊢ ⇑f (mv_polynomial.coeff d p) * d.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ 0 ∉ p.support → ⇑f (mv_polynomial.coeff 0 p) * 0.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0	⊢ d.support.nonempty
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0,	h0 : ¬0 ∉ p.support	⊢ d.support.nonempty
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬0 ∉ p.support,	hd : 0 ∈ p.support,	hd0 : 0 ≠ 0	⊢ false
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support	⊢ d.support.nonempty		R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	i : σ,	hi : i ∈ d.support	⊢ ⇑f (mv_polynomial.coeff d p) * d.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0	⊢ d.support.nonempty		R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0,	i : σ,	hi : i ∈ d.support	⊢ ⇑f (mv_polynomial.coeff d p) * d.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0,	h0 : ¬0 ∉ p.support	⊢ ¬d = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	i : σ,	hi : i ∈ d.support	⊢ ⇑f (mv_polynomial.coeff d p) * d.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0,	i : σ,	hi : i ∈ d.support	⊢ ⇑f (mv_polynomial.coeff d p) * d.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	i : σ,	hi : i ∈ d.support	⊢ g i ^ ⇑d i = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0,	i : σ,	hi : i ∈ d.support	⊢ g i ^ ⇑d i = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	i : σ,	hi : i ∈ d.support	⊢ i ∈ p.vars
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0,	i : σ,	hi : i ∈ d.support	⊢ i ∈ p.vars
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	i : σ,	hi : i ∈ d.support	⊢ ∃ (d : σ →₀ ℕ) (H : d ∈ p.support), i ∈ d.support
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0,	d : σ →₀ ℕ,	hd : d ∈ p.support,	hd0 : d ≠ 0,	i : σ,	hi : i ∈ d.support	⊢ ∃ (d : σ →₀ ℕ) (H : d ∈ p.support), i ∈ d.support
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : ¬⇑mv_polynomial.constant_coeff p = 0	⊢ 0 ∉ p.support → ⇑f (mv_polynomial.coeff 0 p) * 0.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : 0 ∈ p.support,	ᾰ : 0 ∉ p.support	⊢ ⇑f (mv_polynomial.coeff 0 p) * 0.prod (λ (i : σ), has_pow.pow (g i)) = 0
R : Type u,	S : Type v,	σ : Type u_1,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	f : R →+* S,	g : σ → S,	p : mv_polynomial σ R,	hp : ∀ (i : σ), i ∈ p.vars → g i = 0,	h0 : 0 ∈ p.support	⊢ 0 ∉ p.support → ⇑f (mv_polynomial.coeff 0 p) * 0.prod (λ (i : σ), has_pow.pow (g i)) = 0
m n k : ℕ	⊢ (m + n % k) % k = (m + n) % k
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	exi1 : ∃ (x : ℕ), a = b * x,	exi2 : ∃ (y : ℕ), c = d * y,	hb : b = 0	⊢ a / b * (c / d) = a * c / (b * d)
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	exi1 : ∃ (x : ℕ), a = b * x,	exi2 : ∃ (y : ℕ), c = d * y,	hb : ¬b = 0,	this : 0 < b,	hd : d = 0	⊢ a / b * (c / d) = a * c / (b * d)
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	exi2 : ∃ (y : ℕ), c = d * y,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x	⊢ a / b * (c / d) = a * c / (b * d)
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	exi1 : ∃ (x : ℕ), a = b * x,	exi2 : ∃ (y : ℕ), c = d * y,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d	⊢ a / b * (c / d) = a * c / (b * d)
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ a / b * (c / d) = a * c / (b * d)
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ x * y = b * x * (d * y) / (b * d)		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < d		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < b
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ b * x * (d * y) / (b * d) = x * y		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < d		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < b
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < b * d		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ b * x * (d * y) = x * y * (b * d)		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < d		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < b
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < b
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < d
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < b		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < d		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ b * x * (d * y) = x * y * (b * d)		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < d		a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ 0 < b
a b c d : ℕ,	hab : b ∣ a,	hcd : d ∣ c,	hb : ¬b = 0,	this : 0 < b,	hd : ¬d = 0,	this : 0 < d,	x : ℕ,	hx : a = b * x,	y : ℕ,	hy : c = d * y	⊢ b * x * (d * y) = x * y * (b * d)
a b : ℕ,	w : a ∣ b,	h : b / a = 0	⊢ b = 0
a b : ℕ	⊢ a / b = a ↔ a = 0 ∨ b = 1
a b : ℕ	⊢ a / b = a → a = 0 ∨ b = 1
a b : ℕ,	ᾰ : a / b = a	⊢ a = 0 ∨ b = 1
a : ℕ,	ᾰ : a / 0 = a	⊢ a = 0 ∨ 0 = 1		case nat.succ	a b : ℕ,	ᾰ : a / b.succ = a	⊢ a = 0 ∨ b.succ = 1
a : ℕ,	ᾰ : a / 0 = a	⊢ a = 0 ∨ 0 = 1
a b : ℕ,	ᾰ : a / b.succ = a	⊢ a = 0 ∨ b.succ = 1
a : ℕ,	ᾰ : a / 1 = a	⊢ 1 = 1
a : ℕ,	ᾰ : a / 1 = a	⊢ a = 0 ∨ 1 = 1		case nat.succ, nat.succ	a b : ℕ,	ᾰ : a / b.succ.succ = a	⊢ a = 0 ∨ b.succ.succ = 1
a : ℕ,	ᾰ : a / 1 = a	⊢ a = 0 ∨ 1 = 1
a b : ℕ,	ᾰ : a / b.succ.succ = a	⊢ a = 0 ∨ b.succ.succ = 1
a b : ℕ,	ᾰ : a / b.succ.succ = a	⊢ 2 ≤ b + 2
a b : ℕ,	ᾰ : a / b.succ.succ = a	⊢ a = 0
a b : ℕ,	ᾰ : a / b.succ.succ = a,	this : a / (b + 2) ≤ a / 2	⊢ a = 0
a b : ℕ	⊢ a / b = a → a = 0 ∨ b = 1		a b : ℕ	⊢ a = 0 ∨ b = 1 → a / b = a
a b : ℕ,	ᾰ : a / b.succ.succ = a,	this : a / (b + 2) ≤ a / 2	⊢ a ≤ a / 2
a b : ℕ	⊢ a = 0 ∨ b = 1 → a / b = a
b : ℕ	⊢ 0 / b = 0
a : ℕ	⊢ a / 1 = a
a b : ℕ	⊢ a = 0 ∨ b = 1 → a / b = a
n : ℕ,	h : n = 0	⊢ 1 = bit1 n
a b c : ℕ,	h : a + b ≤ c	⊢ a ≤ a + b
a b c : ℕ,	h : a + b ≤ c	⊢ a ≤ c
n : ℕ	⊢ (1 + n).pred = n
a b c : ℕ,	ha0 : a = 0	⊢ a / c * b / a ≤ b / c
a b c : ℕ,	ha0 : ¬a = 0	⊢ a / c * b ≤ b * a / c
a b c : ℕ,	ha0 : ¬a = 0	⊢ a / c * b ≤ b * a / c
a b c : ℕ,	ha0 : ¬a = 0	⊢ b * (a / c) ≤ b * a / c
a b c : ℕ,	ha0 : ¬a = 0	⊢ b * a / c / a = b / c
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i : ℕ,	hn : (nat.bit b n).test_bit i = bool.ff,	hm : (nat.bit b' m).test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : i = 0	⊢ nat.bit b n < nat.bit b' m		b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i : ℕ,	hn : (nat.bit b n).test_bit i = bool.ff,	hm : (nat.bit b' m).test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i = 0	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hm : b' = bool.tt,	hn : b = bool.ff,	this : n = m	⊢ 2 * m < 2 * m + 1
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i : ℕ,	hn : (nat.bit b n).test_bit i = bool.ff,	hm : (nat.bit b' m).test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i = 0	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i' : ℕ,	hn : (nat.bit b n).test_bit i'.succ = bool.ff,	hm : (nat.bit b' m).test_bit i'.succ = bool.tt,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i'.succ = 0	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i' : ℕ,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	j : ℕ,	hj : i' < j	⊢ n.test_bit j = m.test_bit j
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i' : ℕ,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i' : ℕ,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	j : ℕ,	hj : i' < j	⊢ n.test_bit j = m.test_bit j
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i' : ℕ,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	j : ℕ,	hj : i' < j	⊢ n.test_bit j = (nat.bit b n).test_bit j.succ
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i' : ℕ,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	j : ℕ,	hj : i' < j	⊢ m.test_bit j = (nat.bit b' m).test_bit j.succ
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i' : ℕ,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i' : ℕ,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i' : ℕ,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m	⊢ nat.bit b n < nat.bit b' m
n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m i' : ℕ,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m,	hm' : ∀ (i : ℕ), (nat.bit bool.ff n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit bool.ff n).test_bit j = m.test_bit j) → nat.bit bool.ff n < m,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit bool.ff n).test_bit j = (nat.bit b' m).test_bit j	⊢ nat.bit bool.ff n < nat.bit b' m
n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m i' : ℕ,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m,	hm' : ∀ (i : ℕ), (nat.bit bool.tt n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit bool.tt n).test_bit j = m.test_bit j) → nat.bit bool.tt n < m,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit bool.tt n).test_bit j = (nat.bit b' m).test_bit j	⊢ nat.bit bool.tt n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i' : ℕ,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m	⊢ nat.bit b n < nat.bit b' m
n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	m i' : ℕ,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m,	hm' : ∀ (i : ℕ), (nat.bit bool.ff n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit bool.ff n).test_bit j = m.test_bit j) → nat.bit bool.ff n < m,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit bool.ff n).test_bit j = (nat.bit bool.ff m).test_bit j	⊢ nat.bit bool.ff n < nat.bit bool.ff m
n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	m i' : ℕ,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m,	hm' : ∀ (i : ℕ), (nat.bit bool.ff n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit bool.ff n).test_bit j = m.test_bit j) → nat.bit bool.ff n < m,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit bool.ff n).test_bit j = (nat.bit bool.tt m).test_bit j	⊢ nat.bit bool.ff n < nat.bit bool.tt m
n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	m i' : ℕ,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m,	hm' : ∀ (i : ℕ), (nat.bit bool.tt n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit bool.tt n).test_bit j = m.test_bit j) → nat.bit bool.tt n < m,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit bool.tt n).test_bit j = (nat.bit bool.ff m).test_bit j	⊢ nat.bit bool.tt n < nat.bit bool.ff m
n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	m i' : ℕ,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m,	hm' : ∀ (i : ℕ), (nat.bit bool.tt n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit bool.tt n).test_bit j = m.test_bit j) → nat.bit bool.tt n < m,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit bool.tt n).test_bit j = (nat.bit bool.tt m).test_bit j	⊢ nat.bit bool.tt n < nat.bit bool.tt m
n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	m i' : ℕ,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m,	hm' : ∀ (i : ℕ), (nat.bit bool.ff n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit bool.ff n).test_bit j = m.test_bit j) → nat.bit bool.ff n < m,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit bool.ff n).test_bit j = (nat.bit bool.ff m).test_bit j	⊢ 2 * n < 2 * m
n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	m i' : ℕ,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m,	hm' : ∀ (i : ℕ), (nat.bit bool.ff n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit bool.ff n).test_bit j = m.test_bit j) → nat.bit bool.ff n < m,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit bool.ff n).test_bit j = (nat.bit bool.tt m).test_bit j	⊢ 2 * n < 2 * m + 1
n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	m i' : ℕ,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m,	hm' : ∀ (i : ℕ), (nat.bit bool.tt n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit bool.tt n).test_bit j = m.test_bit j) → nat.bit bool.tt n < m,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit bool.tt n).test_bit j = (nat.bit bool.ff m).test_bit j	⊢ 2 * n + 1 < 2 * m
n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	m i' : ℕ,	hi : ¬i'.succ = 0,	hm : m.test_bit i' = bool.tt,	hn : n.test_bit i' = bool.ff,	this : n < m,	hm' : ∀ (i : ℕ), (nat.bit bool.tt n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit bool.tt n).test_bit j = m.test_bit j) → nat.bit bool.tt n < m,	hnm : ∀ (j : ℕ), i'.succ < j → (nat.bit bool.tt n).test_bit j = (nat.bit bool.tt m).test_bit j	⊢ 2 * n + 1 < 2 * m + 1
n m m' : ℕ,	h : n.lxor m = n.lxor m'	⊢ m = n.lxor (n.lxor m')
n m m' : ℕ,	h : n.lxor m = n.lxor m'	⊢ n.lxor (n.lxor m') = m'
n : ℕ,	h : n ≠ 0	⊢ ∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff
h : 0 ≠ 0	⊢ ∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff		case f	b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0	⊢ ∃ (i : ℕ), (nat.bit b n).test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = bool.ff
h : 0 ≠ 0	⊢ ∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff
b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0	⊢ ∃ (i : ℕ), (nat.bit b n).test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = bool.ff
b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0,	h' : n = 0	⊢ ∃ (i : ℕ), (nat.bit b n).test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = bool.ff
b : bool,	hn : 0 ≠ 0 → (∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff),	h : nat.bit b 0 ≠ 0	⊢ b = bool.tt
b : bool,	hn : 0 ≠ 0 → (∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff)	⊢ nat.bit b 0 ≠ 0 → b = bool.tt
b : bool,	hn : 0 ≠ 0 → (∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff)	⊢ nat.bit b 0 ≠ 0 → b = bool.tt
hn : 0 ≠ 0 → (∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff)	⊢ nat.bit bool.ff 0 ≠ 0 → bool.ff = bool.tt
hn : 0 ≠ 0 → (∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff)	⊢ nat.bit bool.tt 0 ≠ 0 → bool.tt = bool.tt
b : bool,	hn : 0 ≠ 0 → (∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff),	h : nat.bit b 0 ≠ 0	⊢ ∃ (i : ℕ), (nat.bit b 0).test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → (nat.bit b 0).test_bit j = bool.ff
b : bool,	hn : 0 ≠ 0 → (∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff),	h : nat.bit b 0 ≠ 0	⊢ (nat.bit bool.tt 0).test_bit 0 = bool.tt
b : bool,	hn : 0 ≠ 0 → (∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff),	h : nat.bit b 0 ≠ 0	⊢ ∃ (i : ℕ), (nat.bit bool.tt 0).test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → (nat.bit bool.tt 0).test_bit j = bool.ff
b : bool,	hn : 0 ≠ 0 → (∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff),	h : nat.bit b 0 ≠ 0,	j : ℕ,	hj : 0 < j	⊢ (nat.bit bool.tt 0).test_bit j = bool.ff
b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0,	h' : n = 0	⊢ ∃ (i : ℕ), (nat.bit b n).test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = bool.ff		b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0,	h' : ¬n = 0	⊢ ∃ (i : ℕ), (nat.bit b n).test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = bool.ff
b : bool,	hn : 0 ≠ 0 → (∃ (i : ℕ), 0.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → 0.test_bit j = bool.ff),	h : nat.bit b 0 ≠ 0,	j' : ℕ,	hj : 0 < j'.succ	⊢ (nat.bit bool.tt 0).test_bit j'.succ = bool.ff
b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0,	h' : ¬n = 0	⊢ ∃ (i : ℕ), (nat.bit b n).test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = bool.ff
b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0,	h' : ¬n = 0,	k : ℕ,	hk : n.test_bit k = bool.tt,	hk' : ∀ (j : ℕ), k < j → n.test_bit j = bool.ff	⊢ (nat.bit b n).test_bit (k + 1) = bool.tt
b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0,	h' : ¬n = 0,	k : ℕ,	hk : n.test_bit k = bool.tt,	hk' : ∀ (j : ℕ), k < j → n.test_bit j = bool.ff	⊢ ∃ (i : ℕ), (nat.bit b n).test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = bool.ff
b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0,	h' : ¬n = 0,	k : ℕ,	hk : n.test_bit k = bool.tt,	hk' : ∀ (j : ℕ), k < j → n.test_bit j = bool.ff,	j : ℕ,	hj : k + 1 < j	⊢ (nat.bit b n).test_bit j = bool.ff
b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0,	h' : ¬n = 0,	k : ℕ,	hk : n.test_bit k = bool.tt,	hk' : ∀ (j : ℕ), k < j → n.test_bit j = bool.ff,	j : ℕ,	hj : k + 1 < j	⊢ j ≠ 0
b : bool,	n : ℕ,	hn : n ≠ 0 → (∃ (i : ℕ), n.test_bit i = bool.tt ∧ ∀ (j : ℕ), i < j → n.test_bit j = bool.ff),	h : nat.bit b n ≠ 0,	h' : ¬n = 0,	k : ℕ,	hk : n.test_bit k = bool.tt,	hk' : ∀ (j : ℕ), k < j → n.test_bit j = bool.ff,	j' : ℕ,	hj : k + 1 < j'.succ	⊢ (nat.bit b n).test_bit j'.succ = bool.ff
n m i : ℕ,	hn : n.test_bit i = bool.ff,	hm : m.test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j	⊢ n < m
i m : ℕ,	hn : 0.test_bit i = bool.ff,	hm : m.test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → 0.test_bit j = m.test_bit j	⊢ 0 < m
i m : ℕ,	hn : 0.test_bit i = bool.ff,	hnm : ∀ (j : ℕ), i < j → 0.test_bit j = m.test_bit j,	hm : m ≤ 0	⊢ m.test_bit i ≠ bool.tt
i m : ℕ,	hn : 0.test_bit i = bool.ff,	hm : m.test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → 0.test_bit j = m.test_bit j	⊢ 0 < m		case f	b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	i m : ℕ,	hn : (nat.bit b n).test_bit i = bool.ff,	hm : m.test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j	⊢ nat.bit b n < m
i m : ℕ,	hn : 0.test_bit i = bool.ff,	hnm : ∀ (j : ℕ), i < j → 0.test_bit j = m.test_bit j,	hm : m = 0	⊢ m.test_bit i ≠ bool.tt
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	i m : ℕ,	hn : (nat.bit b n).test_bit i = bool.ff,	hm : m.test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j	⊢ nat.bit b n < m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	i : ℕ,	hn : (nat.bit b n).test_bit i = bool.ff,	hm : 0.test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = 0.test_bit j	⊢ nat.bit b n < 0
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	i : ℕ,	hn : (nat.bit b n).test_bit i = bool.ff,	hm : 0.test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = 0.test_bit j	⊢ nat.bit b n < 0		case f, f	b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i : ℕ,	hn : (nat.bit b n).test_bit i = bool.ff,	hm : (nat.bit b' m).test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i : ℕ,	hn : (nat.bit b n).test_bit i = bool.ff,	hm : (nat.bit b' m).test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	i : ℕ,	hn : (nat.bit b n).test_bit i = bool.ff,	hm : (nat.bit b' m).test_bit i = bool.tt,	hnm : ∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hi : i = 0	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hn : (nat.bit b n).test_bit 0 = bool.ff,	hm : (nat.bit b' m).test_bit 0 = bool.tt,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hm : b' = bool.tt,	hn : b = bool.ff	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hm : b' = bool.tt,	hn : b = bool.ff,	i : ℕ	⊢ n.test_bit i = m.test_bit i
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hm : b' = bool.tt,	hn : b = bool.ff,	i : ℕ	⊢ n.test_bit i = m.test_bit i
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hm : b' = bool.tt,	hn : b = bool.ff	⊢ n = m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hm : b' = bool.tt,	hn : b = bool.ff,	i : ℕ	⊢ n.test_bit i = (nat.bit b n).test_bit (i + 1)
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hm : b' = bool.tt,	hn : b = bool.ff,	i : ℕ	⊢ m.test_bit i = (nat.bit b' m).test_bit (i + 1)
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hm : b' = bool.tt,	hn : b = bool.ff	⊢ n = m		b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hm : b' = bool.tt,	hn : b = bool.ff,	this : n = m	⊢ nat.bit b n < nat.bit b' m
b : bool,	n : ℕ,	hn' : ∀ (i : ℕ) {m : ℕ}, n.test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → n.test_bit j = m.test_bit j) → n < m,	b' : bool,	m : ℕ,	hm' : ∀ (i : ℕ), (nat.bit b n).test_bit i = bool.ff → m.test_bit i = bool.tt → (∀ (j : ℕ), i < j → (nat.bit b n).test_bit j = m.test_bit j) → nat.bit b n < m,	hnm : ∀ (j : ℕ), 0 < j → (nat.bit b n).test_bit j = (nat.bit b' m).test_bit j,	hm : b' = bool.tt,	hn : b = bool.ff,	this : n = m	⊢ nat.bit b n < nat.bit b' m
A : Type u_1,	B : Type u_2,	_inst_1 : add_monoid A,	_inst_2 : has_one A,	_inst_3 : add_monoid B,	_inst_4 : has_one B,	f : A →+ B,	h1 : ⇑f 1 = 1,	n : ℕ	⊢ ⇑(f.comp (nat.cast_add_monoid_hom A)) 1 = 1
b : ℕ,	l1 l2 : list ℕ	⊢ nat.of_digits b (l1 ++ l2) = nat.of_digits b l1 + b ^ l1.length * nat.of_digits b l2
b : ℕ,	l2 : list ℕ	⊢ nat.of_digits b (list.nil ++ l2) = nat.of_digits b list.nil + b ^ list.nil.length * nat.of_digits b l2		case list.cons	b : ℕ,	l2 : list ℕ,	hd : ℕ,	tl : list ℕ,	IH : nat.of_digits b (tl ++ l2) = nat.of_digits b tl + b ^ tl.length * nat.of_digits b l2	⊢ nat.of_digits b (hd :: tl ++ l2) = nat.of_digits b (hd :: tl) + b ^ (hd :: tl).length * nat.of_digits b l2
b : ℕ,	l2 : list ℕ	⊢ nat.of_digits b (list.nil ++ l2) = nat.of_digits b list.nil + b ^ list.nil.length * nat.of_digits b l2
b : ℕ,	l2 : list ℕ,	hd : ℕ,	tl : list ℕ,	IH : nat.of_digits b (tl ++ l2) = nat.of_digits b tl + b ^ tl.length * nat.of_digits b l2	⊢ nat.of_digits b (hd :: tl ++ l2) = nat.of_digits b (hd :: tl) + b ^ (hd :: tl).length * nat.of_digits b l2
b : ℕ,	l2 : list ℕ,	hd : ℕ,	tl : list ℕ,	IH : nat.of_digits b (tl ++ l2) = nat.of_digits b tl + b ^ tl.length * nat.of_digits b l2	⊢ ↑hd + b * (nat.of_digits b tl + b ^ tl.length * nat.of_digits b l2) = ↑hd + b * nat.of_digits b tl + b ^ tl.length * b * nat.of_digits b l2
b n : ℕ	⊢ nat.of_digits b (b.digits n) = n
n : ℕ	⊢ nat.of_digits 0 (0.digits n) = n
⊢ nat.of_digits 0 (0.digits 0) = 0		case nat.zero, nat.succ	n : ℕ	⊢ nat.of_digits 0 (0.digits n.succ) = n.succ
⊢ nat.of_digits 0 (0.digits 0) = 0
n : ℕ	⊢ nat.of_digits 0 (0.digits n.succ) = n.succ
n : ℕ	⊢ nat.of_digits 0 [n + 1] = n + 1
n : ℕ	⊢ nat.of_digits 0 (0.digits n) = n		case nat.succ	n b : ℕ	⊢ nat.of_digits b.succ (b.succ.digits n) = n
n : ℕ	⊢ ↑n + 1 + 0 * 0 = n + 1
n b : ℕ	⊢ nat.of_digits b.succ (b.succ.digits n) = n
n : ℕ	⊢ nat.of_digits 1 (1.digits n) = n
⊢ nat.of_digits 1 (1.digits 0) = 0		case nat.succ, nat.zero, nat.succ	n : ℕ,	ih : nat.of_digits 1 (1.digits n) = n	⊢ nat.of_digits 1 (1.digits n.succ) = n.succ
⊢ nat.of_digits 1 (1.digits 0) = 0
n : ℕ	⊢ nat.of_digits 1 (1.digits n) = n		case nat.succ, nat.succ	n b : ℕ	⊢ nat.of_digits b.succ.succ (b.succ.succ.digits n) = n
n : ℕ,	ih : nat.of_digits 1 (1.digits n) = n	⊢ nat.of_digits 1 (1.digits n.succ) = n.succ
n b : ℕ	⊢ ∀ (n : ℕ), (∀ (m : ℕ), m < n → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m) → nat.of_digits b.succ.succ (b.succ.succ.digits n) = n
n b : ℕ	⊢ nat.of_digits b.succ.succ (b.succ.succ.digits n) = n
b : ℕ	⊢ ∀ (n : ℕ), (∀ (m : ℕ), m < n → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m) → nat.of_digits b.succ.succ (b.succ.succ.digits n) = n
b n : ℕ,	h : ∀ (m : ℕ), m < n → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m	⊢ nat.of_digits b.succ.succ (b.succ.succ.digits n) = n
b : ℕ,	h : ∀ (m : ℕ), m < 0 → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m	⊢ nat.of_digits b.succ.succ list.nil = 0
b : ℕ,	h : ∀ (m : ℕ), m < 0 → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m	⊢ nat.of_digits b.succ.succ (b.succ.succ.digits 0) = 0		case nat.succ	b n : ℕ,	h : ∀ (m : ℕ), m < n.succ → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m	⊢ nat.of_digits b.succ.succ (b.succ.succ.digits n.succ) = n.succ
b : ℕ,	h : ∀ (m : ℕ), m < 0 → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m	⊢ nat.of_digits b.succ.succ (b.succ.succ.digits 0) = 0
b n : ℕ,	h : ∀ (m : ℕ), m < n.succ → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m	⊢ nat.of_digits b.succ.succ (b.succ.succ.digits n.succ) = n.succ
b n : ℕ,	h : ∀ (m : ℕ), m < n.succ → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m	⊢ nat.of_digits (b + 1 + 1) ((n + 1) % (b + 2) :: (b + 2).digits ((n + 1) / (b + 2))) = n + 1
b n : ℕ,	h : ∀ (m : ℕ), m < n.succ → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m	⊢ ↑((n + 1) % (b + 2)) + (b + 1 + 1) * nat.of_digits (b + 1 + 1) ((b + 2).digits ((n + 1) / (b + 2))) = n + 1
b n : ℕ,	h : ∀ (m : ℕ), m < n.succ → nat.of_digits b.succ.succ (b.succ.succ.digits m) = m	⊢ ↑((n + 1) % (b + 2)) + (b + 1 + 1) * ((n + 1) / (b + 2)) = n + 1
b n : ℕ	⊢ b.digits n = list.nil ↔ n = 0
b n : ℕ	⊢ b.digits n = list.nil → n = 0
b n : ℕ,	h : b.digits n = list.nil	⊢ nat.of_digits b (b.digits n) = nat.of_digits b list.nil
b n : ℕ,	h : b.digits n = list.nil	⊢ n = 0
b n : ℕ,	h : b.digits n = list.nil,	this : nat.of_digits b (b.digits n) = nat.of_digits b list.nil	⊢ n = 0
b n : ℕ	⊢ b.digits n = list.nil → n = 0		b n : ℕ	⊢ n = 0 → b.digits n = list.nil
b n : ℕ,	h : b.digits n = list.nil,	this : nat.of_digits b (b.digits n) = nat.of_digits b list.nil	⊢ n = nat.of_digits b (b.digits n)
b n : ℕ	⊢ n = 0 → b.digits n = list.nil
b : ℕ	⊢ b.digits 0 = list.nil
b m : ℕ	⊢ ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2
b m : ℕ	⊢ ∀ (n : ℕ), (∀ (m : ℕ), m < n → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2) → ∀ {d : ℕ}, d ∈ (b + 2).digits n → d < b + 2
b m n : ℕ,	IH : ∀ (m : ℕ), m < n → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	d : ℕ,	hd : d ∈ (b + 2).digits n	⊢ d < b + 2
b m d : ℕ,	IH : ∀ (m : ℕ), m < 0 → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : d ∈ list.nil	⊢ d < b + 2
b m d : ℕ,	IH : ∀ (m : ℕ), m < 0 → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : d ∈ (b + 2).digits 0	⊢ d < b + 2		case nat.succ	b m d n : ℕ,	IH : ∀ (m : ℕ), m < n.succ → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : d ∈ (b + 2).digits n.succ	⊢ d < b + 2
b m d : ℕ,	IH : ∀ (m : ℕ), m < 0 → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : d ∈ (b + 2).digits 0	⊢ d < b + 2
b m d n : ℕ,	IH : ∀ (m : ℕ), m < n.succ → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : d ∈ (b + 2).digits n.succ	⊢ d < b + 2
b m d n : ℕ,	IH : ∀ (m : ℕ), m < n.succ → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : d ∈ (n + 1) % (b + 2) :: (b + 2).digits ((n + 1) / (b + 2))	⊢ d < b + 2
b m d n : ℕ,	IH : ∀ (m : ℕ), m < n.succ → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : d = (n + 1) % (b + 2)	⊢ (n + 1) % (b + 2) < b + 2
b m d n : ℕ,	IH : ∀ (m : ℕ), m < n.succ → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : d = (n + 1) % (b + 2)	⊢ 0 < b + 2
b m d n : ℕ,	IH : ∀ (m : ℕ), m < n.succ → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : d = (n + 1) % (b + 2)	⊢ d < b + 2		case nat.succ, or.inr	b m d n : ℕ,	IH : ∀ (m : ℕ), m < n.succ → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : list.mem d ((b + 2).digits ((n + 1) / (b + 2)))	⊢ d < b + 2
b m d n : ℕ,	IH : ∀ (m : ℕ), m < n.succ → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : d = (n + 1) % (b + 2)	⊢ d < b + 2
b m d n : ℕ,	IH : ∀ (m : ℕ), m < n.succ → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : list.mem d ((b + 2).digits ((n + 1) / (b + 2)))	⊢ 1 < b + 2
b m d n : ℕ,	IH : ∀ (m : ℕ), m < n.succ → ∀ {d : ℕ}, d ∈ (b + 2).digits m → d < b + 2,	hd : list.mem d ((b + 2).digits ((n + 1) / (b + 2)))	⊢ d < b + 2
b b' : ℕ,	c : ℤ,	h : ↑b ∣ ↑b' - c,	n : ℕ	⊢ b ∣ n ↔ ↑b ∣ nat.of_digits c (b'.digits n)
b b' : ℕ,	c : ℤ,	h : ↑b ∣ ↑b' - c,	n : ℕ	⊢ ↑b ∣ ↑n ↔ ↑b ∣ nat.of_digits c (b'.digits n)
n k m : ℕ	⊢ (n * k).dist (m * k) = n.dist m * k
x y : ℕ	⊢ ↑x = ↑y ↔ x = y
n m : ℕ,	hnm : n ≤ m	⊢ n! * n ^ (m - n) ≤ m!
n m : ℕ,	hnm : n ≤ m,	this : n! * (n + 1) ^ (m - n) ≤ m!	⊢ n! * n ^ (m - n) ≤ m!
n m : ℕ,	hnm : n ≤ m,	this : n! * (n + 1) ^ (m - n) ≤ m!	⊢ n! * n ^ (m - n) ≤ n! * (n + 1) ^ (m - n)
n m : ℕ,	hnm : n ≤ m,	this : n! * (n + 1) ^ (m - n) ≤ m!	⊢ n ^ (m - n) ≤ (n + 1) ^ (m - n)		n m : ℕ,	hnm : n ≤ m,	this : n! * (n + 1) ^ (m - n) ≤ m!	⊢ 0 < n!
n m : ℕ,	hnm : n ≤ m,	this : n! * (n + 1) ^ (m - n) ≤ m!	⊢ n! * n ^ (m - n) ≤ m!		n m : ℕ,	hnm : n ≤ m	⊢ n! * (n + 1) ^ (m - n) ≤ m!
n m : ℕ,	hnm : n ≤ m,	this : n! * (n + 1) ^ (m - n) ≤ m!	⊢ 0 < n!
n m : ℕ,	hnm : n ≤ m	⊢ n! * (n + 1) ^ (m - n) ≤ m!
n m : ℕ,	hnm : n ≤ m	⊢ m = n + (m - n)
n : ℕ,	pow_succ_le_asc_factorial : ∀ (k : ℕ), (n + 1) ^ k ≤ n.asc_factorial k	⊢ (n + 1) ^ 0 ≤ n.asc_factorial 0
n : ℕ,	pow_succ_le_asc_factorial : ∀ (k : ℕ), (n + 1) ^ k ≤ n.asc_factorial k,	k : ℕ	⊢ (n + 1) ^ (k + 1) ≤ n.asc_factorial (k + 1)
n : ℕ,	pow_succ_le_asc_factorial : ∀ (k : ℕ), (n + 1) ^ k ≤ n.asc_factorial k,	k : ℕ	⊢ (n + 1) * (n + 1) ^ k ≤ n.asc_factorial (k + 1)
m n k n : ℕ,	_x : k ∣ 0,	kn : k ∣ n	⊢ k ∣ 0.gcd n
m n k n : ℕ,	_x : k ∣ 0,	kn : k ∣ n	⊢ k ∣ 0.gcd n
m n k n : ℕ,	_x : k ∣ 0,	kn : k ∣ n	⊢ k ∣ n
m n k n m : ℕ,	mpos : 0 < n,	IH : k ∣ m % n → k ∣ n → k ∣ (m % n).gcd n,	H1 : k ∣ n,	H2 : k ∣ m	⊢ k ∣ n.gcd m
m n k n m : ℕ,	mpos : 0 < n,	IH : k ∣ m % n → k ∣ n → k ∣ (m % n).gcd n,	H1 : k ∣ n,	H2 : k ∣ m	⊢ k ∣ n.gcd m
m n k n m : ℕ,	mpos : 0 < n,	IH : k ∣ m % n → k ∣ n → k ∣ (m % n).gcd n,	H1 : k ∣ n,	H2 : k ∣ m	⊢ k ∣ (m % n).gcd n
n : ℕ	⊢ n.coprime 0 ↔ n = 1
p n r b : ℕ,	hp : nat.prime p,	hbn : nat.log p n < b	⊢ p ^ r ∣ n! ↔ r ≤ ∑ (i : ℕ) in finset.Ico 1 b, n / p ^ i
p n b k : ℕ,	hp : nat.prime p,	hkn : k ≤ n	⊢ ∑ (i : ℕ) in finset.Ico 1 b, n / p ^ i = ∑ (i : ℕ) in finset.Ico 1 b, (k + (n - k)) / p ^ i
p n b k : ℕ,	hp : nat.prime p,	hkn : k ≤ n	⊢ ∑ (i : ℕ) in finset.Ico 1 b, (k + (n - k)) / p ^ i = ∑ (i : ℕ) in finset.Ico 1 b, (k / p ^ i + (n - k) / p ^ i + ite (p ^ i ≤ k % p ^ i + (n - k) % p ^ i) 1 0)
p n b k : ℕ,	hp : nat.prime p,	hkn : k ≤ n	⊢ ∑ (i : ℕ) in finset.Ico 1 b, (k / p ^ i + (n - k) / p ^ i + ite (p ^ i ≤ k % p ^ i + (n - k) % p ^ i) 1 0) = ∑ (i : ℕ) in finset.Ico 1 b, k / p ^ i + ∑ (i : ℕ) in finset.Ico 1 b, (n - k) / p ^ i + (finset.filter (λ (i : ℕ), p ^ i ≤ k % p ^ i + (n - k) % p ^ i) (finset.Ico 1 b)).card
m n : ℕ,	h : n ≤ m	⊢ (even (m - n) ↔ (even m ↔ even n)) = ?m_1
m n : ℕ,	h : n ≤ m	⊢ (even m ↔ even n) = ?m_1
m n : ℕ,	h : n ≤ m	⊢ even (m - n) ↔ (even m ↔ even n)
m n : ℕ,	h : n ≤ m	⊢ even (m - n) ↔ (even (m - n) ↔ even n ↔ even n)
m n : ℕ,	h : n ≤ m,	h : even n	⊢ even (m - n) ↔ (even (m - n) ↔ even n ↔ even n)
m n : ℕ,	h : n ≤ m,	h : ¬even n	⊢ even (m - n) ↔ (even (m - n) ↔ even n ↔ even n)
m n : ℕ,	h : n ≤ m	⊢ even (m - n) ↔ (even (m - n) ↔ even n ↔ even n)
m n : ℕ,	h : n ≤ m	⊢ odd (m - n) ↔ (odd n ↔ even m)
n : ℕ	⊢ ¬n % 2 = 1 ↔ n % 2 = 0
n : ℕ,	h : n % 2 = 0	⊢ ¬n % 2 = 1 ↔ n % 2 = 0
n : ℕ,	h : n % 2 = 1	⊢ ¬n % 2 = 1 ↔ n % 2 = 0
n : ℕ	⊢ ¬n % 2 = 1 ↔ n % 2 = 0
h : nat.prime 0	⊢ false
⊢ nat.prime 0 → false
n : ℕ,	h : nat.prime n	⊢ n ≠ 0
n : ℕ	⊢ n.factors = list.nil → n = 0 ∨ n = 1
n : ℕ	⊢ n = 0 ∨ n = 1 → n.factors = list.nil
n : ℕ	⊢ n.factors = list.nil ↔ n = 0 ∨ n = 1
n : ℕ	⊢ n.factors = list.nil ↔ n = 0 ∨ n = 1
n : ℕ,	h : n.factors = list.nil	⊢ n = 0 ∨ n = 1
h : 0.factors = list.nil	⊢ 0 = 0 ∨ 0 = 1		h : 1.factors = list.nil	⊢ 1 = 0 ∨ 1 = 1		n : ℕ,	h : n.succ.succ.factors = list.nil	⊢ n.succ.succ = 0 ∨ n.succ.succ = 1
h : 0.factors = list.nil	⊢ 0 = 0 ∨ 0 = 1
h : 1.factors = list.nil	⊢ 1 = 0 ∨ 1 = 1		n : ℕ,	h : n.succ.succ.factors = list.nil	⊢ n.succ.succ = 0 ∨ n.succ.succ = 1
h : 1.factors = list.nil	⊢ 1 = 0 ∨ 1 = 1
n : ℕ,	h : (let m : ℕ := (n + 2).min_fac in m :: ((n + 2) / m).factors) = list.nil	⊢ n.succ.succ = 0 ∨ n.succ.succ = 1
n : ℕ,	h : n.factors = list.nil	⊢ n = 0 ∨ n = 1		n : ℕ,	h : n = 0 ∨ n = 1	⊢ n.factors = list.nil
n : ℕ,	h : n.succ.succ.factors = list.nil	⊢ n.succ.succ = 0 ∨ n.succ.succ = 1
n : ℕ,	h : n = 0 ∨ n = 1	⊢ n.factors = list.nil
⊢ 0.factors = list.nil		⊢ 1.factors = list.nil
⊢ 0.factors = list.nil
⊢ 1.factors = list.nil
a p k : ℕ,	pp : nat.prime p,	h₁ : ¬a ∣ p ^ k,	h₂ : a ∣ p ^ (k + 1)	⊢ a = p ^ (k + 1)
p k : ℕ,	pp : nat.prime p,	l : ℕ,	h : l ≤ k + 1,	h₁ : ¬p ^ l ∣ p ^ k,	h₂ : p ^ l ∣ p ^ (k + 1)	⊢ p ^ l = p ^ (k + 1)
p k : ℕ,	pp : nat.prime p,	l : ℕ,	h : l ≤ k + 1,	h₁ : ¬p ^ l ∣ p ^ k,	h₂ : p ^ l ∣ p ^ (k + 1)	⊢ l = k + 1
m n : ℕ	⊢ m.psub n = option.none ↔ m < n
m n : ℕ,	s : m.psub n = option.none	⊢ option.none = option.none ↔ m < n
m n val : ℕ,	s : m.psub n = option.some val	⊢ option.some val = option.none ↔ m < n
m n : ℕ	⊢ m.psub n = option.none ↔ m < n
m n : ℕ,	s : m.psub n = option.none	⊢ m < n
m n : ℕ,	s : m.psub n = option.none	⊢ m < n
m n : ℕ,	s : m.psub n = option.none,	h : m ≥ n	⊢ false
m n : ℕ,	s : m.psub n = option.none,	h : m ≥ n,	k : ℕ,	e : n + k = m	⊢ false
m n : ℕ,	s : m.psub n = option.none	⊢ m < n		case option.some	m n val : ℕ,	s : m.psub n = option.some val	⊢ n ≤ m
m n val : ℕ,	s : m.psub n = option.some val	⊢ n ≤ m
m n val : ℕ,	s : m.psub n = option.some val	⊢ n ≤ val + n
m n val : ℕ,	s : m.psub n = option.some val	⊢ n ≤ m
r n b : ℕ,	h : b ≠ 0,	n' : ℕ,	h₂ : r + b + n' = n	⊢ b.sqrt_aux r n = (b.shiftr 2).sqrt_aux (r.div2 + b) n'
r n b : ℕ,	h : b ≠ 0,	n' : ℕ,	h₂ : r + b + n' = n	⊢ b.sqrt_aux r n = (b.shiftr 2).sqrt_aux (r.div2 + b) n'
r n b : ℕ,	h : b ≠ 0,	n' : ℕ,	h₂ : r + b + n' = n	⊢ ite (b = 0) r (let b' : ℕ := b.shiftr 2 in nat.sqrt_aux._match_1 (λ (n' : ℕ), (b.shiftr 2).sqrt_aux (r.div2 + b) n') ((b.shiftr 2).sqrt_aux r.div2 n) (↑n - ↑(r + b))) = (b.shiftr 2).sqrt_aux (r.div2 + b) n'
r n b : ℕ,	h : b ≠ 0,	n' : ℕ,	h₂ : r + b + n' = n	⊢ b.sqrt_aux r n = (b.shiftr 2).sqrt_aux (r.div2 + b) n'
r n b : ℕ,	h : b ≠ 0,	n' : ℕ,	h₂ : r + b + n' = n	⊢ nat.sqrt_aux._match_1 ((b.shiftr 2).sqrt_aux (r.div2 + b)) ((b.shiftr 2).sqrt_aux r.div2 (r + b + n')) (↑r + ↑b + ↑n' - (↑r + ↑b)) = (b.shiftr 2).sqrt_aux (r.div2 + b) n'
n : num	⊢ ↑(n.succ'.pred') = ↑n
size_eq_nat_size : ∀ (n : pos_num), ↑(n.size) = n.nat_size,	n : pos_num	⊢ ↑(n.bit0.size) = n.bit0.nat_size
size_eq_nat_size : ∀ (n : pos_num), ↑(n.size) = n.nat_size,	n : pos_num	⊢ ↑(n.bit1.size) = n.bit1.nat_size
⊢ comm_monoid pos_num
⊢ comm_monoid pos_num
⊢ comm_monoid pos_num
a b : pos_num	⊢ a * b = b * a
⊢ ∀ (a b c : pos_num), a * b * c = a * (b * c)
⊢ ∀ (a : pos_num), 1 * a = a
⊢ ∀ (a : pos_num), a * 1 = a
⊢ ∀ (x : pos_num), npow_rec 0 x = 1
⊢ ∀ (n : ℕ) (x : pos_num), npow_rec n.succ x = x * npow_rec n x
⊢ ∀ (a b : pos_num), a * b = b * a
⊢ ∀ (a b c : pos_num), a * b * c = a * (b * c)
⊢ ∀ (a : pos_num), 1 * a = a
⊢ ∀ (a b : pos_num), a * b = b * a
⊢ ∀ (a b : pos_num), a * b = b * a
α : Type u_1,	_inst_1 : semiring α,	n : num	⊢ ↑(n.bit1) = bit1 ↑n
α : Type u_1,	_inst_1 : semiring α,	n : num	⊢ ↑(n.bit1) = bit1 ↑n
α : Type u_1,	_inst_1 : semiring α,	n : num	⊢ bit0 ↑n + ↑1 = bit1 ↑n
to_of_int : ∀ (n : ℤ), ↑↑n = n,	n : ℕ	⊢ ↑↑↑n = ↑n
to_of_int : ∀ (n : ℤ), ↑↑n = n,	n : ℕ	⊢ ↑↑-[1+ n] = -[1+ n]
decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ n.bit0.prime ↔ n = 1
decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ 2 ≤ ↑(n.bit0)		decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ ↑(n.bit0) = ↑(n.bit0).min_fac ↔ n = 1
decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ 2 ≤ ↑(n.bit0)
decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ ↑(n.bit0) = ↑(n.bit0).min_fac ↔ n = 1
decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ n.bit0 = n.bit0.min_fac ↔ n = 1
decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ n.bit1.prime ↔ n.bit1.min_fac_aux ↑n 1 = n.bit1
decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ 2 ≤ ↑(n.bit1)		decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ ↑(n.bit1).min_fac = ↑(n.bit1) ↔ n.bit1.min_fac_aux ↑n 1 = n.bit1
decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ 2 ≤ ↑(n.bit1)
decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ n.bit1.min_fac = n.bit1 ↔ n.bit1.min_fac_aux ↑n 1 = n.bit1
decidable_prime : decidable_pred pos_num.prime,	n : pos_num	⊢ ↑(n.bit1).min_fac = ↑(n.bit1) ↔ n.bit1.min_fac_aux ↑n 1 = n.bit1
α : Type u_1,	β : Type u_2,	γ : Type u_3,	f : α → β,	x : option α,	g : Π (b : β), b ∈ option.map f x → option γ	⊢ (option.map f x).pbind g = x.pbind (λ (a : α) (h : a ∈ x), g (f a) _)
α : Type u_1,	β : Type u_2,	γ : Type u_3,	f : α → β,	g : Π (b : β), b ∈ option.map f option.none → option γ	⊢ (option.map f option.none).pbind g = option.none.pbind (λ (a : α) (h : a ∈ option.none), g (f a) _)
α : Type u_1,	β : Type u_2,	γ : Type u_3,	f : α → β,	x : α,	g : Π (b : β), b ∈ option.map f (option.some x) → option γ	⊢ (option.map f (option.some x)).pbind g = (option.some x).pbind (λ (a : α) (h : a ∈ option.some x), g (f a) _)
α : Type u_1,	β : Type u_2,	γ : Type u_3,	f : α → β,	x : option α,	g : Π (b : β), b ∈ option.map f x → option γ	⊢ (option.map f x).pbind g = x.pbind (λ (a : α) (h : a ∈ x), g (f a) _)
α : Type u_1,	β : Type u_2,	x : option α,	f : Π (a : α), a ∈ x → option β,	y : β	⊢ x.pbind f = option.some y ↔ ∃ (z : α) (H : z ∈ x), f z H = option.some y
α : Type u_1,	β : Type u_2,	y : β,	f : Π (a : α), a ∈ option.none → option β	⊢ option.none.pbind f = option.some y ↔ ∃ (z : α) (H : z ∈ option.none), f z H = option.some y		case option.some	α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β	⊢ (option.some x).pbind f = option.some y ↔ ∃ (z : α) (H : z ∈ option.some x), f z H = option.some y
α : Type u_1,	β : Type u_2,	y : β,	f : Π (a : α), a ∈ option.none → option β	⊢ option.none.pbind f = option.some y ↔ ∃ (z : α) (H : z ∈ option.none), f z H = option.some y
α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β	⊢ (option.some x).pbind f = option.some y ↔ ∃ (z : α) (H : z ∈ option.some x), f z H = option.some y
α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β	⊢ f x _ = option.some y ↔ ∃ (z : α) (H : z ∈ option.some x), f z H = option.some y
α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β	⊢ f x _ = option.some y → (∃ (z : α) (H : z ∈ option.some x), f z H = option.some y)
α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β,	h : f x _ = option.some y	⊢ ∃ (z : α) (H : z ∈ option.some x), f z H = option.some y
α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β	⊢ f x _ = option.some y → (∃ (z : α) (H : z ∈ option.some x), f z H = option.some y)		α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β	⊢ (∃ (z : α) (H : z ∈ option.some x), f z H = option.some y) → f x _ = option.some y
α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β,	h : f x _ = option.some y	⊢ ∃ (H : x ∈ option.some x), f x H = option.some y
α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β	⊢ (∃ (z : α) (H : z ∈ option.some x), f z H = option.some y) → f x _ = option.some y
α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β,	z : α,	H : z ∈ option.some x,	hz : f z H = option.some y	⊢ f x _ = option.some y
α : Type u_1,	β : Type u_2,	y : β,	x : α,	f : Π (a : α), a ∈ option.some x → option β,	z : α,	H : z ∈ option.some x,	hz : f z H = option.some y,	H : x = z	⊢ f x _ = option.some y
a b c : ℕ,	H2 : 3 * a ≤ b + c,	h : b < 2 * c	⊢ a + b < 3 * c
α : Type u_1,	_inst_1 : preorder α,	r : ordnode α,	o₁ : with_bot α,	o₂ : with_top α,	hr : ordnode.valid' o₁ r o₂,	hl : ordnode.valid' o₁ ordnode.nil o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) r) ordnode.nil,	bal : ordnode.balanced_sz ordnode.nil.size r.size	⊢ ordnode.valid' o₁ (ordnode.nil.glue r) o₂ ∧ (ordnode.nil.glue r).size = ordnode.nil.size + r.size
α : Type u_1,	_inst_1 : preorder α,	l r : ordnode α,	o₁ : with_bot α,	o₂ : with_top α,	hl : ordnode.valid' o₁ l o₂,	hr : ordnode.valid' o₁ r o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) r) l,	bal : ordnode.balanced_sz l.size r.size	⊢ ordnode.valid' o₁ (l.glue r) o₂ ∧ (l.glue r).size = l.size + r.size
α : Type u_1,	_inst_1 : preorder α,	r : ordnode α,	o₁ : with_bot α,	o₂ : with_top α,	hr : ordnode.valid' o₁ r o₂,	hl : ordnode.valid' o₁ ordnode.nil o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) r) ordnode.nil,	bal : ordnode.balanced_sz ordnode.nil.size r.size	⊢ ordnode.valid' o₁ (ordnode.nil.glue r) o₂ ∧ (ordnode.nil.glue r).size = ordnode.nil.size + r.size		case ordnode.node	α : Type u_1,	_inst_1 : preorder α,	r : ordnode α,	o₁ : with_bot α,	o₂ : with_top α,	hr : ordnode.valid' o₁ r o₂,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) r) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size r.size	⊢ ordnode.valid' o₁ ((ordnode.node ls ll lx lr).glue r) o₂ ∧ ((ordnode.node ls ll lx lr).glue r).size = (ordnode.node ls ll lx lr).size + r.size
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	hr : ordnode.valid' o₁ ordnode.nil o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) ordnode.nil) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size ordnode.nil.size	⊢ ordnode.valid' o₁ ((ordnode.node ls ll lx lr).glue ordnode.nil) o₂ ∧ ((ordnode.node ls ll lx lr).glue ordnode.nil).size = (ordnode.node ls ll lx lr).size + ordnode.nil.size
α : Type u_1,	_inst_1 : preorder α,	r : ordnode α,	o₁ : with_bot α,	o₂ : with_top α,	hr : ordnode.valid' o₁ r o₂,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) r) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size r.size	⊢ ordnode.valid' o₁ ((ordnode.node ls ll lx lr).glue r) o₂ ∧ ((ordnode.node ls ll lx lr).glue r).size = (ordnode.node ls ll lx lr).size + r.size
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	hr : ordnode.valid' o₁ ordnode.nil o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) ordnode.nil) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size ordnode.nil.size	⊢ ordnode.valid' o₁ ((ordnode.node ls ll lx lr).glue ordnode.nil) o₂ ∧ ((ordnode.node ls ll lx lr).glue ordnode.nil).size = (ordnode.node ls ll lx lr).size + ordnode.nil.size		case ordnode.node, ordnode.node	α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size	⊢ ordnode.valid' o₁ ((ordnode.node ls ll lx lr).glue (ordnode.node rs rl rx rr)) o₂ ∧ ((ordnode.node ls ll lx lr).glue (ordnode.node rs rl rx rr)).size = (ordnode.node ls ll lx lr).size + (ordnode.node rs rl rx rr).size
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size	⊢ ordnode.valid' o₁ (ite (ls > rs) (ordnode.glue._match_1 rs rl rx rr (ll.split_max' lx lr)) (ordnode.glue._match_2 ls ll lx lr (rl.split_min' rx rr))) o₂ ∧ (ite (ls > rs) (ordnode.glue._match_1 rs rl rx rr (ll.split_max' lx lr)) (ordnode.glue._match_2 ls ll lx lr (rl.split_min' rx rr))).size = ls + rs
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size	⊢ ordnode.valid' o₁ ((ordnode.node ls ll lx lr).glue (ordnode.node rs rl rx rr)) o₂ ∧ ((ordnode.node ls ll lx lr).glue (ordnode.node rs rl rx rr)).size = (ordnode.node ls ll lx lr).size + (ordnode.node rs rl rx rr).size
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs	⊢ ordnode.valid' o₁ (ordnode.glue._match_1 rs rl rx rr (ll.split_max' lx lr)) o₂ ∧ (ordnode.glue._match_1 rs rl rx rr (ll.split_max' lx lr)).size = ls + rs
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs	⊢ ordnode.valid' o₁ ((ordnode.node ?m_1 ll lx lr).erase_max.balance_r (ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)) o₂ ∧ ((ordnode.node ?m_1 ll lx lr).erase_max.balance_r (ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs	⊢ ℕ
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1	⊢ ordnode.valid' o₁ ((ordnode.node ?m_1 ll lx lr).erase_max.balance_r (ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)) o₂ ∧ ((ordnode.node ?m_1 ll lx lr).erase_max.balance_r (ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs	⊢ ℕ
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : ?m_1	⊢ ordnode.valid' o₁ ((ordnode.node ?m_2 ll lx lr).erase_max.balance_r (ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)) o₂ ∧ ((ordnode.node ?m_2 ll lx lr).erase_max.balance_r (ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1	⊢ ?m_1		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs	⊢ ℕ
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ ordnode.nil.bounded ↑(ordnode.find_max' lx lr) o₂
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ ordnode.nil.bounded ↑(ordnode.find_max' lx lr) o₂		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ ordnode.all (λ (_x : α), _x > ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ ((ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.balance_r (ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1	⊢ (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ ∀ (a : α), ordnode.all (λ (y : α), a < y) (ordnode.node rs rl rx rr) → ordnode.nil.bounded ↑a o₂
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ ordnode.all (λ (_x : α), _x > ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ ordnode.all (λ (_x : α), _x > ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ ((ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.balance_r (ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1	⊢ (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ (ll.node' lx lr).size + (ordnode.node rs rl rx rr).size = ll.size + lr.size + 1 + rs
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ ((ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.balance_r (ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)).size = ls + rs
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1,	H : (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'	⊢ ((ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.balance_r (ordnode.find_max' lx lr) (ordnode.node rs rl rx rr)).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1	⊢ (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1	⊢ (∃ (l' : ℕ), ordnode.raised (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size l' ∧ ordnode.balanced_sz l' (ordnode.node rs rl rx rr).size) ∨ ∃ (r' : ℕ), ordnode.raised r' (ordnode.node rs rl rx rr).size ∧ ordnode.balanced_sz (ordnode.node (ll.size + lr.size + 1) ll lx lr).erase_max.size r'
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs	⊢ ordnode.valid' o₁ (ordnode.glue._match_1 rs rl rx rr (ll.split_max' lx lr)) o₂ ∧ (ordnode.glue._match_1 rs rl rx rr (ll.split_max' lx lr)).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs	⊢ ordnode.valid' o₁ (ordnode.glue._match_2 ls ll lx lr (rl.split_min' rx rr)) o₂ ∧ (ordnode.glue._match_2 ls ll lx lr (rl.split_min' rx rr)).size = ls + rs
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ls > rs,	v : ordnode.valid' o₁ (ll.node' lx lr).erase_max ↑(ordnode.find_max' lx lr),	e : (ll.node' lx lr).size = (ll.node' lx lr).erase_max.size + 1	⊢ ordnode.balanced_sz (ll.node' lx lr).size (ordnode.node rs rl rx rr).size
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs	⊢ ordnode.valid' o₁ (ordnode.glue._match_2 ls ll lx lr (rl.split_min' rx rr)) o₂ ∧ (ordnode.glue._match_2 ls ll lx lr (rl.split_min' rx rr)).size = ls + rs
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs	⊢ ordnode.valid' o₁ ((ordnode.node ls ll lx lr).balance_l (rl.find_min' rx) (ordnode.node ?m_1 rl rx rr).erase_min) o₂ ∧ ((ordnode.node ls ll lx lr).balance_l (rl.find_min' rx) (ordnode.node ?m_1 rl rx rr).erase_min).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs	⊢ ℕ
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1	⊢ ordnode.valid' o₁ ((ordnode.node ls ll lx lr).balance_l (rl.find_min' rx) (ordnode.node ?m_1 rl rx rr).erase_min) o₂ ∧ ((ordnode.node ls ll lx lr).balance_l (rl.find_min' rx) (ordnode.node ?m_1 rl rx rr).erase_min).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs	⊢ ℕ
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : ?m_1	⊢ ordnode.valid' o₁ ((ordnode.node ls ll lx lr).balance_l (rl.find_min' rx) (ordnode.node ?m_2 rl rx rr).erase_min) o₂ ∧ ((ordnode.node ls ll lx lr).balance_l (rl.find_min' rx) (ordnode.node ?m_2 rl rx rr).erase_min).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1	⊢ ?m_1		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs	⊢ ℕ
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ ordnode.nil.bounded o₁ ↑(rl.find_min' rx)
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ ordnode.nil.bounded o₁ ↑(rl.find_min' rx)		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ ordnode.all (λ (_x : α), _x < rl.find_min' rx) (ordnode.node ls ll lx lr)		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ ((ordnode.node ls ll lx lr).balance_l (rl.find_min' rx) (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1	⊢ (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ ∀ (a : α), lx < a → ordnode.nil.bounded o₁ ↑a
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ ordnode.all (λ (_x : α), _x < rl.find_min' rx) (ordnode.node ls ll lx lr)
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ ordnode.all (λ (_x : α), _x < rl.find_min' rx) (ordnode.node ls ll lx lr)		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ ((ordnode.node ls ll lx lr).balance_l (rl.find_min' rx) (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1	⊢ (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ (ordnode.node ls ll lx lr).size + (rl.node' rx rr).size = ls + (rl.size + rr.size + 1)
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ ((ordnode.node ls ll lx lr).balance_l (rl.find_min' rx) (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min).size = ls + rs		α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1	⊢ (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1,	H : (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'	⊢ ((ordnode.node ls ll lx lr).balance_l (rl.find_min' rx) (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min).size = ls + rs
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1	⊢ (∃ (l' : ℕ), ordnode.raised l' (ordnode.node ls ll lx lr).size ∧ ordnode.balanced_sz l' (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size) ∨ ∃ (r' : ℕ), ordnode.raised (ordnode.node (rl.size + rr.size + 1) rl rx rr).erase_min.size r' ∧ ordnode.balanced_sz (ordnode.node ls ll lx lr).size r'
α : Type u_1,	_inst_1 : preorder α,	o₁ : with_bot α,	o₂ : with_top α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	hl : ordnode.valid' o₁ (ordnode.node ls ll lx lr) o₂,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	hr : ordnode.valid' o₁ (ordnode.node rs rl rx rr) o₂,	sep : ordnode.all (λ (x : α), ordnode.all (λ (y : α), x < y) (ordnode.node rs rl rx rr)) (ordnode.node ls ll lx lr),	bal : ordnode.balanced_sz (ordnode.node ls ll lx lr).size (ordnode.node rs rl rx rr).size,	h : ¬ls > rs,	v : ordnode.valid' ↑(rl.find_min' rx) (rl.node' rx rr).erase_min o₂,	e : (rl.node' rx rr).size = (rl.node' rx rr).erase_min.size + 1	⊢ ordnode.balanced_sz (ordnode.node ls ll lx lr).size (rl.node' rx rr).size
a b c : ℕ,	h₁ : 3 * a < b + c + 1,	h₂ : b ≤ 3 * c	⊢ 2 * (a + b) ≤ 9 * c + 5
α : Type u_1,	l : ordnode α,	x : α,	r : ordnode α	⊢ (l.balance_l x r).dual = r.dual.balance_r x l.dual
α : Type u_1,	l : ordnode α,	x : α,	r : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 l x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l_1 x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l_1 x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l.size + 1) l_1 x_1 l) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l_1) l) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node (size + 1) ordnode.nil x r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_1 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_2 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_2), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l : ordnode α) (x_2 : α) (r_2 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_2), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l_1 x_1 (ordnode.node (size + size_3 + 1) r_1 x r)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l.size + 1) l_1 x_1 l) x_2 (ordnode.node (r_2.size + size + 1) r_2 x r))) r_1) l_1) (ordnode.node (size_1 + size + 1) l x r)) l) r) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x l.dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l_1) (λ (size_1 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l_1) x_1 r) (ordnode.node (size + 1) (ordnode.node (l.size + 1) ordnode.nil x l) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l_1) r) l.dual) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node (size + 1) r.dual x ordnode.nil) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_1 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_2 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_2), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l : ordnode α) (x_2 : α) (r_2 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_2), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) r.dual x l_1) x_1 r_1) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l.size + 1) r.dual x l) x_2 (ordnode.node (r_2.size + size_2 + 1) r_2 x_1 r_1))) l_1) r_1) (ordnode.node (size + size_1 + 1) r.dual x l.dual)) l.dual) r.dual
α : Type u_1,	x : α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) ordnode.nil x ordnode.nil)) ordnode.nil) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x ordnode.nil.dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) ordnode.nil.dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x ordnode.nil.dual)) ordnode.nil.dual) ordnode.nil.dual
α : Type u_1,	x : α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) ordnode.nil x ordnode.nil)) ordnode.nil) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x ordnode.nil.dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) ordnode.nil.dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x ordnode.nil.dual)) ordnode.nil.dual) ordnode.nil.dual		case ordnode.nil, ordnode.node	α : Type u_1,	x : α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls ll lx lr) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls ll lx lr)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls ll lx lr) x ordnode.nil)) (ordnode.node ls ll lx lr)) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls ll lx lr).dual)) (ordnode.node ls ll lx lr).dual) ordnode.nil.dual
α : Type u_1,	l : ordnode α,	x : α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 l x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l_1 x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l_1 x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l.size + 1) l_1 x_1 l) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l_1) l) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l_1 x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l.size + 1) l_1 x_1 l) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l_1) (ordnode.node (size_1 + size + 1) l x ordnode.nil)) l) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x l.dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l_1) (λ (size_1 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l_1) x_1 r) (ordnode.node (size + 1) (ordnode.node (l.size + 1) ordnode.nil x l) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l_1) r) l.dual) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l_1) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l.size + 1) ordnode.nil.dual x l) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l_1) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x l.dual)) l.dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls ll lx lr) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls ll lx lr)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls ll lx lr) x ordnode.nil)) (ordnode.node ls ll lx lr)) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls ll lx lr).dual)) (ordnode.node ls ll lx lr).dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls ll lx lr) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls ll lx lr)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls ll lx lr) x ordnode.nil)) (ordnode.node ls ll lx lr)) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls ll lx lr).dual)) (ordnode.node ls ll lx lr).dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls ll lx lr) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls ll lx lr)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls ll lx lr) x ordnode.nil)) (ordnode.node ls ll lx lr)) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls ll lx lr).dual)) (ordnode.node ls ll lx lr).dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls ordnode.nil lx lr) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls ordnode.nil lx lr)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls ordnode.nil lx lr) x ordnode.nil)) (ordnode.node ls ordnode.nil lx lr)) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls ordnode.nil lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls ordnode.nil lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls ordnode.nil lx lr).dual)) (ordnode.node ls ordnode.nil lx lr).dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lr : ordnode α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls (ordnode.node lls lll llx llr) lx lr) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls (ordnode.node lls lll llx llr) lx lr)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls (ordnode.node lls lll llx llr) lx lr) x ordnode.nil)) (ordnode.node ls (ordnode.node lls lll llx llr) lx lr)) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls (ordnode.node lls lll llx llr) lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls (ordnode.node lls lll llx llr) lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls (ordnode.node lls lll llx llr) lx lr).dual)) (ordnode.node ls (ordnode.node lls lll llx llr) lx lr).dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls ll lx lr) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls ll lx lr)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls ll lx lr) x ordnode.nil)) (ordnode.node ls ll lx lr)) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls ll lx lr).dual)) (ordnode.node ls ll lx lr).dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	lx : α	⊢ ordnode.node 2 ordnode.nil x (ordnode.node ls ordnode.nil lx ordnode.nil) = ordnode.node 2 ordnode.nil x (ordnode.node ls ordnode.nil lx ordnode.nil)
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ ordnode.node 3 (ordnode.singleton x).dual lrx (ordnode.singleton lx).dual = ordnode.node 3 (ordnode.singleton x) lrx (ordnode.singleton lx)
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α	⊢ ordnode.node 3 (ordnode.singleton x).dual lx (ordnode.node lls llr.dual llx lll.dual) = ordnode.node 3 (ordnode.singleton x) lx (ordnode.node lls llr.dual llx lll.dual)
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ (ite (lrs < ordnode.ratio * lls) (ordnode.node (ls + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (lrs + 1) (ordnode.node lrs lrl lrx lrr) x ordnode.nil)) (ordnode.node (ls + 1) (ordnode.node (lls + lrl.size + 1) (ordnode.node lls lll llx llr) lx lrl) lrx (ordnode.node (lrr.size + 1) lrr x ordnode.nil))).dual = ite (lrs < ordnode.ratio * lls) (ordnode.node (ls + 1) (ordnode.node (lrs + 1) ordnode.nil x (ordnode.node lrs lrr.dual lrx lrl.dual)) lx (ordnode.node lls llr.dual llx lll.dual)) (ordnode.node (ls + 1) (ordnode.node (lrr.dual.size + 1) ordnode.nil x lrr.dual) lrx (ordnode.node (lrl.dual.size + lls + 1) lrl.dual lx (ordnode.node lls llr.dual llx lll.dual)))
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ (ite (lrs < ordnode.ratio * lls) (ordnode.node (ls + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (lrs + 1) (ordnode.node lrs lrl lrx lrr) x ordnode.nil)) (ordnode.node (ls + 1) (ordnode.node (lls + lrl.size + 1) (ordnode.node lls lll llx llr) lx lrl) lrx (ordnode.node (lrr.size + 1) lrr x ordnode.nil))).dual = ite (lrs < ordnode.ratio * lls) (ordnode.node (ls + 1) (ordnode.node (lrs + 1) ordnode.nil x (ordnode.node lrs lrr.dual lrx lrl.dual)) lx (ordnode.node lls llr.dual llx lll.dual)) (ordnode.node (ls + 1) (ordnode.node (lrr.dual.size + 1) ordnode.nil x lrr.dual) lrx (ordnode.node (lrl.dual.size + lls + 1) lrl.dual lx (ordnode.node lls llr.dual llx lll.dual)))
α : Type u_1,	x : α,	ls : ℕ,	lx : α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls ordnode.nil lx ordnode.nil) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls ordnode.nil lx ordnode.nil)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls ordnode.nil lx ordnode.nil) x ordnode.nil)) (ordnode.node ls ordnode.nil lx ordnode.nil)) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls ordnode.nil lx ordnode.nil).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls ordnode.nil lx ordnode.nil).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls ordnode.nil lx ordnode.nil).dual)) (ordnode.node ls ordnode.nil lx ordnode.nil).dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls ordnode.nil lx (ordnode.node lrs lrl lrx lrr)) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls ordnode.nil lx (ordnode.node lrs lrl lrx lrr))) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls ordnode.nil lx (ordnode.node lrs lrl lrx lrr)) x ordnode.nil)) (ordnode.node ls ordnode.nil lx (ordnode.node lrs lrl lrx lrr))) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls ordnode.nil lx (ordnode.node lrs lrl lrx lrr)).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls ordnode.nil lx (ordnode.node lrs lrl lrx lrr)).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls ordnode.nil lx (ordnode.node lrs lrl lrx lrr)).dual)) (ordnode.node ls ordnode.nil lx (ordnode.node lrs lrl lrx lrr)).dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls (ordnode.node lls lll llx llr) lx ordnode.nil) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls (ordnode.node lls lll llx llr) lx ordnode.nil)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls (ordnode.node lls lll llx llr) lx ordnode.nil) x ordnode.nil)) (ordnode.node ls (ordnode.node lls lll llx llr) lx ordnode.nil)) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls (ordnode.node lls lll llx llr) lx ordnode.nil).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls (ordnode.node lls lll llx llr) lx ordnode.nil).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls (ordnode.node lls lll llx llr) lx ordnode.nil).dual)) (ordnode.node ls (ordnode.node lls lll llx llr) lx ordnode.nil).dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls (ordnode.node lls lll llx llr) lx (ordnode.node lrs lrl lrx lrr)) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls (ordnode.node lls lll llx llr) lx (ordnode.node lrs lrl lrx lrr))) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls (ordnode.node lls lll llx llr) lx (ordnode.node lrs lrl lrx lrr)) x ordnode.nil)) (ordnode.node ls (ordnode.node lls lll llx llr) lx (ordnode.node lrs lrl lrx lrr))) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls (ordnode.node lls lll llx llr) lx (ordnode.node lrs lrl lrx lrr)).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls (ordnode.node lls lll llx llr) lx (ordnode.node lrs lrl lrx lrr)).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) ordnode.nil.dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x (ordnode.node ls (ordnode.node lls lll llx llr) lx (ordnode.node lrs lrl lrx lrr)).dual)) (ordnode.node ls (ordnode.node lls lll llx llr) lx (ordnode.node lrs lrl lrx lrr)).dual) ordnode.nil.dual
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ (ite (lrs < ordnode.ratio * lls) (ordnode.node (ls + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (lrs + 1) (ordnode.node lrs lrl lrx lrr) x ordnode.nil)) (ordnode.node (ls + 1) (ordnode.node (lls + lrl.size + 1) (ordnode.node lls lll llx llr) lx lrl) lrx (ordnode.node (lrr.size + 1) lrr x ordnode.nil))).dual = ite (lrs < ordnode.ratio * lls) (ordnode.node (ls + 1) (ordnode.node (lrs + 1) ordnode.nil x (ordnode.node lrs lrr.dual lrx lrl.dual)) lx (ordnode.node lls llr.dual llx lll.dual)) (ordnode.node (ls + 1) (ordnode.node (lrr.dual.size + 1) ordnode.nil x lrr.dual) lrx (ordnode.node (lrl.dual.size + lls + 1) lrl.dual lx (ordnode.node lls llr.dual llx lll.dual)))
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α,	h : lrs < ordnode.ratio * lls	⊢ (ordnode.node (ls + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (lrs + 1) (ordnode.node lrs lrl lrx lrr) x ordnode.nil)).dual = ordnode.node (ls + 1) (ordnode.node (lrs + 1) ordnode.nil x (ordnode.node lrs lrr.dual lrx lrl.dual)) lx (ordnode.node lls llr.dual llx lll.dual)
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α,	h : ¬lrs < ordnode.ratio * lls	⊢ (ordnode.node (ls + 1) (ordnode.node (lls + lrl.size + 1) (ordnode.node lls lll llx llr) lx lrl) lrx (ordnode.node (lrr.size + 1) lrr x ordnode.nil)).dual = ordnode.node (ls + 1) (ordnode.node (lrr.dual.size + 1) ordnode.nil x lrr.dual) lrx (ordnode.node (lrl.dual.size + lls + 1) lrl.dual lx (ordnode.node lls llr.dual llx lll.dual))
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α,	h : ¬lrs < ordnode.ratio * lls	⊢ (ordnode.node (ls + 1) (ordnode.node (lls + lrl.size + 1) (ordnode.node lls lll llx llr) lx lrl) lrx (ordnode.node (lrr.size + 1) lrr x ordnode.nil)).dual = ordnode.node (ls + 1) (ordnode.node (lrr.dual.size + 1) ordnode.nil x lrr.dual) lrx (ordnode.node (lrl.dual.size + lls + 1) lrl.dual lx (ordnode.node lls llr.dual llx lll.dual))
α : Type u_1,	l : ordnode α,	x : α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 l x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l_1 x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l_1 x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l.size + 1) l_1 x_1 l) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l_1) l) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x ordnode.nil) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l_1 x_1 (ordnode.node (size + size_3 + 1) r x ordnode.nil)) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l.size + 1) l_1 x_1 l) x_2 (ordnode.node (r_1.size + size + 1) r_1 x ordnode.nil))) r) l_1) (ordnode.node (size_1 + size + 1) l x ordnode.nil)) l) ordnode.nil) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x l.dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l_1) (λ (size_1 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l_1) x_1 r) (ordnode.node (size + 1) (ordnode.node (l.size + 1) ordnode.nil x l) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l_1) r) l.dual) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil.dual x ordnode.nil) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) ordnode.nil.dual x l_1) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l.size + 1) ordnode.nil.dual x l) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l_1) r) (ordnode.node (size + size_1 + 1) ordnode.nil.dual x l.dual)) l.dual) ordnode.nil.dual		case ordnode.node	α : Type u_1,	l : ordnode α,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 l x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l_1 x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l_1 x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l.size + 1) l_1 x_1 l) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l_1) l) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x (ordnode.node rs rl rx rr)) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l_1 x_1 (ordnode.node (size + size_3 + 1) r x (ordnode.node rs rl rx rr))) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l.size + 1) l_1 x_1 l) x_2 (ordnode.node (r_1.size + size + 1) r_1 x (ordnode.node rs rl rx rr)))) r) l_1) (ordnode.node (size_1 + size + 1) l x (ordnode.node rs rl rx rr))) l) (ordnode.node rs rl rx rr)) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x l.dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l_1) (λ (size_1 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l_1) x_1 r) (ordnode.node (size + 1) (ordnode.node (l.size + 1) ordnode.nil x l) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l_1) r) l.dual) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) (ordnode.node rs rl rx rr).dual x ordnode.nil) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) (ordnode.node rs rl rx rr).dual x l_1) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l.size + 1) (ordnode.node rs rl rx rr).dual x l) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l_1) r) (ordnode.node (size + size_1 + 1) (ordnode.node rs rl rx rr).dual x l.dual)) l.dual) (ordnode.node rs rl rx rr).dual
α : Type u_1,	x : α,	ls : ℕ,	lx : α,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ (ite (lrs < ordnode.ratio * lls) (ordnode.node (ls + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (lrs + 1) (ordnode.node lrs lrl lrx lrr) x ordnode.nil)) (ordnode.node (ls + 1) (ordnode.node (lls + lrl.size + 1) (ordnode.node lls lll llx llr) lx lrl) lrx (ordnode.node (lrr.size + 1) lrr x ordnode.nil))).dual = ite (lrs < ordnode.ratio * lls) (ordnode.node (ls + 1) (ordnode.node (lrs + 1) ordnode.nil x (ordnode.node lrs lrr.dual lrx lrl.dual)) lx (ordnode.node lls llr.dual llx lll.dual)) (ordnode.node (ls + 1) (ordnode.node (lrr.dual.size + 1) ordnode.nil x lrr.dual) lrx (ordnode.node (lrl.dual.size + lls + 1) lrl.dual lx (ordnode.node lls llr.dual llx lll.dual)))
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x (ordnode.node rs rl rx rr)) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x (ordnode.node rs rl rx rr))) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x (ordnode.node rs rl rx rr)))) r) l) (ordnode.node (size_1 + size + 1) ordnode.nil x (ordnode.node rs rl rx rr))) ordnode.nil) (ordnode.node rs rl rx rr)) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x ordnode.nil.dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) ordnode.nil.dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) (ordnode.node rs rl rx rr).dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) (ordnode.node rs rl rx rr).dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) (ordnode.node rs rl rx rr).dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) (ordnode.node rs rl rx rr).dual x ordnode.nil.dual)) ordnode.nil.dual) (ordnode.node rs rl rx rr).dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x (ordnode.node rs rl rx rr)) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x (ordnode.node rs rl rx rr))) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x (ordnode.node rs rl rx rr)))) r) l) (ordnode.node (size_1 + size + 1) ordnode.nil x (ordnode.node rs rl rx rr))) ordnode.nil) (ordnode.node rs rl rx rr)) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x ordnode.nil.dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) ordnode.nil.dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) (ordnode.node rs rl rx rr).dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) (ordnode.node rs rl rx rr).dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) (ordnode.node rs rl rx rr).dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) (ordnode.node rs rl rx rr).dual x ordnode.nil.dual)) ordnode.nil.dual) (ordnode.node rs rl rx rr).dual		case ordnode.node, ordnode.node	α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls ll lx lr) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls ll lx lr)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x (ordnode.node rs rl rx rr)) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x (ordnode.node rs rl rx rr))) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x (ordnode.node rs rl rx rr)))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls ll lx lr) x (ordnode.node rs rl rx rr))) (ordnode.node ls ll lx lr)) (ordnode.node rs rl rx rr)) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) (ordnode.node rs rl rx rr).dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) (ordnode.node rs rl rx rr).dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) (ordnode.node rs rl rx rr).dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) (ordnode.node rs rl rx rr).dual x (ordnode.node ls ll lx lr).dual)) (ordnode.node ls ll lx lr).dual) (ordnode.node rs rl rx rr).dual
α : Type u_1,	l : ordnode α,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 l x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l_1 x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l_1 x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l.size + 1) l_1 x_1 l) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l_1) l) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x (ordnode.node rs rl rx rr)) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l_1 x_1 (ordnode.node (size + size_3 + 1) r x (ordnode.node rs rl rx rr))) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l.size + 1) l_1 x_1 l) x_2 (ordnode.node (r_1.size + size + 1) r_1 x (ordnode.node rs rl rx rr)))) r) l_1) (ordnode.node (size_1 + size + 1) l x (ordnode.node rs rl rx rr))) l) (ordnode.node rs rl rx rr)) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x l.dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l_1) (λ (size_1 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l_1) x_1 r) (ordnode.node (size + 1) (ordnode.node (l.size + 1) ordnode.nil x l) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l_1) r) l.dual) (λ (size : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) (ordnode.node rs rl rx rr).dual x ordnode.nil) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) (ordnode.node rs rl rx rr).dual x l_1) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l.size + 1) (ordnode.node rs rl rx rr).dual x l) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l_1) r) (ordnode.node (size + size_1 + 1) (ordnode.node rs rl rx rr).dual x l.dual)) l.dual) (ordnode.node rs rl rx rr).dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α	⊢ ordnode.dual (ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 (ordnode.node ls ll lx lr) x ordnode.nil) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (lr : ordnode α), ordnode α) l) (ih_r : (λ (lr : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x_1) x_2 (ordnode.singleton x)) r) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 l x_1 (ordnode.singleton x)) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) l x_1 (ordnode.node (size_2 + 1) r x ordnode.nil)) (ordnode.node (size + 1) (ordnode.node (size_1 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + 1) r_1 x ordnode.nil))) r) l) (ordnode.node ls ll lx lr)) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) ordnode.nil x (ordnode.node rs rl rx rr)) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size_1 + size + 1) l x_1 (ordnode.node (size + size_3 + 1) r x (ordnode.node rs rl rx rr))) (ordnode.node (size_1 + size + 1) (ordnode.node (size_2 + l_1.size + 1) l x_1 l_1) x_2 (ordnode.node (r_1.size + size + 1) r_1 x (ordnode.node rs rl rx rr)))) r) l) (ordnode.node (size_1 + size + 1) (ordnode.node ls ll lx lr) x (ordnode.node rs rl rx rr))) (ordnode.node ls ll lx lr)) (ordnode.node rs rl rx rr)) = ordnode.rec (ordnode.rec (ordnode.singleton x) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.rec (ordnode.node 2 ordnode.nil x (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_2 : α) (r : ordnode α) (ih_l : (λ (rl : ordnode α), ordnode α) l) (ih_r : (λ (rl : ordnode α), ordnode α) r), ordnode.node 3 (ordnode.singleton x) x_2 (ordnode.singleton x_1)) l) (λ (size_1 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec (ordnode.node 3 (ordnode.singleton x) x_1 r) (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_2 < ordnode.ratio * size_1) (ordnode.node (size + 1) (ordnode.node (size_2 + 1) ordnode.nil x l) x_1 r) (ordnode.node (size + 1) (ordnode.node (l_1.size + 1) ordnode.nil x l_1) x_2 (ordnode.node (r_1.size + size_1 + 1) r_1 x_1 r))) l) r) (ordnode.node ls ll lx lr).dual) (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ordnode.rec (ordnode.node (size + 1) (ordnode.node rs rl rx rr).dual x ordnode.nil) (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l) (ih_r : (λ (_x : ordnode α), ordnode α) r), ite (size_1 > ordnode.delta * size) (ordnode.rec ordnode.nil (λ (size_2 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ordnode.rec ordnode.nil (λ (size_3 : ℕ) (l_1 : ordnode α) (x_2 : α) (r_1 : ordnode α) (ih_l : (λ (_x : ordnode α), ordnode α) l_1) (ih_r : (λ (_x : ordnode α), ordnode α) r_1), ite (size_3 < ordnode.ratio * size_2) (ordnode.node (size + size_1 + 1) (ordnode.node (size + size_3 + 1) (ordnode.node rs rl rx rr).dual x l) x_1 r) (ordnode.node (size + size_1 + 1) (ordnode.node (size + l_1.size + 1) (ordnode.node rs rl rx rr).dual x l_1) x_2 (ordnode.node (r_1.size + size_2 + 1) r_1 x_1 r))) l) r) (ordnode.node (size + size_1 + 1) (ordnode.node rs rl rx rr).dual x (ordnode.node ls ll lx lr).dual)) (ordnode.node ls ll lx lr).dual) (ordnode.node rs rl rx rr).dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	h : ls > ordnode.delta * rs	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) ll lx (ordnode.node (rs + size_1 + 1) lr x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) ll lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) lr) ll) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x lr.dual) lx ll.dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx ll.dual))) lr.dual) ll.dual		α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	h : ¬ls > ordnode.delta * rs	⊢ (ordnode.node (ls + rs + 1) (ordnode.node ls ll lx lr) x (ordnode.node rs rl rx rr)).dual = ordnode.node (rs + ls + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node ls lr.dual lx ll.dual)
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	h : ¬ls > ordnode.delta * rs	⊢ (ordnode.node (ls + rs + 1) (ordnode.node ls ll lx lr) x (ordnode.node rs rl rx rr)).dual = ordnode.node (rs + ls + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node ls lr.dual lx ll.dual)
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	h : ¬ls > ordnode.delta * rs	⊢ (ordnode.node (ls + rs + 1) (ordnode.node ls ll lx lr) x (ordnode.node rs rl rx rr)).dual = ordnode.node (rs + ls + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node ls lr.dual lx ll.dual)		α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	h : ls > ordnode.delta * rs	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) ll lx (ordnode.node (rs + size_1 + 1) lr x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) ll lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) lr) ll) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x lr.dual) lx ll.dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx ll.dual))) lr.dual) ll.dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α	⊢ (ite (ls > ordnode.delta * rs) (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) ll lx (ordnode.node (rs + size_1 + 1) lr x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) ll lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) lr) ll) (ordnode.node (ls + rs + 1) (ordnode.node ls ll lx lr) x (ordnode.node rs rl rx rr))).dual = ite (ls > ordnode.delta * rs) (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x lr.dual) lx ll.dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx ll.dual))) lr.dual) ll.dual) (ordnode.node (rs + ls + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node ls lr.dual lx ll.dual))
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	h : ls > ordnode.delta * rs	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) ll lx (ordnode.node (rs + size_1 + 1) lr x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) ll lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) lr) ll) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x lr.dual) lx ll.dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx ll.dual))) lr.dual) ll.dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	h : ls > ordnode.delta * rs	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) ll lx (ordnode.node (rs + size_1 + 1) lr x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) ll lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) lr) ll) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x lr.dual) lx ll.dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx ll.dual))) lr.dual) ll.dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	lr : ordnode α,	h : ls > ordnode.delta * rs	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) ordnode.nil lx (ordnode.node (rs + size_1 + 1) lr x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) ordnode.nil lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) lr) ordnode.nil) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x lr.dual) lx ordnode.nil.dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx ordnode.nil.dual))) lr.dual) ordnode.nil.dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	lr : ordnode α,	h : ls > ordnode.delta * rs,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (rs + size_1 + 1) lr x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) (ordnode.node lls lll llx llr) lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) lr) (ordnode.node lls lll llx llr)) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x lr.dual) lx (ordnode.node lls lll llx llr).dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx (ordnode.node lls lll llx llr).dual))) lr.dual) (ordnode.node lls lll llx llr).dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	ll : ordnode α,	lx : α,	lr : ordnode α,	h : ls > ordnode.delta * rs	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) ll lx (ordnode.node (rs + size_1 + 1) lr x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) ll lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) lr) ll) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x lr.dual) lx ll.dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx ll.dual))) lr.dual) ll.dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	h : ls > ordnode.delta * rs	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) ordnode.nil lx (ordnode.node (rs + size_1 + 1) ordnode.nil x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) ordnode.nil lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) ordnode.nil) ordnode.nil) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x ordnode.nil.dual) lx ordnode.nil.dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx ordnode.nil.dual))) ordnode.nil.dual) ordnode.nil.dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	h : ls > ordnode.delta * rs,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) ordnode.nil lx (ordnode.node (rs + size_1 + 1) (ordnode.node lrs lrl lrx lrr) x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) ordnode.nil lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) (ordnode.node lrs lrl lrx lrr)) ordnode.nil) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node lrs lrl lrx lrr).dual) lx ordnode.nil.dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx ordnode.nil.dual))) (ordnode.node lrs lrl lrx lrr).dual) ordnode.nil.dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	h : ls > ordnode.delta * rs,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (rs + size_1 + 1) ordnode.nil x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) (ordnode.node lls lll llx llr) lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) ordnode.nil) (ordnode.node lls lll llx llr)) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x ordnode.nil.dual) lx (ordnode.node lls lll llx llr).dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx (ordnode.node lls lll llx llr).dual))) ordnode.nil.dual) (ordnode.node lls lll llx llr).dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	h : ls > ordnode.delta * rs,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (rs + size_1 + 1) (ordnode.node lrs lrl lrx lrr) x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) (ordnode.node lls lll llx llr) lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) (ordnode.node lrs lrl lrx lrr)) (ordnode.node lls lll llx llr)) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node lrs lrl lrx lrr).dual) lx (ordnode.node lls lll llx llr).dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx (ordnode.node lls lll llx llr).dual))) (ordnode.node lrs lrl lrx lrr).dual) (ordnode.node lls lll llx llr).dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	h : ls > ordnode.delta * rs,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (rs + size_1 + 1) (ordnode.node lrs lrl lrx lrr) x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) (ordnode.node lls lll llx llr) lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) (ordnode.node lrs lrl lrx lrr)) (ordnode.node lls lll llx llr)) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node lrs lrl lrx lrr).dual) lx (ordnode.node lls lll llx llr).dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx (ordnode.node lls lll llx llr).dual))) (ordnode.node lrs lrl lrx lrr).dual) (ordnode.node lls lll llx llr).dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	h : ls > ordnode.delta * rs,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ ordnode.dual (ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (ls + rs + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (rs + size_1 + 1) (ordnode.node lrs lrl lrx lrr) x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (size + l.size + 1) (ordnode.node lls lll llx llr) lx l) x_1 (ordnode.node (r.size + rs + 1) r x (ordnode.node rs rl rx rr)))) (ordnode.node lrs lrl lrx lrr)) (ordnode.node lls lll llx llr)) = ordnode.rec ordnode.nil (λ (size : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ordnode.rec ordnode.nil (λ (size_1 : ℕ) (l : ordnode α) (x_1 : α) (r ih_l ih_r : ordnode α), ite (size_1 < ordnode.ratio * size) (ordnode.node (rs + ls + 1) (ordnode.node (rs + size_1 + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node lrs lrl lrx lrr).dual) lx (ordnode.node lls lll llx llr).dual) (ordnode.node (rs + ls + 1) (ordnode.node (rs + l.size + 1) (ordnode.node rs rr.dual rx rl.dual) x l) x_1 (ordnode.node (r.size + size + 1) r lx (ordnode.node lls lll llx llr).dual))) (ordnode.node lrs lrl lrx lrr).dual) (ordnode.node lls lll llx llr).dual
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	h : ls > ordnode.delta * rs,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ (ite (lrs < ordnode.ratio * lls) (ordnode.node (ls + rs + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (rs + lrs + 1) (ordnode.node lrs lrl lrx lrr) x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (lls + lrl.size + 1) (ordnode.node lls lll llx llr) lx lrl) lrx (ordnode.node (lrr.size + rs + 1) lrr x (ordnode.node rs rl rx rr)))).dual = ite (lrs < ordnode.ratio * lls) (ordnode.node (rs + ls + 1) (ordnode.node (rs + lrs + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node lrs lrr.dual lrx lrl.dual)) lx (ordnode.node lls llr.dual llx lll.dual)) (ordnode.node (rs + ls + 1) (ordnode.node (rs + lrr.dual.size + 1) (ordnode.node rs rr.dual rx rl.dual) x lrr.dual) lrx (ordnode.node (lrl.dual.size + lls + 1) lrl.dual lx (ordnode.node lls llr.dual llx lll.dual)))
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	h : ls > ordnode.delta * rs,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α,	h_1 : lrs < ordnode.ratio * lls	⊢ (ordnode.node (ls + rs + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (rs + lrs + 1) (ordnode.node lrs lrl lrx lrr) x (ordnode.node rs rl rx rr))).dual = ordnode.node (rs + ls + 1) (ordnode.node (rs + lrs + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node lrs lrr.dual lrx lrl.dual)) lx (ordnode.node lls llr.dual llx lll.dual)
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	h : ls > ordnode.delta * rs,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α,	h_1 : ¬lrs < ordnode.ratio * lls	⊢ (ordnode.node (ls + rs + 1) (ordnode.node (lls + lrl.size + 1) (ordnode.node lls lll llx llr) lx lrl) lrx (ordnode.node (lrr.size + rs + 1) lrr x (ordnode.node rs rl rx rr))).dual = ordnode.node (rs + ls + 1) (ordnode.node (rs + lrr.dual.size + 1) (ordnode.node rs rr.dual rx rl.dual) x lrr.dual) lrx (ordnode.node (lrl.dual.size + lls + 1) lrl.dual lx (ordnode.node lls llr.dual llx lll.dual))
α : Type u_1,	x : α,	rs : ℕ,	rl : ordnode α,	rx : α,	rr : ordnode α,	ls : ℕ,	lx : α,	h : ls > ordnode.delta * rs,	lls : ℕ,	lll : ordnode α,	llx : α,	llr : ordnode α,	lrs : ℕ,	lrl : ordnode α,	lrx : α,	lrr : ordnode α	⊢ (ite (lrs < ordnode.ratio * lls) (ordnode.node (ls + rs + 1) (ordnode.node lls lll llx llr) lx (ordnode.node (rs + lrs + 1) (ordnode.node lrs lrl lrx lrr) x (ordnode.node rs rl rx rr))) (ordnode.node (ls + rs + 1) (ordnode.node (lls + lrl.size + 1) (ordnode.node lls lll llx llr) lx lrl) lrx (ordnode.node (lrr.size + rs + 1) lrr x (ordnode.node rs rl rx rr)))).dual = ite (lrs < ordnode.ratio * lls) (ordnode.node (rs + ls + 1) (ordnode.node (rs + lrs + 1) (ordnode.node rs rr.dual rx rl.dual) x (ordnode.node lrs lrr.dual lrx lrl.dual)) lx (ordnode.node lls llr.dual llx lll.dual)) (ordnode.node (rs + ls + 1) (ordnode.node (rs + lrr.dual.size + 1) (ordnode.node rs rr.dual rx rl.dual) x lrr.dual) lrx (ordnode.node (lrl.dual.size + lls + 1) lrl.dual lx (ordnode.node lls llr.dual llx lll.dual)))
α : Type u_1,	t : ordnode α,	h : t.dual.sized	⊢ t.sized
α : Type u_1,	t : ordnode α,	h : t.dual.sized	⊢ t.sized
α : Type u_1,	t : ordnode α,	h : t.dual.sized	⊢ t.dual.dual.sized
α : Type u_1,	P : α → Prop,	l : ordnode α,	x : α,	r : ordnode α	⊢ ordnode.all P (l.rotate_l x r) ↔ ordnode.all P l ∧ P x ∧ ordnode.all P r
α : Type u_1,	P : α → Prop,	l : ordnode α,	x : α,	r : ordnode α	⊢ ordnode.all P (l.rotate_l x r) ↔ ordnode.all P l ∧ P x ∧ ordnode.all P r
α : Type u_1,	P : α → Prop,	l : ordnode α,	x : α,	r : ordnode α	⊢ ordnode.all P (l.rotate_l x r) ↔ ordnode.all P l ∧ P x ∧ ordnode.all P r
α : Type u_1,	P : α → Prop,	l : ordnode α,	x : α	⊢ ordnode.all P (l.rotate_l x ordnode.nil) ↔ ordnode.all P l ∧ P x ∧ ordnode.all P ordnode.nil
α : Type u_1,	P : α → Prop,	l : ordnode α,	x : α,	r_size : ℕ,	r_l : ordnode α,	r_x : α,	r_r : ordnode α	⊢ ordnode.all P (l.rotate_l x (ordnode.node r_size r_l r_x r_r)) ↔ ordnode.all P l ∧ P x ∧ ordnode.all P (ordnode.node r_size r_l r_x r_r)
α : Type u_1,	P : α → Prop,	l : ordnode α,	x : α,	r : ordnode α	⊢ ordnode.all P (l.rotate_l x r) ↔ ordnode.all P l ∧ P x ∧ ordnode.all P r
α : Type u_1,	P : α → Prop,	l : ordnode α,	x : α,	r_size : ℕ,	r_l : ordnode α,	r_x : α,	r_r : ordnode α,	h : r_l.size < ordnode.ratio * r_r.size	⊢ ordnode.all P (l.node3_l x r_l r_x r_r) ↔ ordnode.all P l ∧ P x ∧ ordnode.all P (ordnode.node r_size r_l r_x r_r)
α : Type u_1,	P : α → Prop,	l : ordnode α,	x : α,	r_size : ℕ,	r_l : ordnode α,	r_x : α,	r_r : ordnode α,	h : ¬r_l.size < ordnode.ratio * r_r.size	⊢ ordnode.all P (l.node4_l x r_l r_x r_r) ↔ ordnode.all P l ∧ P x ∧ ordnode.all P (ordnode.node r_size r_l r_x r_r)
α : Type u_1,	P : α → Prop,	l : ordnode α,	x : α,	r_size : ℕ,	r_l : ordnode α,	r_x : α,	r_r : ordnode α	⊢ ordnode.all P (ite (r_l.size < ordnode.ratio * r_r.size) (l.node3_l x r_l r_x r_r) (l.node4_l x r_l r_x r_r)) ↔ ordnode.all P l ∧ P x ∧ ordnode.all P (ordnode.node r_size r_l r_x r_r)
α : Type u_1,	l : ordnode α,	x : α,	r : ordnode α,	hl : l.balanced,	hr : r.balanced,	sl : l.sized,	sr : r.sized,	H : (∃ (l' : ℕ), ordnode.raised l' l.size ∧ ordnode.balanced_sz l' r.size) ∨ ∃ (r' : ℕ), ordnode.raised r.size r' ∧ ordnode.balanced_sz l.size r'	⊢ (l.balance_l x r).size = l.size + r.size + 1
α : Type u_1,	o : option α,	h₁ : (part.of_option o).dom,	h₂ : {dom := ↥(o.is_some), get := option.get o}.dom	⊢ (part.of_option o).get h₁ = {dom := ↥(o.is_some), get := option.get o}.get h₂
α : Type u_1,	o : option α,	h₁ : (part.of_option o).dom,	h₂ : {dom := ↥(o.is_some), get := option.get o}.dom	⊢ (part.of_option o).get h₁ = {dom := ↥(o.is_some), get := option.get o}.get h₂
α : Type u_1,	h₁ : (part.of_option option.none).dom,	h₂ : {dom := ↥(option.none.is_some), get := option.get option.none}.dom	⊢ (part.of_option option.none).get h₁ = {dom := ↥(option.none.is_some), get := option.get option.none}.get h₂
α : Type u_1,	o : α,	h₁ : (part.of_option (option.some o)).dom,	h₂ : {dom := ↥((option.some o).is_some), get := option.get (option.some o)}.dom	⊢ (part.of_option (option.some o)).get h₁ = {dom := ↥((option.some o).is_some), get := option.get (option.some o)}.get h₂
α : Type u_1,	β : Type u_2,	f : α → β,	s : set α,	t : set β,	x : α	⊢ x ∈ (pfun.res f s).core t ↔ x ∈ sᶜ ∪ f ⁻¹' t
α : Type u_1,	β : Type u_2,	f : α → β,	s : set α,	t : set β,	x : α	⊢ x ∈ s → f x ∈ t ↔ x ∈ sᶜ ∪ f ⁻¹' t
α : Type u_1,	β : Type u_2,	f : α → β,	s : set α,	t : set β,	x : α	⊢ x ∈ s → f x ∈ t ↔ x ∈ sᶜ ∪ f ⁻¹' t
α : Type u_1,	β : Type u_2,	f : α → β,	s : set α,	t : set β,	x : α,	h : x ∈ s	⊢ x ∈ s → f x ∈ t ↔ x ∈ sᶜ ∪ f ⁻¹' t
α : Type u_1,	β : Type u_2,	f : α → β,	s : set α,	t : set β,	x : α,	h : x ∉ s	⊢ x ∈ s → f x ∈ t ↔ x ∈ sᶜ ∪ f ⁻¹' t
α : Type u_1,	β : Type u_2,	f : α → β,	s : set α,	t : set β	⊢ (pfun.res f s).core t = sᶜ ∪ f ⁻¹' t
u v : prime_multiset	⊢ (u + v).prod = u.prod * v.prod
u v : prime_multiset	⊢ (⇑prime_multiset.coe_pnat_monoid_hom (u + v)).prod = u.prod * v.prod
u v : prime_multiset	⊢ (⇑prime_multiset.coe_pnat_monoid_hom u + ⇑prime_multiset.coe_pnat_monoid_hom v).prod = u.prod * v.prod
n m : ℕ+	⊢ (n * m).factor_multiset = n.factor_multiset + m.factor_multiset
n m : ℕ+,	u : prime_multiset := n.factor_multiset	⊢ (n * m).factor_multiset = n.factor_multiset + m.factor_multiset
n m : ℕ+,	u : prime_multiset := n.factor_multiset,	v : prime_multiset := m.factor_multiset	⊢ (n * m).factor_multiset = n.factor_multiset + m.factor_multiset
n m : ℕ+,	u : prime_multiset := n.factor_multiset,	v : prime_multiset := m.factor_multiset,	this : n = u.prod	⊢ (n * m).factor_multiset = n.factor_multiset + m.factor_multiset
n m : ℕ+,	u : prime_multiset := n.factor_multiset,	v : prime_multiset := m.factor_multiset,	this : n = u.prod	⊢ (u.prod * m).factor_multiset = u.prod.factor_multiset + m.factor_multiset
n m : ℕ+,	u : prime_multiset := n.factor_multiset,	v : prime_multiset := m.factor_multiset,	this : n = u.prod,	this : m = v.prod	⊢ (u.prod * m).factor_multiset = u.prod.factor_multiset + m.factor_multiset
n m : ℕ+,	u : prime_multiset := n.factor_multiset,	v : prime_multiset := m.factor_multiset,	this : n = u.prod,	this : m = v.prod	⊢ (u.prod * v.prod).factor_multiset = u.prod.factor_multiset + v.prod.factor_multiset
n m : ℕ+,	u : prime_multiset := n.factor_multiset,	v : prime_multiset := m.factor_multiset,	this : n = u.prod,	this : m = v.prod	⊢ (u + v).prod.factor_multiset = u.prod.factor_multiset + v.prod.factor_multiset
n m : ℕ+,	u : prime_multiset := n.factor_multiset,	v : prime_multiset := m.factor_multiset,	this : n = u.prod,	this : m = v.prod	⊢ u + v = u.prod.factor_multiset + v.prod.factor_multiset
n m : ℕ+,	u : prime_multiset := n.factor_multiset,	v : prime_multiset := m.factor_multiset,	this : n = u.prod,	this : m = v.prod	⊢ u + v = u + v.prod.factor_multiset
n m : ℕ+,	u : prime_multiset := n.factor_multiset,	v : prime_multiset := m.factor_multiset,	this : n = u.prod,	this : m = v.prod	⊢ (u + v).prod.factor_multiset = u.prod.factor_multiset + v.prod.factor_multiset
p : nat.primes	⊢ ↑p.factor_multiset = prime_multiset.of_prime p
p : nat.primes	⊢ ⇑(pnat.factor_multiset_equiv.symm) ↑p.factor_multiset = ⇑(pnat.factor_multiset_equiv.symm) (prime_multiset.of_prime p)
p : nat.primes	⊢ ↑p.factor_multiset.prod = (prime_multiset.of_prime p).prod
⊢ has_sub (multiset nat.primes)
⊢ has_sub prime_multiset
k m n : ℕ+	⊢ k.coprime m → k.coprime n → k.coprime (m * n)
k m n : ℕ+	⊢ ↑k.coprime ↑m → k.coprime n → k.coprime (m * n)
k m n : ℕ+	⊢ ↑k.coprime ↑m → ↑k.coprime ↑n → k.coprime (m * n)
k m n : ℕ+	⊢ ↑k.coprime ↑m → ↑k.coprime ↑n → ↑k.coprime ↑(m * n)
k m n : ℕ+	⊢ ↑k.coprime ↑m → ↑k.coprime ↑n → ↑k.coprime ↑(m * n)
k m n : ℕ+	⊢ ↑k.coprime ↑m → ↑k.coprime ↑n → ↑k.coprime (↑m * ↑n)
k m n : ℕ+	⊢ k.coprime m → k.coprime n → k.coprime (m * n)
R : Type u,	S : Type v,	_inst_3 : comm_semiring R,	p : polynomial R,	_inst_8 : comm_semiring S,	f : R →+* S,	hf : function.injective ⇑f,	r : R	⊢ polynomial.eval₂ f (⇑f r) p = 0 → p.is_root r
R : Type u,	S : Type v,	_inst_3 : comm_semiring R,	p : polynomial R,	_inst_8 : comm_semiring S,	f : R →+* S,	hf : function.injective ⇑f,	r : R,	h : polynomial.eval₂ f (⇑f r) p = 0	⊢ p.is_root r
R : Type u,	S : Type v,	_inst_3 : comm_semiring R,	p : polynomial R,	_inst_8 : comm_semiring S,	f : R →+* S,	hf : function.injective ⇑f,	r : R,	h : polynomial.eval₂ f (⇑f r) p = 0	⊢ ⇑f (polynomial.eval r p) = ⇑f 0
R : Type u,	M : Type u_1,	_inst_3 : comm_ring R,	_inst_4 : add_comm_group M,	_inst_5 : module R M,	f : M →ₗ[R] M,	v : M,	p : polynomial R	⊢ ⇑(⇑(polynomial.aeval f) p) v = p.sum (λ (n : ℕ) (b : R), b • ⇑(f ^ n) v)
R : Type u,	M : Type u_1,	_inst_3 : comm_ring R,	_inst_4 : add_comm_group M,	_inst_5 : module R M,	f : M →ₗ[R] M,	v : M,	p : polynomial R	⊢ ⇑(p.sum (λ (e : ℕ) (a : R), ⇑(algebra_map R (M →ₗ[R] M)) a * f ^ e)) v = p.sum (λ (n : ℕ) (b : R), b • ⇑(f ^ n) v)
R : Type u,	A : Type z,	_inst_3 : comm_semiring R,	_inst_4 : semiring A,	_inst_5 : algebra R A,	_inst_6 : nontrivial A	⊢ ⊥ ≠ ⊤
R : Type u,	A : Type z,	_inst_3 : comm_semiring R,	_inst_4 : semiring A,	_inst_5 : algebra R A,	_inst_6 : nontrivial A	⊢ ∃ (x : polynomial A), ¬(x ∈ ⊥ ↔ x ∈ ⊤)
R : Type u,	A : Type z,	_inst_3 : comm_semiring R,	_inst_4 : semiring A,	_inst_5 : algebra R A,	_inst_6 : nontrivial A	⊢ ¬(polynomial.X ∈ ⊥ ↔ polynomial.X ∈ ⊤)
R : Type u,	A : Type z,	_inst_3 : comm_semiring R,	_inst_4 : semiring A,	_inst_5 : algebra R A,	_inst_6 : nontrivial A	⊢ ∀ (x : R), ¬⇑polynomial.C (⇑(algebra_map R A) x) = polynomial.X
R : Type u,	A : Type z,	_inst_3 : comm_semiring R,	_inst_4 : semiring A,	_inst_5 : algebra R A,	_inst_6 : nontrivial A,	x : R	⊢ ¬⇑polynomial.C (⇑(algebra_map R A) x) = polynomial.X
R : Type u,	A : Type z,	_inst_3 : comm_semiring R,	_inst_4 : semiring A,	_inst_5 : algebra R A,	_inst_6 : nontrivial A,	x : R	⊢ ∃ (x_1 : ℕ), ¬(⇑polynomial.C (⇑(algebra_map R A) x)).coeff x_1 = polynomial.X.coeff x_1
R : Type u,	A : Type z,	_inst_3 : comm_semiring R,	_inst_4 : semiring A,	_inst_5 : algebra R A,	_inst_6 : nontrivial A,	x : R	⊢ ¬(⇑polynomial.C (⇑(algebra_map R A) x)).coeff 1 = polynomial.X.coeff 1
R : Type u,	_inst_1 : ring R	⊢ ∀ (a : polynomial R), -a + a = 0
R : Type u,	_inst_1 : ring R,	a : add_monoid_algebra R ℕ	⊢ -{to_finsupp := a} + {to_finsupp := a} = 0
R : Type u,	_inst_1 : ring R	⊢ ∀ (a : polynomial R), 0 • a = 0
R : Type u,	_inst_1 : ring R,	a : add_monoid_algebra R ℕ	⊢ 0 • {to_finsupp := a} = 0
R : Type u,	_inst_1 : ring R	⊢ ∀ (n : ℕ) (a : polynomial R), int.of_nat n.succ • a = a + int.of_nat n • a
R : Type u,	_inst_1 : ring R,	n : ℕ,	a : add_monoid_algebra R ℕ	⊢ int.of_nat n.succ • {to_finsupp := a} = {to_finsupp := a} + int.of_nat n • {to_finsupp := a}
R : Type u,	_inst_1 : ring R	⊢ ∀ (n : ℕ) (a : polynomial R), -[1+ n] • a = -(↑(n.succ) • a)
R : Type u,	_inst_1 : ring R,	n : ℕ,	a : add_monoid_algebra R ℕ	⊢ -[1+ n] • a = -(↑(n.succ) • a)
R : Type u,	_inst_1 : ring R,	n : ℕ,	a : add_monoid_algebra R ℕ	⊢ -[1+ n] • {to_finsupp := a} = -(↑(n.succ) • {to_finsupp := a})
R : Type u,	_inst_1 : semiring R,	a : R,	f : polynomial R,	n : ℕ	⊢ (⇑polynomial.C a * f).coeff n = (a • f).coeff n
R : Type u,	_inst_1 : semiring R,	a : R,	f : polynomial R	⊢ ⇑polynomial.C a * f = a • f
R : Type u,	_inst_1 : semiring R,	n : ℕ	⊢ (polynomial.X ^ n).coeff n = 1
R : Type u_1,	_inst_2 : semiring R,	n k : ℕ	⊢ ((1 + polynomial.X) ^ n).coeff k = ↑(n.choose k)
R : Type u,	_inst_1 : semiring R,	P Q : polynomial R,	n : ℕ	⊢ (bit1 P * Q).coeff n = 2 * (P * Q).coeff n + Q.coeff n
R : Type u,	_inst_1 : semiring R,	p : polynomial R	⊢ (p * polynomial.X).coeff 0 = 0
R : Type u,	_inst_1 : semiring R,	c : R,	n : ℕ,	h : c ≠ 0	⊢ (⇑polynomial.C c * polynomial.X ^ n).support = {n}
R : Type u,	_inst_1 : semiring R,	c : R,	n : ℕ,	h : c ≠ 0	⊢ (⇑(polynomial.monomial n) c).support = {n}
R : Type u,	_inst_1 : semiring R,	p q : polynomial R	⊢ (p + q).nat_degree ≤ linear_order.max p.nat_degree q.nat_degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R	⊢ (p + q).nat_degree ≤ linear_order.max p.nat_degree q.nat_degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h : (p + q).degree ≤ p.degree	⊢ (p + q).nat_degree ≤ linear_order.max p.nat_degree q.nat_degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h : (p + q).degree ≤ q.degree	⊢ (p + q).nat_degree ≤ linear_order.max p.nat_degree q.nat_degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R	⊢ (p * q).degree ≤ p.support.sup (λ (i : ℕ), (q.sum (λ (j : ℕ) (a : R), ⇑polynomial.C (p.coeff i * a) * polynomial.X ^ (i + j))).degree)
R : Type u,	_inst_1 : semiring R,	p q : polynomial R	⊢ (p * q).degree ≤ p.support.sup (λ (i : ℕ), (q.sum (λ (j : ℕ) (a : R), ⇑(polynomial.monomial (i + j)) (p.coeff i * a))).degree)
R : Type u,	_inst_1 : semiring R,	p q : polynomial R	⊢ p * q = ∑ (i : ℕ) in p.support, q.sum (λ (j : ℕ) (a : R), ⇑(polynomial.monomial (i + j)) (p.coeff i * a))
R : Type u,	_inst_1 : semiring R,	p q : polynomial R	⊢ p.support.sup (λ (i : ℕ), q.support.sup (λ (j : ℕ), (⇑polynomial.C (p.coeff i * q.coeff j) * polynomial.X ^ (i + j)).degree)) ≤ p.degree + q.degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	a : ℕ,	ha : a ∈ p.support,	b : ℕ,	hb : b ∈ q.support	⊢ ↑(a + b) ≤ p.degree + q.degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	a : ℕ,	ha : a ∈ p.support,	b : ℕ,	hb : b ∈ q.support	⊢ ↑a + ↑b ≤ p.degree + q.degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	a b : ℕ,	hb : q.coeff b ≠ 0,	ha : p.coeff a ≠ 0	⊢ ↑a + ↑b ≤ p.degree + q.degree
R : Type u,	_inst_1 : semiring R,	h : 0 ≠ 1,	p : polynomial R,	hp : p.monic,	_inst : nontrivial R	⊢ p ≠ 0
R : Type u,	_inst_1 : semiring R,	h : 0 ≠ 1,	p : polynomial R,	hp : p.monic	⊢ p ≠ 0
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h : p.degree = q.degree,	hlc : p.leading_coeff + q.leading_coeff ≠ 0	⊢ (p + q).nat_degree = p.nat_degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h : p.degree = q.degree,	hlc : p.leading_coeff + q.leading_coeff ≠ 0	⊢ (p + q).nat_degree = p.nat_degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h : p.degree = q.degree,	hlc : p.leading_coeff + q.leading_coeff ≠ 0	⊢ (p + q).degree = p.degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h : p.degree = q.degree,	hlc : p.leading_coeff + q.leading_coeff ≠ 0,	this : (p + q).nat_degree = p.nat_degree	⊢ (p + q).leading_coeff = p.leading_coeff + q.leading_coeff
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	hq : q.monic,	H : p.leading_coeff = 0	⊢ (p * q).leading_coeff = p.leading_coeff
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	hq : q.monic,	H : p.leading_coeff ≠ 0	⊢ (p * q).leading_coeff = p.leading_coeff
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	hq : q.monic,	H : p.leading_coeff ≠ 0	⊢ (p * q).leading_coeff = p.leading_coeff
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	hq : q.monic,	H : p.leading_coeff ≠ 0	⊢ p.leading_coeff * q.leading_coeff ≠ 0
R : Type u,	_inst_1 : ring R,	n : ℕ,	f : fin n → R	⊢ (∑ (i : fin n), ⇑polynomial.C (f i) * polynomial.X ^ ↑i).degree < ↑n
R : Type u,	_inst_1 : ring R,	n : ℕ,	f : fin n → R,	_inst : is_commutative (with_bot ℕ) linear_order.max	⊢ (∑ (i : fin n), ⇑polynomial.C (f i) * polynomial.X ^ ↑i).degree < ↑n
R : Type u,	_inst_1 : ring R,	n : ℕ,	f : fin n → R,	_inst : is_commutative (with_bot ℕ) linear_order.max,	_inst_2 : is_associative (with_bot ℕ) linear_order.max	⊢ (∑ (i : fin n), ⇑polynomial.C (f i) * polynomial.X ^ ↑i).degree < ↑n
R : Type u,	_inst_1 : ring R,	n : ℕ,	f : fin n → R,	_inst : is_commutative (with_bot ℕ) linear_order.max,	_inst_2 : is_associative (with_bot ℕ) linear_order.max	⊢ ∀ (x : fin n), x ∈ finset.univ → (⇑polynomial.C (f x) * polynomial.X ^ ↑x).degree < ↑n
R : Type u,	_inst_1 : ring R,	n : ℕ,	f : fin n → R,	_inst : is_commutative (with_bot ℕ) linear_order.max,	_inst_2 : is_associative (with_bot ℕ) linear_order.max,	i : ℕ,	hi : i < n	⊢ (⇑polynomial.C (f ⟨i, hi⟩) * polynomial.X ^ ↑⟨i, hi⟩).degree < ↑n
R : Type u,	_inst_1 : nontrivial R,	_inst_2 : ring R,	a : R,	this : (⇑polynomial.C a).degree < polynomial.X.degree	⊢ (polynomial.X + ⇑polynomial.C a).degree = 1
R : Type u,	a : R,	_inst_1 : semiring R,	p : polynomial R,	h : a * p.leading_coeff ≠ 0	⊢ (⇑polynomial.C a * p).nat_degree = p.nat_degree
R : Type u,	a : R,	_inst_1 : semiring R,	p : polynomial R,	h : a * p.leading_coeff ≠ 0	⊢ p.nat_degree ∈ (⇑polynomial.C a * p).support
R : Type u,	a : R,	_inst_1 : semiring R,	p : polynomial R,	h : a * p.leading_coeff ≠ 0	⊢ (⇑polynomial.C a * p).coeff p.nat_degree ≠ 0
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h0 : p.comp q = 0	⊢ (p.comp q).nat_degree ≤ p.nat_degree * q.nat_degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h0 : p.comp q = 0	⊢ (p.comp q).nat_degree ≤ p.nat_degree * q.nat_degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h0 : p.comp q = 0	⊢ 0 ≤ p.nat_degree * q.nat_degree
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h0 : ¬p.comp q = 0,	n : ℕ,	hn : n ∈ p.support	⊢ ↑((⇑polynomial.C (p.coeff n)).nat_degree) + n • ↑(q.nat_degree) = ↑(n * q.nat_degree)
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h0 : ¬p.comp q = 0,	n : ℕ,	hn : n ∈ p.support	⊢ ↑((⇑polynomial.C (p.coeff n)).nat_degree) + n • ↑(q.nat_degree) = ↑(n * q.nat_degree)
R : Type u,	_inst_1 : semiring R,	p q : polynomial R,	h0 : ¬p.comp q = 0,	n : ℕ,	hn : n ∈ p.support	⊢ ↑(↑n * q.nat_degree) = ↑(n * q.nat_degree)
R : Type u,	a : R,	_inst_1 : semiring R,	n : ℕ,	ha : a ≠ 0	⊢ (⇑polynomial.C a * polynomial.X ^ n).trailing_degree = ↑n
R : Type u,	_inst_1 : semiring R,	p : polynomial R,	hp : 0 < p.nat_trailing_degree	⊢ ¬p.nat_trailing_degree = 0
R : Type u,	_inst_1 : semiring R,	p : polynomial R,	hp : p.nat_trailing_degree = 0	⊢ p.nat_trailing_degree ≤ 0
R : Type u,	_inst_1 : semiring R,	p : polynomial R,	hp : 0 < p.nat_trailing_degree	⊢ p.next_coeff_up = p.coeff (p.nat_trailing_degree + 1)
R : Type u,	_inst_1 : comm_semiring R,	p q : polynomial R,	r : R	⊢ ⇑polynomial.derivative (polynomial.eval₂ polynomial.C q (⇑polynomial.C r)) = polynomial.eval₂ polynomial.C q (⇑polynomial.derivative (⇑polynomial.C r)) * ⇑polynomial.derivative q
R : Type u,	_inst_1 : comm_semiring R,	p q p₁ p₂ : polynomial R,	ih₁ : ⇑polynomial.derivative (polynomial.eval₂ polynomial.C q p₁) = polynomial.eval₂ polynomial.C q (⇑polynomial.derivative p₁) * ⇑polynomial.derivative q,	ih₂ : ⇑polynomial.derivative (polynomial.eval₂ polynomial.C q p₂) = polynomial.eval₂ polynomial.C q (⇑polynomial.derivative p₂) * ⇑polynomial.derivative q	⊢ ⇑polynomial.derivative (polynomial.eval₂ polynomial.C q (p₁ + p₂)) = polynomial.eval₂ polynomial.C q (⇑polynomial.derivative (p₁ + p₂)) * ⇑polynomial.derivative q
R : Type u,	_inst_1 : comm_semiring R,	p q : polynomial R,	n : ℕ,	r : R,	ih : ⇑polynomial.derivative (polynomial.eval₂ polynomial.C q (⇑polynomial.C r * polynomial.X ^ n)) = polynomial.eval₂ polynomial.C q (⇑polynomial.derivative (⇑polynomial.C r * polynomial.X ^ n)) * ⇑polynomial.derivative q	⊢ ⇑polynomial.derivative (polynomial.eval₂ polynomial.C q (⇑polynomial.C r * polynomial.X ^ (n + 1))) = polynomial.eval₂ polynomial.C q (⇑polynomial.derivative (⇑polynomial.C r * polynomial.X ^ (n + 1))) * ⇑polynomial.derivative q
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hq : q.monic,	h : q.degree ≤ p.degree,	hq0 : q = 0,	this : ∀ (p : polynomial R), p = 0	⊢ q.degree + (p /ₘ q).degree = p.degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hq : q.monic,	h : q.degree ≤ p.degree,	hq0 : q = 0,	this : ∀ (p : polynomial R), p = 0	⊢ 0.degree + 0.degree = 0.degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hq : q.monic,	h : q.degree ≤ p.degree,	hq0 : q = 0,	this : ∀ (p : polynomial R), p = 0	⊢ q.degree + (p /ₘ q).degree = p.degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hq : q.monic,	h : q.degree ≤ p.degree,	hq0 : ¬q = 0	⊢ p /ₘ q ≠ 0
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hq : q.monic,	h : q.degree ≤ p.degree,	hq0 : ¬q = 0,	hdiv0 : p /ₘ q ≠ 0	⊢ q.leading_coeff * (p /ₘ q).leading_coeff ≠ 0
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hq : q.monic,	h : q.degree ≤ p.degree,	hq0 : ¬q = 0,	hdiv0 : p /ₘ q ≠ 0,	hlc : q.leading_coeff * (p /ₘ q).leading_coeff ≠ 0	⊢ q.degree ≤ (q * (p /ₘ q)).degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hq : q.monic,	h : q.degree ≤ p.degree,	hq0 : ¬q = 0,	hdiv0 : p /ₘ q ≠ 0,	hlc : q.leading_coeff * (p /ₘ q).leading_coeff ≠ 0	⊢ q.degree ≤ (q * (p /ₘ q)).degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hq : q.monic,	h : q.degree ≤ p.degree,	hq0 : ¬q = 0,	hdiv0 : p /ₘ q ≠ 0,	hlc : q.leading_coeff * (p /ₘ q).leading_coeff ≠ 0	⊢ q.nat_degree ≤ q.nat_degree + (p /ₘ q).nat_degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hp0 : p = 0	⊢ (p /ₘ q).degree ≤ p.degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hp0 : ¬p = 0,	hq : q.monic,	hq0 : q ≠ 0,	h : q.degree ≤ p.degree	⊢ (p /ₘ q).degree ≤ p.degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hp0 : ¬p = 0,	hq : q.monic,	hq0 : q ≠ 0,	h : q.degree ≤ p.degree	⊢ (p /ₘ q).degree ≤ p.degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hp0 : ¬p = 0,	hq : q.monic,	hq0 : q ≠ 0,	h : q.degree ≤ p.degree	⊢ ↑((p /ₘ q).nat_degree) ≤ ↑(q.nat_degree) + ↑((p /ₘ q).nat_degree)
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hp0 : ¬p = 0,	hq : q.monic,	hq0 : q ≠ 0,	h : ¬q.degree ≤ p.degree	⊢ (p /ₘ q).degree ≤ p.degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hp0 : ¬p = 0,	hq : q.monic,	hq0 : q ≠ 0,	h : ¬q.degree ≤ p.degree	⊢ (p /ₘ q).degree ≤ p.degree
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hp0 : ¬p = 0,	hq : q.monic,	hq0 : q ≠ 0,	h : ¬q.degree ≤ p.degree	⊢ (dite q.monic (λ (hq : q.monic), (ite (q.degree ≤ p.degree ∧ p ≠ 0) (let z : polynomial R := ⇑polynomial.C p.leading_coeff * polynomial.X ^ (p.nat_degree - q.nat_degree) in let dm : polynomial R × polynomial R := (p - z * q).div_mod_by_monic_aux hq in (z + dm.fst, dm.snd)) (0, p)).fst) (λ (hq : ¬q.monic), 0)).degree ≤ p.degree
R : Type u,	_inst_1 : comm_ring R,	a : R,	p : polynomial R,	h0 : ¬p = 0,	I : decidable_pred (λ (n : ℕ), ¬(polynomial.X - ⇑polynomial.C a) ^ (n + 1) ∣ p) := λ (n : ℕ), not.decidable	⊢ ℕ
R : Type u,	_inst_1 : semiring R,	p : polynomial R	⊢ p.comp 0 = ⇑polynomial.C (polynomial.eval 0 p)
R : Type u,	_inst_1 : semiring R,	p : polynomial R	⊢ p.comp 1 = ⇑polynomial.C (polynomial.eval 1 p)
R : Type u,	a : R,	_inst_1 : comm_semiring R,	p q : polynomial R,	H : p.is_root a	⊢ (p * q).is_root a
R : Type u,	_inst_1 : semiring R,	p : polynomial R	⊢ p.sum (λ (n : ℕ) (a : R), ⇑polynomial.C a * polynomial.X ^ n) = p
R : Type u,	_inst_1 : semiring R,	p : polynomial R,	n : ℕ	⊢ (p.sum (λ (n : ℕ) (a : R), ⇑polynomial.C a * polynomial.X ^ n)).coeff n = p.coeff n
R : Type u,	_inst_1 : semiring R,	p : polynomial R,	n : ℕ	⊢ p.coeff n = 0 → 0 = p.coeff n
R : Type u,	_inst_1 : semiring R,	n : ℕ,	h : 1 < n	⊢ polynomial.X.iterated_deriv n = 0
R : Type u,	_inst_1 : semiring R,	h : 1 < 0	⊢ false
R : Type u,	_inst_1 : semiring R,	h : 1 < 0	⊢ polynomial.X.iterated_deriv 0 = 0		case nat.succ	R : Type u,	_inst_1 : semiring R,	n : ℕ,	ih : 1 < n → polynomial.X.iterated_deriv n = 0,	h : 1 < n.succ	⊢ polynomial.X.iterated_deriv n.succ = 0
R : Type u,	_inst_1 : semiring R,	h : 1 < 0	⊢ polynomial.X.iterated_deriv 0 = 0
R : Type u,	_inst_1 : semiring R,	n : ℕ,	ih : 1 < n → polynomial.X.iterated_deriv n = 0,	h : 1 < n.succ	⊢ polynomial.X.iterated_deriv n.succ = 0
R : Type u,	_inst_1 : semiring R,	n : ℕ,	ih : 1 < n → polynomial.X.iterated_deriv n = 0,	h : 1 < n.succ	⊢ ⇑polynomial.derivative (polynomial.X.iterated_deriv n) = 0
R : Type u,	_inst_1 : semiring R,	n : ℕ,	ih : 1 < n → polynomial.X.iterated_deriv n = 0,	h : 1 < n.succ,	H : n = 1	⊢ ⇑polynomial.derivative (polynomial.X.iterated_deriv 1) = 0
R : Type u,	_inst_1 : semiring R,	n : ℕ,	ih : 1 < n → polynomial.X.iterated_deriv n = 0,	h : 1 < n.succ,	H : n = 1	⊢ ⇑polynomial.derivative (polynomial.X.iterated_deriv n) = 0		R : Type u,	_inst_1 : semiring R,	n : ℕ,	ih : 1 < n → polynomial.X.iterated_deriv n = 0,	h : 1 < n.succ,	H : ¬n = 1	⊢ ⇑polynomial.derivative (polynomial.X.iterated_deriv n) = 0
R : Type u,	_inst_1 : semiring R,	n : ℕ,	ih : 1 < n → polynomial.X.iterated_deriv n = 0,	h : 1 < n.succ,	H : n = 1	⊢ ⇑polynomial.derivative (polynomial.X.iterated_deriv n) = 0
R : Type u,	_inst_1 : semiring R,	n : ℕ,	ih : 1 < n → polynomial.X.iterated_deriv n = 0,	h : 1 < n.succ,	H : ¬n = 1	⊢ ⇑polynomial.derivative (polynomial.X.iterated_deriv n) = 0
R : Type u,	_inst_1 : semiring R,	n : ℕ,	ih : 1 < n → polynomial.X.iterated_deriv n = 0,	H : ¬n = 1,	h : 1 < n	⊢ ⇑polynomial.derivative 0 = 0
R : Type u,	_inst_1 : semiring R,	n : ℕ,	ih : 1 < n → polynomial.X.iterated_deriv n = 0,	H : ¬n = 1,	h : 1 < n	⊢ ⇑polynomial.derivative (polynomial.X.iterated_deriv n) = 0
R : Type u,	_inst_1 : semiring R,	p : polynomial R,	h : p.monic,	q : polynomial R	⊢ q * p = 0 ↔ q = 0
R : Type u,	_inst_1 : semiring R,	p : polynomial R,	h : p.monic,	q : polynomial R	⊢ q * p = 0 ↔ q = 0
R : Type u,	_inst_1 : semiring R,	p : polynomial R,	h : p.monic,	q : polynomial R,	hq : q = 0	⊢ q * p = 0 ↔ q = 0
R : Type u,	_inst_1 : semiring R,	p : polynomial R,	h : p.monic,	q : polynomial R,	hq : ¬q = 0	⊢ q * p = 0 ↔ q = 0
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k	⊢ (k • p).degree = p.degree
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k	⊢ (k • p).degree ≤ p.degree
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k	⊢ ∀ (m : ℕ), p.degree < ↑m → (k • p).coeff m = 0
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k,	m : ℕ,	hm : p.degree < ↑m	⊢ (k • p).coeff m = 0
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k	⊢ (k • p).degree ≤ p.degree		R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k	⊢ p.degree ≤ (k • p).degree
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k,	m : ℕ,	hm : ∀ (m_1 : ℕ), m ≤ m_1 → p.coeff m_1 = 0	⊢ (k • p).coeff m = 0
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k	⊢ p.degree ≤ (k • p).degree
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k	⊢ ∀ (m : ℕ), (k • p).degree < ↑m → p.coeff m = 0
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k,	m : ℕ,	hm : (k • p).degree < ↑m	⊢ p.coeff m = 0
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k,	m : ℕ,	hm : ∀ (m_1 : ℕ), m ≤ m_1 → (k • p).coeff m_1 = 0	⊢ p.coeff m = 0
R : Type u,	_inst_1 : semiring R,	S : Type u_1,	_inst_2 : monoid S,	_inst_3 : distrib_mul_action S R,	k : S,	p : polynomial R,	h : is_smul_regular R k,	m : ℕ,	hm : ∀ (m_1 : ℕ), m ≤ m_1 → (k • p).coeff m_1 = 0	⊢ k • p.coeff m = k • 0
R : Type u,	_inst_1 : integral_domain R,	p : polynomial R,	hi : irreducible p,	x : R,	hx : p.is_root x,	_let_match : polynomial.X - ⇑polynomial.C x ∣ p → p.degree = 1,	g : polynomial R,	hg : p = (polynomial.X - ⇑polynomial.C x) * g,	this : is_unit (polynomial.X - ⇑polynomial.C x) ∨ is_unit g,	h : is_unit (polynomial.X - ⇑polynomial.C x),	h₁ : (polynomial.X - ⇑polynomial.C x).degree = 1,	h₂ : (polynomial.X - ⇑polynomial.C x).degree = 0	⊢ p.degree = 1
R : Type u,	_inst_1 : integral_domain R,	p : polynomial R,	hi : irreducible p,	x : R,	hx : p.is_root x,	_let_match : polynomial.X - ⇑polynomial.C x ∣ p → p.degree = 1,	g : polynomial R,	hg : p = (polynomial.X - ⇑polynomial.C x) * g,	this : is_unit (polynomial.X - ⇑polynomial.C x) ∨ is_unit g,	h : is_unit (polynomial.X - ⇑polynomial.C x),	h₁ : (polynomial.X - ⇑polynomial.C x).degree = 1,	h₂ : 1 = 0	⊢ p.degree = 1
R : Type u,	_inst_1 : integral_domain R,	p : polynomial R,	hi : irreducible p,	x : R,	hx : p.is_root x,	_let_match : polynomial.X - ⇑polynomial.C x ∣ p → p.degree = 1,	g : polynomial R,	hg : p = (polynomial.X - ⇑polynomial.C x) * g,	this : is_unit (polynomial.X - ⇑polynomial.C x) ∨ is_unit g,	h : is_unit (polynomial.X - ⇑polynomial.C x),	h₁ : (polynomial.X - ⇑polynomial.C x).degree = 1,	h₂ : (polynomial.X - ⇑polynomial.C x).degree = 0	⊢ p.degree = 1
R : Type u,	_inst_1 : integral_domain R,	p : polynomial R,	hi : irreducible p,	x : R,	hx : p.is_root x,	_let_match : polynomial.X - ⇑polynomial.C x ∣ p → p.degree = 1,	g : polynomial R,	hg : p = (polynomial.X - ⇑polynomial.C x) * g,	this : is_unit (polynomial.X - ⇑polynomial.C x) ∨ is_unit g,	hgu : is_unit g	⊢ p.degree = 1
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	hdiv : p ∣ q,	hdeg : q.nat_degree ≤ p.nat_degree	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	hdeg : q.nat_degree ≤ p.nat_degree,	r : polynomial R,	hr : q = p * r	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	hdeg : q.nat_degree ≤ p.nat_degree,	r : polynomial R,	hr : q = p * r	⊢ r ≠ 0
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	hdeg : q.nat_degree ≤ p.nat_degree,	r : polynomial R,	hr : q = p * r	⊢ r ≠ 0		R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	hdeg : q.nat_degree ≤ p.nat_degree,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	hdeg : q.nat_degree ≤ p.nat_degree,	r : polynomial R,	hr : q = p * r,	h : r = 0	⊢ false
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	hdeg : q.nat_degree ≤ p.nat_degree,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree	⊢ p.nat_degree + r.nat_degree = p.nat_degree
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegle : p.nat_degree ≤ p.nat_degree + r.nat_degree	⊢ p.nat_degree + r.nat_degree = p.nat_degree		R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree	⊢ p.nat_degree ≤ p.nat_degree + r.nat_degree
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegle : p.nat_degree ≤ p.nat_degree + r.nat_degree	⊢ p.nat_degree + r.nat_degree = p.nat_degree
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree	⊢ p.nat_degree + r.nat_degree = p.nat_degree		R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : p.nat_degree + r.nat_degree = p.nat_degree	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree	⊢ p.nat_degree ≤ p.nat_degree + r.nat_degree
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : p.nat_degree + r.nat_degree = p.nat_degree	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0)	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0),	hlead : 1 = r.leading_coeff	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0),	hlead : 1 = r.leading_coeff,	hcoeff : (⇑polynomial.C (r.coeff 0)).leading_coeff = r.coeff 0	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0),	hlead : 1 = r.leading_coeff,	hcoeff : 1 = r.coeff 0	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0),	hlead : 1 = r.leading_coeff	⊢ q = p		R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0)	⊢ 1 = r.leading_coeff
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hlead : 1 = r.leading_coeff,	hcoeff : 1 = r.coeff 0,	hdegeq : r = 1	⊢ q = p
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0)	⊢ 1 = r.leading_coeff
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0)	⊢ q.leading_coeff = p.leading_coeff * r.leading_coeff		R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0),	hprod : q.leading_coeff = p.leading_coeff * r.leading_coeff	⊢ 1 = r.leading_coeff
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0)	⊢ q.leading_coeff = p.leading_coeff * r.leading_coeff
R : Type u,	_inst_1 : integral_domain R,	p q : polynomial R,	hp : p.monic,	hq : q.monic,	r : polynomial R,	hr : q = p * r,	rzero : r ≠ 0,	hdeg : p.nat_degree + r.nat_degree ≤ p.nat_degree,	hdegeq : r = ⇑polynomial.C (r.coeff 0),	hprod : q.leading_coeff = p.leading_coeff * r.leading_coeff	⊢ 1 = r.leading_coeff
n : ℕ,	F : typevec n → Type u_1,	_inst_1 : mvfunctor F,	q : mvqpf F	⊢ q.liftp_preservation ↔ q.is_uniform
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest	⊢ ∀ (x y : mvqpf.cofix F α), r x y → x = y
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest	⊢ ∀ (x y : mvqpf.cofix F α), r x y → (typevec.id ::: quot.mk (λ (x y : mvqpf.cofix F α), r x y)) <$$> x.dest = (typevec.id ::: quot.mk (λ (x y : mvqpf.cofix F α), r x y)) <$$> y.dest
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y	⊢ (typevec.id ::: quot.mk (λ (x y : mvqpf.cofix F α), r x y)) <$$> x.dest = (typevec.id ::: quot.mk (λ (x y : mvqpf.cofix F α), r x y)) <$$> y.dest
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j)	⊢ (typevec.id ::: quot.mk (λ (x y : mvqpf.cofix F α), r x y)) <$$> x.dest = (typevec.id ::: quot.mk (λ (x y : mvqpf.cofix F α), r x y)) <$$> y.dest
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j)	⊢ mvqpf.abs ⟨a, (typevec.id ::: quot.mk (λ (x y : mvqpf.cofix F α), r x y)) ⊚ f₀⟩ = mvqpf.abs ⟨a, (typevec.id ::: quot.mk (λ (x y : mvqpf.cofix F α), r x y)) ⊚ f₁⟩
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j)	⊢ mvqpf.abs ⟨a, (typevec.id ::: quot.mk (λ (x y : mvqpf.cofix F α), r x y)) ⊚ typevec.split_fun (typevec.drop_fun f₀) (typevec.last_fun f₀)⟩ = mvqpf.abs ⟨a, (typevec.id ::: quot.mk (λ (x y : mvqpf.cofix F α), r x y)) ⊚ typevec.split_fun (typevec.drop_fun f₁) (typevec.last_fun f₁)⟩
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j)	⊢ mvqpf.abs ⟨a, typevec.split_fun (typevec.id ⊚ typevec.drop_fun f₀) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₀)⟩ = mvqpf.abs ⟨a, typevec.split_fun (typevec.id ⊚ typevec.drop_fun f₁) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₁)⟩
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j),	i : fin2 (n + 1),	j : (mvqpf.P F).B a i	⊢ typevec.split_fun (typevec.drop_fun f₀) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₀) i j = typevec.split_fun (typevec.drop_fun f₁) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₁) i j
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j),	i : fin2 (n + 1),	j : (mvqpf.P F).B a i	⊢ typevec.split_fun (typevec.drop_fun f₀) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₀) i j = typevec.split_fun (typevec.drop_fun f₁) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₁) i j
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j)	⊢ mvqpf.abs ⟨a, typevec.split_fun (typevec.drop_fun f₀) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₀)⟩ = mvqpf.abs ⟨a, typevec.split_fun (typevec.drop_fun f₁) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₁)⟩
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j),	j : (mvqpf.P F).B a fin2.fz	⊢ typevec.split_fun (typevec.drop_fun f₀) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₀) fin2.fz j = typevec.split_fun (typevec.drop_fun f₁) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₁) fin2.fz j
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j),	i_ᾰ : fin2 n,	j : (mvqpf.P F).B a i_ᾰ.fs	⊢ typevec.split_fun (typevec.drop_fun f₀) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₀) i_ᾰ.fs j = typevec.split_fun (typevec.drop_fun f₁) (quot.mk (λ (x y : mvqpf.cofix F α), r x y) ∘ typevec.last_fun f₁) i_ᾰ.fs j
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j),	j : (mvqpf.P F).B a fin2.fz	⊢ r (typevec.last_fun f₀ j) (typevec.last_fun f₁ j)
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j),	j : (mvqpf.P F).B a fin2.fz	⊢ typevec.split_fun (typevec.drop_fun f₀) (quot.mk r ∘ typevec.last_fun f₀) fin2.fz j = typevec.split_fun (typevec.drop_fun f₁) (quot.mk r ∘ typevec.last_fun f₁) fin2.fz j		n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j),	i_ᾰ : fin2 n,	j : (mvqpf.P F).B a i_ᾰ.fs	⊢ typevec.split_fun (typevec.drop_fun f₀) (quot.mk r ∘ typevec.last_fun f₀) i_ᾰ.fs j = typevec.split_fun (typevec.drop_fun f₁) (quot.mk r ∘ typevec.last_fun f₁) i_ᾰ.fs j
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j),	j : (mvqpf.P F).B a fin2.fz	⊢ typevec.split_fun (typevec.drop_fun f₀) (quot.mk r ∘ typevec.last_fun f₀) fin2.fz j = typevec.split_fun (typevec.drop_fun f₁) (quot.mk r ∘ typevec.last_fun f₁) fin2.fz j
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j),	i_ᾰ : fin2 n,	j : (mvqpf.P F).B a i_ᾰ.fs	⊢ f₀ i_ᾰ.fs j = f₁ i_ᾰ.fs j
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	r : mvqpf.cofix F α → mvqpf.cofix F α → Prop,	h : ∀ (x y : mvqpf.cofix F α), r x y → mvfunctor.liftr (α.rel_last r) x.dest y.dest,	x y : mvqpf.cofix F α,	rxy : r x y,	a : (mvqpf.P F).A,	f₀ f₁ : (mvqpf.P F).B a ⟹ λ (i : fin2 (n + 1)), (α ::: mvqpf.cofix F α) i,	dxeq : x.dest = mvqpf.abs ⟨a, f₀⟩,	dyeq : y.dest = mvqpf.abs ⟨a, f₁⟩,	h' : ∀ (i : fin2 (n + 1)) (j : (mvqpf.P F).B a i), α.rel_last r (f₀ i j) (f₁ i j),	i_ᾰ : fin2 n,	j : (mvqpf.P F).B a i_ᾰ.fs	⊢ typevec.split_fun (typevec.drop_fun f₀) (quot.mk r ∘ typevec.last_fun f₀) i_ᾰ.fs j = typevec.split_fun (typevec.drop_fun f₁) (quot.mk r ∘ typevec.last_fun f₁) i_ᾰ.fs j
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	x : F (α ::: mvqpf.cofix F α)	⊢ (mvqpf.cofix.mk x).dest = x
n : ℕ,	F : typevec (n + 1) → Type u,	_inst_1 : mvfunctor F,	q : mvqpf F,	α : typevec n,	x : F (α ::: mvqpf.cofix F α),	this : mvqpf.cofix.mk ∘ mvqpf.cofix.dest = id	⊢ (mvqpf.cofix.mk x).dest = x
F : Type u → Type u,	_inst_1 : functor F,	q : qpf F	⊢ q.supp_preservation ↔ q.is_uniform
F : Type u → Type u,	_inst_1 : functor F,	q : qpf F	⊢ q.supp_preservation → q.is_uniform
F : Type u → Type u,	_inst_1 : functor F,	q : qpf F	⊢ q.supp_preservation → q.is_uniform		F : Type u → Type u,	_inst_1 : functor F,	q : qpf F	⊢ q.is_uniform → q.supp_preservation
F : Type u → Type u,	_inst_1 : functor F,	q : qpf F,	h : q.supp_preservation,	α : Type u,	a a' : (qpf.P F).A,	f : (qpf.P F).B a → α,	f' : (qpf.P F).B a' → α,	h' : qpf.abs ⟨a, f⟩ = qpf.abs ⟨a', f'⟩	⊢ f '' set.univ = f' '' set.univ
F : Type u → Type u,	_inst_1 : functor F,	q : qpf F,	h : q.is_uniform,	α : Type u,	a : (qpf.P F).A,	f : (qpf.P F).B a → α	⊢ functor.supp (qpf.abs ⟨a, f⟩) = functor.supp ⟨a, f⟩
F : Type u → Type u,	_inst_1 : functor F,	q : qpf F	⊢ q.is_uniform → q.supp_preservation
⊢ rat.mk_pnat 1 ⟨1, _⟩ = 1
⊢ (let n' : ℕ := 1.nat_abs, g : ℕ := n'.gcd 1 in {num := 1 / ↑g, denom := 1 / g, pos := _, cop := _}) = 1
⊢ {num := 1, denom := 1, pos := _, cop := _} = 1
a b : ℕ,	h : b ∣ a	⊢ ↑(a / b) = ↑a / ↑b
b c : ℕ	⊢ ↑(b * c / b) = ↑(b * c) / ↑b
α : Type u_1,	_inst_1 : division_ring α,	m n : ℚ,	md : ↑(m.denom) ≠ 0,	nn : ↑(n.num) ≠ 0,	nd : ↑(n.denom) ≠ 0	⊢ n⁻¹.denom = ?m_1
α : Type u_1,	_inst_1 : division_ring α,	m n : ℚ,	md : ↑(m.denom) ≠ 0,	nn : ↑(n.num) ≠ 0,	nd : ↑(n.denom) ≠ 0	⊢ ↑(n⁻¹.denom) ∣ n.num
α : Type u_1,	_inst_1 : division_ring α,	m n : ℚ,	md : ↑(m.denom) ≠ 0,	nn : ↑(n.num) ≠ 0,	nd : ↑(n.denom) ≠ 0	⊢ ↑(n⁻¹.denom) ∣ n.num
α : Type u_1,	_inst_1 : division_ring α,	m n : ℚ,	md : ↑(m.denom) ≠ 0,	nn : ↑(n.num) ≠ 0,	nd : ↑(n.denom) ≠ 0	⊢ ↑((↑(n.denom) /. n.num).denom) ∣ n.num
α : Type u_1,	_inst_1 : division_ring α,	m n : ℚ,	md : ↑(m.denom) ≠ 0,	nn : ↑(n.num) ≠ 0,	nd : ↑(n.denom) ≠ 0,	this : ↑(n⁻¹.denom) ∣ n.num,	h : ↑(n⁻¹.denom) = 0,	_let_match : ↑(n⁻¹.denom) ∣ n.num → ↑(n.num) = 0,	k : ℤ,	e : n.num = ↑(n⁻¹.denom) * k	⊢ ↑(n.num) = 0
α : Type u_1,	_inst_1 : division_ring α,	m n : ℚ,	md : ↑(m.denom) ≠ 0,	nn : ↑(n.num) ≠ 0,	nd : ↑(n.denom) ≠ 0,	this : ↑(n⁻¹.denom) ∣ n.num,	h : ↑(n⁻¹.denom) = 0,	_let_match : ↑(n⁻¹.denom) ∣ n.num → ↑(n.num) = 0,	k : ℤ,	e : n.num = ↑(n⁻¹.denom) * k	⊢ ↑(n.num) = 0
α : Type u_1,	_inst_1 : division_ring α,	m n : ℚ,	md : ↑(m.denom) ≠ 0,	nn : ↑(n.num) ≠ 0,	nd : ↑(n.denom) ≠ 0,	this : ↑(n⁻¹.denom) ∣ n.num,	h : ↑(n⁻¹.denom) = 0,	_let_match : ↑(n⁻¹.denom) ∣ n.num → ↑(n.num) = 0,	k : ℤ,	e : n.num = ↑(n⁻¹.denom) * k,	this : ↑(n.num) = ↑(↑(n⁻¹.denom) * k)	⊢ ↑(n.num) = 0
α : Type u_1,	_inst_1 : division_ring α,	m n : ℚ,	md : ↑(m.denom) ≠ 0,	nn : ↑(n.num) ≠ 0,	nd : ↑(n.denom) ≠ 0,	this : ↑(n⁻¹.denom) ∣ n.num,	this : ↑(n⁻¹.denom) = 0 → ↑(n.num) = 0	⊢ ↑(m / n) = ↑m / ↑n
α : Type u_1,	_inst_1 : division_ring α,	cast_neg : ∀ (n : ℚ), ↑-n = -↑n,	n : ℤ,	d : ℕ,	h : 0 < d,	c : n.nat_abs.coprime d	⊢ ↑-n / ↑d = -(↑n / ↑d)
z : ℤ,	le_floor : ∀ {r : ℚ}, z ≤ r.floor ↔ ↑z ≤ r,	n : ℤ,	d : ℕ,	h : 0 < d,	c : n.nat_abs.coprime d	⊢ z ≤ {num := n, denom := d, pos := h, cop := c}.floor ↔ ↑z ≤ {num := n, denom := d, pos := h, cop := c}
z : ℤ,	le_floor : ∀ {r : ℚ}, z ≤ r.floor ↔ ↑z ≤ r,	n : ℤ,	d : ℕ,	h : 0 < d,	c : n.nat_abs.coprime d	⊢ z ≤ n / ↑d ↔ ↑z ≤ {num := n, denom := d, pos := h, cop := c}
z : ℤ,	le_floor : ∀ {r : ℚ}, z ≤ r.floor ↔ ↑z ≤ r,	n : ℤ,	d : ℕ,	h : 0 < d,	c : n.nat_abs.coprime d	⊢ z ≤ n / ↑d ↔ ↑z ≤ rat.mk n ↑d
z : ℤ,	le_floor : ∀ {r : ℚ}, z ≤ r.floor ↔ ↑z ≤ r,	n : ℤ,	d : ℕ,	h : 0 < d,	c : n.nat_abs.coprime d,	h' : ↑0 < ↑d	⊢ (z ≤ n / ↑d ↔ ↑z ≤ rat.mk n ↑d) = ?m_1
z : ℤ,	le_floor : ∀ {r : ℚ}, z ≤ r.floor ↔ ↑z ≤ r,	n : ℤ,	d : ℕ,	h : 0 < d,	c : n.nat_abs.coprime d,	h' : ↑0 < ↑d	⊢ z ≤ n / ↑d ↔ ↑z ≤ rat.mk n ↑d
z : ℤ,	le_floor : ∀ {r : ℚ}, z ≤ r.floor ↔ ↑z ≤ r,	n : ℤ,	d : ℕ,	h : 0 < d,	c : n.nat_abs.coprime d,	h' : ↑0 < ↑d	⊢ ↑z ≤ rat.mk n ↑d = ?m_1
z : ℤ,	le_floor : ∀ {r : ℚ}, z ≤ r.floor ↔ ↑z ≤ r,	n : ℤ,	d : ℕ,	h : 0 < d,	c : n.nat_abs.coprime d,	h' : ↑0 < ↑d	⊢ z ≤ n / ↑d ↔ z * ↑d ≤ n
a b c d : ℤ,	b_pos : 0 < b,	d_pos : 0 < d	⊢ ↑a / ↑b < ↑c / ↑d ↔ a * d < c * b
a b c d : ℤ,	b_pos : 0 < b,	d_pos : 0 < d	⊢ ↑a / ↑b ≤ ↑c / ↑d ∧ ¬↑c / ↑d ≤ ↑a / ↑b ↔ a * d ≤ c * b ∧ ¬c * b ≤ a * d
a b c d : ℤ,	b_pos : 0 < b,	d_pos : 0 < d	⊢ ↑a / ↑b ≤ ↑c / ↑d ↔ a * d ≤ c * b		a b c d : ℤ,	b_pos : 0 < b,	d_pos : 0 < d	⊢ ¬↑c / ↑d ≤ ↑a / ↑b ↔ ¬c * b ≤ a * d
a b c d : ℤ,	b_pos : 0 < b,	d_pos : 0 < d	⊢ ↑a / ↑b ≤ ↑c / ↑d ↔ a * d ≤ c * b
a b c d : ℤ,	b_pos : 0 < b,	d_pos : 0 < d	⊢ ↑c / ↑d ≤ ↑a / ↑b ↔ c * b ≤ a * d
a b c d : ℤ,	b_pos : 0 < b,	d_pos : 0 < d	⊢ ¬↑c / ↑d ≤ ↑a / ↑b ↔ ¬c * b ≤ a * d
⊢ distrib_lattice ℝ
a b : ℝ	⊢ decidable (a = b)
⊢ ring ℝ
α : Type u_1,	_inst_1 : linear_ordered_field α,	x y : α	⊢ const x ≤ const y ↔ x ≤ y
α : Type u_1,	_inst_1 : linear_ordered_field α,	x y : α	⊢ const x ≤ const y ↔ x < y ∨ x = y
α : Type u_1,	_inst_1 : linear_ordered_field α,	x y : α	⊢ const x ≤ const y ↔ x ≤ y
α : Type u_1,	_inst_1 : linear_ordered_field α,	f : cau_seq α abs,	_let_match : (∃ (r : α), ∀ (i : ℕ), abs (⇑f i) < r) → (∃ (a : α), f < const a),	K : α,	H : ∀ (i : ℕ), abs (⇑f i) < K,	i : ℕ,	_x : i ≥ 0	⊢ 1 ≤ ⇑(const (K + 1) - f) i
α : Type u_1,	_inst_1 : linear_ordered_field α,	f : cau_seq α abs,	_let_match : (∃ (r : α), ∀ (i : ℕ), abs (⇑f i) < r) → (∃ (a : α), f < const a),	K : α,	H : ∀ (i : ℕ), abs (⇑f i) < K,	i : ℕ,	_x : i ≥ 0	⊢ ⇑f i ≤ K
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_4 : field β,	abv : β → α,	_inst_5 : is_absolute_value abv,	ε K : α,	ε0 : 0 < ε,	K0 : 0 < K	⊢ ∃ (δ : α) (H : δ > 0), ∀ {a b : β}, K ≤ abv a → K ≤ abv b → abv (a - b) < δ → abv (a⁻¹ - b⁻¹) < ε
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_4 : field β,	abv : β → α,	_inst_5 : is_absolute_value abv,	ε K : α,	ε0 : 0 < ε,	K0 : 0 < K,	KK : 0 < K * K	⊢ ∃ (δ : α) (H : δ > 0), ∀ {a b : β}, K ≤ abv a → K ≤ abv b → abv (a - b) < δ → abv (a⁻¹ - b⁻¹) < ε
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_4 : field β,	abv : β → α,	_inst_5 : is_absolute_value abv,	ε K : α,	ε0 : 0 < ε,	K0 : 0 < K,	KK : 0 < K * K,	εK : 0 < ε * (K * K)	⊢ ∃ (δ : α) (H : δ > 0), ∀ {a b : β}, K ≤ abv a → K ≤ abv b → abv (a - b) < δ → abv (a⁻¹ - b⁻¹) < ε
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_4 : field β,	abv : β → α,	_inst_5 : is_absolute_value abv,	ε K : α,	ε0 : 0 < ε,	K0 : 0 < K,	KK : 0 < K * K,	εK : 0 < ε * (K * K),	a b : β,	ha : K ≤ abv a,	hb : K ≤ abv b,	h : abv (a - b) < ε * (K * K)	⊢ abv (a⁻¹ - b⁻¹) < ε
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_4 : field β,	abv : β → α,	_inst_5 : is_absolute_value abv,	ε K : α,	ε0 : 0 < ε,	K0 : 0 < K,	KK : 0 < K * K,	εK : 0 < ε * (K * K),	a b : β,	ha : K ≤ abv a,	hb : K ≤ abv b,	h : abv (a - b) < ε * (K * K),	a0 : 0 < abv a	⊢ abv (a⁻¹ - b⁻¹) < ε
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_4 : field β,	abv : β → α,	_inst_5 : is_absolute_value abv,	ε K : α,	ε0 : 0 < ε,	K0 : 0 < K,	KK : 0 < K * K,	εK : 0 < ε * (K * K),	a b : β,	ha : K ≤ abv a,	hb : K ≤ abv b,	h : abv (a - b) < ε * (K * K),	a0 : 0 < abv a,	b0 : 0 < abv b	⊢ abv (a⁻¹ - b⁻¹) < ε
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_4 : field β,	abv : β → α,	_inst_5 : is_absolute_value abv,	ε K : α,	ε0 : 0 < ε,	K0 : 0 < K,	KK : 0 < K * K,	εK : 0 < ε * (K * K),	a b : β,	ha : K ≤ abv a,	hb : K ≤ abv b,	h : abv (a - b) < ε * (K * K),	a0 : 0 < abv a,	b0 : 0 < abv b	⊢ abv (a - b) / (abv b * abv a) < ε * (K * K) / (K * K)
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero	⊢ f.lim ≠ 0
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	g f : cau_seq β abv,	hf : ¬f.lim_zero	⊢ (g - f * f.inv hf * g).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	g f : cau_seq β abv,	hf : ¬f.lim_zero	⊢ (g - f * f.inv hf * g).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	g f : cau_seq β abv,	hf : ¬f.lim_zero	⊢ (g * (1 - f.inv hf * f)).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	h₁ : ∀ (g f : cau_seq β abv) (hf : ¬f.lim_zero), (g - f * f.inv hf * g).lim_zero	⊢ (f.inv hf - cau_seq.const abv (f.lim)⁻¹ - (cau_seq.const abv f.lim - f) * (f.inv hf * cau_seq.const abv (f.lim)⁻¹)).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	h₁ : ∀ (g f : cau_seq β abv) (hf : ¬f.lim_zero), (g - f * f.inv hf * g).lim_zero	⊢ (f.inv hf - cau_seq.const abv (f.lim)⁻¹ - (cau_seq.const abv f.lim - f) * (f.inv hf * cau_seq.const abv (f.lim)⁻¹)).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	h₁ : ∀ (g f : cau_seq β abv) (hf : ¬f.lim_zero), (g - f * f.inv hf * g).lim_zero	⊢ (f.inv hf - cau_seq.const abv f.lim * (f.inv hf * cau_seq.const abv (f.lim)⁻¹) - (cau_seq.const abv (f.lim)⁻¹ - f * (f.inv hf * cau_seq.const abv (f.lim)⁻¹))).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	h₁ : ∀ (g f : cau_seq β abv) (hf : ¬f.lim_zero), (g - f * f.inv hf * g).lim_zero	⊢ (f.inv hf - cau_seq.const abv f.lim * (f.inv hf * cau_seq.const abv (f.lim)⁻¹)).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	h₁ : ∀ (g f : cau_seq β abv) (hf : ¬f.lim_zero), (g - f * f.inv hf * g).lim_zero	⊢ (f.inv hf - cau_seq.const abv f.lim * (f.inv hf * cau_seq.const abv (f.lim)⁻¹)).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	h₁ : ∀ (g f : cau_seq β abv) (hf : ¬f.lim_zero), (g - f * f.inv hf * g).lim_zero	⊢ (f.inv hf - cau_seq.const abv f.lim * (cau_seq.const abv f.lim).inv _ * f.inv hf).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	h₁ : ∀ (g f : cau_seq β abv) (hf : ¬f.lim_zero), (g - f * f.inv hf * g).lim_zero	⊢ (cau_seq.const abv (f.lim)⁻¹ - f * (f.inv hf * cau_seq.const abv (f.lim)⁻¹)).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	h₁ : ∀ (g f : cau_seq β abv) (hf : ¬f.lim_zero), (g - f * f.inv hf * g).lim_zero	⊢ (cau_seq.const abv (f.lim)⁻¹ - f * (f.inv hf * cau_seq.const abv (f.lim)⁻¹)).lim_zero
α : Type u_1,	_inst_1 : linear_ordered_field α,	β : Type u_2,	_inst_2 : field β,	abv : β → α,	_inst_3 : is_absolute_value abv,	_inst_4 : cau_seq.is_complete β abv,	f : cau_seq β abv,	hf : ¬f.lim_zero,	hl : f.lim ≠ 0,	h₁ : ∀ (g f : cau_seq β abv) (hf : ¬f.lim_zero), (g - f * f.inv hf * g).lim_zero	⊢ (cau_seq.const abv (f.lim)⁻¹ - f * f.inv hf * cau_seq.const abv (f.lim)⁻¹).lim_zero
a : ℝ≥0∞	⊢ 1⁻¹ ≤ a ↔ 1 ≤ a
a : ℝ≥0∞	⊢ a ≤ 1⁻¹ ↔ a ≤ 1
a b : ℝ≥0∞,	h : a * b = 1	⊢ a = b⁻¹
a : ℝ≥0∞,	h : a * ⊤ = 1	⊢ false
a : ℝ≥0∞,	h : a * ⊤ = 1	⊢ a = ⊤⁻¹
a : ℝ≥0∞,	h : a * ⊤ = 1	⊢ a = ⊤⁻¹		a b : ℝ≥0∞,	h : a * b = 1,	hb : b ≠ ⊤	⊢ a = b⁻¹
a : ℝ≥0∞,	h : a * ⊤ = 1,	this : false	⊢ a = ⊤⁻¹
a b : ℝ≥0∞,	h : a * b = 1,	hb : b ≠ ⊤	⊢ a = b⁻¹
a b : ℝ≥0∞,	ha : a = ⊤	⊢ (a + b).to_real ≤ a.to_real + b.to_real
a b : ℝ≥0∞,	ha : ¬a = ⊤,	hb : b = ⊤	⊢ (a + b).to_real ≤ a.to_real + b.to_real
a b : ℝ≥0∞,	ha : a ≠ ⊤,	hb : b ≠ ⊤	⊢ a.to_real = b.to_real ↔ a = b
b : ℝ≥0∞,	hb : b ≠ ⊤,	a : ℝ≥0	⊢ ↑a.to_real = b.to_real ↔ ↑a = b
a b : ℝ≥0	⊢ ↑a.to_real = ↑b.to_real ↔ ↑a = ↑b
α : Type u_1,	s : finset α,	f : α → ℝ,	hf : ∀ (i : α), i ∈ s → 0 ≤ f i	⊢ ennreal.of_real (∏ (i : α) in s, f i) = ∏ (i : α) in s, ennreal.of_real (f i)
α : Type u_1,	s : finset α,	f : α → ℝ,	hf : ∀ (i : α), i ∈ s → 0 ≤ f i	⊢ (s.prod f).to_nnreal = ∏ (a : α) in s, (f a).to_nnreal
a : ℝ≥0∞,	b : ℝ≥0,	h : a ≤ ↑b	⊢ ↑(a.to_nnreal) ≤ ↑b
a : ℝ≥0∞,	b : ℝ≥0,	h : a ≤ ↑b,	this : ↑(a.to_nnreal) = a	⊢ ↑(a.to_nnreal) ≤ ↑b
a : ℝ≥0∞,	b : ℝ≥0,	this : ↑(a.to_nnreal) = a,	h : ↑(a.to_nnreal) ≤ ↑b	⊢ ↑(a.to_nnreal) ≤ ↑b
a b : ℝ≥0∞,	ha : a ≠ ⊤,	hb : b ≠ 0	⊢ a < a + b
r : ℝ≥0	⊢ ∀ (b : ℝ≥0∞), b ∈ {d : ℝ≥0∞ | ⊤ ≤ d + ↑r} → ⊤ ≤ b
r : ℝ≥0,	hr : r = 0	⊢ ↑r⁻¹ ≤ (↑r)⁻¹
r : ℝ≥0,	hr : ¬r = 0	⊢ ↑r⁻¹ ≤ (↑r)⁻¹
a b : ereal,	h : -a = -b	⊢ a = b
⊢ -1 < ψ
⊢ φ⁻¹ < 1
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	d : ℝ,	hd : 0 < d,	hxr' : ↑r - ↑(d / 2) < x ∧ x < ↑r + ↑(d / 2),	hys' : ↑s - ↑(d / 2) < y ∧ y < ↑s + ↑(d / 2)	⊢ ↑(r + s) - ↑d < x + y
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	d : ℝ,	hd : 0 < d,	hxr' : ↑r - ↑(d / 2) < x ∧ x < ↑r + ↑(d / 2),	hys' : ↑s - ↑(d / 2) < y ∧ y < ↑s + ↑(d / 2)	⊢ ↑(r + s) - ↑d < x + y
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	d : ℝ,	hd : 0 < d,	hxr' : ↑r - ↑(d / 2) < x ∧ x < ↑r + ↑(d / 2),	hys' : ↑s - ↑(d / 2) < y ∧ y < ↑s + ↑(d / 2)	⊢ ↑(r + s) - ↑d = ↑r - ↑(d / 2) + (↑s - ↑(d / 2))
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	d : ℝ,	hd : 0 < d,	hxr' : ↑r - ↑(d / 2) < x ∧ x < ↑r + ↑(d / 2),	hys' : ↑s - ↑(d / 2) < y ∧ y < ↑s + ↑(d / 2)	⊢ r + s - d = r - d / 2 + (s - d / 2)
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	d : ℝ,	hd : 0 < d,	hxr' : ↑r - ↑(d / 2) < x ∧ x < ↑r + ↑(d / 2),	hys' : ↑s - ↑(d / 2) < y ∧ y < ↑s + ↑(d / 2)	⊢ ↑(r + s) - ↑d < x + y
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	d : ℝ,	hd : 0 < d,	hxr' : ↑r - ↑(d / 2) < x ∧ x < ↑r + ↑(d / 2),	hys' : ↑s - ↑(d / 2) < y ∧ y < ↑s + ↑(d / 2)	⊢ x + y < ↑(r + s) + ↑d
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	d : ℝ,	hd : 0 < d,	hxr' : ↑r - ↑(d / 2) < x ∧ x < ↑r + ↑(d / 2),	hys' : ↑s - ↑(d / 2) < y ∧ y < ↑s + ↑(d / 2)	⊢ x + y < ↑(r + s) + ↑d
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	d : ℝ,	hd : 0 < d,	hxr' : ↑r - ↑(d / 2) < x ∧ x < ↑r + ↑(d / 2),	hys' : ↑s - ↑(d / 2) < y ∧ y < ↑s + ↑(d / 2)	⊢ ↑(r + s) + ↑d = ↑r + ↑(d / 2) + (↑s + ↑(d / 2))
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	d : ℝ,	hd : 0 < d,	hxr' : ↑r - ↑(d / 2) < x ∧ x < ↑r + ↑(d / 2),	hys' : ↑s - ↑(d / 2) < y ∧ y < ↑s + ↑(d / 2)	⊢ r + s + d = r + d / 2 + (s + d / 2)
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	d : ℝ,	hd : 0 < d,	hxr' : ↑r - ↑(d / 2) < x ∧ x < ↑r + ↑(d / 2),	hys' : ↑s - ↑(d / 2) < y ∧ y < ↑s + ↑(d / 2)	⊢ x + y < ↑(r + s) + ↑d
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	hrs : r < s,	hrs' : 0 < (s - r) / 2,	hxr' : x < ↑r + ↑((s - r) / 2),	hys' : ↑s - ↑((s - r) / 2) < y	⊢ r + (s - r) / 2 = (r + s) / 2
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	hrs : r < s,	hrs' : 0 < (s - r) / 2,	hxr' : x < ↑r + ↑((s - r) / 2),	hys' : ↑s - ↑((s - r) / 2) < y,	H1 : r + (s - r) / 2 = (r + s) / 2	⊢ s - (s - r) / 2 = (r + s) / 2
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	hrs : r < s,	hrs' : 0 < (s - r) / 2,	hxr' : x < ↑r + ↑((s - r) / 2),	hys' : ↑s - ↑((s - r) / 2) < y,	H1 : r + (s - r) / 2 = (r + s) / 2,	H2 : s - (s - r) / 2 = (r + s) / 2	⊢ x < y
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	hrs : r < s,	hrs' : 0 < (s - r) / 2,	H1 : r + (s - r) / 2 = (r + s) / 2,	H2 : s - (s - r) / 2 = (r + s) / 2,	hxr' : x < ↑(r + (s - r) / 2),	hys' : ↑(s - (s - r) / 2) < y	⊢ x < y
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	hrs : r < s,	hrs' : 0 < (s - r) / 2,	H1 : r + (s - r) / 2 = (r + s) / 2,	H2 : s - (s - r) / 2 = (r + s) / 2,	hys' : ↑(s - (s - r) / 2) < y,	hxr' : x < ↑((r + s) / 2)	⊢ x < y
x y : ℝ*,	r s : ℝ,	hxr : x.is_st r,	hys : y.is_st s,	hrs : r < s,	hrs' : 0 < (s - r) / 2,	H1 : r + (s - r) / 2 = (r + s) / 2,	H2 : s - (s - r) / 2 = (r + s) / 2,	hxr' : x < ↑((r + s) / 2),	hys' : ↑((r + s) / 2) < y	⊢ x < y
x : ℝ*	⊢ x.infinite_neg ↔ ∀ (r : ℝ), x < ↑r
x : ℝ*	⊢ x.infinite_neg ↔ ∀ (r : ℝ), x < ↑r
x : ℝ*	⊢ x.infinite_neg = ∀ (r : ℝ), x < ↑r
α : Type u_1,	s : finset α,	f : α → ℝ,	hf : ∀ (a : α), a ∈ s → 0 ≤ f a	⊢ (∏ (a : α) in s, f a).to_nnreal = ∏ (a : α) in s, (f a).to_nnreal
α : Type u_1,	s : finset α,	f : α → ℝ,	hf : ∀ (a : α), a ∈ s → 0 ≤ f a	⊢ ∏ (i : α) in s, f i = ∏ (a : α) in s, ↑((f a).to_nnreal)
α : Type u_1,	s : finset α,	f : α → ℝ,	hf : ∀ (a : α), a ∈ s → 0 ≤ f a,	x : α,	hxs : x ∈ s	⊢ f x = ↑((f x).to_nnreal)
a b : ℝ≥0,	h : ∀ (ε : ℝ≥0), 0 < ε → a ≤ b + ε,	x : ℝ≥0,	hxb : b < x	⊢ a ≤ x
a b : ℝ≥0,	h : ∀ (ε : ℝ≥0), 0 < ε → a ≤ b + ε,	ε : ℝ≥0,	hxb : b < b + ε	⊢ a ≤ b + ε
x y : ℝ,	hx : 0 ≤ x,	hy : 0 ≤ y	⊢ x ≤ real.sqrt y ↔ x ^ 2 ≤ y
x y : ℝ,	h : 0 ≤ y	⊢ x ^ 2 ≤ y ↔ -real.sqrt y ≤ x ∧ x ≤ real.sqrt y
x y : ℝ,	h : 0 ≤ y	⊢ x ^ 2 ≤ y → -real.sqrt y ≤ x ∧ x ≤ real.sqrt y		x y : ℝ,	h : 0 ≤ y	⊢ -real.sqrt y ≤ x ∧ x ≤ real.sqrt y → x ^ 2 ≤ y
x y : ℝ,	h : 0 ≤ y	⊢ x ^ 2 ≤ y → -real.sqrt y ≤ x ∧ x ≤ real.sqrt y
x y : ℝ,	h : 0 ≤ y	⊢ -real.sqrt y ≤ x ∧ x ≤ real.sqrt y → x ^ 2 ≤ y
x y : ℝ,	h : 0 ≤ y	⊢ abs x ≤ real.sqrt y → abs x ^ 2 ≤ y
x y : ℝ≥0	⊢ ⇑nnreal.sqrt (x * y) = ⇑nnreal.sqrt x * ⇑nnreal.sqrt y
α β : Type ?,	x : α,	f : α → semiquot β	⊢ ∀ (a : β), a ∈ has_pure.pure x >>= f ↔ a ∈ f x
α β γ : Type ?,	s : semiquot α,	f : α → semiquot β,	g : β → semiquot γ	⊢ ∀ (a : γ), a ∈ s >>= f >>= g ↔ a ∈ s >>= λ (x : α), f x >>= g
α β γ : Type ?,	s : semiquot α,	f : α → semiquot β,	g : β → semiquot γ	⊢ ∀ (a : γ), a ∈ s >>= f >>= g ↔ a ∈ s >>= λ (x : α), f x >>= g
α β γ : Type ?,	s : semiquot α,	f : α → semiquot β,	g : β → semiquot γ	⊢ ∀ (a : γ), (∃ (a_1 : β), (∃ (a : α), a ∈ s ∧ a_1 ∈ f a) ∧ a ∈ g a_1) ↔ ∃ (a_1 : α), a_1 ∈ s ∧ ∃ (a_2 : β), a_2 ∈ f a_1 ∧ a ∈ g a_2
α : Type ?,	q : semiquot α	⊢ ∀ (a : α), a ∈ id <$> q ↔ a ∈ q
α β : Type ?,	f : α → β,	s : semiquot α	⊢ ∀ (a : β), a ∈ s >>= has_pure.pure ∘ f ↔ a ∈ f <$> s
α : Type u,	a : α,	m n : ℕ,	h : m ≤ n,	f : stream (option α),	al : ∀ {n : ℕ} {a : α}, f n = option.some a → f (n + 1) = option.some a	⊢ ⟨f, al⟩.val m = option.some a → ⟨f, al⟩.val n = option.some a
α : Type u,	a : α,	m : ℕ,	f : stream (option α),	al : ∀ {n : ℕ} {a : α}, f n = option.some a → f (n + 1) = option.some a,	n : ℕ	⊢ ⟨f, al⟩.val m = option.some a → ⟨f, al⟩.val m = option.some a		case nat.less_than_or_equal.step	α : Type u,	a : α,	m : ℕ,	f : stream (option α),	al : ∀ {n : ℕ} {a : α}, f n = option.some a → f (n + 1) = option.some a,	n n : ℕ,	h : m.less_than_or_equal n,	IH : ⟨f, al⟩.val m = option.some a → ⟨f, al⟩.val n = option.some a	⊢ ⟨f, al⟩.val m = option.some a → ⟨f, al⟩.val n.succ = option.some a
α : Type u,	s : computation α,	a : α,	m n : ℕ,	h : m ≤ n	⊢ s.val m = option.some a → s.val n = option.some a
α : Type u,	c₁ : computation α,	a : α	⊢ (c₁.think <|> computation.return a).destruct = sum.inl a
α : Type u,	c₁ : computation α,	a : α	⊢ (c₁.think <|> computation.return a).destruct = sum.inl a
α : Type u,	c₁ : computation α,	a : α	⊢ (c₁.think.orelse (computation.return a)).destruct = sum.inl a
α : Type u,	β : Type v,	R : α → β → Prop,	C : computation α → computation β → Prop,	a : α,	cb : computation β	⊢ computation.lift_rel_aux R C (sum.inl a) cb.destruct ↔ ∃ {b : β}, b ∈ cb ∧ R a b
α : Type u,	β : Type v,	R : α → β → Prop,	C : computation α → computation β → Prop,	a : α,	cb : computation β,	b : β	⊢ computation.lift_rel_aux R C (sum.inl a) (computation.return b).destruct ↔ ∃ {b_1 : β}, b_1 ∈ computation.return b ∧ R a b_1
α : Type u,	β : Type v,	R : α → β → Prop,	C : computation α → computation β → Prop,	a : α,	cb : computation β,	b : β,	_x : ∃ {b_1 : β}, b_1 ∈ computation.return b ∧ R a b_1,	_fun_match : (∃ {b_1 : β}, b_1 ∈ computation.return b ∧ R a b_1) → computation.lift_rel_aux R C (sum.inl a) (computation.return b).destruct,	b' : β,	mb : b' ∈ computation.return b,	h : R a b'	⊢ computation.lift_rel_aux R C (sum.inl a) (computation.return b).destruct
α : Type u,	β : Type v,	R : α → β → Prop,	C : computation α → computation β → Prop,	a : α,	cb : computation β,	b : β,	_x : ∃ {b_1 : β}, b_1 ∈ computation.return b ∧ R a b_1,	_fun_match : (∃ {b_1 : β}, b_1 ∈ computation.return b ∧ R a b_1) → computation.lift_rel_aux R C (sum.inl a) (computation.return b).destruct,	b' : β,	mb : b' ∈ computation.return b,	h : R a b'	⊢ computation.lift_rel_aux R C (sum.inl a) (computation.return b').destruct
α : Type u,	β : Type v,	R : α → β → Prop,	C : computation α → computation β → Prop,	a : α,	cb : computation β,	b : β	⊢ computation.lift_rel_aux R C (sum.inl a) (computation.return b).destruct ↔ ∃ {b_1 : β}, b_1 ∈ computation.return b ∧ R a b_1		α : Type u,	β : Type v,	R : α → β → Prop,	C : computation α → computation β → Prop,	a : α,	cb cb : computation β	⊢ computation.lift_rel_aux R C (sum.inl a) (computation.think cb).destruct ↔ ∃ {b : β}, b ∈ computation.think cb ∧ R a b
α : Type u,	β : Type v,	R : α → β → Prop,	C : computation α → computation β → Prop,	a : α,	cb : computation β,	b : β,	_x : ∃ {b_1 : β}, b_1 ∈ computation.return b ∧ R a b_1,	_fun_match : (∃ {b_1 : β}, b_1 ∈ computation.return b ∧ R a b_1) → computation.lift_rel_aux R C (sum.inl a) (computation.return b).destruct,	b' : β,	mb : b' ∈ computation.return b,	h : R a b'	⊢ computation.lift_rel_aux R C (sum.inl a) (computation.return b).destruct
α : Type u,	β : Type v,	R : α → β → Prop,	C : computation α → computation β → Prop,	a : α,	cb cb : computation β	⊢ computation.lift_rel_aux R C (sum.inl a) (computation.think cb).destruct ↔ ∃ {b : β}, b ∈ computation.think cb ∧ R a b
α : Type u,	β : Type v,	R : α → β → Prop,	C : computation α → computation β → Prop,	a : α,	cb cb : computation β	⊢ computation.lift_rel_aux R C (sum.inl a) (sum.inr cb) ↔ ∃ {b : β}, b ∈ computation.think cb ∧ R a b
α : Type u,	s : seq α	⊢ s.head = prod.fst <$> s.destruct
α : Type u,	s : seq α	⊢ s.head = prod.fst <$> s.destruct
α : Type u,	s : seq α	⊢ s.nth 0 = prod.fst <$> (λ (a' : α), (a', s.tail)) <$> s.nth 0
α : Type u,	s : seq α	⊢ option.none = prod.fst <$> (λ (a' : α), (a', s.tail)) <$> option.none
α : Type u,	s : seq α,	val : α	⊢ option.some val = prod.fst <$> (λ (a' : α), (a', s.tail)) <$> option.some val
α : Type u,	s : seq α	⊢ s.head = prod.fst <$> s.destruct
α : Type u,	β : Type v,	f : β → option (α × β),	b : β	⊢ (seq.corec f b).destruct = seq.omap (seq.corec f) (f b)
α : Type u,	β : Type v,	f : β → option (α × β),	b : β	⊢ option.map (λ (a' : α), (a', seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩)) (stream.corec' (seq.corec.F f) (option.some b) 0) = seq.omap (seq.corec f) (f b)
α : Type u,	β : Type v,	f : β → option (α × β),	b : β	⊢ option.map (λ (a' : α), (a', seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩)) (seq.corec.F f (option.some b)).fst = seq.omap (seq.corec f) (f b)
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	h : f b = option.none	⊢ option.map (λ (a' : α), (a', seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩)) (seq.corec.F._match_1 option.none).fst = seq.omap (seq.corec f) option.none
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	h : f b = option.none	⊢ option.map (λ (a' : α), (a', seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩)) (seq.corec.F._match_1 option.none).fst = seq.omap (seq.corec f) option.none		case option.some	α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	s : α × β,	h : f b = option.some s	⊢ option.map (λ (a' : α), (a', seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩)) (seq.corec.F._match_1 (option.some s)).fst = seq.omap (seq.corec f) (option.some s)
α : Type u,	β : Type v,	f : β → option (α × β),	b : β	⊢ option.map (λ (a' : α), (a', seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩)) (seq.corec.F._match_1 (f b)).fst = seq.omap (seq.corec f) (f b)
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	a : α,	b' : β,	h : f b = option.some (a, b')	⊢ option.map (λ (a' : α), (a', seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩)) (seq.corec.F._match_1 (option.some (a, b'))).fst = seq.omap (seq.corec f) (option.some (a, b'))
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	s : α × β,	h : f b = option.some s	⊢ option.map (λ (a' : α), (a', seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩)) (seq.corec.F._match_1 (option.some s)).fst = seq.omap (seq.corec f) (option.some s)
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	a : α,	b' : β,	h : f b = option.some (a, b')	⊢ option.some (a, seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩) = option.some (a, seq.corec f b')
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	a : α,	b' : β,	h : f b = option.some (a, b')	⊢ seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩ = seq.corec f b'
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	a : α,	b' : β,	h : f b = option.some (a, b')	⊢ (seq.tail ⟨stream.corec' (seq.corec.F f) (option.some b), _⟩).val = (seq.corec f b').val
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	a : α,	b' : β,	h : f b = option.some (a, b')	⊢ (stream.corec' (seq.corec.F f) (option.some b)).tail = stream.corec' (seq.corec.F f) (option.some b')
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	a : α,	b' : β,	h : f b = option.some (a, b')	⊢ stream.corec' (seq.corec.F f) (seq.corec.F._match_1 (f b)).snd = stream.corec' (seq.corec.F f) (option.some b')
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	a : α,	b' : β,	h : f b = option.some (a, b')	⊢ stream.corec' (seq.corec.F f) (seq.corec.F._match_1 (option.some (a, b'))).snd = stream.corec' (seq.corec.F f) (option.some b')
α : Type u,	β : Type v,	f : β → option (α × β),	b : β,	a : α,	b' : β,	h : f b = option.some (a, b')	⊢ stream.corec' (seq.corec.F f) (seq.corec.F f (option.some b)).snd = stream.corec' (seq.corec.F f) (option.some b')
α : Type u,	s₁ s₂ : seq α,	a : α,	h : a ∈ s₁	⊢ a ∈ s₁.append s₂
α : Type u,	s₁ s₂ : seq α,	a : α,	h : a ∈ s₁	⊢ a ∈ s₁.append s₂
α : Type u,	s₁ s₂ : seq α,	a : α,	h : a ∈ s₁	⊢ ∀ (b : α) (s' : seq α), a = b ∨ a ∈ s'.append s₂ → a ∈ (seq.cons b s').append s₂
α : Type u,	s₁ s₂ : seq α,	a : α,	h : a ∈ s₁,	b : α,	s' : seq α,	ᾰ : a = b ∨ a ∈ s'.append s₂	⊢ a ∈ (seq.cons b s').append s₂
α : Type u,	s₁ s₂ : seq α,	a : α,	h : a ∈ s₁	⊢ a ∈ s₁.append s₂
α : Type u,	s t : wseq α	⊢ (s.append t).destruct = s.destruct.bind (wseq.destruct_append.aux t)
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	h : ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) c1.destruct c2.destruct
α : Type u,	s t : wseq α	⊢ computation.is_bisimulation (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t))
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) c1.destruct c2.destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) (s.append t).destruct.destruct (s.destruct.bind (wseq.destruct_append.aux t)).destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) (s.append t).destruct.destruct (s.destruct.bind (wseq.destruct_append.aux t)).destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) (wseq.nil.append t).destruct.destruct (wseq.nil.destruct.bind (wseq.destruct_append.aux t)).destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t),	a : α,	s : wseq α	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) ((wseq.cons a s).append t).destruct.destruct ((wseq.cons a s).destruct.bind (wseq.destruct_append.aux t)).destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t),	s : wseq α	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) ((wseq.think s).append t).destruct.destruct ((wseq.think s).destruct.bind (wseq.destruct_append.aux t)).destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) t.destruct.destruct t.destruct.destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) wseq.nil.destruct.destruct wseq.nil.destruct.destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t),	b : α,	t : wseq α	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) (wseq.cons b t).destruct.destruct (wseq.cons b t).destruct.destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t),	t : wseq α	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) (wseq.think t).destruct.destruct (wseq.think t).destruct.destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) t.destruct.destruct t.destruct.destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t),	t : wseq α	⊢ ∃ (s t_1 : wseq α), wseq.destruct t = (s.append t_1).destruct ∧ wseq.destruct t = s.destruct.bind (wseq.destruct_append.aux t_1)
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t),	t : wseq α	⊢ wseq.destruct t = (wseq.nil.append t).destruct
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t),	t : wseq α	⊢ wseq.destruct t = wseq.nil.destruct.bind (wseq.destruct_append.aux t)
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)	⊢ computation.bisim_o (λ (c1 c2 : computation (option (α × wseq α))), ∃ (s t : wseq α), c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t)) t.destruct.destruct t.destruct.destruct		α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t),	s : wseq α	⊢ ∃ (s_1 t_1 : wseq α), (wseq.append s t).destruct = (s_1.append t_1).destruct ∧ (wseq.destruct s).bind (wseq.destruct_append.aux t) = s_1.destruct.bind (wseq.destruct_append.aux t_1)
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t),	t : wseq α	⊢ ∃ (s t_1 : wseq α), wseq.destruct t = (s.append t_1).destruct ∧ wseq.destruct t = s.destruct.bind (wseq.destruct_append.aux t_1)
α : Type u,	s t : wseq α,	c1 c2 : computation (option (α × wseq α)),	s t : wseq α,	h : c1 = (s.append t).destruct ∧ c2 = s.destruct.bind (wseq.destruct_append.aux t),	s : wseq α	⊢ ∃ (s_1 t_1 : wseq α), (wseq.append s t).destruct = (s_1.append t_1).destruct ∧ (wseq.destruct s).bind (wseq.destruct_append.aux t) = s_1.destruct.bind (wseq.destruct_append.aux t_1)
α : Type u,	s : wseq α	⊢ (wseq.ret s).join ~ s
α : Type u,	s : wseq α	⊢ s.think ~ s
α : Type u,	s : wseq α	⊢ (wseq.ret s).join ~ s
α : Type u,	a : α,	s : wseq α	⊢ (wseq.cons a s).destruct.destruct = sum.inl (option.some (a, s))
α : Type u,	s : wseq α,	n : ℕ	⊢ s.tail.drop n = s.drop (n + 1)
α : Type u,	s : wseq α,	n : ℕ	⊢ s.tail.drop n = s.drop (n + 1)
α : Type u,	s : wseq α,	n : ℕ	⊢ s.tail.drop n = s.drop (1 + n)
α : Type u,	s : wseq α,	n : ℕ	⊢ s.drop (1 + n) = s.tail.drop n
α : Type u,	s : wseq α,	n : ℕ	⊢ s.tail.drop n = s.drop (n + 1)
α : Type u,	s : wseq α,	S : wseq (wseq α)	⊢ (wseq.join._match_1 <$> wseq.cons s S).join = seq.cons option.none (s.append (wseq.join._match_1 <$> S).join)
α : Type u,	s : wseq α,	S : wseq (wseq α)	⊢ (seq.map wseq.join._match_1 (wseq.cons s S)).join = seq.cons option.none (s.append (seq.map wseq.join._match_1 S).join)
α : Type u,	s : wseq α,	S : wseq (wseq α)	⊢ (wseq.cons s S).join = (s.append S.join).think
α : Type u,	β : Type v,	R : α → β → Prop,	s : wseq α,	t : wseq β,	H : wseq.lift_rel R s t,	b : β,	h : b ∈ t	⊢ ∃ {a : α}, a ∈ s ∧ R a b
α : Type u,	β : Type v,	R : α → β → Prop,	s : wseq α,	t : wseq β,	b : β,	h : b ∈ t,	H : function.swap (wseq.lift_rel (λ (x : β) (y : α), R y x)) s t	⊢ ∃ {a : α}, a ∈ s ∧ R a b
α : Type u,	β : Type v,	R : α → β → Prop,	s : wseq α,	t : wseq β,	H : wseq.lift_rel R s t,	b : β,	h : b ∈ t	⊢ ∃ {a : α}, a ∈ s ∧ R a b
α : Type u,	β : Type v,	f : α → β,	b : β,	exists_of_mem_map : ∀ {s : wseq α}, b ∈ wseq.map f s → (∃ (a : α), a ∈ s ∧ f a = b),	g : stream (option (option α)),	al : g.is_seq,	h : b ∈ wseq.map f ⟨g, al⟩,	_let_match : (∃ (a : option α), a ∈ ⟨g, al⟩ ∧ option.map f a = option.some b) → (∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b),	o : option α,	om : o ∈ ⟨g, al⟩,	oe : option.map f o = option.some b	⊢ ∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b
α : Type u,	β : Type v,	f : α → β,	b : β,	exists_of_mem_map : ∀ {s : wseq α}, b ∈ wseq.map f s → (∃ (a : α), a ∈ s ∧ f a = b),	g : stream (option (option α)),	al : g.is_seq,	h : b ∈ wseq.map f ⟨g, al⟩,	_let_match : (∃ (a : option α), a ∈ ⟨g, al⟩ ∧ option.map f a = option.some b) → (∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b),	o : option α,	om : o ∈ ⟨g, al⟩,	oe : option.map f o = option.some b	⊢ ∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b
α : Type u,	β : Type v,	f : α → β,	b : β,	exists_of_mem_map : ∀ {s : wseq α}, b ∈ wseq.map f s → (∃ (a : α), a ∈ s ∧ f a = b),	g : stream (option (option α)),	al : g.is_seq,	h : b ∈ wseq.map f ⟨g, al⟩,	_let_match : (∃ (a : option α), a ∈ ⟨g, al⟩ ∧ option.map f a = option.some b) → (∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b),	om : option.none ∈ ⟨g, al⟩,	oe : option.map f option.none = option.some b	⊢ ∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b
α : Type u,	β : Type v,	f : α → β,	b : β,	exists_of_mem_map : ∀ {s : wseq α}, b ∈ wseq.map f s → (∃ (a : α), a ∈ s ∧ f a = b),	g : stream (option (option α)),	al : g.is_seq,	h : b ∈ wseq.map f ⟨g, al⟩,	_let_match : (∃ (a : option α), a ∈ ⟨g, al⟩ ∧ option.map f a = option.some b) → (∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b),	a : α,	om : option.some a ∈ ⟨g, al⟩,	oe : option.map f (option.some a) = option.some b	⊢ ∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b
α : Type u,	β : Type v,	f : α → β,	b : β,	exists_of_mem_map : ∀ {s : wseq α}, b ∈ wseq.map f s → (∃ (a : α), a ∈ s ∧ f a = b),	g : stream (option (option α)),	al : g.is_seq,	h : b ∈ wseq.map f ⟨g, al⟩,	_let_match : (∃ (a : option α), a ∈ ⟨g, al⟩ ∧ option.map f a = option.some b) → (∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b),	a : α,	om : option.some a ∈ ⟨g, al⟩,	oe : option.map f (option.some a) = option.some b,	h' : f a = b	⊢ ∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b
α : Type u,	β : Type v,	f : α → β,	b : β,	exists_of_mem_map : ∀ {s : wseq α}, b ∈ wseq.map f s → (∃ (a : α), a ∈ s ∧ f a = b),	g : stream (option (option α)),	al : g.is_seq,	h : b ∈ wseq.map f ⟨g, al⟩,	_let_match : (∃ (a : option α), a ∈ ⟨g, al⟩ ∧ option.map f a = option.some b) → (∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b),	o : option α,	om : o ∈ ⟨g, al⟩,	oe : option.map f o = option.some b	⊢ ∃ (a : α), a ∈ ⟨g, al⟩ ∧ f a = b
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	T : set α,	hT' : T = set.Union S,	u : ↥T → ↥T,	ui : Π (i : ι), ↥(S i) → ↥(S i),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	x : ↥T	⊢ set.Union_lift S f hf T _ (u x) = uβ (set.Union_lift S f hf T _ x)
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S)	⊢ set.Union_lift S f hf (set.Union S) _ (u x) = uβ (set.Union_lift S f hf (set.Union S) _ x)
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S),	i : ι,	hi : ↑x ∈ S i	⊢ set.Union_lift S f hf (set.Union S) _ (u x) = uβ (set.Union_lift S f hf (set.Union S) _ x)
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S),	i : ι,	hi : ↑x ∈ S i	⊢ set.Union_lift S f hf (set.Union S) _ (u x) = f i (ui i ⟨↑x, hi⟩)
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S),	i : ι,	hi : ↑x ∈ S i	⊢ x = set.inclusion _ ⟨↑x, hi⟩
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	i : ι,	x_val : α,	x_property : x_val ∈ set.Union S,	hi : ↑⟨x_val, x_property⟩ ∈ S i	⊢ ⟨x_val, x_property⟩ = set.inclusion _ ⟨↑⟨x_val, x_property⟩, hi⟩
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S),	i : ι,	hi : ↑x ∈ S i	⊢ x = set.inclusion _ ⟨↑x, hi⟩		α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S),	i : ι,	hi : ↑x ∈ S i,	this : x = set.inclusion _ ⟨↑x, hi⟩	⊢ set.Union_lift S f hf (set.Union S) _ (u x) = f i (ui i ⟨↑x, hi⟩)
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S),	i : ι,	hi : ↑x ∈ S i,	this : x = set.inclusion _ ⟨↑x, hi⟩	⊢ set.Union_lift S f hf (set.Union S) _ (u x) = f i (ui i ⟨↑x, hi⟩)
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S),	i : ι,	hi : ↑x ∈ S i,	this : x = set.inclusion _ ⟨↑x, hi⟩	⊢ ↑(set.inclusion _ (ui i ⟨↑x, hi⟩)) ∈ S i		α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S),	i : ι,	hi : ↑x ∈ S i,	this : x = set.inclusion _ ⟨↑x, hi⟩,	hx' : ↑(set.inclusion _ (ui i ⟨↑x, hi⟩)) ∈ S i	⊢ set.Union_lift S f hf (set.Union S) _ (u x) = f i (ui i ⟨↑x, hi⟩)
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S),	i : ι,	hi : ↑x ∈ S i,	this : x = set.inclusion _ ⟨↑x, hi⟩,	hx' : ↑(set.inclusion _ (ui i ⟨↑x, hi⟩)) ∈ S i	⊢ set.Union_lift S f hf (set.Union S) _ (u x) = ?m_1
α : Type u_1,	ι : Type u_2,	β : Type u_3,	S : ι → set α,	f : Π (i : ι), ↥(S i) → β,	hf : ∀ (i j : ι) (x : α) (hxi : x ∈ S i) (hxj : x ∈ S j), f i ⟨x, hxi⟩ = f j ⟨x, hxj⟩,	ui : Π (i : ι), ↥(S i) → ↥(S i),	uβ : β → β,	h : ∀ (i : ι) (x : ↥(S i)), f i (ui i x) = uβ (f i x),	u : ↥(set.Union S) → ↥(set.Union S),	hui : ∀ (i : ι) (x : ↥(S i)), u (set.inclusion _ x) = set.inclusion _ (ui i x),	x : ↥(set.Union S),	i : ι,	hi : ↑x ∈ S i,	this : x = set.inclusion _ ⟨↑x, hi⟩,	hx' : ↑(set.inclusion _ (ui i ⟨↑x, hi⟩)) ∈ S i	⊢ set.Union_lift S f hf (set.Union S) _ (u x) = f i (ui i ⟨↑x, hi⟩)
α : Type u,	β : Type v,	f : α → β,	s : set α,	p : β → Prop	⊢ (∀ (y : β), y ∈ f '' s → p y) ↔ ∀ (x : α), x ∈ s → p (f x)
α : Type u,	β : Type v,	s t : set α,	f : α → β,	hf : function.injective f	⊢ f '' s ⊆ f '' t ↔ s ⊆ t
α : Type u,	β : Type v,	s t : set α,	f : α → β,	hf : function.injective f,	h : f '' s ⊆ f '' t	⊢ s ⊆ t
α : Type u,	β : Type v,	s t : set α,	f : α → β,	hf : function.injective f,	h : f '' s ⊆ f '' t	⊢ f ⁻¹' (f '' s) ⊆ f ⁻¹' (f '' t)
α : Type u_1,	s : set α,	x : α,	hx : x ∈ s	⊢ x ∈ s
α : Type u_1,	s t : set α	⊢ s = t → s ⊆ t
α : Type u_1,	t : set α,	p : set α → Prop	⊢ (∃ (s : set ↥t), p (coe '' s)) ↔ ∃ (s : set α), s ⊆ t ∧ p s
α : Type u_1,	t : set α,	p : set α → Prop,	s : set ↥t,	hs : p (coe '' s)	⊢ ∃ (s : set α), s ⊆ t ∧ p s
α : Type u_1,	t : set α,	p : set α → Prop	⊢ (∃ (s : set ↥t), p (coe '' s)) → (∃ (s : set α), s ⊆ t ∧ p s)
α : Type u_1,	t : set α,	p : set α → Prop,	s : set ↥t,	hs : p (coe '' s)	⊢ t = set.range coe
α : Type u_1,	t : set α,	p : set α → Prop	⊢ (∃ (s : set ↥t), p (coe '' s)) → (∃ (s : set α), s ⊆ t ∧ p s)		α : Type u_1,	t : set α,	p : set α → Prop	⊢ (∃ (s : set α), s ⊆ t ∧ p s) → (∃ (s : set ↥t), p (coe '' s))
α : Type u_1,	t : set α,	p : set α → Prop,	s : set ↥t,	hs : p (coe '' s)	⊢ coe '' s ⊆ t
α : Type u_1,	t : set α,	p : set α → Prop,	s : set α,	hs₁ : s ⊆ t,	hs₂ : p s	⊢ ∃ (s : set ↥t), p (coe '' s)
α : Type u_1,	t : set α,	p : set α → Prop	⊢ (∃ (s : set α), s ⊆ t ∧ p s) → (∃ (s : set ↥t), p (coe '' s))
α : Type u_1,	t : set α,	p : set α → Prop,	s : set α,	hs₁ : s ⊆ t,	hs₂ : p s	⊢ p s		α : Type u_1,	t : set α,	p : set α → Prop,	s : set α,	hs₁ : s ⊆ t,	hs₂ : p s	⊢ s ⊆ set.range coe
α : Type u_1,	t : set α,	p : set α → Prop,	s : set α,	hs₁ : s ⊆ t,	hs₂ : p s	⊢ p (coe '' (coe ⁻¹' s))
α : Type u_1,	t : set α,	p : set α → Prop,	s : set α,	hs₁ : s ⊆ t,	hs₂ : p s	⊢ s ⊆ set.range coe
α : Type u_1,	t : set α,	p : set α → Prop,	s : set α,	hs₁ : s ⊆ t,	hs₂ : p s	⊢ s ⊆ t
α : Type u_1,	s t : set α	⊢ (coe ⁻¹' t).nonempty ↔ (s ∩ t).nonempty
α : Type u_1,	β : Type u_2,	t : set β,	x : α × β	⊢ x ∈ ∅.prod t ↔ x ∈ ∅
α : Type u_1,	β : Type u_2,	t : set β	⊢ ∅.prod t = ∅
α : Type u_1,	β : Type u_2,	s : set α,	t : set β,	x : α,	y : β	⊢ (x, y) ∈ prod.swap ⁻¹' t.prod s ↔ (x, y) ∈ s.prod t
α : Type u_1,	β : Type u_2,	s : set α,	t : set β	⊢ prod.swap ⁻¹' t.prod s = s.prod t
α : Type u_1,	β : Type u_2,	γ : Type u_3,	f : α → β → γ,	t : set β	⊢ ∀ (x : γ), x ∈ set.image2 f ∅ t ↔ x ∈ ∅
α : Type u_1,	β : Type u_2,	γ : Type u_3,	f : α → β → γ,	s : set α	⊢ ∀ (x : γ), x ∈ set.image2 f s ∅ ↔ x ∈ ∅
α : Type u_1,	β : Type u_2,	γ : Type u_3,	f : α → β → γ,	t : set β,	a : α,	x : γ	⊢ x ∈ set.image2 f {a} t ↔ x ∈ f a '' t
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	s : set α,	t : set β,	f : γ → β → δ,	g : α → γ	⊢ set.image2 f (g '' s) t = set.image2 (λ (a : α) (b : β), f (g a) b) s t
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	s : set α,	t : set β,	f : γ → β → δ,	g : α → γ,	x : δ	⊢ x ∈ set.image2 f (g '' s) t ↔ x ∈ set.image2 (λ (a : α) (b : β), f (g a) b) s t
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	s : set α,	t : set β,	f : γ → β → δ,	g : α → γ,	b : β,	a : α,	ha : a ∈ s,	hb : b ∈ t	⊢ f (g a) b ∈ set.image2 (λ (a : α) (b : β), f (g a) b) s t
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	s : set α,	t : set β,	f : γ → β → δ,	g : α → γ,	x : δ	⊢ x ∈ set.image2 f (g '' s) t → x ∈ set.image2 (λ (a : α) (b : β), f (g a) b) s t
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	s : set α,	t : set β,	f : γ → β → δ,	g : α → γ,	x : δ	⊢ x ∈ set.image2 f (g '' s) t → x ∈ set.image2 (λ (a : α) (b : β), f (g a) b) s t		α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	s : set α,	t : set β,	f : γ → β → δ,	g : α → γ,	x : δ	⊢ x ∈ set.image2 (λ (a : α) (b : β), f (g a) b) s t → x ∈ set.image2 f (g '' s) t
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	s : set α,	t : set β,	f : γ → β → δ,	g : α → γ,	a : α,	b : β,	ha : a ∈ s,	hb : b ∈ t	⊢ (λ (a : α) (b : β), f (g a) b) a b ∈ set.image2 f (g '' s) t
α : Type u_1,	β : Type u_2,	γ : Type u_3,	δ : Type u_4,	s : set α,	t : set β,	f : γ → β → δ,	g : α → γ,	x : δ	⊢ x ∈ set.image2 (λ (a : α) (b : β), f (g a) b) s t → x ∈ set.image2 f (g '' s) t
α : Type u,	s t u : set α	⊢ ∀ (a : α), a ∈ s ∪ t → a ∈ u ↔ (a ∈ s → a ∈ u) ∧ (a ∈ t → a ∈ u)
α : Type u,	β : Type v,	s : set α,	t : Π (x : α), x ∈ s → set β,	hs : s.countable,	ht : ∀ (a : α) (H : a ∈ s), (t a H).countable	⊢ (⋃ (a : α) (H : a ∈ s), t a H).countable
α : Type u,	β : Type v,	s : set α,	t : Π (x : α), x ∈ s → set β,	hs : s.countable,	ht : ∀ (a : α) (H : a ∈ s), (t a H).countable	⊢ (⋃ (x : ↥s), t ↑x _).countable
α : Type u,	β : Type v,	s : set α,	t : Π (x : α), x ∈ s → set β,	hs : s.countable,	ht : ∀ (a : α) (H : a ∈ s), (t a H).countable,	_inst : encodable ↥s	⊢ ∀ (a : ↥s), (t ↑a _).countable
α : Type u,	β : Type v,	s : set α,	t : Π (x : α), x ∈ s → set β,	hs : s.countable,	ht : ∀ (a : α) (H : a ∈ s), (t a H).countable,	_inst : encodable ↥s	⊢ (⋃ (x : ↥s), t ↑x _).countable
α : Type u,	β : Type v,	s : set α,	t : set β,	hs : s.countable,	ht : t.countable	⊢ (s.prod t).countable
α : Type u,	β : Type v,	s : set α,	t : set β,	hs : s.countable,	ht : t.countable,	_inst : encodable ↥s	⊢ (s.prod t).countable
α : Type u,	β : Type v,	s : set α,	t : set β,	hs : s.countable,	ht : t.countable,	_inst : encodable ↥s,	_inst_1 : encodable ↥t	⊢ encodable (↥s × ↥t)
α : Type u,	β : Type v,	s : set α,	t : set β,	hs : s.countable,	ht : t.countable,	_inst : encodable ↥s,	_inst_1 : encodable ↥t	⊢ (s.prod t).countable
α : Type u,	β : Type v,	s : set α,	t : set β,	hs : s.countable,	ht : t.countable,	_inst : encodable ↥s,	_inst_1 : encodable ↥t	⊢ encodable (↥s × ↥t)		α : Type u,	β : Type v,	s : set α,	t : set β,	hs : s.countable,	ht : t.countable,	_inst : encodable ↥s,	_inst_1 : encodable ↥t,	_inst_2 : encodable (↥s × ↥t)	⊢ (s.prod t).countable
α : Type u,	β : Type v,	s : set α,	t : set β,	hs : s.countable,	ht : t.countable,	_inst : encodable ↥s,	_inst_1 : encodable ↥t,	_inst_2 : encodable (↥s × ↥t)	⊢ (s.prod t).countable
α : Type u,	β : Type v,	s : set α,	t : set β,	hs : s.countable,	ht : t.countable,	_inst : encodable ↥s,	_inst_1 : encodable ↥t,	_inst_2 : encodable (↥s × ↥t)	⊢ set.range (prod.map coe coe) = s.prod t
α : Type u,	β : Type v,	s : set α,	t : set β,	hs : s.countable,	ht : t.countable,	_inst : encodable ↥s,	_inst_1 : encodable ↥t,	_inst_2 : encodable (↥s × ↥t),	this : set.range (prod.map coe coe) = s.prod t	⊢ (s.prod t).countable
α : Type u,	β : Type v,	s : set α,	t : set β,	hs : s.countable,	ht : t.countable,	_inst : encodable ↥s,	_inst_1 : encodable ↥t,	_inst_2 : encodable (↥s × ↥t),	this : set.range (prod.map coe coe) = s.prod t	⊢ (set.range (prod.map coe coe)).countable
α : Type u,	_inst_1 : encodable α,	s : set α	⊢ encodable ↥s
α : Type u,	β : Type v,	_inst_1 : linear_order β,	s : set α,	f : α → β,	h1 : s.finite,	exists_min_image : s.nonempty → (∃ (a : α) (H : a ∈ s), ∀ (b : α), b ∈ s → f a ≤ f b),	x : α,	hx : x ∈ s	⊢ ∃ (a : α) (H : a ∈ s), ∀ (b : α), b ∈ s → f a ≤ f b
α : Type u,	β : Type v,	s : set α,	t : set β,	f : α → β,	f' : β → α,	h : set.left_inv_on f' f s,	hf : set.surj_on f s t,	y : β,	hy : y ∈ t,	_let_match : y ∈ f '' s → f' y ∈ s,	x : α,	hs : x ∈ s,	hx : f x = y	⊢ f' y ∈ s
α : Type u,	β : Type v,	s : set α,	t : set β,	f : α → β,	_inst_1 : nonempty α,	h : set.surj_on f s t	⊢ set.inv_on (function.inv_fun_on f s) f (function.inv_fun_on f s '' t) t
α : Type u,	β : Type v,	s : set α,	t : set β,	f : α → β,	_inst_1 : nonempty α,	h : set.surj_on f s t	⊢ set.left_inv_on (function.inv_fun_on f s) f (function.inv_fun_on f s '' t)
α : Type u,	β : Type v,	s : set α,	t : set β,	f : α → β,	_inst_1 : nonempty α,	h : set.surj_on f s t,	y : β,	hy : y ∈ t	⊢ function.inv_fun_on f s (f (function.inv_fun_on f s y)) = function.inv_fun_on f s y
α : Type u,	β : Type v,	fa : α → α,	fb : β → β,	f : α → β,	h : function.semiconj f fa fb,	ha : function.injective fa,	hf : set.inj_on f (fa '' set.univ)	⊢ set.inj_on fb (f '' set.univ)
α : Type u,	β : Type v,	fa : α → α,	fb : β → β,	f : α → β,	h : function.semiconj f fa fb,	ha : function.injective fa,	hf : set.inj_on f (set.range fa)	⊢ set.inj_on fb (set.range f)
α : Type u,	_inst_1 : linear_order α,	a b c : α	⊢ set.Ioc a b ∪ set.Ioc a c = set.Ioc a (linear_order.max b c)
α : Type u,	_inst_1 : linear_order α,	a b c : α	⊢ linear_order.min a b ≤ linear_order.max a c
α : Type u,	_inst_1 : linear_order α,	a b c : α	⊢ linear_order.min a c ≤ linear_order.max a b
α : Type u,	_inst_1 : linear_order α,	a b c : α	⊢ set.Ioc a b ∪ set.Ioc a c = set.Ioc a (linear_order.max b c)
α : Type u_1,	β : Type u_2,	_inst_1 : preorder α,	_inst_2 : preorder β,	e : α ≃o β,	a b : β	⊢ ⇑e ⁻¹' set.Ico a b = set.Ico (⇑(e.symm) a) (⇑(e.symm) b)
α : Type u_1,	β : Type u_2,	_inst_1 : preorder α,	_inst_2 : preorder β,	e : α ≃o β,	a b : α	⊢ ⇑e '' set.Ioo a b = set.Ioo (⇑e a) (⇑e b)
α : Type u,	_inst_1 : partial_order α,	a b : α	⊢ set.Icc a b \ {a, b} = set.Ioo a b
α : Type u,	_inst_1 : partial_order α,	a b : α,	h : a ≤ b	⊢ set.Icc a b \ set.Ioc a b = {a}
α : Type u,	_inst_1 : partial_order α,	a b : α,	hab : a ≤ b	⊢ set.Ico a b ∪ {b} = set.Icc a b
α : Type u,	_inst_1 : linear_order α,	a b : α	⊢ set.Ioi a \ set.Ici b = set.Ioo a b
α : Type u,	_inst_1 : linear_order α,	a b c : α,	h : c < linear_order.max a b	⊢ set.Ioo a b ∪ set.Ioi c = set.Ioi (linear_order.min a c)
α : Type u,	_inst_1 : linear_order α,	a b c : α,	h : c < linear_order.max a b,	hab : a ≤ b	⊢ set.Ioo a b ∪ set.Ioi c = set.Ioi (linear_order.min a c)
α : Type u,	_inst_1 : linear_order α,	a b c : α,	h : c < linear_order.max a b,	hab : b ≤ a	⊢ set.Ioo a b ∪ set.Ioi c = set.Ioi (linear_order.min a c)
α : Type u,	_inst_1 : linear_order α,	a b c : α,	h : c < linear_order.max a b	⊢ set.Ioo a b ∪ set.Ioi c = set.Ioi (linear_order.min a c)
α : Type u,	_inst_1 : linear_order α,	a b c : α,	hab : a ≤ b,	h : c < b	⊢ set.Ioo a b ∪ set.Ioi c = set.Ioi (linear_order.min a c)		case or.inr	α : Type u,	_inst_1 : linear_order α,	a b c : α,	hab : b ≤ a,	h : c < a	⊢ set.Ioo a b ∪ set.Ioi c = set.Ioi (linear_order.min a c)
α : Type u,	_inst_1 : linear_order α,	a b c : α,	hab : a ≤ b,	h : c < b	⊢ set.Ioo a b ∪ set.Ioi c = set.Ioi (linear_order.min a c)
α : Type u,	_inst_1 : linear_order α,	a b c : α,	hab : b ≤ a,	h : c < a	⊢ set.Ioo a b ∪ set.Ioi c = set.Ioi (linear_order.min a c)
α : Type u,	_inst_1 : linear_order α,	a b c : α,	hab : b ≤ a,	h : c < a	⊢ set.Ioo a b ∪ set.Ioi c = set.Ioi (linear_order.min c a)
G : Type u,	_inst_1 : ordered_add_comm_group G,	a b c : G	⊢ (λ (x : G), x + a) ⁻¹' set.Ioo b c = set.Ioo (b - a) (c - a)
G : Type u,	_inst_1 : ordered_add_comm_group G,	a b c : G	⊢ (λ (x : G), a + x) '' set.Ioo b c = set.Ioo (a + b) (a + c)
k : Type u,	_inst_1 : linear_ordered_field k,	a b c : k,	hab : a ≤ b,	hc : 0 ≤ c	⊢ (λ (x : k), x * c) '' set.Icc a b = set.Icc (a * c) (b * c)
k : Type u,	_inst_1 : linear_ordered_field k,	a b c : k,	hab : a ≤ b,	hc : 0 ≤ c,	h : 0 = c	⊢ (λ (x : k), x * c) '' set.Icc a b = set.Icc (a * c) (b * c)
k : Type u,	_inst_1 : linear_ordered_field k,	a b c : k,	hab : a ≤ b,	hc : 0 ≤ c,	h : 0 = c	⊢ (λ (x : k), x * c) '' set.Icc a b = set.Icc (a * c) (b * c)		case or.inr	k : Type u,	_inst_1 : linear_ordered_field k,	a b c : k,	hab : a ≤ b,	hc : 0 ≤ c,	h : 0 < c	⊢ (λ (x : k), x * c) '' set.Icc a b = set.Icc (a * c) (b * c)
k : Type u,	_inst_1 : linear_ordered_field k,	a b : k,	hab : a ≤ b,	hc : 0 ≤ 0	⊢ (λ (x : k), x * 0) '' set.Icc a b = set.Icc (a * 0) (b * 0)
k : Type u,	_inst_1 : linear_ordered_field k,	a b c : k,	hab : a ≤ b,	hc : 0 ≤ c,	h : 0 < c	⊢ (λ (x : k), x * c) '' set.Icc a b = set.Icc (a * c) (b * c)
α : Type u_1,	_inst_1 : preorder α,	_inst_2 : densely_ordered α,	s : set α,	hs : s.ord_connected	⊢ ∀ (a₁ a₂ : ↥s), a₁ < a₂ → (∃ (a : ↥s), a₁ < a ∧ a < a₂)
α : Type u_1,	_inst_1 : preorder α,	_inst_2 : densely_ordered α,	s : set α,	hs : s.ord_connected,	a₁ a₂ : ↥s,	ha : a₁ < a₂	⊢ ∃ (a : ↥s), a₁ < a ∧ a < a₂
α : Type u_1,	_inst_1 : preorder α,	_inst_2 : densely_ordered α,	s : set α,	hs : s.ord_connected,	a₁ a₂ : ↥s,	ha : a₁ < a₂,	ha' : ↑a₁ < ↑a₂	⊢ ∃ (a : ↥s), a₁ < a ∧ a < a₂
α : Type u_1,	_inst_1 : preorder α,	_inst_2 : densely_ordered α,	s : set α,	hs : s.ord_connected,	a₁ a₂ : ↥s,	ha : a₁ < a₂,	ha' : ↑a₁ < ↑a₂,	x : α,	ha₁x : ↑a₁ < x,	hxa₂ : x < ↑a₂	⊢ ∃ (a : ↥s), a₁ < a ∧ a < a₂
α : Type u_1,	_inst_1 : preorder α,	_inst_2 : densely_ordered α,	s : set α,	hs : s.ord_connected,	a₁ a₂ : ↥s,	ha : a₁ < a₂,	ha' : ↑a₁ < ↑a₂,	x : α,	ha₁x : ↑a₁ < x,	hxa₂ : x < ↑a₂	⊢ x ∈ s
α : Type u,	_inst_1 : linear_order α,	a b : α	⊢ a ≤ b → [a, b] = [b, a]
α : Type u,	_inst_1 : linear_order α,	a b : α	⊢ b ≤ a → [a, b] = [b, a]
α : Type u_1,	β : Type u_2,	s : set α,	C : set (set β)	⊢ s.prod (⋃₀ C) = ⋃₀((λ (t : set β), s.prod t) '' C)
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	hv : (set.univ.pi v).nonempty,	i : ι	⊢ ((λ (x : Π (i : ι), α i), x i) '' ⋂ (k : ι), (λ (x : Π (j : ι), α j), x k) ⁻¹' v k) = v i
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	hv : (set.univ.pi v).nonempty,	i : ι,	_inst : Π (a : Prop), decidable a	⊢ ((λ (x : Π (i : ι), α i), x i) '' ⋂ (k : ι), (λ (x : Π (j : ι), α j), x k) ⁻¹' v k) = v i
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	hv : (set.univ.pi v).nonempty,	i : ι,	_inst : Π (a : Prop), decidable a	⊢ ((λ (x : Π (i : ι), α i), x i) '' ⋂ (k : ι), (λ (x : Π (j : ι), α j), x k) ⁻¹' v k) ⊆ v i		ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	hv : (set.univ.pi v).nonempty,	i : ι,	_inst : Π (a : Prop), decidable a	⊢ v i ⊆ (λ (x : Π (i : ι), α i), x i) '' ⋂ (k : ι), (λ (x : Π (j : ι), α j), x k) ⁻¹' v k
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	hv : (set.univ.pi v).nonempty,	i : ι,	_inst : Π (a : Prop), decidable a	⊢ ((λ (x : Π (i : ι), α i), x i) '' ⋂ (k : ι), (λ (x : Π (j : ι), α j), x k) ⁻¹' v k) ⊆ v i
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	hv : (set.univ.pi v).nonempty,	i : ι,	_inst : Π (a : Prop), decidable a	⊢ v i ⊆ (λ (x : Π (i : ι), α i), x i) '' ⋂ (k : ι), (λ (x : Π (j : ι), α j), x k) ⁻¹' v k
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	hv : (set.univ.pi v).nonempty,	i : ι,	_inst : Π (a : Prop), decidable a,	y : α i,	y_in : y ∈ v i	⊢ y ∈ (λ (x : Π (i : ι), α i), x i) '' ⋂ (k : ι), (λ (x : Π (j : ι), α j), x k) ⁻¹' v k
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	hv : (set.univ.pi v).nonempty,	i : ι,	_inst : Π (a : Prop), decidable a,	y : α i,	y_in : y ∈ v i	⊢ ∃ (x : Π (i : ι), α i), (∀ (i : ι), x i ∈ v i) ∧ x i = y
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	i : ι,	_inst : Π (a : Prop), decidable a,	y : α i,	y_in : y ∈ v i,	z : Π (i : ι), α i,	hz : z ∈ set.univ.pi v	⊢ ∃ (x : Π (i : ι), α i), (∀ (i : ι), x i ∈ v i) ∧ x i = y
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	i : ι,	_inst : Π (a : Prop), decidable a,	y : α i,	y_in : y ∈ v i,	z : Π (i : ι), α i,	hz : z ∈ set.univ.pi v	⊢ ∀ (i_1 : ι), function.update z i y i_1 ∈ v i_1
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	i : ι,	_inst : Π (a : Prop), decidable a,	y : α i,	y_in : y ∈ v i,	z : Π (i : ι), α i,	hz : z ∈ set.univ.pi v,	j : ι,	hj : j ≠ i	⊢ z j ∈ v j
ι : Type u_1,	α : ι → Type u_2,	v : Π (i : ι), set (α i),	i : ι,	_inst : Π (a : Prop), decidable a,	y : α i,	y_in : y ∈ v i,	z : Π (i : ι), α i,	hz : z ∈ set.univ.pi v	⊢ (λ (i : ι) (t : α i), t ∈ v i) i y ∧ ∀ (x : ι), x ≠ i → (λ (i : ι) (t : α i), t ∈ v i) x (z x)
α : Type u_1,	β : Type u_2,	b : β,	p : β → Prop,	s : Π (x : β), x = b ∨ p x → set α	⊢ (⋃ (x : β) (h : x = b ∨ p x), s x h) = s b _ ∪ ⋃ (x : β) (h : p x), s x _
α : Type u_1,	s : set α	⊢ (⋃ (h : s.nonempty), s) = s
α : Type u_1,	β : Type u_2,	s : set α,	t : α → set β	⊢ (⋂ (i : α) (H : i ∈ s), t i)ᶜ = ⋃ (i : α) (H : i ∈ s), (t i)ᶜ
α : Type u,	r : α → α → Prop,	hr : symmetric r,	a b : α	⊢ pairwise (r on λ (c : bool), cond c a b) ↔ r a b
α : Type u_1,	β : Type u_2,	r : setoid α,	f : quotient r → β,	x y : α,	h : r.rel x y	⊢ (setoid.ker (f ∘ quotient.mk)).rel x y
α : Type u_1,	β : Type u_2,	r : setoid α,	f : α → β,	H : r ≤ setoid.ker f,	g : quotient r → β,	Hg : f = g ∘ quotient.mk	⊢ quotient.lift f H = g
α : Type u_1,	β : Type u_2,	r : setoid α,	f : α → β,	H : r ≤ setoid.ker f,	g : quotient r → β,	Hg : f = g ∘ quotient.mk,	x : α	⊢ quotient.lift f H (quot.mk setoid.r x) = g (quot.mk setoid.r x)
α : Type u_1,	β : Type u_2,	r : setoid α,	f : α → β,	H : r ≤ setoid.ker f,	g : quotient r → β,	Hg : f = g ∘ quotient.mk,	x : α	⊢ (g ∘ quotient.mk) x = g (quot.mk setoid.r x)
α : Type u_1,	β : Type u_2,	f : α → β,	g : β → α,	hf : function.right_inverse g f,	a : quotient (setoid.ker f),	a : α	⊢ setoid.r (g ((λ (a : quotient (setoid.ker f)), a.lift_on' f _) (quotient.mk' a))) a
l : list char,	s : string	⊢ l.as_string = s ↔ l = s.to_list
α : Type u,	n : ℕ,	a : α,	s' : sym α n,	s_val : multiset α,	s_property : ⇑multiset.card s_val = n	⊢ a::⟨s_val, s_property⟩ = a::s' ↔ ⟨s_val, s_property⟩ = s'
α : Type u,	n : ℕ,	a : α,	s_val : multiset α,	s_property : ⇑multiset.card s_val = n,	s'_val : multiset α,	s'_property : ⇑multiset.card s'_val = n	⊢ a::⟨s_val, s_property⟩ = a::⟨s'_val, s'_property⟩ ↔ ⟨s_val, s_property⟩ = ⟨s'_val, s'_property⟩
α : Type u,	n : ℕ,	a : α,	s_val : multiset α,	s_property : ⇑multiset.card s_val = n,	s'_val : multiset α,	s'_property : ⇑multiset.card s'_val = n	⊢ ⟨s_val, s_property⟩.cases_on (λ (ᾰ_val : multiset α) (ᾰ_property : ⇑multiset.card ᾰ_val = n), id_rhs {s // ⇑multiset.card s = n.succ} ⟨a ::ₘ ᾰ_val, _⟩) = ⟨s'_val, s'_property⟩.cases_on (λ (ᾰ_val : multiset α) (ᾰ_property : ⇑multiset.card ᾰ_val = n), id_rhs {s // ⇑multiset.card s = n.succ} ⟨a ::ₘ ᾰ_val, _⟩) ↔ ⟨s_val, s_property⟩ = ⟨s'_val, s'_property⟩
α : Type u,	n : ℕ,	a : α,	s s' : sym α n	⊢ a::s = a::s' ↔ s = s'
n : ℕ,	α : typevec n,	r : α ⊗ α ⟹ typevec.repeat n Prop	⊢ typevec.subtype_val r ⊚ typevec.to_subtype' r = λ (i : fin2 n) (x : (λ (i : fin2 n), {x // typevec.of_repeat (r i (typevec.prod.mk i x.fst x.snd))}) i), typevec.prod.mk i x.val.fst x.val.snd
n : ℕ,	α : typevec n,	r : α ⊗ α ⟹ typevec.repeat n Prop	⊢ typevec.subtype_val r ⊚ typevec.to_subtype' r = λ (i : fin2 n) (x : (λ (i : fin2 n), {x // typevec.of_repeat (r i (typevec.prod.mk i x.fst x.snd))}) i), typevec.prod.mk i x.val.fst x.val.snd
n : ℕ,	α : typevec n,	r : α ⊗ α ⟹ typevec.repeat n Prop	⊢ typevec.subtype_val r ⊚ typevec.to_subtype' r = λ (i : fin2 n) (x : (λ (i : fin2 n), {x // typevec.of_repeat (r i (typevec.prod.mk i x.fst x.snd))}) i), typevec.prod.mk i x.val.fst x.val.snd
n : ℕ,	α : typevec n,	r : α ⊗ α ⟹ typevec.repeat n Prop,	i : fin2 n,	x : {x // typevec.of_repeat (r i (typevec.prod.mk i x.fst x.snd))}	⊢ (typevec.subtype_val r ⊚ typevec.to_subtype' r) i x = typevec.prod.mk i x.val.fst x.val.snd
n i : ℕ,	α : typevec i.succ,	r : α ⊗ α ⟹ typevec.repeat i.succ Prop,	x : {x // typevec.of_repeat (r fin2.fz (typevec.prod.mk fin2.fz x.fst x.snd))}	⊢ (typevec.subtype_val r ⊚ typevec.to_subtype' r) fin2.fz x = typevec.prod.mk fin2.fz x.val.fst x.val.snd
n i_n : ℕ,	i_ᾰ : fin2 i_n,	i_ih : ∀ {α : typevec i_n} (r : α ⊗ α ⟹ typevec.repeat i_n Prop) (x : {x // typevec.of_repeat (r i_ᾰ (typevec.prod.mk i_ᾰ x.fst x.snd))}), (typevec.subtype_val r ⊚ typevec.to_subtype' r) i_ᾰ x = typevec.prod.mk i_ᾰ x.val.fst x.val.snd,	α : typevec i_n.succ,	r : α ⊗ α ⟹ typevec.repeat i_n.succ Prop,	x : {x // typevec.of_repeat (r i_ᾰ.fs (typevec.prod.mk i_ᾰ.fs x.fst x.snd))}	⊢ (typevec.subtype_val r ⊚ typevec.to_subtype' r) i_ᾰ.fs x = typevec.prod.mk i_ᾰ.fs x.val.fst x.val.snd
n : ℕ,	α : typevec n,	r : α ⊗ α ⟹ typevec.repeat n Prop	⊢ typevec.subtype_val r ⊚ typevec.to_subtype' r = λ (i : fin2 n) (x : (λ (i : fin2 n), {x // typevec.of_repeat (r i (typevec.prod.mk i x.fst x.snd))}) i), typevec.prod.mk i x.val.fst x.val.snd
n i : ℕ,	α : typevec i.succ,	r : α ⊗ α ⟹ typevec.repeat i.succ Prop,	x : {x // typevec.of_repeat (r fin2.fz (x.fst, x.snd))}	⊢ x.val = (x.val.fst, x.val.snd)
n i_n : ℕ,	i_ᾰ : fin2 i_n,	i_ih : ∀ {α : typevec i_n} (r : α ⊗ α ⟹ typevec.repeat i_n Prop) (x : {x // typevec.of_repeat (r i_ᾰ (typevec.prod.mk i_ᾰ x.fst x.snd))}), typevec.subtype_val r i_ᾰ (typevec.to_subtype' r i_ᾰ x) = typevec.prod.mk i_ᾰ x.val.fst x.val.snd,	α : typevec i_n.succ,	r : α ⊗ α ⟹ typevec.repeat i_n.succ Prop,	x : {x // typevec.of_repeat (r i_ᾰ.fs (typevec.prod.mk i_ᾰ x.fst x.snd))}	⊢ typevec.subtype_val (typevec.drop_fun r) i_ᾰ (typevec.to_subtype' (typevec.drop_fun r) i_ᾰ x) = typevec.prod.mk i_ᾰ x.val.fst x.val.snd
α : Type u_1,	append_left : ∀ {m : ℕ} (i : fin2 m) (v : vector3 α m) {n : ℕ} (w : vector3 α n), (v +-+ w) (fin2.left n i) = v i,	m : ℕ,	v : vector3 α m.succ,	n : ℕ,	w : vector3 α n,	a : α,	t : vector3 α m	⊢ (a::t +-+ w) (fin2.left n fin2.fz) = (a::t) fin2.fz
α : Type u_1,	append_left : ∀ {m : ℕ} (i : fin2 m) (v : vector3 α m) {n : ℕ} (w : vector3 α n), (v +-+ w) (fin2.left n i) = v i,	m : ℕ,	i : fin2 m,	v : vector3 α m.succ,	n : ℕ,	w : vector3 α n,	a : α,	t : vector3 α m	⊢ (a::t +-+ w) (fin2.left n i.fs) = (a::t) i.fs
n : ℕ,	R : Type u_1,	_inst_1 : ring R,	m : ℕ,	_inst_2 : char_p R m,	h : m ∣ n,	a b : zmod n	⊢ ↑(a * b) = ↑a * ↑b
R : Type u_1,	_inst_1 : ring R,	m : ℕ,	_inst_2 : char_p R m,	h : m ∣ 0,	a b : zmod 0	⊢ ↑(a * b) = ↑a * ↑b		R : Type u_1,	_inst_1 : ring R,	m : ℕ,	_inst_2 : char_p R m,	n : ℕ,	h : m ∣ n.succ,	a b : zmod n.succ	⊢ ↑(a * b) = ↑a * ↑b
R : Type u_1,	_inst_1 : ring R,	m : ℕ,	_inst_2 : char_p R m,	h : m ∣ 0,	a b : zmod 0	⊢ ↑(a * b) = ↑a * ↑b
R : Type u_1,	_inst_1 : ring R,	m : ℕ,	_inst_2 : char_p R m,	n : ℕ,	h : m ∣ n.succ,	a b : zmod n.succ	⊢ ↑(a * b) = ↑a * ↑b
R : Type u_1,	_inst_1 : ring R,	m : ℕ,	_inst_2 : char_p R m,	n : ℕ,	h : m ∣ n.succ,	a b : zmod n.succ	⊢ ↑↑(a * b) = ↑↑a * ↑↑b
R : Type u_1,	_inst_1 : ring R,	m : ℕ,	_inst_2 : char_p R m,	n : ℕ,	h : m ∣ n.succ,	a b : zmod n.succ	⊢ ↑↑a * ↑↑b = ↑↑(a * b)
R : Type u_1,	_inst_1 : ring R,	m : ℕ,	_inst_2 : char_p R m,	n : ℕ,	h : m ∣ n.succ,	a b : zmod n.succ	⊢ m ∣ ↑a * ↑b - ↑a * ↑b % (n + 1)
α : Type u,	_inst_1 : semiring α	⊢ is_semiring_hom id
α : Type u,	_inst_1 : semiring α	⊢ is_semiring_hom id
α : Type u,	_inst_1 : semiring α	⊢ is_semiring_hom id
α : Type u,	_inst_1 : semiring α	⊢ id 0 = 0
α : Type u,	_inst_1 : semiring α	⊢ id 1 = 1
α : Type u,	_inst_1 : semiring α	⊢ ∀ {x y : α}, id (x + y) = id x + id y
α : Type u,	_inst_1 : semiring α	⊢ ∀ {x y : α}, id (x * y) = id x * id y
α : Type u,	_inst_1 : semiring α	⊢ id 0 = 0
α : Type u,	_inst_1 : semiring α	⊢ id 1 = 1
α : Type u,	_inst_1 : semiring α,	x y : α	⊢ id (x + y) = id x + id y
α : Type u,	_inst_1 : semiring α,	x y : α	⊢ id (x * y) = id x * id y
G : Type u_1,	H : Type u_2,	_inst_1 : group G,	_inst_2 : group H,	f : G → H,	hf : is_group_hom f,	h : function.injective f,	x : G,	hx : x ∈ is_group_hom.ker f,	this : f x = f 1	⊢ x ∈ is_subgroup.trivial G
G : Type u_1,	H : Type u_2,	_inst_1 : group G,	_inst_2 : group H,	f : G → H,	hf : is_group_hom f,	h : function.injective f,	x : G,	hx : x ∈ is_group_hom.ker f	⊢ f x = f 1
G : Type u_1,	H : Type u_2,	_inst_1 : group G,	_inst_2 : group H,	f : G → H,	hf : is_group_hom f,	h : function.injective f,	x : G,	hx : x ∈ is_group_hom.ker f	⊢ f x = 1
G : Type u_1,	H : Type u_2,	_inst_1 : group G,	_inst_2 : group H,	f : G → H,	hf : is_group_hom f,	h : function.injective f,	x : G,	hx : x ∈ is_group_hom.ker f	⊢ f x = f 1
G : Type u_1,	H : Type u_2,	_inst_1 : group G,	_inst_2 : group H,	f : G → H,	hf : is_group_hom f,	h : function.injective f,	x : G	⊢ x ∈ is_subgroup.trivial G → x ∈ is_group_hom.ker f
M : Type u_1,	_inst_1 : monoid M,	x y z : M,	_x : y ∈ powers x,	_fun_match : y ∈ powers x → z ∈ powers x → y * z ∈ powers x,	n₁ : ℕ,	h₁ : x ^ n₁ = y,	_x : z ∈ powers x,	_fun_match : z ∈ powers x → y * z ∈ powers x,	n₂ : ℕ,	h₂ : x ^ n₂ = z	⊢ x ^ (n₁ + n₂) = y * z
M : Type u_1,	_inst_3 : comm_monoid M,	s t : set M,	x : M,	hx : x ∈ monoid.closure (s ∪ t),	_let_match : (∃ (l : list M), (∀ (x : M), x ∈ l → x ∈ s ∪ t) ∧ l.prod = x) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = x),	L : list M,	HL1 : ∀ (x : M), x ∈ L → x ∈ s ∪ t,	HL2 : L.prod = x,	hd : M,	tl : list M,	ih : (∀ (x : M), x ∈ tl → x ∈ s ∪ t) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod),	HL1 : ∀ (x : M), x ∈ hd :: tl → x ∈ s ∪ t,	_let_match : (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = (hd :: tl).prod),	y : M,	hy : y ∈ monoid.closure s,	z : M,	hz : z ∈ monoid.closure t,	hyzx : y * z = tl.prod,	hs : hd ∈ s	⊢ hd * y * z = (hd :: tl).prod
M : Type u_1,	_inst_3 : comm_monoid M,	s t : set M,	x : M,	hx : x ∈ monoid.closure (s ∪ t),	_let_match : (∃ (l : list M), (∀ (x : M), x ∈ l → x ∈ s ∪ t) ∧ l.prod = x) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = x),	L : list M,	HL1 : ∀ (x : M), x ∈ L → x ∈ s ∪ t,	HL2 : L.prod = x,	hd : M,	tl : list M,	ih : (∀ (x : M), x ∈ tl → x ∈ s ∪ t) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod),	HL1 : ∀ (x : M), x ∈ hd :: tl → x ∈ s ∪ t,	_let_match : (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = (hd :: tl).prod),	y : M,	hy : y ∈ monoid.closure s,	z : M,	hz : z ∈ monoid.closure t,	hyzx : y * z = tl.prod,	hs : hd ∈ s	⊢ hd * y * z = (hd :: tl).prod
M : Type u_1,	_inst_3 : comm_monoid M,	s t : set M,	x : M,	hx : x ∈ monoid.closure (s ∪ t),	_let_match : (∃ (l : list M), (∀ (x : M), x ∈ l → x ∈ s ∪ t) ∧ l.prod = x) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = x),	L : list M,	HL1 : ∀ (x : M), x ∈ L → x ∈ s ∪ t,	HL2 : L.prod = x,	hd : M,	tl : list M,	ih : (∀ (x : M), x ∈ tl → x ∈ s ∪ t) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod),	HL1 : ∀ (x : M), x ∈ hd :: tl → x ∈ s ∪ t,	_let_match : (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = (hd :: tl).prod),	y : M,	hy : y ∈ monoid.closure s,	z : M,	hz : z ∈ monoid.closure t,	hyzx : y * z = tl.prod,	hs : hd ∈ s	⊢ hd * (y * z) = hd * (y * z)
M : Type u_1,	_inst_3 : comm_monoid M,	s t : set M,	x : M,	hx : x ∈ monoid.closure (s ∪ t),	_let_match : (∃ (l : list M), (∀ (x : M), x ∈ l → x ∈ s ∪ t) ∧ l.prod = x) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = x),	L : list M,	HL1 : ∀ (x : M), x ∈ L → x ∈ s ∪ t,	HL2 : L.prod = x,	hd : M,	tl : list M,	ih : (∀ (x : M), x ∈ tl → x ∈ s ∪ t) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod),	HL1 : ∀ (x : M), x ∈ hd :: tl → x ∈ s ∪ t,	_let_match : (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = (hd :: tl).prod),	y : M,	hy : y ∈ monoid.closure s,	z : M,	hz : z ∈ monoid.closure t,	hyzx : y * z = tl.prod,	ht : hd ∈ t	⊢ y * (z * hd) = (hd :: tl).prod
M : Type u_1,	_inst_3 : comm_monoid M,	s t : set M,	x : M,	hx : x ∈ monoid.closure (s ∪ t),	_let_match : (∃ (l : list M), (∀ (x : M), x ∈ l → x ∈ s ∪ t) ∧ l.prod = x) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = x),	L : list M,	HL1 : ∀ (x : M), x ∈ L → x ∈ s ∪ t,	HL2 : L.prod = x,	hd : M,	tl : list M,	ih : (∀ (x : M), x ∈ tl → x ∈ s ∪ t) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod),	HL1 : ∀ (x : M), x ∈ hd :: tl → x ∈ s ∪ t,	_let_match : (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = (hd :: tl).prod),	y : M,	hy : y ∈ monoid.closure s,	z : M,	hz : z ∈ monoid.closure t,	hyzx : y * z = tl.prod,	ht : hd ∈ t	⊢ y * (z * hd) = (hd :: tl).prod
M : Type u_1,	_inst_3 : comm_monoid M,	s t : set M,	x : M,	hx : x ∈ monoid.closure (s ∪ t),	_let_match : (∃ (l : list M), (∀ (x : M), x ∈ l → x ∈ s ∪ t) ∧ l.prod = x) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = x),	L : list M,	HL1 : ∀ (x : M), x ∈ L → x ∈ s ∪ t,	HL2 : L.prod = x,	hd : M,	tl : list M,	ih : (∀ (x : M), x ∈ tl → x ∈ s ∪ t) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod),	HL1 : ∀ (x : M), x ∈ hd :: tl → x ∈ s ∪ t,	_let_match : (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = tl.prod) → (∃ (y : M) (H : y ∈ monoid.closure s) (z : M) (H : z ∈ monoid.closure t), y * z = (hd :: tl).prod),	y : M,	hy : y ∈ monoid.closure s,	z : M,	hz : z ∈ monoid.closure t,	hyzx : y * z = tl.prod,	ht : hd ∈ t	⊢ y * z * hd = y * z * hd
x : ℝ,	n : ℤ	⊢ ⇑circle_deg1_lift.translate (⇑multiplicative.of_add x) ^ n = ⇑circle_deg1_lift.translate (⇑multiplicative.of_add (↑n * x))
f : circle_deg1_lift,	x : ℝ,	m : ℤ,	n : ℕ,	hn : 0 < n	⊢ ⇑f^[n] x = x + ↑n * ↑m ↔ ⇑f x = x + ↑m
f : circle_deg1_lift,	x : ℝ,	m : ℤ,	n : ℕ,	hn : 0 < n	⊢ x + ↑n * ↑m < ⇑f^[n] x ↔ x + ↑m < ⇑f x
f : circle_deg1_lift	⊢ f.transnum_aux_seq 0 = ⇑f 0
f : circle_deg1_lift,	x : ℝ	⊢ filter.tendsto (λ (n : ℕ), (⇑(f ^ n) x - x) / ↑n) filter.at_top (𝓝 f.translation_number)
f : circle_deg1_lift,	x : ℝ	⊢ filter.tendsto (λ (n : ℕ), (⇑(f ^ n) x - x) / ↑n) filter.at_top (𝓝 (↑(⇑circle_deg1_lift.translate (⇑multiplicative.of_add x))⁻¹ * f * ↑(⇑circle_deg1_lift.translate (⇑multiplicative.of_add x))).translation_number)
f : circle_deg1_lift,	x : ℝ	⊢ (λ (n : ℕ), (⇑(f ^ n) x - x) / ↑n) = λ (n : ℕ), ⇑((↑(⇑circle_deg1_lift.translate (⇑multiplicative.of_add x))⁻¹ * f * ↑(⇑circle_deg1_lift.translate (⇑multiplicative.of_add x))) ^ n) 0 / ↑n
f : circle_deg1_lift,	x : ℝ,	n : ℕ	⊢ (⇑(f ^ n) x - x) / ↑n = ⇑((↑(⇑circle_deg1_lift.translate (⇑multiplicative.of_add x))⁻¹ * f * ↑(⇑circle_deg1_lift.translate (⇑multiplicative.of_add x))) ^ n) 0 / ↑n
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s	⊢ ∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s)	⊢ ∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s)	⊢ ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s		α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s	⊢ ∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s	⊢ ∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s	⊢ ⇑μ set.univ < (finset.range n).sum (λ (m : ℕ), ⇑μ (f^[m] ⁻¹' s))
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s,	this : ⇑μ set.univ < (finset.range n).sum (λ (m : ℕ), ⇑μ (f^[m] ⁻¹' s))	⊢ ∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s,	this : ⇑μ set.univ < (finset.range n).sum (λ (m : ℕ), ⇑μ (f^[m] ⁻¹' s)),	i : ℕ,	hi : i ∈ finset.range n,	j : ℕ,	hj : j ∈ finset.range n,	hij : i ≠ j,	x : α,	hxi : x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) i,	hxj : x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) j	⊢ ∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s,	this : ⇑μ set.univ < (finset.range n).sum (λ (m : ℕ), ⇑μ (f^[m] ⁻¹' s)),	x : α,	i j : ℕ,	hlt : i < j,	hi : i ∈ finset.range n,	hj : j ∈ finset.range n,	hij : i ≠ j,	hxi : x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) i,	hxj : x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) j	⊢ ∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s,	this : ⇑μ set.univ < (finset.range n).sum (λ (m : ℕ), ⇑μ (f^[m] ⁻¹' s)),	x : α,	i j : ℕ,	hlt : i < j,	hij : i ≠ j,	hxj : f^[j] x ∈ s,	hxi : f^[i] x ∈ s,	hj : j < n,	hi : i < n	⊢ ∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s,	this : ⇑μ set.univ < (finset.range n).sum (λ (m : ℕ), ⇑μ (f^[m] ⁻¹' s)),	x : α,	i j : ℕ,	hlt : i < j,	hi : i ∈ finset.range n,	hj : j ∈ finset.range n,	hij : i ≠ j,	hxi : x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) i,	hxj : x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) j	⊢ ∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s		case invariant	α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s,	this : ⇑μ set.univ < (finset.range n).sum (λ (m : ℕ), ⇑μ (f^[m] ⁻¹' s)),	x : α,	i j : ℕ,	hlt : j < i,	this : j ∈ finset.range n → i ∈ finset.range n → j ≠ i → x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) j → x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) i → (∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s)	⊢ i ∈ finset.range n → j ∈ finset.range n → i ≠ j → x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) i → x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) j → (∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s)
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s,	this : ⇑μ set.univ < (finset.range n).sum (λ (m : ℕ), ⇑μ (f^[m] ⁻¹' s)),	x : α,	i j : ℕ,	hlt : i < j,	hij : i ≠ j,	hxj : f^[j] x ∈ s,	hxi : f^[i] x ∈ s,	hj : j < n,	hi : i < n	⊢ f^[j - i] (f^[i] x) ∈ s
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	f : α → α,	s : set α,	hf : measure_theory.measure_preserving f μ μ,	hs : measurable_set s,	n : ℕ,	hvol : ⇑μ set.univ < ↑n * ⇑μ s,	A : ∀ (m : ℕ), measurable_set (f^[m] ⁻¹' s),	B : ∀ (m : ℕ), ⇑μ (f^[m] ⁻¹' s) = ⇑μ s,	this : ⇑μ set.univ < (finset.range n).sum (λ (m : ℕ), ⇑μ (f^[m] ⁻¹' s)),	x : α,	i j : ℕ,	hlt : j < i,	this : j ∈ finset.range n → i ∈ finset.range n → j ≠ i → x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) j → x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) i → (∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s)	⊢ i ∈ finset.range n → j ∈ finset.range n → i ≠ j → x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) i → x ∈ (λ (m : ℕ), f^[m] ⁻¹' s) j → (∃ (x : α) (H : x ∈ s) (m : ℕ) (H : m ∈ set.Ioo 0 n), f^[m] x ∈ s)
τ : Type u_1,	_inst_1 : add_comm_group τ,	_inst_2 : topological_space τ,	_inst_3 : topological_add_group τ,	α : Type u_2,	_inst_4 : topological_space α,	ϕ : flow τ α,	t : τ,	x : α	⊢ ⇑ϕ (-t) (⇑ϕ t x) = x
τ : Type u_1,	_inst_1 : add_comm_group τ,	_inst_2 : topological_space τ,	_inst_3 : topological_add_group τ,	α : Type u_2,	_inst_4 : topological_space α,	ϕ : flow τ α,	t : τ,	x : α	⊢ ⇑ϕ t (⇑ϕ (-t) x) = x
α : Type u_1,	f : α → α,	x : α,	m : ℕ,	hm : function.is_periodic_pt f m x,	n : ℕ	⊢ function.is_periodic_pt f (n * m) x
α : Type u_1,	f : α → α,	x : α,	hx : x ∈ function.periodic_pts f	⊢ 0 < function.minimal_period f x
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	h : ∀ (x : E), module.rank F ↥F⟮x⟯ = 1	⊢ ⊥ = ⊤
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	h : ∀ (x : E), module.rank F ↥F⟮x⟯ = 1,	x : E	⊢ x ∈ ⊥ ↔ x ∈ ⊤
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	h : ∀ (x : E), module.rank F ↥F⟮x⟯ = 1,	x : E	⊢ x ∈ ⊥
F : Type u_1,	E : Type u_2,	K : Type u_3,	_inst_1 : field F,	_inst_2 : field E,	_inst_3 : field K,	_inst_4 : algebra F E,	_inst_5 : algebra F K	⊢ ∀ (a b : intermediate_field.lifts F E K), a ≤ b → b ≤ a → a = b
F : Type u_1,	E : Type u_2,	K : Type u_3,	_inst_1 : field F,	_inst_2 : field E,	_inst_3 : field K,	_inst_4 : algebra F E,	_inst_5 : algebra F K,	x1 : intermediate_field F E,	x2 : ↥x1 →ₐ[F] K,	y1 : intermediate_field F E,	y2 : ↥y1 →ₐ[F] K,	hxy1 : ⟨x1, x2⟩.fst ≤ ⟨y1, y2⟩.fst,	hxy2 : ∀ (s : ↥(⟨x1, x2⟩.fst)) (t : ↥(⟨y1, y2⟩.fst)), ↑s = ↑t → ⇑(⟨x1, x2⟩.snd) s = ⇑(⟨y1, y2⟩.snd) t,	hyx1 : ⟨y1, y2⟩.fst ≤ ⟨x1, x2⟩.fst,	hyx2 : ∀ (s : ↥(⟨y1, y2⟩.fst)) (t : ↥(⟨x1, x2⟩.fst)), ↑s = ↑t → ⇑(⟨y1, y2⟩.snd) s = ⇑(⟨x1, x2⟩.snd) t	⊢ ⟨x1, x2⟩ = ⟨y1, y2⟩
F : Type u_1,	E : Type u_2,	K : Type u_3,	_inst_1 : field F,	_inst_2 : field E,	_inst_3 : field K,	_inst_4 : algebra F E,	_inst_5 : algebra F K,	x1 : intermediate_field F E,	x2 : ↥x1 →ₐ[F] K,	y1 : intermediate_field F E,	y2 : ↥y1 →ₐ[F] K,	hxy1 : ⟨x1, x2⟩.fst ≤ ⟨y1, y2⟩.fst,	hxy2 : ∀ (s : ↥(⟨x1, x2⟩.fst)) (t : ↥(⟨y1, y2⟩.fst)), ↑s = ↑t → ⇑(⟨x1, x2⟩.snd) s = ⇑(⟨y1, y2⟩.snd) t,	hyx1 : ⟨y1, y2⟩.fst ≤ ⟨x1, x2⟩.fst,	hyx2 : ∀ (s : ↥(⟨y1, y2⟩.fst)) (t : ↥(⟨x1, x2⟩.fst)), ↑s = ↑t → ⇑(⟨y1, y2⟩.snd) s = ⇑(⟨x1, x2⟩.snd) t,	this : x1 = y1	⊢ ⟨x1, x2⟩ = ⟨y1, y2⟩
F : Type u_1,	E : Type u_2,	K : Type u_3,	_inst_1 : field F,	_inst_2 : field E,	_inst_3 : field K,	_inst_4 : algebra F E,	_inst_5 : algebra F K,	x1 : intermediate_field F E,	x2 y2 : ↥x1 →ₐ[F] K,	hxy1 : ⟨x1, x2⟩.fst ≤ ⟨x1, y2⟩.fst,	hxy2 : ∀ (s : ↥(⟨x1, x2⟩.fst)) (t : ↥(⟨x1, y2⟩.fst)), ↑s = ↑t → ⇑(⟨x1, x2⟩.snd) s = ⇑(⟨x1, y2⟩.snd) t,	hyx1 : ⟨x1, y2⟩.fst ≤ ⟨x1, x2⟩.fst,	hyx2 : ∀ (s : ↥(⟨x1, y2⟩.fst)) (t : ↥(⟨x1, x2⟩.fst)), ↑s = ↑t → ⇑(⟨x1, y2⟩.snd) s = ⇑(⟨x1, x2⟩.snd) t	⊢ ⟨x1, x2⟩ = ⟨x1, y2⟩
F : Type u_1,	E : Type u_2,	K : Type u_3,	_inst_1 : field F,	_inst_2 : field E,	_inst_3 : field K,	_inst_4 : algebra F E,	_inst_5 : algebra F K,	x1 : intermediate_field F E,	x2 y2 : ↥x1 →ₐ[F] K,	hxy1 : ⟨x1, x2⟩.fst ≤ ⟨x1, y2⟩.fst,	hxy2 : ∀ (s : ↥(⟨x1, x2⟩.fst)) (t : ↥(⟨x1, y2⟩.fst)), ↑s = ↑t → ⇑(⟨x1, x2⟩.snd) s = ⇑(⟨x1, y2⟩.snd) t,	hyx1 : ⟨x1, y2⟩.fst ≤ ⟨x1, x2⟩.fst,	hyx2 : ∀ (s : ↥(⟨x1, y2⟩.fst)) (t : ↥(⟨x1, x2⟩.fst)), ↑s = ↑t → ⇑(⟨x1, y2⟩.snd) s = ⇑(⟨x1, x2⟩.snd) t	⊢ x2 = y2
F : Type u_1,	E : Type u_2,	K : Type u_3,	_inst_1 : field F,	_inst_2 : field E,	_inst_3 : field K,	_inst_4 : algebra F E,	_inst_5 : algebra F K,	x : intermediate_field.lifts F E K,	s : ↥(⊥.fst),	t : ↥(x.fst),	hst : ↑s = ↑t	⊢ ⇑(⊥.snd) s = ⇑(x.snd) t
F : Type u_1,	E : Type u_2,	K : Type u_3,	_inst_1 : field F,	_inst_2 : field E,	_inst_3 : field K,	_inst_4 : algebra F E,	_inst_5 : algebra F K,	x : intermediate_field.lifts F E K,	s : ↥(⊥.fst),	t : ↥(x.fst),	hst : ↑s = ↑t,	u : F,	hu : ⇑(algebra_map F E) u = ↑s	⊢ ⇑(⊥.snd) s = ⇑(x.snd) t
F : Type u_1,	E : Type u_2,	K : Type u_3,	_inst_1 : field F,	_inst_2 : field E,	_inst_3 : field K,	_inst_4 : algebra F E,	_inst_5 : algebra F K,	x : intermediate_field.lifts F E K,	s : ↥(⊥.fst),	t : ↥(x.fst),	hst : ↑s = ↑t,	u : F,	hu : ⇑(algebra_map F E) u = ↑s	⊢ ⇑(algebra_map F K) u = ⇑(x.snd) t
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	x : E	⊢ x ∈ ⊥.to_subalgebra ↔ x ∈ ⊥
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E	⊢ ⊥.to_subalgebra = ⊥
p : ℕ,	_inst_4 : fact (nat.prime p),	a : units (zmod p)	⊢ a ^ (p - 1) = 1
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ	⊢ submodule.map (mv_polynomial.evalₗ K σ) (mv_polynomial.restrict_degree σ K (fintype.card K - 1)) = ⊤
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤	⊢ ∃ (y : mv_polynomial σ K), y ∈ mv_polynomial.restrict_degree σ K (fintype.card K - 1) ∧ ⇑(mv_polynomial.evalₗ K σ) y = e
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤	⊢ ∑ (n : σ → K), e n • mv_polynomial.indicator n ∈ mv_polynomial.restrict_degree σ K (fintype.card K - 1)
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤	⊢ ∑ (n : σ → K), e n • mv_polynomial.indicator n ∈ mv_polynomial.restrict_degree σ K (fintype.card K - 1)		K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤	⊢ ⇑(mv_polynomial.evalₗ K σ) (∑ (n : σ → K), e n • mv_polynomial.indicator n) = e
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤	⊢ ⇑(mv_polynomial.evalₗ K σ) (∑ (n : σ → K), e n • mv_polynomial.indicator n) = e
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ ⇑(mv_polynomial.evalₗ K σ) (∑ (n : σ → K), e n • mv_polynomial.indicator n) n = e n
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ ∑ (c : σ → K), e c • ⇑(mv_polynomial.evalₗ K σ) (mv_polynomial.indicator c) n = e n
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ ∑ (c : σ → K), e c • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator c) = e n
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ ∑ (c : σ → K), e c • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator c) = ?m_1		K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ ?m_1 = e n
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ ∀ (b : σ → K), b ∈ finset.univ → b ≠ n → e b • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator b) = 0
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ ∀ (b : σ → K), b ∈ finset.univ → b ≠ n → e b • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator b) = 0		K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ n ∉ finset.univ → e n • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator n) = 0		K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ e n • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator n) = e n
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n b : σ → K,	_x : b ∈ finset.univ,	h : b ≠ n	⊢ e b • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator b) = 0
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K,	h : n ∉ finset.univ	⊢ e n • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator n) = 0
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ n ∉ finset.univ → e n • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator n) = 0		K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ e n • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator n) = e n
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ n ∉ finset.univ → e n • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator n) = 0
K : Type u_1,	σ : Type u_2,	_inst_1 : field K,	_inst_2 : fintype K,	_inst_3 : fintype σ,	e : (σ → K) → K,	_x : e ∈ ⊤,	n : σ → K	⊢ e n • ⇑(mv_polynomial.eval n) (mv_polynomial.indicator n) = e n
K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K	⊢ is_noetherian K V ↔ module.rank K V < cardinal.omega
K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K,	b : basis ↥(basis.of_vector_space_index K V) K V := basis.of_vector_space K V	⊢ is_noetherian K V ↔ module.rank K V < cardinal.omega
K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K,	b : basis ↥(basis.of_vector_space_index K V) K V := basis.of_vector_space K V	⊢ is_noetherian K V ↔ (basis.of_vector_space_index K V).finite
K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K,	b : basis ↥(basis.of_vector_space_index K V) K V := basis.of_vector_space K V	⊢ is_noetherian K V → (basis.of_vector_space_index K V).finite
K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K,	b : basis ↥(basis.of_vector_space_index K V) K V := basis.of_vector_space K V,	ᾰ : is_noetherian K V	⊢ (basis.of_vector_space_index K V).finite
K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K,	b : basis ↥(basis.of_vector_space_index K V) K V := basis.of_vector_space K V	⊢ is_noetherian K V → (basis.of_vector_space_index K V).finite		K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K,	b : basis ↥(basis.of_vector_space_index K V) K V := basis.of_vector_space K V	⊢ (basis.of_vector_space_index K V).finite → is_noetherian K V
K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K,	b : basis ↥(basis.of_vector_space_index K V) K V := basis.of_vector_space K V	⊢ (basis.of_vector_space_index K V).finite → is_noetherian K V
K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K,	b : basis ↥(basis.of_vector_space_index K V) K V := basis.of_vector_space K V,	hbfinite : (basis.of_vector_space_index K V).finite	⊢ is_noetherian K V
K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K,	b : basis ↥(basis.of_vector_space_index K V) K V := basis.of_vector_space K V,	hbfinite : (basis.of_vector_space_index K V).finite	⊢ is_noetherian K ↥⊤
K : Type u,	V : Type v,	_inst_1 : division_ring K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	_inst_4 : is_noetherian_ring K,	b : basis ↥(basis.of_vector_space_index K V) K V := basis.of_vector_space K V,	hbfinite : (basis.of_vector_space_index K V).finite	⊢ submodule.span K ↑(hbfinite.to_finset) = ⊤
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	K : intermediate_field F E,	_inst_4 : finite_dimensional F E,	h : is_galois F E	⊢ intermediate_field.fixed_field K.fixing_subgroup = K
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	K : intermediate_field F E,	_inst_4 : finite_dimensional F E,	h : is_galois F E,	K_le : K ≤ intermediate_field.fixed_field K.fixing_subgroup	⊢ intermediate_field.fixed_field K.fixing_subgroup = K
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	K : intermediate_field F E,	_inst_4 : finite_dimensional F E,	h : is_galois F E,	K_le : K ≤ intermediate_field.fixed_field K.fixing_subgroup,	this : finite_dimensional.finrank ↥K E = finite_dimensional.finrank ↥(intermediate_field.fixed_field K.fixing_subgroup) E	⊢ intermediate_field.fixed_field K.fixing_subgroup = K
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	K : intermediate_field F E,	_inst_4 : finite_dimensional F E,	h : is_galois F E,	K_le : K ≤ intermediate_field.fixed_field K.fixing_subgroup,	this : finite_dimensional.finrank ↥K E = finite_dimensional.finrank ↥(intermediate_field.fixed_field K.fixing_subgroup) E	⊢ intermediate_field.fixed_field K.fixing_subgroup = K		F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	K : intermediate_field F E,	_inst_4 : finite_dimensional F E,	h : is_galois F E,	K_le : K ≤ intermediate_field.fixed_field K.fixing_subgroup	⊢ finite_dimensional.finrank ↥K E = finite_dimensional.finrank ↥(intermediate_field.fixed_field K.fixing_subgroup) E
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	K : intermediate_field F E,	_inst_4 : finite_dimensional F E,	h : is_galois F E,	K_le : K ≤ intermediate_field.fixed_field K.fixing_subgroup	⊢ finite_dimensional.finrank ↥K E = finite_dimensional.finrank ↥(intermediate_field.fixed_field K.fixing_subgroup) E
F : Type u_1,	_inst_1 : field F,	E : Type u_2,	_inst_2 : field E,	_inst_3 : algebra F E,	K : intermediate_field F E,	_inst_4 : finite_dimensional F E,	h : is_galois F E,	K_le : K ≤ intermediate_field.fixed_field K.fixing_subgroup	⊢ finite_dimensional.finrank ↥K E = fintype.card (E ≃ₐ[↥K] E)
A : Type u_1,	B : Type u_2,	_inst_1 : field A,	_inst_2 : domain B,	_inst_3 : algebra A B,	x : B,	hx : is_integral A x,	y : A,	h : (minpoly A x).is_root y,	key : minpoly A x = polynomial.X - ⇑polynomial.C y,	this : ⇑(polynomial.aeval x) (minpoly A x) = 0	⊢ ⇑(algebra_map A B) y = x
A : Type u_1,	B : Type u_2,	_inst_1 : field A,	_inst_2 : domain B,	_inst_3 : algebra A B,	x : B,	hx : is_integral A x,	y : A,	h : (minpoly A x).is_root y,	key : minpoly A x = polynomial.X - ⇑polynomial.C y	⊢ ⇑(algebra_map A B) y = x
R : Type u,	_inst_1 : comm_semiring R,	p : ℕ,	hp : 0 < p,	f : polynomial R,	n : ℕ	⊢ (⇑(polynomial.expand R p) f).coeff (p * n) = f.coeff n
R : Type u,	_inst_1 : comm_semiring R,	n : ℕ,	hn : 0 < n,	g g' : polynomial R,	h : ⇑(polynomial.expand R n) g = ⇑(polynomial.expand R n) g'	⊢ g = g'
R : Type u,	_inst_1 : comm_semiring R,	n : ℕ,	hn : 0 < n,	g g' : polynomial R,	h : ⇑(polynomial.expand R n) g = ⇑(polynomial.expand R n) g',	n_1 : ℕ	⊢ g.coeff n_1 = g'.coeff n_1
R : Type u,	_inst_1 : comm_semiring R,	n : ℕ,	hn : 0 < n,	g g' : polynomial R,	h : ⇑(polynomial.expand R n) g = ⇑(polynomial.expand R n) g',	n_1 : ℕ	⊢ (⇑(polynomial.expand R n) g).coeff (n * n_1) = (⇑(polynomial.expand R n) g').coeff (n * n_1)
R : Type u,	_inst_1 : comm_semiring R,	n : ℕ,	hn : 0 < n,	g g' : polynomial R,	h : ⇑(polynomial.expand R n) g = ⇑(polynomial.expand R n) g',	n_1 : ℕ	⊢ ⇑(polynomial.expand R n) g = ⇑(polynomial.expand R n) g'
R : Type u,	_inst_1 : comm_semiring R,	n : ℕ,	hn : 0 < n,	g g' : polynomial R,	h : ⇑(polynomial.expand R n) g = ⇑(polynomial.expand R n) g',	n_1 : ℕ,	h' : (⇑(polynomial.expand R n) g).coeff (n * n_1) = (⇑(polynomial.expand R n) g').coeff (n * n_1)	⊢ g.coeff n_1 = g'.coeff n_1
R : Type u,	_inst_1 : comm_semiring R,	n : ℕ,	hn : 0 < n,	g g' : polynomial R,	h : ⇑(polynomial.expand R n) g = ⇑(polynomial.expand R n) g',	n_1 : ℕ,	h' : ite (n ∣ n * n_1) (g.coeff (n * n_1 / n)) 0 = ite (n ∣ n * n_1) (g'.coeff (n * n_1 / n)) 0	⊢ g.coeff n_1 = g'.coeff n_1
R : Type u,	_inst_1 : comm_semiring R,	n : ℕ,	hn : 0 < n,	g g' : polynomial R,	h : ⇑(polynomial.expand R n) g = ⇑(polynomial.expand R n) g',	n_1 : ℕ,	h' : g.coeff (n * n_1 / n) = g'.coeff (n * n_1 / n)	⊢ g.coeff n_1 = g'.coeff n_1
R : Type u,	_inst_1 : comm_semiring R,	n : ℕ,	hn : 0 < n,	g g' : polynomial R,	h : ⇑(polynomial.expand R n) g = ⇑(polynomial.expand R n) g',	n_1 : ℕ,	h' : g.coeff n_1 = g'.coeff n_1	⊢ g.coeff n_1 = g'.coeff n_1
R : Type u,	_inst_1 : comm_ring R,	p q : polynomial R,	hp : p.separable,	hq : q * q ∣ p	⊢ is_unit q
R : Type u,	_inst_1 : comm_ring R,	q p : polynomial R,	hp : (q * q * p).separable	⊢ is_unit q
R : Type u,	_inst_1 : comm_ring R,	q p : polynomial R,	hp : (q * q * p).separable	⊢ is_coprime q q
R : Type u,	_inst_1 : comm_ring R,	q p : polynomial R,	hp : (q * q * p).separable	⊢ is_coprime (q * (q * p)) (q * (⇑polynomial.derivative q * p + ⇑polynomial.derivative q * p + q * ⇑polynomial.derivative p))
R : Type u,	_inst_1 : comm_ring R,	q p : polynomial R,	hp : (q * q * p).separable	⊢ is_coprime (q * q * p) (q * ⇑polynomial.derivative q * p + q * ⇑polynomial.derivative q * p + q * q * ⇑polynomial.derivative p)
R : Type u,	_inst_1 : comm_ring R,	q p : polynomial R,	hp : (q * q * p).separable	⊢ q * ⇑polynomial.derivative q * p + q * ⇑polynomial.derivative q * p + q * q * ⇑polynomial.derivative p = ⇑polynomial.derivative (q * q * p)
R : Type u,	_inst_1 : comm_ring R,	q p : polynomial R,	hp : (q * q * p).separable	⊢ is_coprime (q * (q * p)) (q * (⇑polynomial.derivative q * p + ⇑polynomial.derivative q * p + q * ⇑polynomial.derivative p))		R : Type u,	_inst_1 : comm_ring R,	q p : polynomial R,	hp : (q * q * p).separable,	this : is_coprime (q * (q * p)) (q * (⇑polynomial.derivative q * p + ⇑polynomial.derivative q * p + q * ⇑polynomial.derivative p))	⊢ is_coprime q q
R : Type u,	_inst_1 : comm_ring R,	q p : polynomial R,	hp : (q * q * p).separable	⊢ q * ⇑polynomial.derivative q * p + q * ⇑polynomial.derivative q * p + q * q * ⇑polynomial.derivative p = (⇑polynomial.derivative q * q + q * ⇑polynomial.derivative q) * p + q * q * ⇑polynomial.derivative p
R : Type u,	_inst_1 : comm_ring R,	q p : polynomial R,	hp : (q * q * p).separable,	this : is_coprime (q * (q * p)) (q * (⇑polynomial.derivative q * p + ⇑polynomial.derivative q * p + q * ⇑polynomial.derivative p))	⊢ is_coprime q q
K : Type v,	_inst_1 : field K,	n : ℕ,	f : polynomial K,	hfn : f.nat_degree = n + 1	⊢ Sort ?
K : Type u,	_inst_1 : field K,	s : subfield K,	n : ℤ	⊢ ↑n ∈ s
K : Type u,	L : Type v,	M : Type w,	_inst_1 : field K,	_inst_2 : field L,	_inst_3 : field M,	g : L →+* M,	f : K →+* L	⊢ subfield.map g f.field_range = (g.comp f).field_range
F : Type u,	K : Type v,	A : Type w,	_inst_1 : field F,	_inst_2 : field K,	_inst_3 : add_comm_group A,	_inst_4 : algebra F K,	_inst_5 : module K A,	_inst_6 : module F A,	_inst_7 : is_scalar_tower F K A,	b : basis ↥(basis.of_vector_space_index F K) F K := basis.of_vector_space F K,	c : basis ↥(basis.of_vector_space_index K A) K A := basis.of_vector_space K A	⊢ (module.rank F K).lift * (module.rank K A).lift = (module.rank F A).lift
V : Type u_1,	_inst_1 : inner_product_space ℝ V,	x y : V	⊢ inner_product_geometry.angle x y = 0 ↔ x ≠ 0 ∧ ∃ (r : ℝ), 0 < r ∧ y = r • x
V : Type u_1,	_inst_1 : inner_product_space ℝ V,	x y : V	⊢ has_inner.inner x y / (∥x∥ * ∥y∥) ≤ 1
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	p1 p2 : P	⊢ ∠ p1 p2 p2 = π / 2
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	s : affine_subspace ℝ P,	_inst_4 : nonempty ↥s,	_inst_5 : complete_space ↥(s.direction),	p : P	⊢ ⇑(euclidean_geometry.orthogonal_projection s) ↑(⇑(euclidean_geometry.orthogonal_projection s) p) = ⇑(euclidean_geometry.orthogonal_projection s) p
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	s : affine_subspace ℝ P,	_inst_4 : nonempty ↥s,	_inst_5 : complete_space ↥(s.direction),	p : P	⊢ ↑(⇑(euclidean_geometry.orthogonal_projection s) ↑(⇑(euclidean_geometry.orthogonal_projection s) p)) = ↑(⇑(euclidean_geometry.orthogonal_projection s) p)
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	s : affine_subspace ℝ P,	_inst_4 : nonempty ↥s,	_inst_5 : complete_space ↥(s.direction),	p : P	⊢ ↑(⇑(euclidean_geometry.orthogonal_projection s) p) ∈ s
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ affine.simplex.altitude t₂ j₂ = affine_span ℝ {t₁.points i₁, t₁.points i₂}
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ affine_span ℝ {t₁.points i₁, t₁.points i₂} = affine.simplex.altitude t₂ j₂
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ t₁.points i₁ ≠ t₂.points j₂ ∧ t₁.points i₁ ∈ affine_span ℝ (set.range t₂.points) ∧ t₁.points i₁ -ᵥ t₂.points j₂ ∈ ((affine_span ℝ (t₂.points '' ↑(finset.univ.erase j₂))).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ t₁.points i₁ ≠ t₁.points i₂ ∧ t₁.points i₁ ∈ affine_span ℝ (set.range t₂.points) ∧ t₁.points i₁ -ᵥ t₁.points i₂ ∈ ((affine_span ℝ (t₂.points '' ↑(finset.univ.erase j₂))).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ t₁.points i₁ ∈ affine_span ℝ (set.range t₂.points) ∧ t₁.points i₁ -ᵥ t₁.points i₂ ∈ ((affine_span ℝ (t₂.points '' ↑(finset.univ.erase j₂))).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points)
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ (affine_span ℝ (set.range t₂.points)).direction = (affine_span ℝ (set.range t₁.points)).direction
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ finset.univ = {j₁, j₂, j₃}
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ set.range t₂.points ⊆ ↑(affine_span ℝ (set.range t₁.points))
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃	⊢ finset.univ = {j₁, j₂, j₃}
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ finset.univ = {j₁, j₂, j₃}		V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	hu : finset.univ = {j₁, j₂, j₃}	⊢ set.range t₂.points ⊆ ↑(affine_span ℝ (set.range t₁.points))
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	hu : finset.univ = {j₁, j₂, j₃}	⊢ set.range t₂.points ⊆ ↑(affine_span ℝ (set.range t₁.points))
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	hu : finset.univ = {j₁, j₂, j₃}	⊢ t₁.orthocenter ∈ ↑(affine_span ℝ (set.range t₁.points)) ∧ t₁.points i₂ ∈ ↑(affine_span ℝ (set.range t₁.points)) ∧ t₁.points i₃ ∈ ↑(affine_span ℝ (set.range t₁.points))
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ set.range t₂.points ⊆ ↑(affine_span ℝ (set.range t₁.points))		V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ finite_dimensional.finrank ℝ ↥((affine_span ℝ (set.range t₂.points)).direction) = finite_dimensional.finrank ℝ ↥((affine_span ℝ (set.range t₁.points)).direction)
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ finite_dimensional.finrank ℝ ↥((affine_span ℝ (set.range t₂.points)).direction) = finite_dimensional.finrank ℝ ↥((affine_span ℝ (set.range t₁.points)).direction)
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃	⊢ affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points)		V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points)	⊢ t₁.points i₁ ∈ affine_span ℝ (set.range t₂.points) ∧ t₁.points i₁ -ᵥ t₁.points i₂ ∈ ((affine_span ℝ (t₂.points '' ↑(finset.univ.erase j₂))).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points)	⊢ t₁.points i₁ ∈ affine_span ℝ (set.range t₂.points) ∧ t₁.points i₁ -ᵥ t₁.points i₂ ∈ ((affine_span ℝ (t₂.points '' ↑(finset.univ.erase j₂))).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points)	⊢ t₁.points i₁ ∈ affine_span ℝ (set.range t₁.points) ∧ t₁.points i₁ -ᵥ t₁.points i₂ ∈ ((affine_span ℝ (t₂.points '' ↑(finset.univ.erase j₂))).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points)	⊢ t₁.points i₁ -ᵥ t₁.points i₂ ∈ ((affine_span ℝ (t₂.points '' ↑(finset.univ.erase j₂))).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points)	⊢ finset.univ.erase j₂ = {j₁, j₃}
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points)	⊢ finset.univ.erase j₂ = {j₁, j₃}
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points)	⊢ finset.univ.erase j₂ = {j₁, j₃}		V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃}	⊢ t₁.points i₁ -ᵥ t₁.points i₂ ∈ ((affine_span ℝ (t₂.points '' ↑(finset.univ.erase j₂))).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃}	⊢ t₁.points i₁ -ᵥ t₁.points i₂ ∈ ((affine_span ℝ (t₂.points '' ↑(finset.univ.erase j₂))).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃}	⊢ t₁.points i₁ -ᵥ t₁.points i₂ ∈ ((affine_span ℝ {t₁.orthocenter, t₁.points i₃}).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃},	hle : ((affine.simplex.altitude t₁ i₃).direction)ᗮ ≤ ((affine_span ℝ {t₁.orthocenter, t₁.points i₃}).direction)ᗮ	⊢ t₁.points i₁ -ᵥ t₁.points i₂ ∈ ((affine_span ℝ {t₁.orthocenter, t₁.points i₃}).direction)ᗮ
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃},	hle : ((affine.simplex.altitude t₁ i₃).direction)ᗮ ≤ ((affine_span ℝ {t₁.orthocenter, t₁.points i₃}).direction)ᗮ	⊢ t₁.points i₁ -ᵥ t₁.points i₂ ∈ vector_span ℝ (t₁.points '' ↑(finset.univ.erase i₃))
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃},	hle : ((affine.simplex.altitude t₁ i₃).direction)ᗮ ≤ ((affine_span ℝ {t₁.orthocenter, t₁.points i₃}).direction)ᗮ	⊢ finset.univ.erase i₃ = {i₁, i₂}
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃}	⊢ finset.univ.erase i₃ = {i₁, i₂}
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃},	hle : ((affine.simplex.altitude t₁ i₃).direction)ᗮ ≤ ((affine_span ℝ {t₁.orthocenter, t₁.points i₃}).direction)ᗮ	⊢ finset.univ.erase i₃ = {i₁, i₂}		V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃},	hle : ((affine.simplex.altitude t₁ i₃).direction)ᗮ ≤ ((affine_span ℝ {t₁.orthocenter, t₁.points i₃}).direction)ᗮ,	hui : finset.univ.erase i₃ = {i₁, i₂}	⊢ t₁.points i₁ -ᵥ t₁.points i₂ ∈ vector_span ℝ (t₁.points '' ↑(finset.univ.erase i₃))
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃},	hle : ((affine.simplex.altitude t₁ i₃).direction)ᗮ ≤ ((affine_span ℝ {t₁.orthocenter, t₁.points i₃}).direction)ᗮ,	hui : finset.univ.erase i₃ = {i₁, i₂}	⊢ t₁.points i₁ -ᵥ t₁.points i₂ ∈ vector_span ℝ (t₁.points '' ↑(finset.univ.erase i₃))
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	t₁ t₂ : affine.triangle ℝ P,	i₁ i₂ i₃ j₁ j₂ j₃ : fin 3,	hi₁₂ : i₁ ≠ i₂,	hi₁₃ : i₁ ≠ i₃,	hi₂₃ : i₂ ≠ i₃,	hj₁₂ : j₁ ≠ j₂,	hj₁₃ : j₁ ≠ j₃,	hj₂₃ : j₂ ≠ j₃,	h₁ : t₂.points j₁ = t₁.orthocenter,	h₂ : t₂.points j₂ = t₁.points i₂,	h₃ : t₂.points j₃ = t₁.points i₃,	he : affine_span ℝ (set.range t₂.points) = affine_span ℝ (set.range t₁.points),	hu : finset.univ.erase j₂ = {j₁, j₃},	hle : ((affine.simplex.altitude t₁ i₃).direction)ᗮ ≤ ((affine_span ℝ {t₁.orthocenter, t₁.points i₃}).direction)ᗮ,	hui : finset.univ.erase i₃ = {i₁, i₂}	⊢ t₁.points i₁ -ᵥ t₁.points i₂ ∈ vector_span ℝ {t₁.points i₁, t₁.points i₂}
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b	⊢ has_dist.dist a' c' = r * has_dist.dist a c
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b	⊢ has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2		V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2	⊢ has_dist.dist a' c' = r * has_dist.dist a c
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b	⊢ has_dist.dist a' c' ^ 2 = has_dist.dist a' b' ^ 2 + has_dist.dist c' b' ^ 2 - 2 * has_dist.dist a' b' * has_dist.dist c' b' * real.cos (∠ a' b' c')
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b	⊢ has_dist.dist a' b' ^ 2 + has_dist.dist c' b' ^ 2 - 2 * has_dist.dist a' b' * has_dist.dist c' b' * real.cos (∠ a' b' c') = r ^ 2 * (has_dist.dist a b ^ 2 + has_dist.dist c b ^ 2 - 2 * has_dist.dist a b * has_dist.dist c b * real.cos (∠ a b c))
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b	⊢ (r * has_dist.dist a b) ^ 2 + (r * has_dist.dist c b) ^ 2 - 2 * (r * has_dist.dist a b) * (r * has_dist.dist c b) * real.cos (∠ a b c) = r ^ 2 * (has_dist.dist a b ^ 2 + has_dist.dist c b ^ 2 - 2 * has_dist.dist a b * has_dist.dist c b * real.cos (∠ a b c))
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b	⊢ r ^ 2 * (has_dist.dist a b ^ 2 + has_dist.dist c b ^ 2 - 2 * has_dist.dist a b * has_dist.dist c b * real.cos (∠ a b c)) = (r * has_dist.dist a c) ^ 2
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2	⊢ has_dist.dist a' c' = r * has_dist.dist a c
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : a = b	⊢ a' = b'
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : a = b	⊢ has_dist.dist a' c' = r * has_dist.dist a c
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : a = b	⊢ a' = b'		V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : a = b,	hab'₁ : a' = b'	⊢ has_dist.dist a' c' = r * has_dist.dist a c
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : a = b	⊢ has_dist.dist a' c' = r * has_dist.dist a c		V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : ¬a = b	⊢ has_dist.dist a' c' = r * has_dist.dist a c
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : a = b,	hab'₁ : a' = b'	⊢ has_dist.dist a' c' = r * has_dist.dist a c
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : ¬a = b	⊢ 0 ≤ r * has_dist.dist a b
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : ¬a = b	⊢ 0 ≤ has_dist.dist a' b'
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : ¬a = b	⊢ has_dist.dist a' c' = r * has_dist.dist a c
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : ¬a = b	⊢ 0 ≤ r * has_dist.dist a b		V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : ¬a = b,	h1 : 0 ≤ r * has_dist.dist a b	⊢ has_dist.dist a' c' = r * has_dist.dist a c
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : ¬a = b,	h1 : 0 ≤ r * has_dist.dist a b	⊢ has_dist.dist a' c' = r * has_dist.dist a c
V : Type u_1,	P : Type u_2,	_inst_1 : inner_product_space ℝ V,	_inst_2 : metric_space P,	_inst_3 : normed_add_torsor V P,	a b c a' b' c' : P,	r : ℝ,	h : ∠ a' b' c' = ∠ a b c,	hab : has_dist.dist a' b' = r * has_dist.dist a b,	hcb : has_dist.dist c' b' = r * has_dist.dist c b,	h' : has_dist.dist a' c' ^ 2 = (r * has_dist.dist a c) ^ 2,	hab₁ : ¬a = b,	h1 : 0 ≤ r * has_dist.dist a b,	h2 : 0 ≤ r	⊢ has_dist.dist a' c' = r * has_dist.dist a c
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_4,	_inst_6 : topological_space H,	I : model_with_corners 𝕜 E H,	N : Type u_6,	_inst_8 : topological_space N,	_inst_9 : charted_space H N,	A : Type u_10,	_inst_15 : normed_ring A,	_inst_16 : normed_algebra 𝕜 A,	_inst_17 : smooth_ring 𝓘(𝕜, A) A,	c : 𝕜,	f : C^⊤⟮I, N; 𝓘(𝕜, A), A⟯	⊢ smooth_map.C.to_fun c * f = f * smooth_map.C.to_fun c
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_4,	_inst_6 : topological_space H,	I : model_with_corners 𝕜 E H,	N : Type u_6,	_inst_8 : topological_space N,	_inst_9 : charted_space H N,	A : Type u_10,	_inst_15 : normed_ring A,	_inst_16 : normed_algebra 𝕜 A,	_inst_17 : smooth_ring 𝓘(𝕜, A) A,	c : 𝕜,	f : C^⊤⟮I, N; 𝓘(𝕜, A), A⟯	⊢ smooth_map.C.to_fun c * f = f * smooth_map.C.to_fun c
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_4,	_inst_6 : topological_space H,	I : model_with_corners 𝕜 E H,	N : Type u_6,	_inst_8 : topological_space N,	_inst_9 : charted_space H N,	A : Type u_10,	_inst_15 : normed_ring A,	_inst_16 : normed_algebra 𝕜 A,	_inst_17 : smooth_ring 𝓘(𝕜, A) A,	c : 𝕜,	f : C^⊤⟮I, N; 𝓘(𝕜, A), A⟯,	x : N	⊢ ⇑(smooth_map.C.to_fun c * f) x = ⇑(f * smooth_map.C.to_fun c) x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_4,	_inst_6 : topological_space H,	I : model_with_corners 𝕜 E H,	N : Type u_6,	_inst_8 : topological_space N,	_inst_9 : charted_space H N,	A : Type u_10,	_inst_15 : normed_ring A,	_inst_16 : normed_algebra 𝕜 A,	_inst_17 : smooth_ring 𝓘(𝕜, A) A,	c : 𝕜,	f : C^⊤⟮I, N; 𝓘(𝕜, A), A⟯	⊢ c • f = smooth_map.C.to_fun c * f
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_4,	_inst_6 : topological_space H,	I : model_with_corners 𝕜 E H,	N : Type u_6,	_inst_8 : topological_space N,	_inst_9 : charted_space H N,	A : Type u_10,	_inst_15 : normed_ring A,	_inst_16 : normed_algebra 𝕜 A,	_inst_17 : smooth_ring 𝓘(𝕜, A) A,	c : 𝕜,	f : C^⊤⟮I, N; 𝓘(𝕜, A), A⟯	⊢ c • f = smooth_map.C.to_fun c * f
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_4,	_inst_6 : topological_space H,	I : model_with_corners 𝕜 E H,	N : Type u_6,	_inst_8 : topological_space N,	_inst_9 : charted_space H N,	A : Type u_10,	_inst_15 : normed_ring A,	_inst_16 : normed_algebra 𝕜 A,	_inst_17 : smooth_ring 𝓘(𝕜, A) A,	c : 𝕜,	f : C^⊤⟮I, N; 𝓘(𝕜, A), A⟯,	x : N	⊢ ⇑(c • f) x = ⇑(smooth_map.C.to_fun c * f) x
E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	c : M,	f : smooth_bump_function I c,	_inst_8 : t2_space M,	_inst_9 : smooth_manifold_with_corners I M	⊢ smooth I 𝓘(ℝ, ℝ) ⇑f
E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	c : M,	f : smooth_bump_function I c,	_inst_8 : t2_space M,	_inst_9 : smooth_manifold_with_corners I M,	x : M,	hx : x ∈ closure (function.support ⇑f)	⊢ times_cont_mdiff_at I 𝓘(ℝ, ℝ) ⊤ ⇑f x
E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	c : M,	f : smooth_bump_function I c,	_inst_8 : t2_space M,	_inst_9 : smooth_manifold_with_corners I M,	x : M,	hx : x ∈ closure (function.support ⇑f),	this : x ∈ (charted_space.chart_at H c).to_local_equiv.source	⊢ times_cont_mdiff_at I 𝓘(ℝ, ℝ) ⊤ ⇑f x
E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	c : M,	f : smooth_bump_function I c,	_inst_8 : t2_space M,	_inst_9 : smooth_manifold_with_corners I M,	x : M,	hx : x ∈ closure (function.support ⇑f),	this : x ∈ (charted_space.chart_at H c).to_local_equiv.source	⊢ times_cont_mdiff_at I 𝓘(ℝ, ℝ) ⊤ (⇑(f.to_times_cont_diff_bump) ∘ ⇑(ext_chart_at I c)) x
H : Type u,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	_inst_4 : topological_space.second_countable_topology H,	_inst_5 : sigma_compact_space M	⊢ topological_space.second_countable_topology M
H : Type u,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	_inst_4 : topological_space.second_countable_topology H,	_inst_5 : sigma_compact_space M,	s : set M,	hsc : s.countable,	hsU : (⋃ (x : M) (hx : x ∈ s), (charted_space.chart_at H x).to_local_equiv.source) = set.univ	⊢ topological_space.second_countable_topology M
H : Type u,	M : Type u_2,	_inst_1 : topological_space H,	c : charted_space_core H M,	e : local_equiv M H,	he : e ∈ c.atlas	⊢ is_open e.target
H : Type u,	M : Type u_2,	_inst_1 : topological_space H,	c : charted_space_core H M,	e : local_equiv M H,	he : e ∈ c.atlas,	E : e.target ∩ ⇑(e.symm) ⁻¹' e.source = e.target	⊢ is_open e.target
H : Type u,	M : Type u_2,	_inst_1 : topological_space H,	c : charted_space_core H M,	x : M	⊢ c.local_homeomorph (c.chart_at x) _ ∈ ⋃ (e : local_equiv M H) (he : e ∈ c.atlas), {c.local_homeomorph e he}
H : Type u,	M : Type u_2,	_inst_1 : topological_space H,	c : charted_space_core H M,	x : M	⊢ ∃ (i : local_equiv M H) (i_1 : i ∈ c.atlas), c.local_homeomorph (c.chart_at x) _ = c.local_homeomorph i i_1
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	F : Type u_4,	_inst_6 : normed_group F,	_inst_7 : normed_space 𝕜 F,	H : Type u_5,	_inst_8 : topological_space H,	G : Type u_7,	_inst_10 : topological_space G,	I : model_with_corners 𝕜 E H,	J : model_with_corners 𝕜 F G,	M : Type u_8,	_inst_11 : topological_space M,	_inst_12 : charted_space H M,	N : Type u_10,	_inst_15 : topological_space N,	_inst_16 : charted_space G N,	n : with_top ℕ,	α : Sort u_3,	h : M ≃ₘ^n⟮I,J⟯ N,	f : α → M	⊢ set.range (⇑h ∘ f) = ⇑(h.symm) ⁻¹' set.range f
⊢ charted_space (euclidean_half_space 1) ↥(set.Icc 0 1)
n : ℕ	⊢ set.range (λ (x : euclidean_quadrant n), x.val) = {y : euclidean_space ℝ (fin n) | ∀ (i : fin n), 0 ≤ y i}
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x	⊢ charted_space.lift_prop_within_at P g' s x
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x	⊢ P (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x	⊢ s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	y : M	⊢ y ∈ s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source ↔ y ∈ s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	y : M	⊢ y ∈ s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source → y ∈ s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	y : M,	hy : y ∈ s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source	⊢ y ∈ s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	y : M	⊢ y ∈ s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source → y ∈ s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source		H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	y : M	⊢ y ∈ s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source → y ∈ s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	y : M,	hy : y ∈ s ∧ g' y ∈ (charted_space.chart_at H' (g' x)).to_local_equiv.source	⊢ y ∈ s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	y : M	⊢ y ∈ s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source → y ∈ s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	y : M,	hy : y ∈ s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source	⊢ y ∈ s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x	⊢ s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source		H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source	⊢ P (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	y : M,	hy : y ∈ s ∧ g y ∈ (charted_space.chart_at H' (g' x)).to_local_equiv.source	⊢ y ∈ s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source	⊢ P (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : P (⇑(charted_space.chart_at H' (g x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g ⁻¹' (charted_space.chart_at H' (g x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)	⊢ P (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : P (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)	⊢ P (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : P (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)	⊢ ∀ (y : H), y ∈ (charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source) → (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) y = (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) y
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : P (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x),	y : H,	hy : y ∈ (charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)	⊢ (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) y = (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) y
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : P (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x),	y : H,	hy : y ∈ (charted_space.chart_at H x).to_local_equiv.target ∧ ⇑((charted_space.chart_at H x).symm) y ∈ s ∧ g' (⇑((charted_space.chart_at H x).symm) y) ∈ (charted_space.chart_at H' (g' x)).to_local_equiv.source	⊢ ⇑((charted_space.chart_at H x).symm) y ∈ s
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : P (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x),	y : H,	hy : y ∈ (charted_space.chart_at H x).to_local_equiv.target ∧ ⇑((charted_space.chart_at H x).symm) y ∈ s ∧ g' (⇑((charted_space.chart_at H x).symm) y) ∈ (charted_space.chart_at H' (g' x)).to_local_equiv.source	⊢ (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) y = (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) y
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : P (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)	⊢ ∀ (y : H), y ∈ (charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source) → (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) y = (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) y		H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : P (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)	⊢ (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) (⇑(charted_space.chart_at H x) x) = (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) (⇑(charted_space.chart_at H x) x)
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : P (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x),	y : H,	hy : y ∈ (charted_space.chart_at H x).to_local_equiv.target ∧ ⇑((charted_space.chart_at H x).symm) y ∈ s ∧ g' (⇑((charted_space.chart_at H x).symm) y) ∈ (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : ⇑((charted_space.chart_at H x).symm) y ∈ s	⊢ (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) y = (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) y
H : Type u_1,	M : Type u_2,	_inst_1 : topological_space H,	_inst_2 : topological_space M,	_inst_3 : charted_space H M,	H' : Type u_3,	M' : Type u_4,	_inst_4 : topological_space H',	_inst_5 : topological_space M',	_inst_6 : charted_space H' M',	G : structure_groupoid H,	G' : structure_groupoid H',	P : (H → H') → set H → H → Prop,	g g' : M → M',	s : set M,	x : M,	hG : G.local_invariant_prop G' P,	h : charted_space.lift_prop_within_at P g s x,	h₁ : ∀ (y : M), y ∈ s → g' y = g y,	hx : g' x = g x,	A : s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source = s ∩ g ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source,	this : P (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) ((charted_space.chart_at H x).to_local_equiv.target ∩ ⇑((charted_space.chart_at H x).symm) ⁻¹' (s ∩ g' ⁻¹' (charted_space.chart_at H' (g' x)).to_local_equiv.source)) (⇑(charted_space.chart_at H x) x)	⊢ (⇑(charted_space.chart_at H' (g' x)) ∘ g ∘ ⇑((charted_space.chart_at H x).symm)) (⇑(charted_space.chart_at H x) x) = (⇑(charted_space.chart_at H' (g' x)) ∘ g' ∘ ⇑((charted_space.chart_at H x).symm)) (⇑(charted_space.chart_at H x) x)
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G	⊢ ∀ {s : set H} {x : H} {u : set H} {f : H → H}, is_open u → x ∈ u → (G.is_local_structomorph_within_at f s x ↔ G.is_local_structomorph_within_at f (s ∩ u) x)
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u	⊢ G.is_local_structomorph_within_at f s x ↔ G.is_local_structomorph_within_at f (s ∩ u) x
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u	⊢ G.is_local_structomorph_within_at f s x → G.is_local_structomorph_within_at f (s ∩ u) x
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s ∩ u	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source) ∧ x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s ∩ u,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ s ∩ u ∩ e.to_local_equiv.source ⊆ s ∩ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s ∩ u,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source) ∧ x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u	⊢ G.is_local_structomorph_within_at f s x → G.is_local_structomorph_within_at f (s ∩ u) x		H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u	⊢ G.is_local_structomorph_within_at f (s ∩ u) x → G.is_local_structomorph_within_at f s x
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s ∩ u,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source,	this : s ∩ u ∩ e.to_local_equiv.source ⊆ s ∩ e.to_local_equiv.source	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source) ∧ x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u	⊢ G.is_local_structomorph_within_at f (s ∩ u) x → G.is_local_structomorph_within_at f s x
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source) ∧ x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source) ∧ x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ e.restr (interior u) ∈ G		H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ set.eq_on f (e.restr (interior u)).to_local_equiv.to_fun (s ∩ (e.restr (interior u)).to_local_equiv.source)		H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ x ∈ (e.restr (interior u)).to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ e.restr (interior u) ∈ G
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ s ∩ u ∩ e.to_local_equiv.source = s ∩ (e.to_local_equiv.source ∩ u)
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ set.eq_on f (e.restr (interior u)).to_local_equiv.to_fun (s ∩ (e.restr (interior u)).to_local_equiv.source)
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ set.eq_on f (e.restr (interior u)).to_local_equiv.to_fun (s ∩ (e.restr (interior u)).to_local_equiv.source)		H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ x ∈ (e.restr (interior u)).to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source,	this : s ∩ u ∩ e.to_local_equiv.source = s ∩ (e.to_local_equiv.source ∩ u)	⊢ set.eq_on f (e.restr (interior u)).to_local_equiv.to_fun (s ∩ (e.restr (interior u)).to_local_equiv.source)
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	u : set H,	f : H → H,	hu : is_open u,	hux : x ∈ u,	h : G.is_local_structomorph_within_at f (s ∩ u) x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ u ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ x ∈ (e.restr (interior u)).to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G	⊢ ∀ {s : set H} {x : H} {f : H → H} {e : local_homeomorph H H}, e ∈ G → x ∈ e.to_local_equiv.source → G.is_local_structomorph_within_at f s x → G.is_local_structomorph_within_at (f ∘ ⇑(e.symm)) (e.to_local_equiv.target ∩ ⇑(e.symm) ⁻¹' s) (⇑e x)
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he'x : x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : ⇑e' x ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s	⊢ x ∈ s
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he'x : x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : ⇑e' x ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on (f ∘ ⇑(e'.symm)) e.to_local_equiv.to_fun (e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s ∩ e.to_local_equiv.source) ∧ ⇑e' x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he'x : x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : ⇑e' x ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s,	hxs : x ∈ s	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on (f ∘ ⇑(e'.symm)) e.to_local_equiv.to_fun (e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s ∩ e.to_local_equiv.source) ∧ ⇑e' x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he'x : x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : ⇑e' x ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s,	hxs : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on (f ∘ ⇑(e'.symm)) e.to_local_equiv.to_fun (e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s ∩ e.to_local_equiv.source) ∧ ⇑e' x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he'x : x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : ⇑e' x ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s,	hxs : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ set.eq_on (f ∘ ⇑(e'.symm)) (e'.symm ≫ₕ e).to_local_equiv.to_fun (e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s ∩ (e'.symm ≫ₕ e).to_local_equiv.source)
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he'x : x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : ⇑e' x ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s,	hxs : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source,	y : H,	hy : y ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s ∩ (e'.symm ≫ₕ e).to_local_equiv.source	⊢ (f ∘ ⇑(e'.symm)) y = (e'.symm ≫ₕ e).to_local_equiv.to_fun y
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he'x : x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : ⇑e' x ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s,	hxs : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ set.eq_on (f ∘ ⇑(e'.symm)) (e'.symm ≫ₕ e).to_local_equiv.to_fun (e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s ∩ (e'.symm ≫ₕ e).to_local_equiv.source)		H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he'x : x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : ⇑e' x ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s,	hxs : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ ⇑e' x ∈ (e'.symm ≫ₕ e).to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he'x : x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : ⇑e' x ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s,	hxs : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source,	y : H,	hy : (y ∈ e'.to_local_equiv.target ∧ ⇑(e'.symm) y ∈ s) ∧ y ∈ e'.to_local_equiv.target ∧ ⇑(e'.symm) y ∈ e.to_local_equiv.source	⊢ (f ∘ ⇑(e'.symm)) y = (e'.symm ≫ₕ e).to_local_equiv.to_fun y
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he'x : x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : ⇑e' x ∈ e'.to_local_equiv.target ∩ ⇑(e'.symm) ⁻¹' s,	hxs : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ ⇑e' x ∈ (e'.symm ≫ₕ e).to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G	⊢ ∀ {s : set H} {x : H} {f g : H → H}, (∀ (y : H), y ∈ s → f y = g y) → f x = g x → G.is_local_structomorph_within_at f s x → G.is_local_structomorph_within_at g s x
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f g : H → H,	hfgs : ∀ (y : H), y ∈ s → f y = g y,	hfg' : f x = g x,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on g e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source) ∧ x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f g : H → H,	hfgs : ∀ (y : H), y ∈ s → f y = g y,	hfg' : f x = g x,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on g e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source) ∧ x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f g : H → H,	hfgs : ∀ (y : H), y ∈ s → f y = g y,	hfg' : f x = g x,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ set.eq_on g e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source)
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f g : H → H,	hfgs : ∀ (y : H), y ∈ s → f y = g y,	hfg' : f x = g x,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source,	y : H,	hy : y ∈ s ∩ e.to_local_equiv.source	⊢ g y = e.to_local_equiv.to_fun y
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G	⊢ ∀ {s : set H} {x : H} {f : H → H} {e' : local_homeomorph H H}, e' ∈ G → s ⊆ f ⁻¹' e'.to_local_equiv.source → f x ∈ e'.to_local_equiv.source → G.is_local_structomorph_within_at f s x → G.is_local_structomorph_within_at (⇑e' ∘ f) s x
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he' : s ⊆ f ⁻¹' e'.to_local_equiv.source,	hfx : f x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on (⇑e' ∘ f) e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source) ∧ x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he' : s ⊆ f ⁻¹' e'.to_local_equiv.source,	hfx : f x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ ∃ (e : local_homeomorph H H), e ∈ G ∧ set.eq_on (⇑e' ∘ f) e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source) ∧ x ∈ e.to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he' : s ⊆ f ⁻¹' e'.to_local_equiv.source,	hfx : f x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ set.eq_on (⇑e' ∘ f) (e ≫ₕ e').to_local_equiv.to_fun (s ∩ (e ≫ₕ e').to_local_equiv.source)
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he' : s ⊆ f ⁻¹' e'.to_local_equiv.source,	hfx : f x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source,	y : H,	hy : y ∈ s ∩ (e ≫ₕ e').to_local_equiv.source	⊢ (⇑e' ∘ f) y = (e ≫ₕ e').to_local_equiv.to_fun y
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he' : s ⊆ f ⁻¹' e'.to_local_equiv.source,	hfx : f x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ set.eq_on (⇑e' ∘ f) (e ≫ₕ e').to_local_equiv.to_fun (s ∩ (e ≫ₕ e').to_local_equiv.source)		H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he' : s ⊆ f ⁻¹' e'.to_local_equiv.source,	hfx : f x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ x ∈ (e ≫ₕ e').to_local_equiv.source
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he' : s ⊆ f ⁻¹' e'.to_local_equiv.source,	hfx : f x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source,	y : H,	hy : y ∈ s ∧ y ∈ e.to_local_equiv.source ∧ ⇑e y ∈ e'.to_local_equiv.source	⊢ (⇑e' ∘ f) y = (e ≫ₕ e').to_local_equiv.to_fun y
H : Type u_1,	_inst_1 : topological_space H,	G : structure_groupoid H,	_inst_7 : closed_under_restriction G,	s : set H,	x : H,	f : H → H,	e' : local_homeomorph H H,	he'G : e' ∈ G,	he' : s ⊆ f ⁻¹' e'.to_local_equiv.source,	hfx : f x ∈ e'.to_local_equiv.source,	h : G.is_local_structomorph_within_at f s x,	hx : x ∈ s,	e : local_homeomorph H H,	heG : e ∈ G,	hef : set.eq_on f e.to_local_equiv.to_fun (s ∩ e.to_local_equiv.source),	hex : x ∈ e.to_local_equiv.source	⊢ x ∈ (e ≫ₕ e').to_local_equiv.source
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	s : set M,	p : tangent_bundle I M,	hs : unique_mdiff_within_at I s (tangent_bundle.proj I M p)	⊢ tangent_map_within I I id s p = p
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	s : set M,	p : tangent_bundle I M,	hs : unique_mdiff_within_at I s (tangent_bundle.proj I M p)	⊢ ⟨id p.fst, ⇑(mfderiv_within I I id s p.fst) p.snd⟩ = p
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	s : set M,	p_fst : M,	p_snd : tangent_space I p_fst,	hs : unique_mdiff_within_at I s (tangent_bundle.proj I M ⟨p_fst, p_snd⟩)	⊢ ⟨id ⟨p_fst, p_snd⟩.fst, ⇑(continuous_linear_map.id 𝕜 (tangent_space I ⟨p_fst, p_snd⟩.fst)) ⟨p_fst, p_snd⟩.snd⟩ = ⟨p_fst, p_snd⟩
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	s : set M,	p : tangent_bundle I M,	hs : unique_mdiff_within_at I s (tangent_bundle.proj I M p)	⊢ ⟨id p.fst, ⇑(continuous_linear_map.id 𝕜 (tangent_space I p.fst)) p.snd⟩ = p		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	s : set M,	p : tangent_bundle I M,	hs : unique_mdiff_within_at I s (tangent_bundle.proj I M p)	⊢ unique_mdiff_within_at I s p.fst
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	s : set M,	p : tangent_bundle I M,	hs : unique_mdiff_within_at I s (tangent_bundle.proj I M p)	⊢ ⟨id p.fst, ⇑(continuous_linear_map.id 𝕜 (tangent_space I p.fst)) p.snd⟩ = p
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	s : set M,	p : tangent_bundle I M,	hs : unique_mdiff_within_at I s (tangent_bundle.proj I M p)	⊢ unique_mdiff_within_at I s p.fst
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	f : E → E'	⊢ times_cont_mdiff 𝓘(𝕜, E) 𝓘(𝕜, E') n f ↔ times_cont_diff 𝕜 n f
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E'	⊢ times_cont_mdiff (I.prod 𝓘(𝕜, E')) I n Z.to_topological_fiber_bundle_core.proj
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E',	x : Z.to_topological_fiber_bundle_core.total_space	⊢ times_cont_mdiff_at (I.prod 𝓘(𝕜, E')) I n Z.to_topological_fiber_bundle_core.proj x
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E',	x : Z.to_topological_fiber_bundle_core.total_space	⊢ continuous_within_at Z.to_topological_fiber_bundle_core.proj set.univ x ∧ times_cont_diff_within_at 𝕜 n (⇑(ext_chart_at I (Z.to_topological_fiber_bundle_core.proj x)) ∘ Z.to_topological_fiber_bundle_core.proj ∘ ⇑((ext_chart_at (I.prod 𝓘(𝕜, E')) x).symm)) ((ext_chart_at (I.prod 𝓘(𝕜, E')) x).target ∩ ⇑((ext_chart_at (I.prod 𝓘(𝕜, E')) x).symm) ⁻¹' (set.univ ∩ Z.to_topological_fiber_bundle_core.proj ⁻¹' (ext_chart_at I (Z.to_topological_fiber_bundle_core.proj x)).source)) (⇑(ext_chart_at (I.prod 𝓘(𝕜, E')) x) x)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E',	x : Z.to_topological_fiber_bundle_core.total_space	⊢ times_cont_diff_within_at 𝕜 n (⇑(ext_chart_at I (Z.to_topological_fiber_bundle_core.proj x)) ∘ Z.to_topological_fiber_bundle_core.proj ∘ ⇑((ext_chart_at (I.prod 𝓘(𝕜, E')) x).symm)) ((ext_chart_at (I.prod 𝓘(𝕜, E')) x).target ∩ ⇑((ext_chart_at (I.prod 𝓘(𝕜, E')) x).symm) ⁻¹' (set.univ ∩ Z.to_topological_fiber_bundle_core.proj ⁻¹' (ext_chart_at I (Z.to_topological_fiber_bundle_core.proj x)).source)) (⇑(ext_chart_at (I.prod 𝓘(𝕜, E')) x) x)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E',	x : Z.to_topological_fiber_bundle_core.total_space	⊢ times_cont_diff_within_at 𝕜 n (λ (x_1 : E × E'), ⇑I (⇑(charted_space.chart_at H x.fst) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst)))) ((set.range ⇑I).prod set.univ ∩ ((λ (p : E × E'), (⇑(I.symm) p.fst, p.snd)) ⁻¹' (charted_space.chart_at H x.fst).to_local_equiv.target.prod set.univ ∩ (λ (p : E × E'), (⇑(I.symm) p.fst, p.snd)) ⁻¹' ((λ (p : H × E'), (⇑((charted_space.chart_at H x.fst).symm) p.fst, p.snd)) ⁻¹' (Z.to_topological_fiber_bundle_core.local_triv ⟨charted_space.chart_at H x.fst, _⟩).to_local_homeomorph.to_local_equiv.target)) ∩ (λ (x_1 : E × E'), ⟨(⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst, x_1.snd).fst, (⇑(I.symm) x_1.fst, x_1.snd).snd).fst, Z.to_topological_fiber_bundle_core.coord_change ⟨charted_space.chart_at H x.fst, _⟩ (Z.to_topological_fiber_bundle_core.index_at (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst))) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst)) x_1.snd⟩) ⁻¹' (sigma.fst ⁻¹' (charted_space.chart_at H x.fst).to_local_equiv.source)) (⇑I (⇑(charted_space.chart_at H x.fst) x.fst), Z.to_topological_fiber_bundle_core.coord_change (Z.to_topological_fiber_bundle_core.index_at x.fst) ⟨charted_space.chart_at H x.fst, _⟩ x.fst x.snd)
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E',	x : Z.to_topological_fiber_bundle_core.total_space	⊢ ∀ (y : E × E'), y ∈ (set.range ⇑I).prod set.univ ∩ ((λ (p : E × E'), (⇑(I.symm) p.fst, p.snd)) ⁻¹' (charted_space.chart_at H x.fst).to_local_equiv.target.prod set.univ ∩ (λ (p : E × E'), (⇑(I.symm) p.fst, p.snd)) ⁻¹' ((λ (p : H × E'), (⇑((charted_space.chart_at H x.fst).symm) p.fst, p.snd)) ⁻¹' (Z.to_topological_fiber_bundle_core.local_triv ⟨charted_space.chart_at H x.fst, _⟩).to_local_homeomorph.to_local_equiv.target)) ∩ (λ (x_1 : E × E'), ⟨(⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst, x_1.snd).fst, (⇑(I.symm) x_1.fst, x_1.snd).snd).fst, Z.to_topological_fiber_bundle_core.coord_change ⟨charted_space.chart_at H x.fst, _⟩ (Z.to_topological_fiber_bundle_core.index_at (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst))) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst)) x_1.snd⟩) ⁻¹' (sigma.fst ⁻¹' (charted_space.chart_at H x.fst).to_local_equiv.source) → ⇑I (⇑(charted_space.chart_at H x.fst) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) y.fst))) = y.fst
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E',	x : Z.to_topological_fiber_bundle_core.total_space,	a : E,	b : E',	hab : (a, b) ∈ (set.range ⇑I).prod set.univ ∩ ((λ (p : E × E'), (⇑(I.symm) p.fst, p.snd)) ⁻¹' (charted_space.chart_at H x.fst).to_local_equiv.target.prod set.univ ∩ (λ (p : E × E'), (⇑(I.symm) p.fst, p.snd)) ⁻¹' ((λ (p : H × E'), (⇑((charted_space.chart_at H x.fst).symm) p.fst, p.snd)) ⁻¹' (Z.to_topological_fiber_bundle_core.local_triv ⟨charted_space.chart_at H x.fst, _⟩).to_local_homeomorph.to_local_equiv.target)) ∩ (λ (x_1 : E × E'), ⟨(⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst, x_1.snd).fst, (⇑(I.symm) x_1.fst, x_1.snd).snd).fst, Z.to_topological_fiber_bundle_core.coord_change ⟨charted_space.chart_at H x.fst, _⟩ (Z.to_topological_fiber_bundle_core.index_at (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst))) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst)) x_1.snd⟩) ⁻¹' (sigma.fst ⁻¹' (charted_space.chart_at H x.fst).to_local_equiv.source)	⊢ ⇑I (⇑(charted_space.chart_at H x.fst) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) (a, b).fst))) = (a, b).fst
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E',	x : Z.to_topological_fiber_bundle_core.total_space	⊢ ∀ (y : E × E'), y ∈ (set.range ⇑I).prod set.univ ∩ ((λ (p : E × E'), (⇑(I.symm) p.fst, p.snd)) ⁻¹' (charted_space.chart_at H x.fst).to_local_equiv.target.prod set.univ ∩ (λ (p : E × E'), (⇑(I.symm) p.fst, p.snd)) ⁻¹' ((λ (p : H × E'), (⇑((charted_space.chart_at H x.fst).symm) p.fst, p.snd)) ⁻¹' (Z.to_topological_fiber_bundle_core.local_triv ⟨charted_space.chart_at H x.fst, _⟩).to_local_homeomorph.to_local_equiv.target)) ∩ (λ (x_1 : E × E'), ⟨(⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst, x_1.snd).fst, (⇑(I.symm) x_1.fst, x_1.snd).snd).fst, Z.to_topological_fiber_bundle_core.coord_change ⟨charted_space.chart_at H x.fst, _⟩ (Z.to_topological_fiber_bundle_core.index_at (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst))) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) x_1.fst)) x_1.snd⟩) ⁻¹' (sigma.fst ⁻¹' (charted_space.chart_at H x.fst).to_local_equiv.source) → ⇑I (⇑(charted_space.chart_at H x.fst) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) y.fst))) = y.fst		𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E',	x : Z.to_topological_fiber_bundle_core.total_space	⊢ ⇑I (⇑(charted_space.chart_at H x.fst) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) (⇑I (⇑(charted_space.chart_at H x.fst) x.fst), Z.to_topological_fiber_bundle_core.coord_change (Z.to_topological_fiber_bundle_core.index_at x.fst) ⟨charted_space.chart_at H x.fst, _⟩ x.fst x.snd).fst))) = (⇑I (⇑(charted_space.chart_at H x.fst) x.fst), Z.to_topological_fiber_bundle_core.coord_change (Z.to_topological_fiber_bundle_core.index_at x.fst) ⟨charted_space.chart_at H x.fst, _⟩ x.fst x.snd).fst
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E',	x : Z.to_topological_fiber_bundle_core.total_space,	a : E,	b : E',	hab : (a ∈ set.range ⇑I ∧ ⇑(I.symm) a ∈ (charted_space.chart_at H x.fst).to_local_equiv.target ∧ ⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) a) ∈ (charted_space.chart_at H x.fst).to_local_equiv.source) ∧ ⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) a) ∈ (charted_space.chart_at H x.fst).to_local_equiv.source	⊢ ⇑I (⇑(charted_space.chart_at H x.fst) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) (a, b).fst))) = (a, b).fst
𝕜 : Type u_1,	_inst_1 : nondiscrete_normed_field 𝕜,	E : Type u_2,	_inst_2 : normed_group E,	_inst_3 : normed_space 𝕜 E,	H : Type u_3,	_inst_4 : topological_space H,	I : model_with_corners 𝕜 E H,	M : Type u_4,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	Is : smooth_manifold_with_corners I M,	E' : Type u_5,	_inst_7 : normed_group E',	_inst_8 : normed_space 𝕜 E',	n : with_top ℕ,	Z : basic_smooth_bundle_core I M E',	x : Z.to_topological_fiber_bundle_core.total_space	⊢ ⇑I (⇑(charted_space.chart_at H x.fst) (⇑((charted_space.chart_at H x.fst).symm) (⇑(I.symm) (⇑I (⇑(charted_space.chart_at H x.fst) x.fst), Z.to_topological_fiber_bundle_core.coord_change (Z.to_topological_fiber_bundle_core.index_at x.fst) ⟨charted_space.chart_at H x.fst, _⟩ x.fst x.snd).fst))) = (⇑I (⇑(charted_space.chart_at H x.fst) x.fst), Z.to_topological_fiber_bundle_core.coord_change (Z.to_topological_fiber_bundle_core.index_at x.fst) ⟨charted_space.chart_at H x.fst, _⟩ x.fst x.snd).fst
ι : Type uι,	E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	_inst_8 : t2_space M,	_inst_9 : fintype ι,	s : set M,	f : smooth_bump_covering ι I M s,	x : M,	hx : x ∈ s	⊢ ((continuous_linear_map.fst ℝ E ℝ).comp (continuous_linear_map.proj (f.ind x hx))).comp (mfderiv I 𝓘(ℝ, ι → E × ℝ) ⇑(f.embedding_pi_tangent) x) = mfderiv I I ⇑(charted_space.chart_at H (f.c (f.ind x hx))) x
ι : Type uι,	E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	_inst_8 : t2_space M,	_inst_9 : fintype ι,	s : set M,	f : smooth_bump_covering ι I M s,	x : M,	hx : x ∈ s,	L : (Π (i : ι), (λ (_x : ι), E × ℝ) i) →L[ℝ] E := (continuous_linear_map.fst ℝ E ℝ).comp (continuous_linear_map.proj (f.ind x hx))	⊢ L.comp (mfderiv I 𝓘(ℝ, ι → E × ℝ) ⇑(f.embedding_pi_tangent) x) = mfderiv I I ⇑(charted_space.chart_at H (f.c (f.ind x hx))) x
ι : Type uι,	E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	_inst_8 : t2_space M,	_inst_9 : fintype ι,	s : set M,	f : smooth_bump_covering ι I M s,	x : M,	hx : x ∈ s,	L : (Π (i : ι), (λ (_x : ι), E × ℝ) i) →L[ℝ] E := (continuous_linear_map.fst ℝ E ℝ).comp (continuous_linear_map.proj (f.ind x hx)),	this : has_mfderiv_at I 𝓘(ℝ, E) (⇑L ∘ ⇑(f.embedding_pi_tangent)) x (L.comp (mfderiv I 𝓘(ℝ, ι → E × ℝ) ⇑(f.embedding_pi_tangent) x))	⊢ L.comp (mfderiv I 𝓘(ℝ, ι → E × ℝ) ⇑(f.embedding_pi_tangent) x) = mfderiv I I ⇑(charted_space.chart_at H (f.c (f.ind x hx))) x
ι : Type uι,	E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	_inst_8 : t2_space M,	_inst_9 : fintype ι,	s : set M,	f : smooth_bump_covering ι I M s,	x : M,	hx : x ∈ s,	L : (Π (i : ι), (λ (_x : ι), E × ℝ) i) →L[ℝ] E := (continuous_linear_map.fst ℝ E ℝ).comp (continuous_linear_map.proj (f.ind x hx)),	this : has_mfderiv_at I 𝓘(ℝ, E) (⇑L ∘ ⇑(f.embedding_pi_tangent)) x (L.comp (mfderiv I 𝓘(ℝ, ι → E × ℝ) ⇑(f.embedding_pi_tangent) x))	⊢ has_mfderiv_at I 𝓘(ℝ, E) (⇑L ∘ ⇑(f.embedding_pi_tangent)) x (mfderiv I I ⇑(charted_space.chart_at H (f.c (f.ind x hx))) x)
ι : Type uι,	E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	_inst_8 : t2_space M,	_inst_9 : fintype ι,	s : set M,	f : smooth_bump_covering ι I M s,	x : M,	hx : x ∈ s,	L : (Π (i : ι), (λ (_x : ι), E × ℝ) i) →L[ℝ] E := (continuous_linear_map.fst ℝ E ℝ).comp (continuous_linear_map.proj (f.ind x hx)),	this : has_mfderiv_at I 𝓘(ℝ, E) (⇑L ∘ ⇑(f.embedding_pi_tangent)) x (L.comp (mfderiv I 𝓘(ℝ, ι → E × ℝ) ⇑(f.embedding_pi_tangent) x))	⊢ ⇑L ∘ ⇑(f.embedding_pi_tangent) =ᶠ[𝓝 x] ⇑(ext_chart_at I (f.c (f.ind x hx)))
ι : Type uι,	E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	_inst_8 : t2_space M,	_inst_9 : fintype ι,	s : set M,	f : smooth_bump_covering ι I M s,	x : M,	hx : x ∈ s,	L : (Π (i : ι), (λ (_x : ι), E × ℝ) i) →L[ℝ] E := (continuous_linear_map.fst ℝ E ℝ).comp (continuous_linear_map.proj (f.ind x hx)),	this : has_mfderiv_at I 𝓘(ℝ, E) (⇑L ∘ ⇑(f.embedding_pi_tangent)) x (L.comp (mfderiv I 𝓘(ℝ, ι → E × ℝ) ⇑(f.embedding_pi_tangent) x)),	y : M,	hy : ⇑(⇑f (f.ind x hx)) y = 1 y	⊢ (⇑L ∘ ⇑(f.embedding_pi_tangent)) y = ⇑(ext_chart_at I (f.c (f.ind x hx))) y
ι : Type uι,	E : Type uE,	_inst_1 : normed_group E,	_inst_2 : normed_space ℝ E,	_inst_3 : finite_dimensional ℝ E,	H : Type uH,	_inst_4 : topological_space H,	I : model_with_corners ℝ E H,	M : Type uM,	_inst_5 : topological_space M,	_inst_6 : charted_space H M,	_inst_7 : smooth_manifold_with_corners I M,	_inst_8 : t2_space M,	_inst_9 : fintype ι,	s : set M,	f : smooth_bump_covering ι I M s,	x : M,	hx : x ∈ s,	L : (Π (i : ι), (λ (_x : ι), E × ℝ) i) →L[ℝ] E := (continuous_linear_map.fst ℝ E ℝ).comp (continuous_linear_map.proj (f.ind x hx)),	this : has_mfderiv_at I 𝓘(ℝ, E) (⇑L ∘ ⇑(f.embedding_pi_tangent)) x (L.comp (mfderiv I 𝓘(ℝ, ι → E × ℝ) ⇑(f.embedding_pi_tangent) x)),	y : M,	hy : ⇑(⇑f (f.ind x hx)) y = 1 y	⊢ ⇑(⇑f (f.ind x hx)) y • ⇑(ext_chart_at I (f.c (f.ind x hx))) y = ⇑(ext_chart_at I (f.c (f.ind x hx))) y
G : Type u_1,	_inst_1 : group G,	S T : set G	⊢ S ∈ subgroup.left_transversals T ↔ ∀ (g : G), ∃! (s : ↥S), (↑s)⁻¹ * g ∈ T
G : Type u_1,	_inst_1 : group G,	S T : set G	⊢ (∀ (g : G), ∃! (x : ↥S × ↥T), x.fst.val * x.snd.val = g) ↔ ∀ (g : G), ∃! (s : ↥S), (↑s)⁻¹ * g ∈ T
G : Type u_1,	_inst_1 : group G,	S T : set G,	h : ∀ (g : G), ∃! (x : ↥S × ↥T), x.fst.val * x.snd.val = g,	g : G	⊢ ∃! (s : ↥S), (↑s)⁻¹ * g ∈ T
G : Type u_1,	_inst_1 : group G,	S T : set G,	h : ∀ (g : G), ∃! (x : ↥S × ↥T), x.fst.val * x.snd.val = g,	g : G,	x : ↥S × ↥T,	h1 : x.fst.val * x.snd.val = g,	h2 : ∀ (y : ↥S × ↥T), (λ (x : ↥S × ↥T), x.fst.val * x.snd.val = g) y → y = x	⊢ ∃! (s : ↥S), (↑s)⁻¹ * g ∈ T
G : Type u_1,	_inst_1 : group G,	S T : set G,	h : ∀ (g : G), ∃! (x : ↥S × ↥T), x.fst.val * x.snd.val = g,	g : G	⊢ ∃! (s : ↥S), (↑s)⁻¹ * g ∈ T		G : Type u_1,	_inst_1 : group G,	S T : set G,	h : ∀ (g : G), ∃! (s : ↥S), (↑s)⁻¹ * g ∈ T,	g : G	⊢ ∃! (x : ↥S × ↥T), x.fst.val * x.snd.val = g
G : Type u_1,	_inst_1 : group G,	S T : set G,	h : ∀ (g : G), ∃! (s : ↥S), (↑s)⁻¹ * g ∈ T,	g : G	⊢ ∃! (x : ↥S × ↥T), x.fst.val * x.snd.val = g
G : Type u_1,	_inst_1 : group G,	S T : set G,	h : ∀ (g : G), ∃! (s : ↥S), (↑s)⁻¹ * g ∈ T,	g : G,	x : ↥S,	h1 : (↑x)⁻¹ * g ∈ T,	h2 : ∀ (y : ↥S), (λ (s : ↥S), (↑s)⁻¹ * g ∈ T) y → y = x	⊢ ∃! (x : ↥S × ↥T), x.fst.val * x.snd.val = g
G : Type u_1,	_inst_1 : group G,	S T : set G,	h : ∀ (g : G), ∃! (s : ↥S), (↑s)⁻¹ * g ∈ T,	g : G,	x : ↥S,	h1 : (↑x)⁻¹ * g ∈ T,	h2 : ∀ (y : ↥S), (λ (s : ↥S), (↑s)⁻¹ * g ∈ T) y → y = x,	y : ↥S × ↥T,	hy : (λ (x : ↥S × ↥T), x.fst.val * x.snd.val = g) y	⊢ y = (x, ⟨(↑x)⁻¹ * g, h1⟩)
G : Type u_1,	_inst_1 : group G,	S T : set G,	h : ∀ (g : G), ∃! (s : ↥S), (↑s)⁻¹ * g ∈ T,	g : G,	x : ↥S,	h1 : (↑x)⁻¹ * g ∈ T,	h2 : ∀ (y : ↥S), (λ (s : ↥S), (↑s)⁻¹ * g ∈ T) y → y = x,	y : ↥S × ↥T,	hy : (λ (x : ↥S × ↥T), x.fst.val * x.snd.val = g) y,	this : y.fst = x	⊢ y = (x, ⟨(↑x)⁻¹ * g, h1⟩)
α : Type u_1,	_inst_1 : group α,	s : subgroup α,	a : α,	ha : a ∈ s,	b : α	⊢ b ∈ ↑s *r a ↔ b ∈ ↑s
N : Type u_2,	_inst_2 : add_monoid N,	P : add_submonoid N	⊢ P.fg ↔ (⇑add_submonoid.to_submonoid P).fg
N : Type u_2,	_inst_2 : add_monoid N,	P : add_submonoid N	⊢ P = ⇑submonoid.to_add_submonoid (⇑add_submonoid.to_submonoid P)
α : Type u,	step.length : ∀ {L₁ L₂ : list (α × bool)}, free_group.red.step L₁ L₂ → L₂.length + 2 = L₁.length,	L1 L2 : list (α × bool),	x : α,	b : bool	⊢ (L1 ++ L2).length + 2 = (L1 ++ (x, b) :: (x, !b) :: L2).length
α : Type u,	step.length : ∀ {L₁ L₂ : list (α × bool)}, free_group.red.step L₁ L₂ → L₂.length + 2 = L₁.length,	L1 L2 : list (α × bool),	x : α,	b : bool	⊢ (L1 ++ L2).length + 2 = (L1 ++ (x, b) :: (x, !b) :: L2).length
α : Type u,	step.length : ∀ {L₁ L₂ : list (α × bool)}, free_group.red.step L₁ L₂ → L₂.length + 2 = L₁.length,	L1 L2 : list (α × bool),	x : α,	b : bool	⊢ L1.length + L2.length + 2 = L1.length + ((x, b) :: (x, !b) :: L2).length
ι : Type u_1,	M : ι → Type u_2,	_inst_1 : Π (i : ι), monoid (M i),	C : free_product M → Prop,	m : free_product M,	h_one : C 1,	h_of : ∀ (i : ι) (m : M i), C (⇑free_product.of m),	h_mul : ∀ (x y : free_product M), C x → C y → C (x * y)	⊢ C m
ι : Type u_1,	M : ι → Type u_2,	_inst_1 : Π (i : ι), monoid (M i),	C : free_product M → Prop,	m : free_product M,	h_one : C 1,	h_of : ∀ (i : ι) (m : M i), C (⇑free_product.of m),	h_mul : ∀ (x y : free_product M), C x → C y → C (x * y),	S : submonoid (free_product M) := {carrier := set_of C, one_mem' := h_one, mul_mem' := h_mul}	⊢ C m
ι : Type u_1,	M : ι → Type u_2,	_inst_1 : Π (i : ι), monoid (M i),	C : free_product M → Prop,	m : free_product M,	h_one : C 1,	h_of : ∀ (i : ι) (m : M i), C (⇑free_product.of m),	h_mul : ∀ (x y : free_product M), C x → C y → C (x * y),	S : submonoid (free_product M) := {carrier := set_of C, one_mem' := h_one, mul_mem' := h_mul}	⊢ m = ↑(⇑(⇑free_product.lift (λ (i : ι), free_product.of.cod_mrestrict S _)) m)
ι : Type u_1,	M : ι → Type u_2,	_inst_1 : Π (i : ι), monoid (M i),	C : free_product M → Prop,	m : free_product M,	h_one : C 1,	h_of : ∀ (i : ι) (m : M i), C (⇑free_product.of m),	h_mul : ∀ (x y : free_product M), C x → C y → C (x * y),	S : submonoid (free_product M) := {carrier := set_of C, one_mem' := h_one, mul_mem' := h_mul}	⊢ ⇑(monoid_hom.id (free_product M)) m = ⇑(S.subtype.comp (⇑free_product.lift (λ (i : ι), free_product.of.cod_mrestrict S _))) m
ι : Type u_1,	M : ι → Type u_2,	_inst_1 : Π (i : ι), monoid (M i),	C : free_product M → Prop,	m : free_product M,	h_one : C 1,	h_of : ∀ (i : ι) (m : M i), C (⇑free_product.of m),	h_mul : ∀ (x y : free_product M), C x → C y → C (x * y),	S : submonoid (free_product M) := {carrier := set_of C, one_mem' := h_one, mul_mem' := h_mul}	⊢ monoid_hom.id (free_product M) = S.subtype.comp (⇑free_product.lift (λ (i : ι), free_product.of.cod_mrestrict S _))
ι : Type u_1,	M : ι → Type u_2,	_inst_1 : Π (i : ι), monoid (M i),	C : free_product M → Prop,	m : free_product M,	h_one : C 1,	h_of : ∀ (i : ι) (m : M i), C (⇑free_product.of m),	h_mul : ∀ (x y : free_product M), C x → C y → C (x * y),	S : submonoid (free_product M) := {carrier := set_of C, one_mem' := h_one, mul_mem' := h_mul},	i : ι,	x : M i	⊢ ⇑((monoid_hom.id (free_product M)).comp free_product.of) x = ⇑((S.subtype.comp (⇑free_product.lift (λ (i : ι), free_product.of.cod_mrestrict S _))).comp free_product.of) x
G : Type u_1,	_inst_1 : group G,	H : subgroup G	⊢ ⁅⊥,H⁆ ≤ ⊥
G : Type u_1,	_inst_1 : group G,	H : subgroup G	⊢ ⁅⊥,H⁆ = ⊥
α : Type u,	β : Type v,	_inst_1 : group α,	_inst_2 : mul_action α β,	_inst_3 : fintype α,	_inst_4 : Π (a : α), fintype ↥(mul_action.fixed_by α β a),	_inst_5 : fintype (quotient (mul_action.orbit_rel α β))	⊢ ∑ (a : α), fintype.card ↥(mul_action.fixed_by α β a) = fintype.card (quotient (mul_action.orbit_rel α β)) * fintype.card α
M : Type u_1,	N : Type u_2,	α : Type u_6,	β : Type u_7,	_inst_1 : has_scalar M α,	_inst_2 : has_scalar β α,	_inst_3 : smul_comm_class M β α,	g : N → M	⊢ Sort ?
M : Type u_1,	N : Type u_2,	α : Type u_6,	β : Type u_7,	_inst_1 : has_scalar M α,	_inst_2 : has_scalar β α,	_inst_3 : smul_comm_class M β α,	g : N → M,	_inst : has_scalar N α	⊢ Sort ?
M : Type u_1,	N : Type u_2,	α : Type u_6,	β : Type u_7,	_inst_1 : has_scalar M α,	_inst_2 : has_scalar β α,	_inst_3 : smul_comm_class M β α,	g : N → M	⊢ Sort ?
M : Type u_1,	N : Type u_2,	α : Type u_6,	β : Type u_7,	_inst_1 : has_scalar M α,	_inst_2 : has_scalar β α,	_inst_3 : smul_comm_class M β α,	g : N → M	⊢ smul_comm_class N β α
S : Type u',	R : Type u,	M : Type v,	_inst_1 : monoid S,	_inst_2 : monoid R,	_inst_3 : mul_action R M,	_inst_4 : has_scalar S R,	_inst_5 : mul_action S M,	_inst_6 : is_scalar_tower S R M,	p : sub_mul_action R M,	x : M,	s : S,	h : x ∈ p	⊢ (s • 1) • x ∈ p
S : Type u',	R : Type u,	M : Type v,	_inst_1 : monoid S,	_inst_2 : monoid R,	_inst_3 : mul_action R M,	_inst_4 : has_scalar S R,	_inst_5 : mul_action S M,	_inst_6 : is_scalar_tower S R M,	p : sub_mul_action R M,	x : M,	s : S,	h : x ∈ p	⊢ s • x ∈ p
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	x y : M × ↥S	⊢ ⇑(localization.r S) x y ↔ ∃ (c : ↥S), x.fst * ↑(y.snd) * ↑c = y.fst * ↑(x.snd) * ↑c
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	x y : M × ↥S	⊢ ⇑(localization.r' S) x y ↔ ∃ (c : ↥S), x.fst * ↑(y.snd) * ↑c = y.fst * ↑(x.snd) * ↑c
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	x y : M × ↥S	⊢ ⇑(localization.r S) x y ↔ ∃ (c : ↥S), x.fst * ↑(y.snd) * ↑c = y.fst * ↑(x.snd) * ↑c
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y)	⊢ ⇑g (f.sec 1).fst * ↑(⇑(is_unit.lift_right (g.mrestrict S) hg) (f.sec 1).snd)⁻¹ = 1
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y)	⊢ ⇑g (f.sec 1).fst * ↑(⇑(is_unit.lift_right (g.mrestrict S) hg) (f.sec 1).snd)⁻¹ = 1
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y)	⊢ ⇑g (f.sec 1).fst = ⇑g ↑((f.sec 1).snd)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y)	⊢ ⇑(f.to_map) (f.sec 1).fst = ⇑(f.to_map) ↑((f.sec 1).snd)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑g (f.sec (x * y)).fst * ↑(⇑(is_unit.lift_right (g.mrestrict S) hg) (f.sec (x * y)).snd)⁻¹ = ⇑g (f.sec x).fst * ↑(⇑(is_unit.lift_right (g.mrestrict S) hg) (f.sec x).snd)⁻¹ * (⇑g (f.sec y).fst * ↑(⇑(is_unit.lift_right (g.mrestrict S) hg) (f.sec y).snd)⁻¹)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑g (f.sec (x * y)).fst * ⇑g ↑((f.sec y).snd) * ⇑g ↑((f.sec x).snd) = ⇑g (f.sec y).fst * ⇑g ↑((f.sec (x * y)).snd) * ⇑g (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑g ((f.sec (x * y)).fst * ↑((f.sec y).snd)) * ⇑g ↑((f.sec x).snd) = ⇑g (f.sec y).fst * ⇑g ↑((f.sec (x * y)).snd) * ⇑g (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑g ((f.sec (x * y)).fst * ↑((f.sec y).snd) * ↑((f.sec x).snd)) = ⇑g (f.sec y).fst * ⇑g ↑((f.sec (x * y)).snd) * ⇑g (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑g ((f.sec (x * y)).fst * ↑((f.sec y).snd) * ↑((f.sec x).snd)) = ⇑g ((f.sec y).fst * ↑((f.sec (x * y)).snd)) * ⇑g (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑g ((f.sec (x * y)).fst * ↑((f.sec y).snd) * ↑((f.sec x).snd)) = ⇑g ((f.sec y).fst * ↑((f.sec (x * y)).snd) * (f.sec x).fst)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑g (f.sec (x * y)).fst * ⇑g ↑((f.sec y).snd) * ⇑g ↑((f.sec x).snd) = ⇑g (f.sec y).fst * ⇑g ↑((f.sec (x * y)).snd) * ⇑g (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ((f.sec (x * y)).fst * ↑((f.sec y).snd) * ↑((f.sec x).snd)) = ⇑(f.to_map) ((f.sec y).fst * ↑((f.sec (x * y)).snd) * (f.sec x).fst)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ((f.sec (x * y)).fst * ↑((f.sec y).snd) * ↑((f.sec x).snd)) = ⇑(f.to_map) ((f.sec y).fst * ↑((f.sec (x * y)).snd) * (f.sec x).fst)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ((f.sec (x * y)).fst * ↑((f.sec y).snd)) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) ((f.sec y).fst * ↑((f.sec (x * y)).snd) * (f.sec x).fst)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) (f.sec (x * y)).fst * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) ((f.sec y).fst * ↑((f.sec (x * y)).snd) * (f.sec x).fst)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) (f.sec (x * y)).fst * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) ((f.sec y).fst * ↑((f.sec (x * y)).snd)) * ⇑(f.to_map) (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) (f.sec (x * y)).fst * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) (f.sec y).fst * ⇑(f.to_map) ↑((f.sec (x * y)).snd) * ⇑(f.to_map) (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ↑((f.sec (x * y)).snd) * (x * y) * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) (f.sec y).fst * ⇑(f.to_map) ↑((f.sec (x * y)).snd) * ⇑(f.to_map) (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ↑((f.sec (x * y)).snd) * (x * y) * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) ↑((f.sec y).snd) * y * ⇑(f.to_map) ↑((f.sec (x * y)).snd) * ⇑(f.to_map) (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ↑((f.sec (x * y)).snd) * (x * y) * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) ↑((f.sec y).snd) * y * ⇑(f.to_map) ↑((f.sec (x * y)).snd) * (⇑(f.to_map) ↑((f.sec x).snd) * x)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) (f.sec (x * y)).fst * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) (f.sec y).fst * ⇑(f.to_map) ↑((f.sec (x * y)).snd) * ⇑(f.to_map) (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ↑((f.sec (x * y)).snd) * (x * y) * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) (f.sec y).fst * ⇑(f.to_map) ↑((f.sec (x * y)).snd) * ⇑(f.to_map) (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ↑((f.sec (x * y)).snd) * (x * y) * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) ↑((f.sec y).snd) * y * ⇑(f.to_map) ↑((f.sec (x * y)).snd) * ⇑(f.to_map) (f.sec x).fst
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ↑((f.sec (x * y)).snd) * (x * y) * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) ↑((f.sec y).snd) * y * ⇑(f.to_map) ↑((f.sec (x * y)).snd) * (⇑(f.to_map) ↑((f.sec x).snd) * x)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ((f.sec (x * y)).fst * ↑((f.sec y).snd) * ↑((f.sec x).snd)) = ⇑(f.to_map) ((f.sec y).fst * ↑((f.sec (x * y)).snd) * (f.sec x).fst)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑g ((f.sec (x * y)).fst * ↑((f.sec y).snd) * ↑((f.sec x).snd)) = ⇑g ((f.sec y).fst * ↑((f.sec (x * y)).snd) * (f.sec x).fst)
M : Type u_1,	_inst_1 : comm_monoid M,	S : submonoid M,	N : Type u_2,	_inst_2 : comm_monoid N,	P : Type u_3,	_inst_3 : comm_monoid P,	f : S.localization_map N,	g : M →* P,	hg : ∀ (y : ↥S), is_unit (⇑g ↑y),	x y : N	⊢ ⇑(f.to_map) ↑((f.sec (x * y)).snd) * (x * y) * ⇑(f.to_map) ↑((f.sec y).snd) * ⇑(f.to_map) ↑((f.sec x).snd) = ⇑(f.to_map) ↑((f.sec y).snd) * y * ⇑(f.to_map) ↑((f.sec (x * y)).snd) * (⇑(f.to_map) ↑((f.sec x).snd) * x)
G : Type u,	x : G,	n : ℕ,	_inst_1 : monoid G,	hn : 0 < n,	h : x ^ n = 1	⊢ function.is_periodic_pt (has_mul.mul x) n 1
A : Type v,	a : A,	_inst_2 : fintype A,	_inst_4 : add_group A,	_inst_5 : decidable_eq A	⊢ decidable_pred (λ (_x : A), _x ∈ add_subgroup.gmultiples a)
A : Type v,	a : A,	_inst_2 : fintype A,	_inst_4 : add_group A,	_inst_5 : decidable_eq A	⊢ decidable_pred (λ (_x : A), _x ∈ ↑(add_subgroup.gmultiples a))
A : Type v,	a : A,	_inst_2 : fintype A,	_inst_4 : add_group A,	_inst_5 : decidable_eq A	⊢ decidable_pred (λ (_x : A), _x ∈ ↑(add_submonoid.multiples a))
p : ℕ,	G : Type u_1,	_inst_1 : group G,	H K : subgroup G,	hH : is_p_group p ↥H,	hK : is_p_group p ↥K,	_inst_2 : K.normal	⊢ is_p_group p ↥(H ⊔ K)
p : ℕ,	G : Type u_1,	_inst_1 : group G,	H K : subgroup G,	hH : is_p_group p ↥H,	hK : is_p_group p ↥K,	_inst_2 : K.normal,	g : ↥(H ⊔ K)	⊢ ∃ (k : ℕ), g ^ p ^ k = 1
p : ℕ,	G : Type u_1,	_inst_1 : group G,	H K : subgroup G,	hH : is_p_group p ↥H,	hK : is_p_group p ↥K,	_inst_2 : K.normal,	g : ↥(H ⊔ K),	j : ℕ,	hj : ↑g ^ p ^ j = 1	⊢ ∃ (k : ℕ), g ^ p ^ k = 1
p : ℕ,	G : Type u_1,	_inst_1 : group G,	H K : subgroup G,	hH : is_p_group p ↥H,	hK : is_p_group p ↥K,	_inst_2 : K.normal,	g : ↥(H ⊔ K),	j : ℕ,	hj : ↑g ^ p ^ j = 1,	k : ℕ,	hk : ⟨↑g ^ p ^ j, _⟩ ^ p ^ k = 1	⊢ ∃ (k : ℕ), g ^ p ^ k = 1
p : ℕ,	G : Type u_1,	_inst_1 : group G,	H K : subgroup G,	hH : is_p_group p ↥H,	hK : is_p_group p ↥K,	_inst_2 : K.normal,	g : ↥(H ⊔ K),	j : ℕ,	hj : ↑g ^ p ^ j = 1,	k : ℕ,	hk : ↑g ^ p ^ (j + k) = ↑1	⊢ g ^ p ^ (j + k) = 1
p : ℕ,	G : Type u_1,	_inst_1 : group G,	H K : subgroup G,	hH : is_p_group p ↥H,	hK : is_p_group p ↥K,	_inst_2 : K.normal,	g : ↥(H ⊔ K),	j : ℕ,	hj : ↑g ^ p ^ j = 1,	k : ℕ,	hk : ↑g ^ p ^ (j + k) = ↑1	⊢ ∃ (k : ℕ), g ^ p ^ k = 1
p : ℕ,	G : Type u_1,	_inst_1 : group G,	_inst_2 : fintype G,	n : ℕ,	hG : fintype.card G = p ^ n,	g : G	⊢ g ^ p ^ n = 1
α : Type u_1,	_inst_1 : decidable_eq α,	s : cycle α,	h : s.nodup,	x : α,	hx : x ∉ s	⊢ ⇑(s.form_perm h) x = x
α : Type u_1,	_inst_1 : decidable_eq α,	x : α,	s : list α,	h : cycle.nodup (quot.mk setoid.r s),	hx : x ∉ quot.mk setoid.r s	⊢ ⇑(cycle.form_perm (quot.mk setoid.r s) h) x = x
G : Type u_2,	_inst_2 : group G	⊢ unique ↥{vector.nil}
G : Type u_2,	_inst_2 : group G	⊢ unique ↥(equiv.perm.vectors_prod_eq_one G 0)
α : Type u_1,	_inst_1 : fintype α,	_inst_2 : decidable_eq α,	σ τ : equiv.perm α	⊢ is_conj σ τ ↔ σ.partition = τ.partition
α : Type u_1,	_inst_1 : fintype α,	_inst_2 : decidable_eq α,	σ τ : equiv.perm α	⊢ σ.cycle_type = τ.cycle_type ↔ σ.partition = τ.partition
α : Type u_1,	_inst_1 : fintype α,	_inst_2 : decidable_eq α,	σ τ : equiv.perm α,	h : σ.cycle_type = τ.cycle_type	⊢ σ.partition = τ.partition
α : Type u_1,	_inst_1 : fintype α,	_inst_2 : decidable_eq α,	σ τ : equiv.perm α,	h : σ.cycle_type = τ.cycle_type	⊢ σ.partition = τ.partition		α : Type u_1,	_inst_1 : fintype α,	_inst_2 : decidable_eq α,	σ τ : equiv.perm α,	h : σ.partition = τ.partition	⊢ σ.cycle_type = τ.cycle_type
α : Type u_1,	_inst_1 : fintype α,	_inst_2 : decidable_eq α,	σ τ : equiv.perm α,	h : σ.partition = τ.partition	⊢ σ.cycle_type = τ.cycle_type
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ)	⊢ P σ
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ),	this : ∀ (l : list (equiv.perm β)), (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod	⊢ P σ
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ),	this : ∀ (l : list (equiv.perm β)), (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod,	_inst : Π (a : Prop), decidable a	⊢ P σ
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ),	this : ∀ (l : list (equiv.perm β)), (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod,	_inst : Π (a : Prop), decidable a,	x : {l // l.prod = σ ∧ (∀ (g : equiv.perm β), g ∈ l → g.is_cycle) ∧ list.pairwise equiv.perm.disjoint l} := σ.trunc_cycle_factors.out	⊢ P σ
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ),	this : ∀ (l : list (equiv.perm β)), (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod	⊢ P σ		β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ)	⊢ ∀ (l : list (equiv.perm β)), (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ)	⊢ ∀ (l : list (equiv.perm β)), (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ),	l : list (equiv.perm β)	⊢ (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ)	⊢ (∀ (τ : equiv.perm β), τ ∈ list.nil → τ.is_cycle) → list.pairwise equiv.perm.disjoint list.nil → P list.nil.prod		case list.cons	β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ),	σ : equiv.perm β,	l : list (equiv.perm β),	ih : (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod	⊢ (∀ (τ : equiv.perm β), τ ∈ σ :: l → τ.is_cycle) → list.pairwise equiv.perm.disjoint (σ :: l) → P (σ :: l).prod
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ)	⊢ (∀ (τ : equiv.perm β), τ ∈ list.nil → τ.is_cycle) → list.pairwise equiv.perm.disjoint list.nil → P list.nil.prod
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ),	σ : equiv.perm β,	l : list (equiv.perm β),	ih : (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod	⊢ (∀ (τ : equiv.perm β), τ ∈ σ :: l → τ.is_cycle) → list.pairwise equiv.perm.disjoint (σ :: l) → P (σ :: l).prod
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ),	σ : equiv.perm β,	l : list (equiv.perm β),	ih : (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod,	h1 : ∀ (τ : equiv.perm β), τ ∈ σ :: l → τ.is_cycle,	h2 : list.pairwise equiv.perm.disjoint (σ :: l)	⊢ P (σ :: l).prod
β : Type u_2,	_inst_2 : fintype β,	P : equiv.perm β → Prop,	σ : equiv.perm β,	base_one : P 1,	base_cycles : ∀ (σ : equiv.perm β), σ.is_cycle → P σ,	induction_disjoint : ∀ (σ τ : equiv.perm β), σ.disjoint τ → σ.is_cycle → P σ → P τ → P (σ * τ),	σ : equiv.perm β,	l : list (equiv.perm β),	ih : (∀ (τ : equiv.perm β), τ ∈ l → τ.is_cycle) → list.pairwise equiv.perm.disjoint l → P l.prod,	h1 : ∀ (τ : equiv.perm β), τ ∈ σ :: l → τ.is_cycle,	h2 : list.pairwise equiv.perm.disjoint (σ :: l)	⊢ P (σ * l.prod)
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩)	⊢ is_conj σ τ
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩)	⊢ f.extend_subtype * σ * (f.extend_subtype)⁻¹ = τ
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩)	⊢ f.extend_subtype * σ = τ * f.extend_subtype
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩),	x : α	⊢ ⇑(f.extend_subtype * σ) x = ⇑(τ * f.extend_subtype) x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩),	x : α	⊢ ⇑(f.extend_subtype) (⇑σ x) = ⇑τ (⇑(f.extend_subtype) x)
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩),	x : α,	hx : x ∈ σ.support	⊢ ⇑(f.extend_subtype) (⇑σ x) = ⇑τ (⇑(f.extend_subtype) x)
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩),	x : α,	hx : x ∈ σ.support	⊢ ↑(⇑f ⟨⇑σ x, ?m_1⟩) = ⇑τ ↑(⇑f ⟨x, ?m_2⟩)		α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩),	x : α,	hx : x ∈ σ.support	⊢ x ∈ ↑(σ.support)		α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩),	x : α,	hx : x ∈ σ.support	⊢ ⇑σ x ∈ ↑(σ.support)
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩),	x : α,	hx : x ∈ σ.support	⊢ ⇑(f.extend_subtype) (⇑σ x) = ⇑τ (⇑(f.extend_subtype) x)		α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩),	x : α,	hx : x ∉ σ.support	⊢ ⇑(f.extend_subtype) (⇑σ x) = ⇑τ (⇑(f.extend_subtype) x)
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩),	x : α,	hx : x ∈ σ.support	⊢ ↑(⇑f ⟨⇑σ x, ?m_1⟩) = ⇑τ ↑(⇑f ⟨x, ?m_2⟩)
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ τ : equiv.perm α,	f : {x // x ∈ ↑(σ.support)} ≃ {x // x ∈ ↑(τ.support)},	hf : ∀ (x : α) (hx : x ∈ ↑(σ.support)), ↑(⇑f ⟨⇑σ x, _⟩) = ⇑τ ↑(⇑f ⟨x, hx⟩),	x : α,	hx : x ∉ σ.support	⊢ ⇑(f.extend_subtype) (⇑σ x) = ⇑τ (⇑(f.extend_subtype) x)
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ : equiv.perm α,	h : σ ≠ 1	⊢ (finset.filter (λ (x : α), ⇑σ x = x) finset.univ).card < fintype.card α - 1
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	σ : equiv.perm α,	h : σ ≠ 1	⊢ 1 < (finset.filter (λ (x : α), ¬⇑σ x = x) finset.univ).card
β : Type u_2,	_inst_2 : fintype β,	f : equiv.perm β,	x y : β,	h : f.same_cycle x y	⊢ ∃ (i : ℕ) (hpos : 0 < i) (h : i ≤ order_of f), ⇑(f ^ i) x = y
β : Type u_2,	_inst_2 : fintype β,	f : equiv.perm β,	x y : β,	h : f.same_cycle x y,	_inst : Π (a : Prop), decidable a	⊢ ∃ (i : ℕ) (hpos : 0 < i) (h : i ≤ order_of f), ⇑(f ^ i) x = y
β : Type u_2,	_inst_2 : fintype β,	f : equiv.perm β,	x : β,	_inst : Π (a : Prop), decidable a,	hi : 0 < order_of f,	h : f.same_cycle x (⇑(f ^ 0) x)	⊢ ∃ (i : ℕ) (hpos : 0 < i) (h : i ≤ order_of f), ⇑(f ^ i) x = ⇑(f ^ 0) x
β : Type u_2,	_inst_2 : fintype β,	f : equiv.perm β,	x : β,	_inst : Π (a : Prop), decidable a,	hi : 0 < order_of f,	h : f.same_cycle x (⇑(f ^ 0) x)	⊢ ∃ (i : ℕ) (hpos : 0 < i) (h : i ≤ order_of f), ⇑(f ^ i) x = ⇑(f ^ 0) x		β : Type u_2,	_inst_2 : fintype β,	f : equiv.perm β,	x : β,	_inst : Π (a : Prop), decidable a,	i : ℕ,	hi : i.succ < order_of f,	h : f.same_cycle x (⇑(f ^ i.succ) x)	⊢ ∃ (i_1 : ℕ) (hpos : 0 < i_1) (h : i_1 ≤ order_of f), ⇑(f ^ i_1) x = ⇑(f ^ i.succ) x
β : Type u_2,	_inst_2 : fintype β,	f : equiv.perm β,	x : β,	_inst : Π (a : Prop), decidable a,	hi : 0 < order_of f,	h : f.same_cycle x (⇑(f ^ 0) x)	⊢ ⇑(f ^ order_of f) x = ⇑(f ^ 0) x
β : Type u_2,	_inst_2 : fintype β,	f : equiv.perm β,	x : β,	_inst : Π (a : Prop), decidable a,	i : ℕ,	hi : i.succ < order_of f,	h : f.same_cycle x (⇑(f ^ i.succ) x)	⊢ ∃ (i_1 : ℕ) (hpos : 0 < i_1) (h : i_1 ≤ order_of f), ⇑(f ^ i_1) x = ⇑(f ^ i.succ) x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α	⊢ y ∈ (f.cycle_of x).support ↔ f.same_cycle x y ∧ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ⇑f x = x	⊢ y ∈ (f.cycle_of x).support ↔ f.same_cycle x y ∧ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ⇑f x = x	⊢ y ∈ (f.cycle_of x).support ↔ f.same_cycle x y ∧ x ∈ f.support		α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ¬⇑f x = x	⊢ y ∈ (f.cycle_of x).support ↔ f.same_cycle x y ∧ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ⇑f x = x	⊢ y ∈ 1.support ↔ f.same_cycle x y ∧ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ¬⇑f x = x	⊢ y ∈ (f.cycle_of x).support ↔ f.same_cycle x y ∧ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ¬⇑f x = x	⊢ ite (f.same_cycle x y) (⇑f y) y ≠ y ↔ f.same_cycle x y ∧ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ¬⇑f x = x,	hy : f.same_cycle x y	⊢ ⇑f y ≠ y ↔ f.same_cycle x y ∧ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ¬⇑f x = x,	hy : f.same_cycle x y	⊢ ¬⇑f y = y
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x : α,	hx : ¬⇑f x = x,	k : ℤ	⊢ ¬⇑f (⇑(f ^ k) x) = ⇑(f ^ k) x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ¬⇑f x = x,	hy : f.same_cycle x y	⊢ ⇑f y ≠ y ↔ f.same_cycle x y ∧ x ∈ f.support		α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ¬⇑f x = x,	hy : ¬f.same_cycle x y	⊢ y ≠ y ↔ f.same_cycle x y ∧ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x : α,	hx : ¬⇑f x = x,	k : ℤ	⊢ ¬⇑(f ^ k) x ∉ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x y : α,	hx : ¬⇑f x = x,	hy : ¬f.same_cycle x y	⊢ y ≠ y ↔ f.same_cycle x y ∧ x ∈ f.support
n : ℕ,	h : 2 ≤ n	⊢ (fin_rotate n).cycle_type = {n}
m : ℕ,	h : 2 ≤ 2 + m	⊢ (fin_rotate (2 + m)).cycle_type = {2 + m}
n : ℕ,	i : fin (n + 1),	j : fin n	⊢ ⇑(i.cycle_range) (⇑(i.succ_above) j) = j.succ
n : ℕ,	i : fin (n + 1),	j : fin n,	h : ⇑fin.cast_succ j < i	⊢ ⇑(i.cycle_range) (⇑(i.succ_above) j) = j.succ
n : ℕ,	i : fin (n + 1),	j : fin n,	h : ⇑fin.cast_succ j < i	⊢ ⇑(i.cycle_range) (⇑(i.succ_above) j) = j.succ		case or.inr	n : ℕ,	i : fin (n + 1),	j : fin n,	h : ⇑fin.cast_succ j ≥ i	⊢ ⇑(i.cycle_range) (⇑(i.succ_above) j) = j.succ
n : ℕ,	i : fin (n + 1),	j : fin n,	h : ⇑fin.cast_succ j ≥ i	⊢ ⇑(i.cycle_range) (⇑(i.succ_above) j) = j.succ
n : ℕ	⊢ ⇑equiv.perm.sign (fin_rotate (n + 1)) = (-1) ^ n
⊢ ⇑equiv.perm.sign (fin_rotate (0 + 1)) = (-1) ^ 0		case nat.succ	n : ℕ,	ih : ⇑equiv.perm.sign (fin_rotate (n + 1)) = (-1) ^ n	⊢ ⇑equiv.perm.sign (fin_rotate (n.succ + 1)) = (-1) ^ n.succ
⊢ ⇑equiv.perm.sign (fin_rotate (0 + 1)) = (-1) ^ 0
n : ℕ,	ih : ⇑equiv.perm.sign (fin_rotate (n + 1)) = (-1) ^ n	⊢ ⇑equiv.perm.sign (⇑(equiv.perm.decompose_fin.symm) (1, fin_rotate n.succ)) = (-1) ^ n.succ
n : ℕ,	ih : ⇑equiv.perm.sign (fin_rotate (n + 1)) = (-1) ^ n	⊢ ⇑equiv.perm.sign (fin_rotate (n.succ + 1)) = (-1) ^ n.succ
α : Type u_1,	f : equiv.perm α,	x : α,	hfx : ⇑f x = x,	gpow_apply_eq_self_of_apply_eq_self : ∀ (n : ℤ), ⇑(f ^ n) x = x,	n : ℕ	⊢ ⇑(f ^ -[1+ n]) x = x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α,	x : α	⊢ x ∈ (f * g).support → x ∈ f.support ⊔ g.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α,	x : α	⊢ ⇑f x = x ∧ ⇑g x = x → ⇑f (⇑g x) = x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α,	x : α,	hf : ⇑f x = x,	hg : ⇑g x = x	⊢ ⇑f (⇑g x) = x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	n : ℤ,	x : α	⊢ ⇑(f ^ n) x ∈ f.support ↔ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x : α,	n : ℕ	⊢ ⇑(f ^ int.of_nat n) x ∈ f.support ↔ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x : α,	n : ℕ	⊢ ⇑(f ^ int.of_nat n) x ∈ f.support ↔ x ∈ f.support		case int.neg_succ_of_nat	α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x : α,	n : ℕ	⊢ ⇑(f ^ -[1+ n]) x ∈ f.support ↔ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f : equiv.perm α,	x : α,	n : ℕ	⊢ ⇑(f ^ -[1+ n]) x ∈ f.support ↔ x ∈ f.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α,	h : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑f x = ⇑g x,	k : ℕ	⊢ ∀ (x : α), x ∈ f.support ∩ g.support → ⇑(f ^ k) x = ⇑(g ^ k) x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α,	h : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑f x = ⇑g x	⊢ ∀ (x : α), x ∈ f.support ∩ g.support → ⇑(f ^ 0) x = ⇑(g ^ 0) x		case nat.succ	α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α,	h : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑f x = ⇑g x,	k : ℕ,	hk : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑(f ^ k) x = ⇑(g ^ k) x	⊢ ∀ (x : α), x ∈ f.support ∩ g.support → ⇑(f ^ k.succ) x = ⇑(g ^ k.succ) x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α,	h : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑f x = ⇑g x	⊢ ∀ (x : α), x ∈ f.support ∩ g.support → ⇑(f ^ 0) x = ⇑(g ^ 0) x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α,	h : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑f x = ⇑g x,	k : ℕ,	hk : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑(f ^ k) x = ⇑(g ^ k) x	⊢ ∀ (x : α), x ∈ f.support ∩ g.support → ⇑(f ^ k.succ) x = ⇑(g ^ k.succ) x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α,	h : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑f x = ⇑g x,	k : ℕ,	hk : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑(f ^ k) x = ⇑(g ^ k) x,	x : α,	hx : x ∈ f.support ∩ g.support	⊢ ⇑(f ^ k.succ) x = ⇑(g ^ k.succ) x
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α,	h : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑f x = ⇑g x,	k : ℕ,	hk : ∀ (x : α), x ∈ f.support ∩ g.support → ⇑(f ^ k) x = ⇑(g ^ k) x,	x : α,	hx : x ∈ f.support ∩ g.support	⊢ ⇑g x ∈ f.support ∩ g.support
α : Type u_1,	_inst_1 : decidable_eq α,	_inst_2 : fintype α,	f g : equiv.perm α	⊢ f.disjoint g ↔ disjoint f.support g.support
α : Type u_1,	f g : equiv.perm α	⊢ f.disjoint g → g.disjoint f
G : Type u,	_inst_1 : group G,	H N : subgroup G,	_inst_3 : N.normal,	φ : ↥H →* quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N) := (quotient_group.mk' (subgroup.comap (H ⊔ N).subtype N)).comp (subgroup.inclusion le_sup_left),	x : quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N),	y : G,	hy : y ∈ ↑(H ⊔ N)	⊢ ∃ (a : ↥H), ⇑φ a = quotient.mk' ⟨y, hy⟩
G : Type u,	_inst_1 : group G,	H N : subgroup G,	_inst_3 : N.normal,	φ : ↥H →* quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N) := (quotient_group.mk' (subgroup.comap (H ⊔ N).subtype N)).comp (subgroup.inclusion le_sup_left),	x : quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N)	⊢ ∀ (a : ↥(H ⊔ N)), ∃ (a_1 : ↥H), ⇑φ a_1 = quotient.mk' a
G : Type u,	_inst_1 : group G,	H N : subgroup G,	_inst_3 : N.normal,	φ : ↥H →* quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N) := (quotient_group.mk' (subgroup.comap (H ⊔ N).subtype N)).comp (subgroup.inclusion le_sup_left),	x : quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N),	y : G,	hy : y ∈ ↑(H ⊔ N),	hy : y ∈ ↑H * ↑N	⊢ ∃ (a : ↥H), ⇑φ a = quotient.mk' ⟨y, hy⟩
G : Type u,	_inst_1 : group G,	H N : subgroup G,	_inst_3 : N.normal,	φ : ↥H →* quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N) := (quotient_group.mk' (subgroup.comap (H ⊔ N).subtype N)).comp (subgroup.inclusion le_sup_left),	x : quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N),	h n : G,	hh : h ∈ ↑H,	hn : n ∈ ↑N,	hy : h * n ∈ ↑(H ⊔ N)	⊢ ⇑φ ⟨h, hh⟩ = quotient.mk' ⟨h * n, hy⟩
G : Type u,	_inst_1 : group G,	H N : subgroup G,	_inst_3 : N.normal,	φ : ↥H →* quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N) := (quotient_group.mk' (subgroup.comap (H ⊔ N).subtype N)).comp (subgroup.inclusion le_sup_left),	x : quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N),	h n : G,	hh : h ∈ ↑H,	hn : n ∈ ↑N,	hy : h * n ∈ ↑(H ⊔ N)	⊢ ⇑(subgroup.inclusion le_sup_left) ⟨h, hh⟩ ≈ ⟨h * n, hy⟩
G : Type u,	_inst_1 : group G,	H N : subgroup G,	_inst_3 : N.normal,	φ : ↥H →* quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N) := (quotient_group.mk' (subgroup.comap (H ⊔ N).subtype N)).comp (subgroup.inclusion le_sup_left),	x : quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N),	h n : G,	hh : h ∈ ↑H,	hn : n ∈ ↑N,	hy : h * n ∈ ↑(H ⊔ N)	⊢ ∃ (a : ↥H), ⇑φ a = quotient.mk' ⟨h * n, hy⟩
G : Type u,	_inst_1 : group G,	H N : subgroup G,	_inst_3 : N.normal,	φ : ↥H →* quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N) := (quotient_group.mk' (subgroup.comap (H ⊔ N).subtype N)).comp (subgroup.inclusion le_sup_left),	x : quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N),	h n : G,	hh : h ∈ ↑H,	hn : n ∈ ↑N,	hy : h * n ∈ ↑(H ⊔ N)	⊢ h⁻¹ * (h * n) ∈ N
G : Type u,	_inst_1 : group G,	H N : subgroup G,	_inst_3 : N.normal,	φ : ↥H →* quotient_group.quotient (subgroup.comap (H ⊔ N).subtype N) := (quotient_group.mk' (subgroup.comap (H ⊔ N).subtype N)).comp (subgroup.inclusion le_sup_left),	φ_surjective : function.surjective ⇑φ	⊢ subgroup.comap H.subtype (H ⊓ N) = φ.ker
N : Type u_1,	G : Type u_2,	_inst_1 : group N,	_inst_2 : group G,	φ : G →* mul_aut N,	_x : N ⋊[φ] G	⊢ _x ∈ semidirect_product.inl.range → _x ∈ semidirect_product.right_hom.ker
N : Type u_1,	G : Type u_2,	_inst_1 : group N,	_inst_2 : group G,	φ : G →* mul_aut N,	x : N ⋊[φ] G,	hx : x ∈ semidirect_product.right_hom.ker	⊢ ⇑semidirect_product.inl x.left = x
N : Type u_1,	G : Type u_2,	_inst_1 : group N,	_inst_2 : group G,	φ : G →* mul_aut N,	x : N ⋊[φ] G,	hx : x ∈ semidirect_product.right_hom.ker	⊢ ⇑semidirect_product.inl x.left = x
N : Type u_1,	G : Type u_2,	_inst_1 : group N,	_inst_2 : group G,	φ : G →* mul_aut N,	x : N ⋊[φ] G,	hx : x ∈ semidirect_product.right_hom.ker	⊢ (⇑semidirect_product.inl x.left).left = x.left
N : Type u_1,	G : Type u_2,	_inst_1 : group N,	_inst_2 : group G,	φ : G →* mul_aut N,	x : N ⋊[φ] G,	hx : x ∈ semidirect_product.right_hom.ker	⊢ (⇑semidirect_product.inl x.left).right = x.right
G : Type u_1,	G' : Type u_2,	_inst_1 : group G,	_inst_2 : group G',	f : G →* G',	hf : function.injective ⇑f,	h : is_solvable G'	⊢ is_solvable G
G : Type u_1,	G' : Type u_2,	_inst_1 : group G,	_inst_2 : group G',	f : G →* G',	hf : function.injective ⇑f,	h : ∃ (n : ℕ), derived_series G' n = ⊥	⊢ ∃ (n : ℕ), derived_series G n = ⊥
G : Type u_1,	G' : Type u_2,	_inst_1 : group G,	_inst_2 : group G',	f : G →* G',	hf : function.injective ⇑f,	n : ℕ,	hn : derived_series G' n = ⊥	⊢ ∃ (n : ℕ), derived_series G n = ⊥
G : Type u_1,	G' : Type u_2,	_inst_1 : group G,	_inst_2 : group G',	f : G →* G',	hf : function.injective ⇑f,	n : ℕ,	hn : derived_series G' n = ⊥	⊢ derived_series G n = ⊥
G : Type u_1,	G' : Type u_2,	_inst_1 : group G,	_inst_2 : group G',	f : G →* G',	hf : function.injective ⇑f,	n : ℕ,	hn : derived_series G' n = ⊥	⊢ subgroup.map f (derived_series G n) = ⊥
G : Type u_1,	G' : Type u_2,	_inst_1 : group G,	_inst_2 : group G',	f : G →* G',	hf : function.injective ⇑f,	n : ℕ,	hn : derived_series G' n ≤ ⊥	⊢ subgroup.map f (derived_series G n) ≤ ⊥
H : subgroup ↥(alternating_group (fin 5))	⊢ H.normal → H = ⊥ ∨ H = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal	⊢ H = ⊥ ∨ H = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	Hb : ¬H = ⊥	⊢ H = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	Hb : ¬∀ (x : ↥(alternating_group (fin 5))), x ∈ H → x = 1	⊢ H = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	Hb : ∃ (x : ↥(alternating_group (fin 5))), x ∈ H ∧ x ≠ 1	⊢ H = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	gH : ⟨g, gA⟩ ∈ H,	g1 : ⟨g, gA⟩ ≠ 1	⊢ H = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H	⊢ H = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	h2 : ∀ (n : ℕ), n ∈ g.cycle_type → n = 2	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	gH : {⟨g, gA⟩} ⊆ ↑H,	h2 : ∀ (n : ℕ), n ∈ g.cycle_type → n = 2,	g1 : ¬↑⟨g, gA⟩ = ↑1	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	h2 : ∀ (n : ℕ), n ∈ g.cycle_type → n = 2	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤		H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	h2 : ¬∀ (n : ℕ), n ∈ g.cycle_type → n = 2	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	h2 : ¬∀ (n : ℕ), n ∈ g.cycle_type → n = 2	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	h2 : ∃ (n : ℕ), n ∈ g.cycle_type ∧ n ≠ 2	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	n : ℕ,	ng : n ∈ g.cycle_type,	n2 : n ≠ 2	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	n : ℕ,	ng : n ∈ g.cycle_type,	n2 : n ≠ 2,	n2' : 2 < n	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	n : ℕ,	ng : n ∈ g.cycle_type,	n2 : n ≠ 2,	n2' : 2 < n	⊢ n ≤ g.support.card
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	n : ℕ,	ng : n ∈ g.cycle_type,	n2 : n ≠ 2,	n2' : 2 < n,	n5 : n ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤		H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	n : ℕ,	ng : n ∈ g.cycle_type,	n2 : n ≠ 2,	n2' : 2 < n	⊢ n ≤ g.support.card
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	n : ℕ,	ng : n ∈ g.cycle_type,	n2 : n ≠ 2,	n2' : 2 < n,	m : multiset ℕ,	hm : g.cycle_type = n ::ₘ m	⊢ n ≤ g.support.card
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	n : ℕ,	ng : n ∈ g.cycle_type,	n2 : n ≠ 2,	n2' : 2 < n	⊢ n ≤ g.support.card		H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	n : ℕ,	ng : n ∈ g.cycle_type,	n2 : n ≠ 2,	n2' : 2 < n,	n5 : n ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	n : ℕ,	ng : n ∈ g.cycle_type,	n2 : n ≠ 2,	n2' : 2 < n,	m : multiset ℕ,	hm : g.cycle_type = n ::ₘ m	⊢ n ≤ n + m.sum
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	n : ℕ,	ng : n ∈ g.cycle_type,	n2 : n ≠ 2,	n2' : 2 < n,	n5 : n ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 3 ∈ g.cycle_type,	n2 : 3 ≠ 2,	n2' : 2 < 3,	n5 : 3 ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 3 ∈ g.cycle_type,	n2 : 3 ≠ 2,	n2' : 2 < 3,	n5 : 3 ≤ 5	⊢ 5 ≤ fintype.card (fin 5)
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 3 ∈ g.cycle_type,	n2 : 3 ≠ 2,	n2' : 2 < 3,	n5 : 3 ≤ 5	⊢ subgroup.normal_closure {⟨g * g, _⟩} ≤ subgroup.normal_closure {⟨g, gA⟩}
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 3 ∈ g.cycle_type,	n2 : 3 ≠ 2,	n2' : 2 < 3,	n5 : 3 ≤ 5	⊢ {⟨g * g, _⟩} ⊆ ↑(subgroup.normal_closure {⟨g, gA⟩})
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 3 ∈ g.cycle_type,	n2 : 3 ≠ 2,	n2' : 2 < 3,	n5 : 3 ≤ 5	⊢ ⟨g * g, _⟩ ∈ subgroup.normal_closure {⟨g, gA⟩}
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 3 ∈ g.cycle_type,	n2 : 3 ≠ 2,	n2' : 2 < 3,	n5 : 3 ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤		H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 4 ∈ g.cycle_type,	n2 : 4 ≠ 2,	n2' : 2 < 4,	n5 : 4 ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤		H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 5 ∈ g.cycle_type,	n2 : 5 ≠ 2,	n2' : 2 < 5,	n5 : 5 ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 3 ∈ g.cycle_type,	n2 : 3 ≠ 2,	n2' : 2 < 3,	n5 : 3 ≤ 5,	h : ?m_3 ∈ subgroup.normal_closure {?m_3}	⊢ ⟨g * g, _⟩ ∈ subgroup.normal_closure {⟨g, gA⟩}		H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 3 ∈ g.cycle_type,	n2 : 3 ≠ 2,	n2' : 2 < 3,	n5 : 3 ≤ 5	⊢ Type ?		H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 3 ∈ g.cycle_type,	n2 : 3 ≠ 2,	n2' : 2 < 3,	n5 : 3 ≤ 5	⊢ ?m_1		H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 3 ∈ g.cycle_type,	n2 : 3 ≠ 2,	n2' : 2 < 3,	n5 : 3 ≤ 5	⊢ group ?m_1
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 4 ∈ g.cycle_type,	n2 : 4 ≠ 2,	n2' : 2 < 4,	n5 : 4 ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 4 ∈ g.cycle_type,	n2 : 4 ≠ 2,	n2' : 2 < 4,	n5 : 4 ≤ 5,	con : ⇑equiv.perm.sign g = 1	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 4 ∈ g.cycle_type,	n2 : 4 ≠ 2,	n2' : 2 < 4,	n5 : 4 ≤ 5,	con : ¬subgroup.normal_closure {⟨g, gA⟩} = ⊤	⊢ ¬⇑equiv.perm.sign g = 1
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 4 ∈ g.cycle_type,	n2 : 4 ≠ 2,	n2' : 2 < 4,	n5 : 4 ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤		H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 5 ∈ g.cycle_type,	n2 : 5 ≠ 2,	n2' : 2 < 5,	n5 : 5 ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 4 ∈ g.cycle_type,	n2 : 4 ≠ 2,	n2' : 2 < 4,	n5 : 4 ≤ 5,	con : ¬subgroup.normal_closure {⟨g, gA⟩} = ⊤	⊢ ¬-(-1) ^ 4 = 1
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 5 ∈ g.cycle_type,	n2 : 5 ≠ 2,	n2' : 2 < 5,	n5 : 5 ≤ 5	⊢ subgroup.normal_closure {⟨g, gA⟩} = ⊤
H : subgroup ↥(alternating_group (fin 5)),	Hn : H.normal,	g : equiv.perm (fin 5),	gA : g ∈ alternating_group (fin 5),	g1 : ⟨g, gA⟩ ≠ 1,	gH : {⟨g, gA⟩} ⊆ ↑H,	ng : 5 ∈ g.cycle_type,	n2 : 5 ≠ 2,	n2' : 2 < 5,	n5 : 5 ≤ 5	⊢ (fin_rotate 5).cycle_type = g.cycle_type
G : Type u_1,	_inst_1 : group G,	N : Type u_3,	_inst_3 : group N,	f : G →* N,	g : N →* G,	h : function.left_inverse ⇑g ⇑f	⊢ function.right_inverse (⇑g ∘ ⇑(f.range.subtype)) ⇑(f.range_restrict)
G : Type u_1,	_inst_1 : group G,	N : Type u_3,	_inst_3 : group N,	f : G →* N,	g : N →* G,	h : function.left_inverse ⇑g ⇑f,	y : G	⊢ ⇑(f.range_restrict) ((⇑g ∘ ⇑(f.range.subtype)) ⟨⇑f y, _⟩) = ⟨⇑f y, _⟩
G : Type u_1,	_inst_1 : group G,	N : Type u_3,	_inst_3 : group N,	f : G →* N,	g : N →* G,	h : function.left_inverse ⇑g ⇑f,	y : G	⊢ ↑(⇑(f.range_restrict) ((⇑g ∘ ⇑(f.range.subtype)) ⟨⇑f y, _⟩)) = ↑⟨⇑f y, _⟩
C : Type u_4,	_inst_4 : comm_group C,	x y z : subgroup C,	xz : x ≤ z,	a : C,	ha : a ∈ (x ⊔ y) ⊓ z	⊢ a ∈ x ⊔ y ⊓ z
C : Type u_4,	_inst_4 : comm_group C,	x y z : subgroup C,	xz : x ≤ z,	a : C,	ha : (∃ (y_1 : C) (H : y_1 ∈ x) (z : C) (H : z ∈ y), y_1 * z = a) ∧ a ∈ z	⊢ a ∈ x ⊔ y ⊓ z
C : Type u_4,	_inst_4 : comm_group C,	x y z : subgroup C,	xz : x ≤ z,	b : C,	hb : b ∈ x,	c : C,	hc : c ∈ y,	haz : b * c ∈ z	⊢ b * c ∈ x ⊔ y ⊓ z
C : Type u_4,	_inst_4 : comm_group C,	x y z : subgroup C,	xz : x ≤ z,	b : C,	hb : b ∈ x,	c : C,	hc : c ∈ y,	haz : b * c ∈ z	⊢ ∃ (y_1 : C) (H : y_1 ∈ x) (z_1 : C) (H : z_1 ∈ y ⊓ z), y_1 * z_1 = b * c
C : Type u_4,	_inst_4 : comm_group C,	x y z : subgroup C,	xz : x ≤ z,	b : C,	hb : b ∈ x,	c : C,	hc : c ∈ y,	haz : b * c ∈ z	⊢ c ∈ z
C : Type u_4,	_inst_4 : comm_group C,	x y z : subgroup C,	xz : x ≤ z,	b : C,	hb : b ∈ x,	c : C,	hc : c ∈ y,	haz : b * c ∈ z	⊢ b⁻¹ * (b * c) ∈ z
G : Type u_1,	_inst_1 : group G,	H : subgroup G	⊢ H = ⊥ ↔ ∀ (x : G), x ∈ H → x = 1
G : Type u_1,	_inst_1 : group G,	H : subgroup G	⊢ ↑H = ↑⊥ ↔ ∀ (x : G), x ∈ H → x = 1
G : Type u_1,	_inst_1 : group G,	N : Type u_3,	_inst_3 : group N,	H : subgroup N,	x : G × N	⊢ x ∈ ⊤.prod H ↔ x ∈ subgroup.comap (monoid_hom.snd G N) H
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R,	a b : R,	ha : a ∈ add_submonoid.closure ↑S,	hb : b ∈ add_submonoid.closure ↑S	⊢ a * b ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R,	b : R,	hb : b ∈ add_submonoid.closure ↑S	⊢ ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * b ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R,	b : R,	hb : b ∈ add_submonoid.closure ↑S	⊢ ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * b ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R,	b : R,	hb : b ∈ add_submonoid.closure ↑S	⊢ ∀ (x : R), x ∈ ↑S → ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * x ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R,	b : R,	hb : b ∈ add_submonoid.closure ↑S	⊢ ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * 0 ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R,	b : R,	hb : b ∈ add_submonoid.closure ↑S	⊢ ∀ (x y : R), (∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * x ∈ add_submonoid.closure ↑S) → (∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * y ∈ add_submonoid.closure ↑S) → ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * (x + y) ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R	⊢ ∀ (x : R), x ∈ ↑S → ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * x ∈ add_submonoid.closure ↑S		R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R	⊢ ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * 0 ∈ add_submonoid.closure ↑S		R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R	⊢ ∀ (x y : R), (∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * x ∈ add_submonoid.closure ↑S) → (∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * y ∈ add_submonoid.closure ↑S) → ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * (x + y) ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R	⊢ ∀ (x : R), x ∈ ↑S → ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * x ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R,	b : R,	hb : b ∈ add_submonoid.closure ↑S	⊢ b * 0 ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R	⊢ ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * 0 ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R	⊢ ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * 0 ∈ add_submonoid.closure ↑S		R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R	⊢ ∀ (x y : R), (∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * x ∈ add_submonoid.closure ↑S) → (∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * y ∈ add_submonoid.closure ↑S) → ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * (x + y) ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R	⊢ ∀ (x y : R), (∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * x ∈ add_submonoid.closure ↑S) → (∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * y ∈ add_submonoid.closure ↑S) → ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * (x + y) ∈ add_submonoid.closure ↑S
R : Type u_3,	_inst_1 : non_assoc_semiring R,	S : submonoid R	⊢ ∀ (x y : R), (∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * x ∈ add_submonoid.closure ↑S) → (∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * y ∈ add_submonoid.closure ↑S) → ∀ {a : R}, a ∈ add_submonoid.closure ↑S → a * x + a * y ∈ add_submonoid.closure ↑S
M : Type u_1,	_inst_2 : comm_monoid M,	S : submonoid M,	m : multiset ↥S	⊢ (multiset.map coe m).prod ∈ S
M : Type u_1,	_inst_2 : comm_monoid M,	S : submonoid M,	m : multiset ↥S	⊢ ↑(m.prod) ∈ S
M : Type u_1,	_inst_2 : comm_monoid M,	S : submonoid M,	m : multiset M,	hm : ∀ (a : M), a ∈ m → a ∈ S	⊢ m.prod ∈ S
M : Type u_1,	N : Type u_2,	_inst_1 : mul_one_class M,	_inst_2 : mul_one_class N,	s : submonoid M,	x : M × N	⊢ x ∈ s.prod ⊤ ↔ x ∈ submonoid.comap (monoid_hom.fst M N) s
G : Type u,	_inst_1 : group G,	_inst_2 : fintype G,	p n : ℕ,	hp : fact (nat.prime p),	H : subgroup G,	hH : fintype.card ↥H = p ^ n	⊢ fintype.card (quotient_group.quotient (subgroup.comap H.normalizer.subtype H)) ≡ fintype.card (quotient_group.quotient H) [MOD p]
G : Type u,	_inst_1 : group G,	_inst_2 : fintype G,	p n : ℕ,	hp : fact (nat.prime p),	H : subgroup G,	hH : fintype.card ↥H = p ^ n	⊢ fintype.card ↥(mul_action.fixed_points ↥H (quotient_group.quotient H)) ≡ fintype.card (quotient_group.quotient H) [MOD p]
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R	⊢ I ≤ ⊥.jacobson
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I	⊢ x ∈ ⊥.jacobson
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I	⊢ ∀ (y : R), is_unit (-x * y + 1)
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R	⊢ is_unit (-x * y + 1)
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R	⊢ is_unit (1 + -x * y)
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y)	⊢ is_unit (1 + -x * y)
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y)	⊢ ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤]
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	m n : ℕ,	h : m ≤ n	⊢ f m ≡ f n [SMOD I ^ m • ⊤]
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	m n : ℕ,	h : m ≤ n	⊢ (finset.range m).sum (has_pow.pow (x * y)) - (finset.range n).sum (has_pow.pow (x * y)) ∈ I ^ m
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	m n : ℕ,	h : m ≤ n	⊢ ∑ (x_1 : ℕ) in finset.range (n - m), (x * y) ^ (m + x_1) ∈ I ^ m
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	m n : ℕ,	h : m ≤ n	⊢ ∀ (c : ℕ), c ∈ finset.range (n - m) → (x * y) ^ (m + c) ∈ I ^ m
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	m n : ℕ,	h : m ≤ n,	n : ℕ,	hn : n ∈ finset.range (n - m)	⊢ (x * y) ^ (m + n) ∈ I ^ m
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	m n : ℕ,	h : m ≤ n,	n : ℕ,	hn : n ∈ finset.range (n - m)	⊢ x ^ m * (x ^ n * y ^ (m + n)) ∈ I ^ m
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y)	⊢ ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤]		R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤]	⊢ is_unit (1 + -x * y)
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤]	⊢ is_unit (1 + -x * y)
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	hL : ∀ (n : ℕ), (λ (m : ℕ), f m) n ≡ L [SMOD I ^ n • ⊤]	⊢ is_unit (1 + -x * y)
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	hL : ∀ (n : ℕ), (λ (m : ℕ), f m) n ≡ L [SMOD I ^ n • ⊤]	⊢ ∃ (b : R), (1 + -x * y) * b = 1
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	hL : ∀ (n : ℕ), (λ (m : ℕ), f m) n ≡ L [SMOD I ^ n • ⊤]	⊢ (1 + -x * y) * L = 1
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	hL : ∀ (n : ℕ), (λ (m : ℕ), f m) n ≡ L [SMOD I ^ n • ⊤]	⊢ (1 + -(x * y)) * L - 1 = 0
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	hL : ∀ (n : ℕ), (λ (m : ℕ), f m) n ≡ L [SMOD I ^ n • ⊤]	⊢ ∀ (n : ℕ), (1 + -(x * y)) * L - 1 ≡ 0 [SMOD I ^ n • ⊤]
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	hL : ∀ (n : ℕ), (λ (m : ℕ), f m) n ≡ L [SMOD I ^ n • ⊤],	n : ℕ	⊢ (1 + -(x * y)) * L - 1 ≡ 0 [SMOD I ^ n • ⊤]
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n ≡ L [SMOD I ^ n • ⊤]	⊢ (1 + -(x * y)) * L - 1 ≡ 0 [SMOD I ^ n • ⊤]
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n - L ∈ I ^ n	⊢ (1 + -(x * y)) * L - 1 - 0 ∈ I ^ n
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n - L ∈ I ^ n	⊢ (1 + -(x * y)) * L - 1 ∈ I ^ n
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n - L ∈ I ^ n,	this : (1 - x * y) * f n - 1 ∈ I ^ n	⊢ (1 + -(x * y)) * L - 1 ∈ I ^ n
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n - L ∈ I ^ n,	this : (1 - x * y) * f n - 1 ∈ I ^ n	⊢ (1 + -(x * y)) * L - 1 ∈ I ^ n		R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n - L ∈ I ^ n	⊢ (1 - x * y) * f n - 1 ∈ I ^ n
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n - L ∈ I ^ n,	this : (1 - x * y) * f n - 1 ∈ I ^ n	⊢ (1 + -(x * y)) * L - 1 = (1 - x * y) * f n - 1 - (1 + -(x * y)) * (f n - L)
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n - L ∈ I ^ n	⊢ (1 - x * y) * f n - 1 ∈ I ^ n
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	hL : (λ (m : ℕ), f m) 0 - L ∈ I ^ 0	⊢ (1 - x * y) * f 0 - 1 ∈ I ^ 0		case nat.succ	R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n.succ - L ∈ I ^ n.succ	⊢ (1 - x * y) * f n.succ - 1 ∈ I ^ n.succ
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	hL : (λ (m : ℕ), f m) 0 - L ∈ I ^ 0	⊢ (1 - x * y) * f 0 - 1 ∈ I ^ 0
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n.succ - L ∈ I ^ n.succ	⊢ (1 - x * y) * f n.succ - 1 ∈ I ^ n.succ
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n.succ - L ∈ I ^ n.succ	⊢ (1 - x * y) * geom_sum (x * y) n.succ - 1 ∈ I ^ n.succ
R : Type u_1,	_inst_1 : comm_ring R,	I : ideal R,	_inst_6 : is_adic_complete I R,	x : R,	hx : x ∈ I,	y : R,	f : ℕ → R := geom_sum (x * y),	hf : ∀ (m n : ℕ), m ≤ n → f m ≡ f n [SMOD I ^ m • ⊤],	L : R,	n : ℕ,	hL : (λ (m : ℕ), f m) n.succ - L ∈ I ^ n.succ	⊢ x ^ n.succ * y ^ n.succ ∈ I ^ n.succ
k : Type u_1,	V₁ : Type u_2,	V₂ : Type u_3,	P₁ : Type u_6,	P₂ : Type u_7,	_inst_1 : ring k,	_inst_2 : add_comm_group V₁,	_inst_3 : module k V₁,	_inst_4 : affine_space V₁ P₁,	_inst_5 : add_comm_group V₂,	_inst_6 : module k V₂,	_inst_7 : affine_space V₂ P₂,	e : P₁ → P₂,	e' : V₁ ≃ₗ[k] V₂,	p : P₁,	h : ∀ (p' : P₁), e p' = ⇑e' (p' -ᵥ p) +ᵥ e p,	p' : P₁	⊢ (λ (q' : P₂), ⇑(e'.symm) (q' -ᵥ e p) +ᵥ p) (e p') = p'
k : Type u_1,	V₁ : Type u_2,	V₂ : Type u_3,	P₁ : Type u_6,	P₂ : Type u_7,	_inst_1 : ring k,	_inst_2 : add_comm_group V₁,	_inst_3 : module k V₁,	_inst_4 : affine_space V₁ P₁,	_inst_5 : add_comm_group V₂,	_inst_6 : module k V₂,	_inst_7 : affine_space V₂ P₂,	e : P₁ → P₂,	e' : V₁ ≃ₗ[k] V₂,	p : P₁,	h : ∀ (p' : P₁), e p' = ⇑e' (p' -ᵥ p) +ᵥ e p,	q' : P₂	⊢ e ((λ (q' : P₂), ⇑(e'.symm) (q' -ᵥ e p) +ᵥ p) q') = q'
k : Type u_1,	V₁ : Type u_2,	V₂ : Type u_3,	P₁ : Type u_6,	P₂ : Type u_7,	_inst_1 : ring k,	_inst_2 : add_comm_group V₁,	_inst_3 : module k V₁,	_inst_4 : affine_space V₁ P₁,	_inst_5 : add_comm_group V₂,	_inst_6 : module k V₂,	_inst_7 : affine_space V₂ P₂,	e : P₁ → P₂,	e' : V₁ ≃ₗ[k] V₂,	p : P₁,	h : ∀ (p' : P₁), e p' = ⇑e' (p' -ᵥ p) +ᵥ e p,	p' : P₁,	v : V₁	⊢ ⇑{to_fun := e, inv_fun := λ (q' : P₂), ⇑(e'.symm) (q' -ᵥ e p) +ᵥ p, left_inv := _, right_inv := _} (v +ᵥ p') = ⇑e' v +ᵥ ⇑{to_fun := e, inv_fun := λ (q' : P₂), ⇑(e'.symm) (q' -ᵥ e p) +ᵥ p, left_inv := _, right_inv := _} p'
k : Type u_1,	V1 : Type u_2,	P1 : Type u_3,	_inst_1 : comm_ring k,	_inst_2 : add_comm_group V1,	_inst_3 : module k V1,	_inst_4 : affine_space V1 P1,	c : P1,	r₁ r₂ : k	⊢ affine_map.homothety c (r₁ + r₂) = r₁ • (affine_map.id k P1 -ᵥ affine_map.const k P1 c) +ᵥ affine_map.homothety c r₂
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s : set P,	h : affine_span k s = ⊤	⊢ s.nonempty
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s : set P,	h : affine_span k s = ⊤	⊢ s ≠ ∅
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	h : affine_span k ∅ = ⊤	⊢ false
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	h : ⊥ = ⊤	⊢ false
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : s1.direction ⊔ s2.direction = ⊤	⊢ (↑s1 ∩ ↑s2).nonempty
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : s1.direction ⊔ s2.direction = ⊤,	h : ¬(↑s1 ∩ ↑s2).nonempty	⊢ false
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : s1.direction ⊔ s2.direction = ⊤,	h : ↑s1 ∩ ↑s2 = ∅	⊢ false
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : s1.direction ⊔ s2.direction = ⊤,	h : ↑s1 ∩ ↑s2 = ∅,	hlt : s1.direction ⊔ s2.direction < (s1 ⊔ s2).direction	⊢ false
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : s1.direction ⊔ s2.direction = ⊤,	h : ↑s1 ∩ ↑s2 = ∅,	hlt : ⊤ < (s1 ⊔ s2).direction	⊢ false
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction	⊢ ∃ (p : P), ↑s1 ∩ ↑s2 = {p}
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction,	p : P,	hp : p ∈ ↑s1 ∩ ↑s2	⊢ ∃ (p : P), ↑s1 ∩ ↑s2 = {p}
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction,	p : P,	hp : p ∈ ↑s1 ∩ ↑s2	⊢ ↑s1 ∩ ↑s2 = {p}
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction,	p : P,	hp : p ∈ ↑s1 ∩ ↑s2,	q : P	⊢ q ∈ ↑s1 ∩ ↑s2 ↔ q ∈ {p}
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction,	p : P,	hp : p ∈ ↑s1 ∩ ↑s2,	q : P	⊢ q ∈ ↑s1 ∩ ↑s2 ↔ q = p
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction,	p : P,	hp : p ∈ ↑s1 ∩ ↑s2,	q : P	⊢ q ∈ ↑s1 ∩ ↑s2 → q = p
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction,	p : P,	hp : p ∈ ↑s1 ∩ ↑s2,	q : P,	hq1 : q ∈ ↑s1,	hq2 : q ∈ ↑s2	⊢ q = p
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction,	p : P,	hp : p ∈ ↑s1 ∩ ↑s2,	q : P,	hq1 : q ∈ ↑s1,	hq2 : q ∈ ↑s2,	hqp : q -ᵥ p ∈ s1.direction ⊓ s2.direction	⊢ q = p
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction,	p : P,	hp : p ∈ ↑s1 ∩ ↑s2,	q : P	⊢ q ∈ ↑s1 ∩ ↑s2 → q = p		k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction,	p : P,	hp : p ∈ ↑s1 ∩ ↑s2,	q : P	⊢ q = p → q ∈ ↑s1 ∩ ↑s2
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	S : affine_space V P,	s1 s2 : affine_subspace k P,	h1 : ↑s1.nonempty,	h2 : ↑s2.nonempty,	hd : is_compl s1.direction s2.direction,	p : P,	hp : p ∈ ↑s1 ∩ ↑s2,	q : P	⊢ q = p → q ∈ ↑s1 ∩ ↑s2
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	s : finset P,	p : P,	hp : p ∈ s	⊢ vector_span k ↑s = submodule.span k ↑(finset.image (λ (_x : P), _x -ᵥ p) (s.erase p))
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P	⊢ affine_independent k p ↔ ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P	⊢ affine_independent k p → ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	hw1 : ∑ (i : ι) in s1, w1 i = 1,	hw2 : ∑ (i : ι) in s2, w2 i = 1,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2	⊢ ↑s1.indicator w1 = ↑s2.indicator w2
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	hw1 : ∑ (i : ι) in s1, w1 i = 1,	hw2 : ∑ (i : ι) in s2, w2 i = 1,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι	⊢ ↑s1.indicator w1 i = ↑s2.indicator w2 i
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	hw1 : ∑ (i : ι) in s1, w1 i = 1,	hw2 : ∑ (i : ι) in s2, w2 i = 1,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∈ s1 ∪ s2	⊢ ↑s1.indicator w1 i = ↑s2.indicator w2 i
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	hw1 : ∑ (i : ι) in s1, w1 i = 1,	hw2 : ∑ (i : ι) in s2, w2 i = 1,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∈ s1 ∪ s2	⊢ ↑s1.indicator w1 i - ↑s2.indicator w2 i = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	hw2 : ∑ (i : ι) in s2, w2 i = 1,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∈ s1 ∪ s2,	hw1 : ∑ (i : ι) in s1 ∪ s2, ↑s1.indicator (λ (i : ι), w1 i) i = 1	⊢ ↑s1.indicator w1 i - ↑s2.indicator w2 i = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∈ s1 ∪ s2,	hw1 : ∑ (i : ι) in s1 ∪ s2, ↑s1.indicator (λ (i : ι), w1 i) i = 1,	hw2 : ∑ (i : ι) in s1 ∪ s2, ↑s2.indicator (λ (i : ι), w2 i) i = 1	⊢ ↑s1.indicator w1 i - ↑s2.indicator w2 i = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∈ s1 ∪ s2,	hw1 : ∑ (i : ι) in s1 ∪ s2, ↑s1.indicator (λ (i : ι), w1 i) i = 1,	hw2 : ∑ (i : ι) in s1 ∪ s2, ↑s2.indicator (λ (i : ι), w2 i) i = 1	⊢ ∑ (i : ι) in s1 ∪ s2, (↑s1.indicator w1 - ↑s2.indicator w2) i = 0		k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∈ s1 ∪ s2,	hw1 : ∑ (i : ι) in s1 ∪ s2, ↑s1.indicator (λ (i : ι), w1 i) i = 1,	hw2 : ∑ (i : ι) in s1 ∪ s2, ↑s2.indicator (λ (i : ι), w2 i) i = 1,	hws : ∑ (i : ι) in s1 ∪ s2, (↑s1.indicator w1 - ↑s2.indicator w2) i = 0	⊢ ↑s1.indicator w1 i - ↑s2.indicator w2 i = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∈ s1 ∪ s2,	hw1 : ∑ (i : ι) in s1 ∪ s2, ↑s1.indicator (λ (i : ι), w1 i) i = 1,	hw2 : ∑ (i : ι) in s1 ∪ s2, ↑s2.indicator (λ (i : ι), w2 i) i = 1	⊢ ∑ (i : ι) in s1 ∪ s2, (↑s1.indicator w1 - ↑s2.indicator w2) i = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∈ s1 ∪ s2,	hw1 : ∑ (i : ι) in s1 ∪ s2, ↑s1.indicator (λ (i : ι), w1 i) i = 1,	hw2 : ∑ (i : ι) in s1 ∪ s2, ↑s2.indicator (λ (i : ι), w2 i) i = 1,	hws : ∑ (i : ι) in s1 ∪ s2, (↑s1.indicator w1 - ↑s2.indicator w2) i = 0	⊢ ↑s1.indicator w1 i - ↑s2.indicator w2 i = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	i : ι,	hi : i ∈ s1 ∪ s2,	hw1 : ∑ (i : ι) in s1 ∪ s2, ↑s1.indicator (λ (i : ι), w1 i) i = 1,	hw2 : ∑ (i : ι) in s1 ∪ s2, ↑s2.indicator (λ (i : ι), w2 i) i = 1,	hws : ∑ (i : ι) in s1 ∪ s2, (↑s1.indicator w1 - ↑s2.indicator w2) i = 0,	heq : ⇑((s1 ∪ s2).weighted_vsub p) (↑s1.indicator w1 - ↑s2.indicator w2) = 0	⊢ ↑s1.indicator w1 i - ↑s2.indicator w2 i = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	hw1 : ∑ (i : ι) in s1, w1 i = 1,	hw2 : ∑ (i : ι) in s2, w2 i = 1,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∈ s1 ∪ s2	⊢ ↑s1.indicator w1 i = ↑s2.indicator w2 i		k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	hw1 : ∑ (i : ι) in s1, w1 i = 1,	hw2 : ∑ (i : ι) in s2, w2 i = 1,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∉ s1 ∪ s2	⊢ ↑s1.indicator w1 i = ↑s2.indicator w2 i
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	hw1 : ∑ (i : ι) in s1, w1 i = 1,	hw2 : ∑ (i : ι) in s2, w2 i = 1,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∉ s1 ∪ s2	⊢ ↑s1.indicator w1 i = ↑s2.indicator w2 i
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : affine_independent k p,	s1 s2 : finset ι,	w1 w2 : ι → k,	hw1 : ∑ (i : ι) in s1, w1 i = 1,	hw2 : ∑ (i : ι) in s2, w2 i = 1,	heq : ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2,	i : ι,	hi : i ∉ ↑s1 ∪ ↑s2	⊢ ↑s1.indicator w1 i = ↑s2.indicator w2 i
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P	⊢ affine_independent k p → ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2		k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P	⊢ (∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2) → affine_independent k p
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P	⊢ (∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2) → affine_independent k p
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1	⊢ ∑ (i : ι) in s, w1 i = 1		k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1	⊢ ∑ (i : ι) in s, w1 i = 1
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1	⊢ ∑ (i : ι) in s, w2 i = 1		k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1	⊢ ∑ (i : ι) in s, w2 i = 1
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1	⊢ ⇑(s.affine_combination p) w2 = p i0		k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1,	hw2s : ⇑(s.affine_combination p) w2 = p i0	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1	⊢ ⇑(s.affine_combination p) w2 = p i0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	ha : ∀ (s1 s2 : finset ι) (w1 w2 : ι → k), ∑ (i : ι) in s1, w1 i = 1 → ∑ (i : ι) in s2, w2 i = 1 → ⇑(s1.affine_combination p) w1 = ⇑(s2.affine_combination p) w2 → ↑s1.indicator w1 = ↑s2.indicator w2,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1,	hw2s : ⇑(s.affine_combination p) w2 = p i0	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1,	hw2s : ⇑(s.affine_combination p) w2 = p i0,	ha : ↑s.indicator w2 = ↑s.indicator w1	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1,	hw2s : ⇑(s.affine_combination p) w2 = p i0,	ha : ↑s.indicator w2 = ↑s.indicator w1	⊢ w2 i0 - w1 i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1,	hw2s : ⇑(s.affine_combination p) w2 = p i0,	ha : ↑s.indicator w2 = ↑s.indicator w1,	hi0 : i0 ∈ ↑s	⊢ w2 i0 - w1 i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1,	hw2s : ⇑(s.affine_combination p) w2 = p i0,	ha : ↑s.indicator w2 = ↑s.indicator w1	⊢ w2 i0 - w1 i0 = 0		k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1,	hw2s : ⇑(s.affine_combination p) w2 = p i0,	ha : ↑s.indicator w2 = ↑s.indicator w1,	hws : w2 i0 - w1 i0 = 0	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	p : ι → P,	s : finset ι,	w : ι → k,	hw : ∑ (i : ι) in s, w i = 0,	hs : ⇑(s.weighted_vsub p) w = 0,	i0 : ι,	hi0 : i0 ∈ s,	w1 : ι → k := function.update (function.const ι 0) i0 1,	hw1 : ∑ (i : ι) in s, w1 i = 1,	hw1s : ⇑(s.affine_combination p) w1 = p i0,	w2 : ι → k := w + w1,	hw2 : ∑ (i : ι) in s, w2 i = 1,	hw2s : ⇑(s.affine_combination p) w2 = p i0,	ha : ↑s.indicator w2 = ↑s.indicator w1,	hws : w2 i0 - w1 i0 = 0	⊢ w i0 = 0
k : Type u_1,	V : Type u_2,	P : Type u_3,	_inst_1 : ring k,	_inst_2 : add_comm_group V,	_inst_3 : module k V,	_inst_4 : affine_space V P,	ι : Type u_4,	_inst_5 : nontrivial k,	p : ι → P,	ha : affine_independent k p,	i : ι,	s : set ι	⊢ p i ∉ affine_span k (p '' (s \ {i}))
R : Type u_1,	V : Type u_2,	P : Type u_4,	_inst_1 : ring R,	_inst_2 : invertible 2,	_inst_3 : add_comm_group V,	_inst_4 : module R V,	_inst_5 : add_torsor V P,	x x' y y' : P	⊢ midpoint R x y = midpoint R x' y' ↔ x -ᵥ x' = y' -ᵥ y
k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r : k,	h : 0 < (1 - r) * (b - a)	⊢ f (⇑(affine_map.line_map a b) r) ≤ ⇑(affine_map.line_map (f a) (f b)) r ↔ slope f a b ≤ slope f (⇑(affine_map.line_map a b) r) b
k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r : k	⊢ 0 < (1 - r) * (b - a) → (f (⇑(affine_map.line_map b a) (1 - r)) ≤ ⇑(affine_map.line_map (f b) (f a)) (1 - r) ↔ slope f a b ≤ slope f (⇑(affine_map.line_map b a) (1 - r)) b)
k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r r' : k	⊢ 0 < r' * (b - a) → (f (⇑(affine_map.line_map b a) r') ≤ ⇑(affine_map.line_map (f b) (f a)) r' ↔ slope f a b ≤ slope f (⇑(affine_map.line_map b a) r') b)
k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r : k,	h : 0 < (1 - r) * (b - a)	⊢ f (⇑(affine_map.line_map b a) (1 - r)) ≤ ⇑(affine_map.line_map (f b) (f a)) (1 - r) ↔ slope f a b ≤ slope f (⇑(affine_map.line_map b a) (1 - r)) b
k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r' : k	⊢ 0 < r' * (b - a) → (f (⇑(affine_map.line_map b a) r') ≤ ⇑(affine_map.line_map (f b) (f a)) r' ↔ slope f a b ≤ slope f (⇑(affine_map.line_map b a) r') b)
k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r' : k,	h : 0 < r' * (b - a)	⊢ f (⇑(affine_map.line_map b a) r') ≤ ⇑(affine_map.line_map (f b) (f a)) r' ↔ slope f a b ≤ slope f (⇑(affine_map.line_map b a) r') b
k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r' : k,	h : 0 < r' * (b - a)	⊢ f (r' * (a - b) + b) ≤ r' • (f a - f b) + f b ↔ (b - a)⁻¹ • (f b - f a) ≤ (b - (r' * (a - b) + b))⁻¹ • (f b - f (r' * (a - b) + b))
k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r' : k,	h : 0 < r' * (b - a)	⊢ b - a ≠ 0		k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r' : k,	h : 0 < r' * (b - a)	⊢ 0 < (-(r' * (a - b)))⁻¹
k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r' : k,	h : 0 < r' * (b - a)	⊢ b - a ≠ 0
k : Type u_1,	E : Type u_2,	_inst_1 : linear_ordered_field k,	_inst_2 : ordered_add_comm_group E,	_inst_3 : module k E,	_inst_4 : ordered_smul k E,	f : k → E,	a b r' : k,	h : 0 < r' * (b - a)	⊢ 0 < (-(r' * (a - b)))⁻¹
R : Type u_1,	_inst_1 : semiring R,	M : Type u_2,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	N : Type u_3,	_inst_4 : add_comm_monoid N,	_inst_5 : module R N,	ι : Type u_6,	_inst_10 : decidable_eq ι,	v : ι → M,	i j : ι,	h : v i = v j,	hij : i ≠ j	⊢ 0.to_fun v = 0
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	s : set (submodule R M),	z : M,	hs : s.nonempty,	hdir : directed_on has_le.le s	⊢ z ∈ has_Sup.Sup s ↔ ∃ (y : submodule R M) (H : y ∈ s), z ∈ y
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	s : set (submodule R M),	z : M,	hs : s.nonempty,	hdir : directed_on has_le.le s,	_inst : nonempty ↥s	⊢ z ∈ has_Sup.Sup s ↔ ∃ (y : submodule R M) (H : y ∈ s), z ∈ y
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∃ (a : R), a • y = x
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y},	H : y ∈ {y}	⊢ ∃ (a : R), a • y = y
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y},	H : y ∈ {y}	⊢ 1 • y = y
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∀ (x : M), x ∈ {y} → (∃ (a : R), a • y = x)		R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∃ (a : R), a • y = 0		R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∀ (x y_1 : M), (∃ (a : R), a • y = x) → (∃ (a : R), a • y = y_1) → (∃ (a : R), a • y = x + y_1)		R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∀ (a : R) (x : M), (∃ (a : R), a • y = x) → (∃ (a_1 : R), a_1 • y = a • x)
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∀ (x : M), x ∈ {y} → (∃ (a : R), a • y = x)
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ 0 • y = 0
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∃ (a : R), a • y = 0		R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∀ (x y_1 : M), (∃ (a : R), a • y = x) → (∃ (a : R), a • y = y_1) → (∃ (a : R), a • y = x + y_1)		R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∀ (a : R) (x : M), (∃ (a : R), a • y = x) → (∃ (a_1 : R), a_1 • y = a • x)
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∃ (a : R), a • y = 0
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∀ (x y_1 : M), (∃ (a : R), a • y = x) → (∃ (a : R), a • y = y_1) → (∃ (a : R), a • y = x + y_1)
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y},	a b : R	⊢ (a + b) • y = a • y + b • y
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∀ (x y_1 : M), (∃ (a : R), a • y = x) → (∃ (a : R), a • y = y_1) → (∃ (a : R), a • y = x + y_1)		R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∀ (a : R) (x : M), (∃ (a : R), a • y = x) → (∃ (a_1 : R), a_1 • y = a • x)
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y},	a b : R	⊢ ∃ (a_1 : R), a_1 • y = a • y + b • y
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y}	⊢ ∀ (a : R) (x : M), (∃ (a : R), a • y = x) → (∃ (a_1 : R), a_1 • y = a • x)
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y},	a b : R	⊢ (a * b) • y = a • b • y
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M,	h : x ∈ submodule.span R {y},	a b : R	⊢ ∃ (a_1 : R), a_1 • y = a • b • y
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M	⊢ (∃ (a : R), a • y = x) → x ∈ submodule.span R {y}
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	y : M,	a : R,	ᾰ_h : a • y = a • y	⊢ a • y ∈ submodule.span R {y}
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	x y : M	⊢ (∃ (a : R), a • y = x) → x ∈ submodule.span R {y}
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_4 : add_comm_monoid M,	_inst_8 : module R M,	y : M,	a : R,	ᾰ_h : a • y = a • y	⊢ y ∈ {y}
R : Type u_1,	R₂ : Type u_3,	M : Type u_8,	M₂ : Type u_11,	_inst_1 : semiring R,	_inst_2 : semiring R₂,	_inst_4 : add_comm_monoid M,	_inst_5 : add_comm_monoid M₂,	_inst_8 : module R M,	_inst_9 : module R₂ M₂,	τ₁₂ : R →+* R₂,	_inst_12 : ring_hom_surjective τ₁₂,	f : M →ₛₗ[τ₁₂] M₂,	q : submodule R₂ M₂,	h : q ≤ f.range	⊢ submodule.map f (submodule.comap f q) = q
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_5 : module R M,	p p' : submodule R M,	h : p ≤ p'	⊢ (submodule.of_le h).ker = ⊥
R : Type u_1,	R₂ : Type u_3,	M : Type u_8,	M₂ : Type u_11,	_inst_1 : comm_ring R,	_inst_2 : comm_ring R₂,	_inst_3 : add_comm_group M,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M,	_inst_6 : module R₂ M₂,	τ₁₂ : R →+* R₂,	τ₂₁ : R₂ →+* R,	_inst_11 : ring_hom_inv_pair τ₁₂ τ₂₁,	_inst_12 : ring_hom_inv_pair τ₂₁ τ₁₂,	p : submodule R M,	e : M ≃ₛₗ[τ₁₂] M₂,	x : M₂	⊢ (∃ (y : M), y ∈ p ∧ ⇑↑e y = x) ↔ ⇑(e.symm) x ∈ p
R : Type u_1,	R₂ : Type u_3,	M : Type u_8,	M₂ : Type u_11,	_inst_1 : comm_ring R,	_inst_2 : comm_ring R₂,	_inst_3 : add_comm_group M,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M,	_inst_6 : module R₂ M₂,	τ₁₂ : R →+* R₂,	τ₂₁ : R₂ →+* R,	_inst_11 : ring_hom_inv_pair τ₁₂ τ₂₁,	_inst_12 : ring_hom_inv_pair τ₂₁ τ₁₂,	p : submodule R M,	e : M ≃ₛₗ[τ₁₂] M₂,	x : M₂	⊢ x ∈ submodule.map ↑e p ↔ ⇑(e.symm) x ∈ p
R : Type u_1,	R₂ : Type u_3,	M : Type u_8,	M₂ : Type u_11,	_inst_1 : comm_ring R,	_inst_2 : comm_ring R₂,	_inst_3 : add_comm_group M,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M,	_inst_6 : module R₂ M₂,	τ₁₂ : R →+* R₂,	τ₂₁ : R₂ →+* R,	_inst_11 : ring_hom_inv_pair τ₁₂ τ₂₁,	_inst_12 : ring_hom_inv_pair τ₂₁ τ₁₂,	p : submodule R M,	e : M ≃ₛₗ[τ₁₂] M₂,	x : M₂,	y : M,	hy : y ∈ p,	hx : ⇑↑e y = x	⊢ ⇑(e.symm) x ∈ p
R : Type u_1,	R₂ : Type u_3,	M : Type u_8,	M₂ : Type u_11,	_inst_1 : comm_ring R,	_inst_2 : comm_ring R₂,	_inst_3 : add_comm_group M,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M,	_inst_6 : module R₂ M₂,	τ₁₂ : R →+* R₂,	τ₂₁ : R₂ →+* R,	_inst_11 : ring_hom_inv_pair τ₁₂ τ₂₁,	_inst_12 : ring_hom_inv_pair τ₂₁ τ₁₂,	p : submodule R M,	e : M ≃ₛₗ[τ₁₂] M₂,	x : M₂	⊢ (∃ (y : M), y ∈ p ∧ ⇑↑e y = x) → ⇑(e.symm) x ∈ p		R : Type u_1,	R₂ : Type u_3,	M : Type u_8,	M₂ : Type u_11,	_inst_1 : comm_ring R,	_inst_2 : comm_ring R₂,	_inst_3 : add_comm_group M,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M,	_inst_6 : module R₂ M₂,	τ₁₂ : R →+* R₂,	τ₂₁ : R₂ →+* R,	_inst_11 : ring_hom_inv_pair τ₁₂ τ₂₁,	_inst_12 : ring_hom_inv_pair τ₂₁ τ₁₂,	p : submodule R M,	e : M ≃ₛₗ[τ₁₂] M₂,	x : M₂	⊢ ⇑(e.symm) x ∈ p → (∃ (y : M), y ∈ p ∧ ⇑↑e y = x)
R : Type u_1,	R₂ : Type u_3,	M : Type u_8,	M₂ : Type u_11,	_inst_1 : comm_ring R,	_inst_2 : comm_ring R₂,	_inst_3 : add_comm_group M,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M,	_inst_6 : module R₂ M₂,	τ₁₂ : R →+* R₂,	τ₂₁ : R₂ →+* R,	_inst_11 : ring_hom_inv_pair τ₁₂ τ₂₁,	_inst_12 : ring_hom_inv_pair τ₂₁ τ₁₂,	p : submodule R M,	e : M ≃ₛₗ[τ₁₂] M₂,	x : M₂	⊢ (∃ (y : M), y ∈ p ∧ ⇑↑e y = x) → ⇑(e.symm) x ∈ p
R : Type u_1,	R₂ : Type u_3,	M : Type u_8,	M₂ : Type u_11,	_inst_1 : comm_ring R,	_inst_2 : comm_ring R₂,	_inst_3 : add_comm_group M,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M,	_inst_6 : module R₂ M₂,	τ₁₂ : R →+* R₂,	τ₂₁ : R₂ →+* R,	_inst_11 : ring_hom_inv_pair τ₁₂ τ₂₁,	_inst_12 : ring_hom_inv_pair τ₂₁ τ₁₂,	p : submodule R M,	e : M ≃ₛₗ[τ₁₂] M₂,	x : M₂,	hx : ⇑(e.symm) x ∈ p	⊢ ∃ (y : M), y ∈ p ∧ ⇑↑e y = x
R : Type u_1,	R₂ : Type u_3,	M : Type u_8,	M₂ : Type u_11,	_inst_1 : comm_ring R,	_inst_2 : comm_ring R₂,	_inst_3 : add_comm_group M,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M,	_inst_6 : module R₂ M₂,	τ₁₂ : R →+* R₂,	τ₂₁ : R₂ →+* R,	_inst_11 : ring_hom_inv_pair τ₁₂ τ₂₁,	_inst_12 : ring_hom_inv_pair τ₂₁ τ₁₂,	p : submodule R M,	e : M ≃ₛₗ[τ₁₂] M₂,	x : M₂,	hx : ⇑(e.symm) x ∈ p	⊢ ⇑↑e (⇑(e.symm) x) = x
R : Type u_1,	R₂ : Type u_3,	M : Type u_8,	M₂ : Type u_11,	_inst_1 : comm_ring R,	_inst_2 : comm_ring R₂,	_inst_3 : add_comm_group M,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M,	_inst_6 : module R₂ M₂,	τ₁₂ : R →+* R₂,	τ₂₁ : R₂ →+* R,	_inst_11 : ring_hom_inv_pair τ₁₂ τ₂₁,	_inst_12 : ring_hom_inv_pair τ₂₁ τ₁₂,	p : submodule R M,	e : M ≃ₛₗ[τ₁₂] M₂,	x : M₂	⊢ ⇑(e.symm) x ∈ p → (∃ (y : M), y ∈ p ∧ ⇑↑e y = x)
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_5 : add_comm_monoid M,	_inst_10 : module R M,	f' : M →ₗ[R] M,	h : function.bijective ⇑f',	iterate_bijective : ∀ (n : ℕ), function.bijective ⇑(f' ^ n),	n : ℕ	⊢ function.bijective ⇑(f' ^ (n + 1))
R : Type u_1,	M : Type u_8,	_inst_1 : semiring R,	_inst_5 : add_comm_monoid M,	_inst_10 : module R M,	f' : M →ₗ[R] M,	h : function.bijective ⇑f',	iterate_bijective : ∀ (n : ℕ), function.bijective ⇑(f' ^ n),	n : ℕ	⊢ function.bijective ⇑((f' ^ n).comp f')
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	B : bilin_form R M,	M' : Type u_11,	_inst_16 : add_comm_monoid M',	_inst_17 : module R M',	B' : bilin_form R M',	f : M →ₗ[R] M',	g : M' →ₗ[R] M,	M'' : Type u_14,	_inst_22 : add_comm_monoid M'',	_inst_23 : module R M'',	B'' : bilin_form R M'',	f' : M' →ₗ[R] M'',	g' : M'' →ₗ[R] M',	h : B.is_adjoint_pair B' f g,	h' : B'.is_adjoint_pair B'' f' g',	x : M,	y : M''	⊢ ⇑B'' (⇑(f'.comp f) x) y = ⇑B x (⇑(g.comp g') y)
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	D : bilin_form R M,	B_bilin : M → M → R,	B_bilin_add_left : ∀ (x y z : M), B_bilin (x + y) z = B_bilin x z + B_bilin y z,	B_bilin_smul_left : ∀ (a : R) (x y : M), B_bilin (a • x) y = a * B_bilin x y,	B_bilin_add_right : ∀ (x y z : M), B_bilin x (y + z) = B_bilin x y + B_bilin x z,	B_bilin_smul_right : ∀ (a : R) (x y : M), B_bilin x (a • y) = a * B_bilin x y,	H : ∀ (x y : M), ⇑{bilin := B_bilin, bilin_add_left := B_bilin_add_left, bilin_smul_left := B_bilin_smul_left, bilin_add_right := B_bilin_add_right, bilin_smul_right := B_bilin_smul_right} x y = ⇑D x y	⊢ {bilin := B_bilin, bilin_add_left := B_bilin_add_left, bilin_smul_left := B_bilin_smul_left, bilin_add_right := B_bilin_add_right, bilin_smul_right := B_bilin_smul_right} = D
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	B_bilin : M → M → R,	B_bilin_add_left : ∀ (x y z : M), B_bilin (x + y) z = B_bilin x z + B_bilin y z,	B_bilin_smul_left : ∀ (a : R) (x y : M), B_bilin (a • x) y = a * B_bilin x y,	B_bilin_add_right : ∀ (x y z : M), B_bilin x (y + z) = B_bilin x y + B_bilin x z,	B_bilin_smul_right : ∀ (a : R) (x y : M), B_bilin x (a • y) = a * B_bilin x y,	D_bilin : M → M → R,	D_bilin_add_left : ∀ (x y z : M), D_bilin (x + y) z = D_bilin x z + D_bilin y z,	D_bilin_smul_left : ∀ (a : R) (x y : M), D_bilin (a • x) y = a * D_bilin x y,	D_bilin_add_right : ∀ (x y z : M), D_bilin x (y + z) = D_bilin x y + D_bilin x z,	D_bilin_smul_right : ∀ (a : R) (x y : M), D_bilin x (a • y) = a * D_bilin x y,	H : ∀ (x y : M), ⇑{bilin := B_bilin, bilin_add_left := B_bilin_add_left, bilin_smul_left := B_bilin_smul_left, bilin_add_right := B_bilin_add_right, bilin_smul_right := B_bilin_smul_right} x y = ⇑{bilin := D_bilin, bilin_add_left := D_bilin_add_left, bilin_smul_left := D_bilin_smul_left, bilin_add_right := D_bilin_add_right, bilin_smul_right := D_bilin_smul_right} x y	⊢ {bilin := B_bilin, bilin_add_left := B_bilin_add_left, bilin_smul_left := B_bilin_smul_left, bilin_add_right := B_bilin_add_right, bilin_smul_right := B_bilin_smul_right} = {bilin := D_bilin, bilin_add_left := D_bilin_add_left, bilin_smul_left := D_bilin_smul_left, bilin_add_right := D_bilin_add_right, bilin_smul_right := D_bilin_smul_right}
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	B_bilin : M → M → R,	B_bilin_add_left : ∀ (x y z : M), B_bilin (x + y) z = B_bilin x z + B_bilin y z,	B_bilin_smul_left : ∀ (a : R) (x y : M), B_bilin (a • x) y = a * B_bilin x y,	B_bilin_add_right : ∀ (x y z : M), B_bilin x (y + z) = B_bilin x y + B_bilin x z,	B_bilin_smul_right : ∀ (a : R) (x y : M), B_bilin x (a • y) = a * B_bilin x y,	D_bilin : M → M → R,	D_bilin_add_left : ∀ (x y z : M), D_bilin (x + y) z = D_bilin x z + D_bilin y z,	D_bilin_smul_left : ∀ (a : R) (x y : M), D_bilin (a • x) y = a * D_bilin x y,	D_bilin_add_right : ∀ (x y z : M), D_bilin x (y + z) = D_bilin x y + D_bilin x z,	D_bilin_smul_right : ∀ (a : R) (x y : M), D_bilin x (a • y) = a * D_bilin x y,	H : ∀ (x y : M), ⇑{bilin := B_bilin, bilin_add_left := B_bilin_add_left, bilin_smul_left := B_bilin_smul_left, bilin_add_right := B_bilin_add_right, bilin_smul_right := B_bilin_smul_right} x y = ⇑{bilin := D_bilin, bilin_add_left := D_bilin_add_left, bilin_smul_left := D_bilin_smul_left, bilin_add_right := D_bilin_add_right, bilin_smul_right := D_bilin_smul_right} x y	⊢ B_bilin = D_bilin
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	B_bilin : M → M → R,	B_bilin_add_left : ∀ (x y z : M), B_bilin (x + y) z = B_bilin x z + B_bilin y z,	B_bilin_smul_left : ∀ (a : R) (x y : M), B_bilin (a • x) y = a * B_bilin x y,	B_bilin_add_right : ∀ (x y z : M), B_bilin x (y + z) = B_bilin x y + B_bilin x z,	B_bilin_smul_right : ∀ (a : R) (x y : M), B_bilin x (a • y) = a * B_bilin x y,	D_bilin : M → M → R,	D_bilin_add_left : ∀ (x y z : M), D_bilin (x + y) z = D_bilin x z + D_bilin y z,	D_bilin_smul_left : ∀ (a : R) (x y : M), D_bilin (a • x) y = a * D_bilin x y,	D_bilin_add_right : ∀ (x y z : M), D_bilin x (y + z) = D_bilin x y + D_bilin x z,	D_bilin_smul_right : ∀ (a : R) (x y : M), D_bilin x (a • y) = a * D_bilin x y,	H : ∀ (x y : M), ⇑{bilin := B_bilin, bilin_add_left := B_bilin_add_left, bilin_smul_left := B_bilin_smul_left, bilin_add_right := B_bilin_add_right, bilin_smul_right := B_bilin_smul_right} x y = ⇑{bilin := D_bilin, bilin_add_left := D_bilin_add_left, bilin_smul_left := D_bilin_smul_left, bilin_add_right := D_bilin_add_right, bilin_smul_right := D_bilin_smul_right} x y,	x x_1 : M	⊢ B_bilin x x_1 = D_bilin x x_1
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	B D : bilin_form R M,	H : ∀ (x y : M), ⇑B x y = ⇑D x y	⊢ B = D
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n	⊢ A ∈ pair_self_adjoint_matrices_submodule J J₃ ↔ J.is_adjoint_pair J₃ A A
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n	⊢ (∃ (y : module.End R₃ (n → R₃)), (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) y ∧ ⇑linear_map.to_matrix' y = A) ↔ J.is_adjoint_pair J₃ A A
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n	⊢ (∃ (y : module.End R₃ (n → R₃)), (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) y ∧ ⇑linear_map.to_matrix' y = A) → J.is_adjoint_pair J₃ A A
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n,	f : module.End R₃ (n → R₃),	hf : (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) f,	hA : ⇑linear_map.to_matrix' f = A	⊢ f = ⇑matrix.to_lin' A
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n,	f : module.End R₃ (n → R₃),	hf : (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) f,	hA : ⇑linear_map.to_matrix' f = A	⊢ J.is_adjoint_pair J₃ A A
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n,	f : module.End R₃ (n → R₃),	hf : (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) f,	hA : ⇑linear_map.to_matrix' f = A,	hf' : f = ⇑matrix.to_lin' A	⊢ J.is_adjoint_pair J₃ A A
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n,	f : module.End R₃ (n → R₃),	hA : ⇑linear_map.to_matrix' f = A,	hf' : f = ⇑matrix.to_lin' A,	hf : (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) (⇑matrix.to_lin' A)	⊢ J.is_adjoint_pair J₃ A A
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n	⊢ (∃ (y : module.End R₃ (n → R₃)), (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) y ∧ ⇑linear_map.to_matrix' y = A) → J.is_adjoint_pair J₃ A A		R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n	⊢ J.is_adjoint_pair J₃ A A → (∃ (y : module.End R₃ (n → R₃)), (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) y ∧ ⇑linear_map.to_matrix' y = A)
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n,	f : module.End R₃ (n → R₃),	hA : ⇑linear_map.to_matrix' f = A,	hf' : f = ⇑matrix.to_lin' A,	hf : (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) (⇑matrix.to_lin' A)	⊢ (⇑matrix.to_bilin' J).is_adjoint_pair (⇑matrix.to_bilin' J₃) (⇑matrix.to_lin' A) (⇑matrix.to_lin' A)
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n,	h : J.is_adjoint_pair J₃ A A	⊢ ∃ (y : module.End R₃ (n → R₃)), (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) y ∧ ⇑linear_map.to_matrix' y = A
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n	⊢ J.is_adjoint_pair J₃ A A → (∃ (y : module.End R₃ (n → R₃)), (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) y ∧ ⇑linear_map.to_matrix' y = A)
R₃ : Type u_7,	_inst_10 : comm_ring R₃,	n : Type w,	_inst_16 : fintype n,	J J₃ A : matrix n n R₃,	_inst_17 : decidable_eq n,	h : J.is_adjoint_pair J₃ A A	⊢ (⇑matrix.to_bilin' J).is_pair_self_adjoint (⇑matrix.to_bilin' J₃) (⇑matrix.to_lin' A)
V : Type u_9,	K : Type u_10,	_inst_13 : field K,	_inst_14 : add_comm_group V,	_inst_15 : module K V,	B : bilin_form K V,	b₁ : B.nondegenerate,	b₂ : sym_bilin_form.is_sym B,	x : V,	hx : ¬B.is_ortho x x	⊢ (B.restrict (B.orthogonal (submodule.span K {x}))).nondegenerate
V : Type u_9,	K : Type u_10,	_inst_13 : field K,	_inst_14 : add_comm_group V,	_inst_15 : module K V,	B : bilin_form K V,	b₁ : B.nondegenerate,	b₂ : sym_bilin_form.is_sym B,	x : V,	hx : ¬B.is_ortho x x,	m : ↥(B.orthogonal (submodule.span K {x})),	hm : ∀ (n : ↥(B.orthogonal (submodule.span K {x}))), ⇑(B.restrict (B.orthogonal (submodule.span K {x}))) m n = 0,	n : V	⊢ ⇑B m.val n = 0
V : Type u_9,	K : Type u_10,	_inst_13 : field K,	_inst_14 : add_comm_group V,	_inst_15 : module K V,	B : bilin_form K V,	b₁ : B.nondegenerate,	b₂ : sym_bilin_form.is_sym B,	x : V,	hx : ¬B.is_ortho x x,	m : ↥(B.orthogonal (submodule.span K {x})),	hm : ∀ (n : ↥(B.orthogonal (submodule.span K {x}))), ⇑(B.restrict (B.orthogonal (submodule.span K {x}))) m n = 0,	n : V,	this : n ∈ submodule.span K {x} ⊔ B.orthogonal (submodule.span K {x})	⊢ ⇑B m.val n = 0
V : Type u_9,	K : Type u_10,	_inst_13 : field K,	_inst_14 : add_comm_group V,	_inst_15 : module K V,	B : bilin_form K V,	b₁ : B.nondegenerate,	b₂ : sym_bilin_form.is_sym B,	x : V,	hx : ¬B.is_ortho x x,	m : ↥(B.orthogonal (submodule.span K {x})),	hm : ∀ (n : ↥(B.orthogonal (submodule.span K {x}))), ⇑(B.restrict (B.orthogonal (submodule.span K {x}))) m n = 0,	y : V,	hy : y ∈ submodule.span K {x},	z : V,	hz : z ∈ B.orthogonal (submodule.span K {x}),	this : y + z ∈ submodule.span K {x} ⊔ B.orthogonal (submodule.span K {x})	⊢ ⇑B m.val (y + z) = 0
V : Type u_9,	K : Type u_10,	_inst_13 : field K,	_inst_14 : add_comm_group V,	_inst_15 : module K V,	B : bilin_form K V,	b₁ : B.nondegenerate,	b₂ : sym_bilin_form.is_sym B,	x : V,	hx : ¬B.is_ortho x x,	m : ↥(B.orthogonal (submodule.span K {x})),	y : V,	hy : y ∈ submodule.span K {x},	z : V,	hz : z ∈ B.orthogonal (submodule.span K {x}),	this : y + z ∈ submodule.span K {x} ⊔ B.orthogonal (submodule.span K {x}),	hm : ⇑(B.restrict (B.orthogonal (submodule.span K {x}))) m ⟨z, hz⟩ = 0	⊢ ⇑B m.val (y + z) = 0
V : Type u_9,	K : Type u_10,	_inst_13 : field K,	_inst_14 : add_comm_group V,	_inst_15 : module K V,	B : bilin_form K V,	b₁ : B.nondegenerate,	b₂ : sym_bilin_form.is_sym B,	x : V,	hx : ¬B.is_ortho x x,	m : ↥(B.orthogonal (submodule.span K {x})),	y : V,	hy : y ∈ submodule.span K {x},	z : V,	hz : z ∈ B.orthogonal (submodule.span K {x}),	this : y + z ∈ submodule.span K {x} ⊔ B.orthogonal (submodule.span K {x}),	hm : ⇑{bilin := λ (a b : ↥(B.orthogonal (submodule.span K {x}))), ⇑B ↑a ↑b, bilin_add_left := _, bilin_smul_left := _, bilin_add_right := _, bilin_smul_right := _} m ⟨z, hz⟩ = 0	⊢ ⇑B m.val (y + z) = 0
V : Type u_9,	K : Type u_10,	_inst_13 : field K,	_inst_14 : add_comm_group V,	_inst_15 : module K V,	B : bilin_form K V,	b₁ : B.nondegenerate,	b₂ : sym_bilin_form.is_sym B,	x : V,	hx : ¬B.is_ortho x x,	m : ↥(B.orthogonal (submodule.span K {x})),	y : V,	hy : y ∈ submodule.span K {x},	z : V,	hz : z ∈ B.orthogonal (submodule.span K {x}),	this : y + z ∈ submodule.span K {x} ⊔ B.orthogonal (submodule.span K {x}),	hm : ⇑{bilin := λ (a b : ↥(B.orthogonal (submodule.span K {x}))), ⇑B ↑a ↑b, bilin_add_left := _, bilin_smul_left := _, bilin_add_right := _, bilin_smul_right := _} m ⟨z, hz⟩ = 0	⊢ ⇑B m.val y = 0
V : Type u_9,	K : Type u_10,	_inst_13 : field K,	_inst_14 : add_comm_group V,	_inst_15 : module K V,	B : bilin_form K V,	b₁ : B.nondegenerate,	b₂ : sym_bilin_form.is_sym B,	x : V,	hx : ¬B.is_ortho x x,	m : ↥(B.orthogonal (submodule.span K {x})),	y : V,	hy : y ∈ submodule.span K {x},	z : V,	hz : z ∈ B.orthogonal (submodule.span K {x}),	this : y + z ∈ submodule.span K {x} ⊔ B.orthogonal (submodule.span K {x}),	hm : ⇑{bilin := λ (a b : ↥(B.orthogonal (submodule.span K {x}))), ⇑B ↑a ↑b, bilin_add_left := _, bilin_smul_left := _, bilin_add_right := _, bilin_smul_right := _} m ⟨z, hz⟩ = 0	⊢ ⇑B m.val y = 0
V : Type u_9,	K : Type u_10,	_inst_13 : field K,	_inst_14 : add_comm_group V,	_inst_15 : module K V,	B : bilin_form K V,	b₁ : B.nondegenerate,	b₂ : sym_bilin_form.is_sym B,	x : V,	hx : ¬B.is_ortho x x,	m : ↥(B.orthogonal (submodule.span K {x})),	y : V,	hy : y ∈ submodule.span K {x},	z : V,	hz : z ∈ B.orthogonal (submodule.span K {x}),	this : y + z ∈ submodule.span K {x} ⊔ B.orthogonal (submodule.span K {x}),	hm : ⇑{bilin := λ (a b : ↥(B.orthogonal (submodule.span K {x}))), ⇑B ↑a ↑b, bilin_add_left := _, bilin_smul_left := _, bilin_add_right := _, bilin_smul_right := _} m ⟨z, hz⟩ = 0	⊢ ⇑B y m.val = 0
R₁ : Type u_3,	M₁ : Type u_4,	_inst_4 : ring R₁,	_inst_5 : add_comm_group M₁,	_inst_6 : module R₁ M₁,	B : bilin_form R₁ M₁,	b : B.nondegenerate,	φ ψ : M₁ →ₗ[R₁] M₁,	h : B.comp_left φ = B.comp_left ψ	⊢ φ = ψ
R₁ : Type u_3,	M₁ : Type u_4,	_inst_4 : ring R₁,	_inst_5 : add_comm_group M₁,	_inst_6 : module R₁ M₁,	B : bilin_form R₁ M₁,	b : B.nondegenerate,	φ ψ : M₁ →ₗ[R₁] M₁,	h : B.comp_left φ = B.comp_left ψ,	w : M₁	⊢ ⇑φ w = ⇑ψ w
R₁ : Type u_3,	M₁ : Type u_4,	_inst_4 : ring R₁,	_inst_5 : add_comm_group M₁,	_inst_6 : module R₁ M₁,	B : bilin_form R₁ M₁,	b : B.nondegenerate,	φ ψ : M₁ →ₗ[R₁] M₁,	h : B.comp_left φ = B.comp_left ψ,	w : M₁	⊢ ∀ (n : M₁), ⇑B (⇑φ w - ⇑ψ w) n = 0
R₁ : Type u_3,	M₁ : Type u_4,	_inst_4 : ring R₁,	_inst_5 : add_comm_group M₁,	_inst_6 : module R₁ M₁,	B : bilin_form R₁ M₁,	b : B.nondegenerate,	φ ψ : M₁ →ₗ[R₁] M₁,	h : B.comp_left φ = B.comp_left ψ,	w v : M₁	⊢ ⇑B (⇑φ w - ⇑ψ w) v = 0
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	R₂ : Type u_5,	_inst_7 : comm_semiring R₂,	_inst_16 : algebra R₂ R,	A : bilin_form R M,	x y : M	⊢ ⇑(⇑((bilin_form.flip_hom R₂).trans (bilin_form.flip_hom R₂)) A) x y = ⇑(⇑(linear_equiv.refl R₂ (bilin_form R M)) A) x y
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	R₂ : Type u_5,	_inst_7 : comm_semiring R₂,	_inst_16 : algebra R₂ R	⊢ (bilin_form.flip_hom R₂).trans (bilin_form.flip_hom R₂) = linear_equiv.refl R₂ (bilin_form R M)
R₃ : Type u_7,	M₃ : Type u_8,	_inst_10 : comm_ring R₃,	_inst_11 : add_comm_group M₃,	_inst_12 : module R₃ M₃,	n : Type u_11,	_inst_16 : fintype n,	_inst_18 : decidable_eq n,	b : basis n R₃ M₃,	B : bilin_form R₃ M₃,	M : matrix n n R₃	⊢ ⇑(bilin_form.to_matrix b) B ⬝ M = ⇑(bilin_form.to_matrix b) (B.comp_right (⇑(matrix.to_lin b b) M))
R : Type u_1,	_inst_1 : comm_ring R,	M : Type u_2,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	Q : quadratic_form R M,	involute_prod_map_ι : ∀ (l : list M), ⇑clifford_algebra.involute (list.map ⇑(clifford_algebra.ι Q) l).prod = (-1) ^ l.length • (list.map ⇑(clifford_algebra.ι Q) l).prod	⊢ ⇑clifford_algebra.involute (list.map ⇑(clifford_algebra.ι Q) list.nil).prod = (-1) ^ list.nil.length • (list.map ⇑(clifford_algebra.ι Q) list.nil).prod
R : Type u_1,	_inst_1 : comm_ring R,	M : Type u_2,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	Q : quadratic_form R M,	involute_prod_map_ι : ∀ (l : list M), ⇑clifford_algebra.involute (list.map ⇑(clifford_algebra.ι Q) l).prod = (-1) ^ l.length • (list.map ⇑(clifford_algebra.ι Q) l).prod,	x : M,	xs : list M	⊢ ⇑clifford_algebra.involute (list.map ⇑(clifford_algebra.ι Q) (x :: xs)).prod = (-1) ^ (x :: xs).length • (list.map ⇑(clifford_algebra.ι Q) (x :: xs)).prod
x y : clifford_algebra clifford_algebra_complex.Q	⊢ ⇑clifford_algebra_complex.equiv (x * y) = ⇑clifford_algebra_complex.equiv (y * x)
R : Type u_1,	_inst_1 : comm_ring R,	c₁ c₂ : R,	q : ℍ[R,c₁,c₂]	⊢ ⇑clifford_algebra_quaternion.equiv (⇑clifford_algebra_quaternion.of_quaternion (⇑quaternion_algebra.conj q)) = ⇑clifford_algebra_quaternion.equiv (⇑clifford_algebra.involute (⇑clifford_algebra.reverse (⇑clifford_algebra_quaternion.of_quaternion q)))
R : Type u,	_inst_1 : ring R,	M : Type v,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	M₁ : Type v,	_inst_6 : add_comm_group M₁,	_inst_7 : module R M₁,	f : M →ₗ[R] M₁,	p : submodule R M	⊢ module.rank R ↥(submodule.map f p) ≤ module.rank R ↥p
R : Type u,	_inst_1 : ring R,	M : Type v,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	M₁ : Type v,	_inst_6 : add_comm_group M₁,	_inst_7 : module R M₁,	f : M →ₗ[R] M₁,	h : function.surjective ⇑f	⊢ module.rank R M₁ ≤ module.rank R M
R : Type u,	_inst_1 : ring R,	M : Type v,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	M₁ : Type v,	_inst_6 : add_comm_group M₁,	_inst_7 : module R M₁,	f : M →ₗ[R] M₁,	h : function.surjective ⇑f	⊢ module.rank R ↥(f.range) ≤ module.rank R M
R : Type u_1,	M : Type u_2,	ι : Type u_5,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	_inst_4 : decidable_eq ι,	b : basis ι R M,	_inst_5 : fintype ι,	i j : ι	⊢ j = i = (i = j)
R : Type u_1,	M : Type u_2,	ι : Type u_5,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	_inst_4 : decidable_eq ι,	b : basis ι R M,	_inst_5 : fintype ι,	i j : ι	⊢ ⇑(⇑(b.dual_basis) i) (⇑b j) = ite (j = i) 1 0
R : Type u_1,	_inst_1 : comm_ring R,	M₁ : Type u_2,	M₂ : Type u_3,	_inst_2 : add_comm_group M₁,	_inst_3 : module R M₁,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M₂,	f : M₁ →ₗ[R] M₂	⊢ f.dual_map.range ≤ f.ker.dual_annihilator
R : Type u_1,	_inst_1 : comm_ring R,	M₁ : Type u_2,	M₂ : Type u_3,	_inst_2 : add_comm_group M₁,	_inst_3 : module R M₁,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M₂,	f : M₁ →ₗ[R] M₂,	ψ : module.dual R M₂	⊢ ⇑(f.dual_map) ψ ∈ f.ker.dual_annihilator
R : Type u_1,	_inst_1 : comm_ring R,	M₁ : Type u_2,	M₂ : Type u_3,	_inst_2 : add_comm_group M₁,	_inst_3 : module R M₁,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M₂,	f : M₁ →ₗ[R] M₂,	ψ : module.dual R M₂	⊢ ∀ (w : M₁), ⇑f w = 0 → ⇑(⇑(f.dual_map) ψ) w = 0
R : Type u_1,	_inst_1 : comm_ring R,	M₁ : Type u_2,	M₂ : Type u_3,	_inst_2 : add_comm_group M₁,	_inst_3 : module R M₁,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M₂,	f : M₁ →ₗ[R] M₂,	ψ : module.dual R M₂,	x : M₁,	hx : ⇑f x = 0	⊢ ⇑(⇑(f.dual_map) ψ) x = 0
K : Type v,	V : Type w,	_inst_4 : field K,	_inst_5 : add_comm_group V,	_inst_6 : module K V,	f : module.End K V,	μ : K,	n : ℕ	⊢ linear_map.range (f * (f - ⇑(algebra_map K (module.End K V)) μ) ^ n) = linear_map.range ((f - ⇑(algebra_map K (module.End K V)) μ) ^ n * f)
K : Type u,	V : Type v,	_inst_1 : field K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	s : set V,	fin : fintype ↥s	⊢ finite_dimensional.finrank K ↥(submodule.span K s) ≤ s.to_finset.card
K : Type u,	V : Type v,	_inst_1 : field K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	s : set V,	fin : fintype ↥s,	_inst : finite_dimensional K ↥(submodule.span K s)	⊢ finite_dimensional.finrank K ↥(submodule.span K s) ≤ s.to_finset.card
K : Type u,	V : Type v,	_inst_1 : field K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	s : set V,	fin : fintype ↥s,	_inst : finite_dimensional K ↥(submodule.span K s),	this : module.rank K ↥(submodule.span K s) ≤ # ↥s	⊢ finite_dimensional.finrank K ↥(submodule.span K s) ≤ s.to_finset.card
K : Type u,	V : Type v,	_inst_1 : field K,	_inst_2 : add_comm_group V,	_inst_3 : module K V,	s : set V,	fin : fintype ↥s,	_inst : finite_dimensional K ↥(submodule.span K s),	this : ↑(finite_dimensional.finrank K ↥(submodule.span K s)) ≤ ↑(s.to_finset.card)	⊢ finite_dimensional.finrank K ↥(submodule.span K s) ≤ s.to_finset.card
F : Type u_1,	E : Type u_2,	_inst_6 : field F,	_inst_7 : field E,	_inst_8 : algebra F E	⊢ module.rank F ↥⊤ = module.rank F E
F : Type u_1,	E : Type u_2,	_inst_6 : field F,	_inst_7 : field E,	_inst_8 : algebra F E	⊢ module.rank F ↥⊤ = module.rank F E
α : Type u_1,	M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	ι : Type u_3,	s : ι → set α,	x : α →₀ M	⊢ x ∈ finsupp.supported M R (⋂ (i : ι), s i) ↔ x ∈ ⨅ (i : ι), finsupp.supported M R (s i)
α : Type u_1,	M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	M' : Type u_8,	_inst_9 : add_comm_monoid M',	_inst_10 : module R M',	f : M →ₗ[R] M',	v : α → M,	l : α →₀ R	⊢ ⇑f (⇑(finsupp.total α M R v) l) = ⇑(finsupp.total α M' R (⇑f ∘ v)) l
α : Type u_1,	M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	M' : Type u_8,	_inst_9 : add_comm_monoid M',	_inst_10 : module R M',	f : M →ₗ[R] M',	v : α → M,	l : α →₀ R	⊢ ⇑f (⇑(finsupp.total α M R v) 0) = ⇑(finsupp.total α M' R (⇑f ∘ v)) 0
α : Type u_1,	M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	M' : Type u_8,	_inst_9 : add_comm_monoid M',	_inst_10 : module R M',	f : M →ₗ[R] M',	v : α → M,	l : α →₀ R	⊢ ∀ (f_1 g : α →₀ R), ⇑f (⇑(finsupp.total α M R v) f_1) = ⇑(finsupp.total α M' R (⇑f ∘ v)) f_1 → ⇑f (⇑(finsupp.total α M R v) g) = ⇑(finsupp.total α M' R (⇑f ∘ v)) g → ⇑f (⇑(finsupp.total α M R v) (f_1 + g)) = ⇑(finsupp.total α M' R (⇑f ∘ v)) (f_1 + g)
α : Type u_1,	M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	M' : Type u_8,	_inst_9 : add_comm_monoid M',	_inst_10 : module R M',	f : M →ₗ[R] M',	v : α → M,	l : α →₀ R	⊢ ∀ (a : α) (b : R), ⇑f (⇑(finsupp.total α M R v) (finsupp.single a b)) = ⇑(finsupp.total α M' R (⇑f ∘ v)) (finsupp.single a b)
α : Type u_1,	M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	M' : Type u_8,	_inst_9 : add_comm_monoid M',	_inst_10 : module R M',	f : M →ₗ[R] M',	v : α → M,	l : α →₀ R	⊢ ⇑f (⇑(finsupp.total α M R v) l) = ⇑(finsupp.total α M' R (⇑f ∘ v)) l
M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R	⊢ ⇑(finsupp.total α M R A) (⇑(finsupp.total β (α →₀ R) R B) f) = ⇑(finsupp.total β M R (λ (b : β), ⇑(finsupp.total α M R A) (B b))) f
M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R	⊢ (f.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = f.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))
M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R	⊢ (0.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = 0.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))		M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R	⊢ ∀ (f g : β →₀ R), (f.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = f.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i)) → (g.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = g.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i)) → ((f + g).sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = (f + g).sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))		M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R	⊢ ∀ (a : β) (b : R), ((finsupp.single a b).sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = (finsupp.single a b).sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))
M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R	⊢ (0.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = 0.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))
M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R	⊢ ∀ (f g : β →₀ R), (f.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = f.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i)) → (g.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = g.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i)) → ((f + g).sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = (f + g).sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))
M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R	⊢ ∀ (f g : β →₀ R), (f.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = f.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i)) → (g.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = g.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i)) → ((f + g).sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = (f + g).sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))		M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R	⊢ ∀ (a : β) (b : R), ((finsupp.single a b).sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = (finsupp.single a b).sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))
M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R,	f₁ f₂ : β →₀ R,	h₁ : (f₁.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = f₁.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i)),	h₂ : (f₂.sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = f₂.sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))	⊢ ((f₁ + f₂).sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = (f₁ + f₂).sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))
M : Type u_2,	R : Type u_5,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	α : Type u_1,	β : Type u_3,	A : α → M,	B : β → α →₀ R,	f : β →₀ R	⊢ ∀ (a : β) (b : R), ((finsupp.single a b).sum (λ (i : β) (a : R), a • B i)).sum (λ (i : α) (a : R), a • A i) = (finsupp.single a b).sum (λ (i : β) (a : R), a • (B i).sum (λ (i : α) (a : R), a • A i))
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	m : M,	hm : m ∈ ⨆ (i : ι), p i	⊢ ∃ (s : finset ι), m ∈ ⨆ (i : ι) (H : i ∈ s), p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	m : M,	hm : m ∈ ⨆ (i : ι), p i	⊢ ∃ (f : M →₀ R) (H : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i))), ⇑(finsupp.total M M R id) f = m
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	m : M,	hm : m ∈ ⨆ (i : ι), p i,	aux : (id '' ⋃ (i : ι), ↑(p i)) = ⋃ (i : ι), ↑(p i)	⊢ ∃ (f : M →₀ R) (H : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i))), ⇑(finsupp.total M M R id) f = m
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	m : M,	hm : m ∈ ⨆ (i : ι), p i	⊢ ∃ (f : M →₀ R) (H : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i))), ⇑(finsupp.total M M R id) f = m		R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i	⊢ ∃ (s : finset ι), ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι) (H : i ∈ s), p i		R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	m : M,	hm : m ∈ ⨆ (i : ι), p i,	f : M →₀ R	⊢ Type ?		R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	m : M,	hm : m ∈ ⨆ (i : ι), p i,	f : M →₀ R	⊢ has_mem (M →₀ R) (submodule R (?m_1 →₀ R))		R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	m : M,	hm : m ∈ ⨆ (i : ι), p i,	f : M →₀ R,	i : ι	⊢ has_lift_t (submodule R M) (set ?m_1)
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i	⊢ ∃ (s : finset ι), ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι) (H : i ∈ s), p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support	⊢ ∃ (s : finset ι), ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι) (H : i ∈ s), p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support	⊢ ∀ (x : {x // x ∈ t}), ∃ (i : ι), ↑x ∈ p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	x : {x // x ∈ t}	⊢ ∃ (i : ι), ↑x ∈ p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	x : {x // x ∈ t},	hf : ↑(f.support) ⊆ ⋃ (i : ι), ↑(p i)	⊢ ∃ (i : ι), ↑x ∈ p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support	⊢ ∀ (x : {x // x ∈ t}), ∃ (i : ι), ↑x ∈ p i		R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	ht : ∀ (x : {x // x ∈ t}), ∃ (i : ι), ↑x ∈ p i	⊢ ∃ (s : finset ι), ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι) (H : i ∈ s), p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	x : {x // x ∈ t},	hf : x.val ∈ ⋃ (i : ι), ↑(p i)	⊢ ∃ (i : ι), ↑x ∈ p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	ht : ∀ (x : {x // x ∈ t}), ∃ (i : ι), ↑x ∈ p i	⊢ ∃ (s : finset ι), ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι) (H : i ∈ s), p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x)	⊢ ∃ (s : finset ι), ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι) (H : i ∈ s), p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ	⊢ ∃ (s : finset ι), ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι) (H : i ∈ s), p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ	⊢ ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι) (H : i ∈ s), p i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ	⊢ ∀ (N : submodule R M), (∀ (i : ι), i ∈ s → p i ≤ N) → ⇑(finsupp.total M M R id) f ∈ N
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N	⊢ ⇑(finsupp.total M M R id) f ∈ N
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N	⊢ ∑ (a : M) in f.support, ⇑f a • id a ∈ ↑N
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N	⊢ ∀ (c : M), c ∈ f.support → ⇑f c • id c ∈ N
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N,	x : M,	hx : x ∈ f.support	⊢ ⇑f x • id x ∈ N
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N,	x : M,	hx : x ∈ f.support	⊢ id x ∈ N
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N,	x : M,	hx : x ∈ f.support,	i : ι := g ⟨x, hx⟩	⊢ i ∈ s
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N,	x : M,	hx : x ∈ f.support,	i : ι := g ⟨x, hx⟩	⊢ id x ∈ N
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N,	x : M,	hx : x ∈ f.support,	i : ι := g ⟨x, hx⟩	⊢ ∃ (a : {x // x ∈ t}) (H : a ∈ finset.univ), g a = i
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N,	x : M,	hx : x ∈ f.support,	i : ι := g ⟨x, hx⟩	⊢ i ∈ s		R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N,	x : M,	hx : x ∈ f.support,	i : ι := g ⟨x, hx⟩,	hi : i ∈ s	⊢ id x ∈ N
R : Type u_1,	M : Type u_2,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_3 : module R M,	ι : Type u_3,	p : ι → submodule R M,	f : M →₀ R,	hf : f ∈ finsupp.supported R R (⋃ (i : ι), ↑(p i)),	hm : ⇑(finsupp.total M M R id) f ∈ ⨆ (i : ι), p i,	t : finset M := f.support,	g : {x // x ∈ t} → ι,	hg : ∀ (x : {x // x ∈ t}), ↑x ∈ p (g x),	s : finset ι := finset.image g finset.univ,	N : submodule R M,	hN : ∀ (i : ι), i ∈ s → p i ≤ N,	x : M,	hx : x ∈ f.support,	i : ι := g ⟨x, hx⟩,	hi : i ∈ s	⊢ id x ∈ N
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type u_4,	b : Π (i : ι), basis (φ i) R M,	_x : Σ (i : ι), φ i,	_fun_match : ∀ (_a : Σ (i : ι), φ i), ⇑(finsupp.basis b) _a = finsupp.single _a.fst (⇑(b _a.fst) _a.snd),	i : ι,	x : φ i	⊢ ⇑((finsupp.basis b).repr) (finsupp.single ⟨i, x⟩.fst (⇑(b ⟨i, x⟩.fst) ⟨i, x⟩.snd)) = finsupp.single ⟨i, x⟩ 1
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type u_4,	b : Π (i : ι), basis (φ i) R M,	_x : Σ (i : ι), φ i,	_fun_match : ∀ (_a : Σ (i : ι), φ i), ⇑(finsupp.basis b) _a = finsupp.single _a.fst (⇑(b _a.fst) _a.snd),	i : ι,	x : φ i,	j : ι,	y : φ j	⊢ ⇑(⇑((finsupp.basis b).repr) (finsupp.single ⟨i, x⟩.fst (⇑(b ⟨i, x⟩.fst) ⟨i, x⟩.snd))) ⟨j, y⟩ = ⇑(finsupp.single ⟨i, x⟩ 1) ⟨j, y⟩
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type u_4,	b : Π (i : ι), basis (φ i) R M,	_x : Σ (i : ι), φ i,	_fun_match : ∀ (_a : Σ (i : ι), φ i), ⇑(finsupp.basis b) _a = finsupp.single _a.fst (⇑(b _a.fst) _a.snd),	i : ι,	x : φ i,	j : ι,	y : φ j,	h : i = j	⊢ ⇑(⇑((finsupp.basis b).repr) (finsupp.single ⟨i, x⟩.fst (⇑(b ⟨i, x⟩.fst) ⟨i, x⟩.snd))) ⟨j, y⟩ = ⇑(finsupp.single ⟨i, x⟩ 1) ⟨j, y⟩
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type u_4,	b : Π (i : ι), basis (φ i) R M,	_x : Σ (i : ι), φ i,	_fun_match : ∀ (_a : Σ (i : ι), φ i), ⇑(finsupp.basis b) _a = finsupp.single _a.fst (⇑(b _a.fst) _a.snd),	i : ι,	x y : φ i,	h : i = i	⊢ ⇑(⇑((finsupp.basis b).repr) (finsupp.single ⟨i, x⟩.fst (⇑(b ⟨i, x⟩.fst) ⟨i, x⟩.snd))) ⟨i, y⟩ = ⇑(finsupp.single ⟨i, x⟩ 1) ⟨i, y⟩
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type u_4,	b : Π (i : ι), basis (φ i) R M,	_x : Σ (i : ι), φ i,	_fun_match : ∀ (_a : Σ (i : ι), φ i), ⇑(finsupp.basis b) _a = finsupp.single _a.fst (⇑(b _a.fst) _a.snd),	i : ι,	x : φ i,	j : ι,	y : φ j,	h : i = j	⊢ ⇑(⇑((finsupp.basis b).repr) (finsupp.single ⟨i, x⟩.fst (⇑(b ⟨i, x⟩.fst) ⟨i, x⟩.snd))) ⟨j, y⟩ = ⇑(finsupp.single ⟨i, x⟩ 1) ⟨j, y⟩		R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type u_4,	b : Π (i : ι), basis (φ i) R M,	_x : Σ (i : ι), φ i,	_fun_match : ∀ (_a : Σ (i : ι), φ i), ⇑(finsupp.basis b) _a = finsupp.single _a.fst (⇑(b _a.fst) _a.snd),	i : ι,	x : φ i,	j : ι,	y : φ j,	h : ¬i = j	⊢ ⇑(⇑((finsupp.basis b).repr) (finsupp.single ⟨i, x⟩.fst (⇑(b ⟨i, x⟩.fst) ⟨i, x⟩.snd))) ⟨j, y⟩ = ⇑(finsupp.single ⟨i, x⟩ 1) ⟨j, y⟩
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type u_4,	b : Π (i : ι), basis (φ i) R M,	_x : Σ (i : ι), φ i,	_fun_match : ∀ (_a : Σ (i : ι), φ i), ⇑(finsupp.basis b) _a = finsupp.single _a.fst (⇑(b _a.fst) _a.snd),	i : ι,	x : φ i,	j : ι,	y : φ j,	h : ¬i = j	⊢ ⇑(⇑((finsupp.basis b).repr) (finsupp.single ⟨i, x⟩.fst (⇑(b ⟨i, x⟩.fst) ⟨i, x⟩.snd))) ⟨j, y⟩ = ⇑(finsupp.single ⟨i, x⟩ 1) ⟨j, y⟩
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : ι →₀ M,	ix : Σ (i : ι), φ i	⊢ ix ∈ g.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑g i)).support) ↔ ⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd ≠ 0
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : ι →₀ M,	ix : Σ (i : ι), φ i	⊢ ¬⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd = 0 → ¬⇑g ix.fst = 0
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : ι →₀ M,	ix : Σ (i : ι), φ i,	b : ¬⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd = 0,	hg : ⇑g ix.fst = 0	⊢ false
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : (Σ (i : ι), φ i) →₀ R,	i : ι	⊢ i ∈ finset.image sigma.fst g.support ↔ ⇑((b i).repr.symm) (finsupp.comap_domain (sigma.mk i) g _) ≠ 0
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : (Σ (i : ι), φ i) →₀ R,	i : ι	⊢ i ∈ finset.image sigma.fst g.support ↔ ¬∀ (a : φ i), ⇑(finsupp.comap_domain (sigma.mk i) g _) a = ⇑(⇑((b i).repr) 0) a
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : ι →₀ M	⊢ (λ (g : (Σ (i : ι), φ i) →₀ R), {support := finset.image sigma.fst g.support, to_fun := λ (i : ι), ⇑((b i).repr.symm) (finsupp.comap_domain (sigma.mk i) g _), mem_support_to_fun := _}) ((λ (g : ι →₀ M), {support := g.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑g i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd, mem_support_to_fun := _}) g) = g
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : ι →₀ M,	i : ι	⊢ ⇑((λ (g : (Σ (i : ι), φ i) →₀ R), {support := finset.image sigma.fst g.support, to_fun := λ (i : ι), ⇑((b i).repr.symm) (finsupp.comap_domain (sigma.mk i) g _), mem_support_to_fun := _}) ((λ (g : ι →₀ M), {support := g.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑g i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd, mem_support_to_fun := _}) g)) i = ⇑g i
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : ι →₀ M,	i : ι	⊢ ⇑((b i).repr) (⇑((λ (g : (Σ (i : ι), φ i) →₀ R), {support := finset.image sigma.fst g.support, to_fun := λ (i : ι), ⇑((b i).repr.symm) (finsupp.comap_domain (sigma.mk i) g _), mem_support_to_fun := _}) ((λ (g : ι →₀ M), {support := g.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑g i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd, mem_support_to_fun := _}) g)) i) = ⇑((b i).repr) (⇑g i)
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : ι →₀ M,	i : ι,	x : φ i	⊢ ⇑(⇑((b i).repr) (⇑((λ (g : (Σ (i : ι), φ i) →₀ R), {support := finset.image sigma.fst g.support, to_fun := λ (i : ι), ⇑((b i).repr.symm) (finsupp.comap_domain (sigma.mk i) g _), mem_support_to_fun := _}) ((λ (g : ι →₀ M), {support := g.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑g i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd, mem_support_to_fun := _}) g)) i)) x = ⇑(⇑((b i).repr) (⇑g i)) x
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : (Σ (i : ι), φ i) →₀ R	⊢ (λ (g : ι →₀ M), {support := g.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑g i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd, mem_support_to_fun := _}) ((λ (g : (Σ (i : ι), φ i) →₀ R), {support := finset.image sigma.fst g.support, to_fun := λ (i : ι), ⇑((b i).repr.symm) (finsupp.comap_domain (sigma.mk i) g _), mem_support_to_fun := _}) g) = g
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g : (Σ (i : ι), φ i) →₀ R,	i : ι,	x : φ i	⊢ ⇑((λ (g : ι →₀ M), {support := g.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑g i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd, mem_support_to_fun := _}) ((λ (g : (Σ (i : ι), φ i) →₀ R), {support := finset.image sigma.fst g.support, to_fun := λ (i : ι), ⇑((b i).repr.symm) (finsupp.comap_domain (sigma.mk i) g _), mem_support_to_fun := _}) g)) ⟨i, x⟩ = ⇑g ⟨i, x⟩
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g h : ι →₀ M	⊢ {support := (g + h).support.sigma (λ (i : ι), (⇑((b i).repr) (⇑(g + h) i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑(g + h) ix.fst)) ix.snd, mem_support_to_fun := _} = {support := g.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑g i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd, mem_support_to_fun := _} + {support := h.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑h i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑h ix.fst)) ix.snd, mem_support_to_fun := _}
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	g h : ι →₀ M,	i : ι,	x : φ i	⊢ ⇑{support := (g + h).support.sigma (λ (i : ι), (⇑((b i).repr) (⇑(g + h) i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑(g + h) ix.fst)) ix.snd, mem_support_to_fun := _} ⟨i, x⟩ = ⇑({support := g.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑g i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑g ix.fst)) ix.snd, mem_support_to_fun := _} + {support := h.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑h i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑h ix.fst)) ix.snd, mem_support_to_fun := _}) ⟨i, x⟩
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	c : R,	h : ι →₀ M	⊢ {support := (c • h).support.sigma (λ (i : ι), (⇑((b i).repr) (⇑(c • h) i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑(c • h) ix.fst)) ix.snd, mem_support_to_fun := _} = ⇑(ring_hom.id R) c • {support := h.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑h i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑h ix.fst)) ix.snd, mem_support_to_fun := _}
R : Type u_1,	M : Type u_2,	ι : Type u_3,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	φ : ι → Type ?,	b : Π (i : ι), basis (φ i) R M,	c : R,	h : ι →₀ M,	i : ι,	x : φ i	⊢ ⇑{support := (c • h).support.sigma (λ (i : ι), (⇑((b i).repr) (⇑(c • h) i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑(c • h) ix.fst)) ix.snd, mem_support_to_fun := _} ⟨i, x⟩ = ⇑(⇑(ring_hom.id R) c • {support := h.support.sigma (λ (i : ι), (⇑((b i).repr) (⇑h i)).support), to_fun := λ (ix : Σ (i : ι), φ i), ⇑(⇑((b ix.fst).repr) (⇑h ix.fst)) ix.snd, mem_support_to_fun := _}) ⟨i, x⟩
R : Type u,	M : Type v,	N : Type z,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	_inst_4 : module.free R M,	_inst_5 : add_comm_group N,	_inst_6 : module R N,	_inst_7 : module.free R N,	_inst_8 : nontrivial R,	_inst_9 : module.finite R M,	_inst_10 : module.finite R N	⊢ module.free R (M →ₗ[R] N)
R : Type u,	M : Type v,	N : Type z,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	_inst_4 : module.free R M,	_inst_5 : add_comm_group N,	_inst_6 : module R N,	_inst_7 : module.free R N,	_inst_8 : nontrivial R,	_inst_9 : module.finite R M,	_inst_10 : module.finite R N,	_inst : Π (a : Prop), decidable a	⊢ module.free R (M →ₗ[R] N)
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	N : submodule R M,	ϕ : M →ₗ[R] R,	_inst_4 : (submodule.map ϕ N).is_principal,	x : M,	hx : x ∈ N	⊢ ∃ (y : M), y ∈ N ∧ ⇑ϕ y = ⇑ϕ x
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	N : submodule R M,	ϕ : M →ₗ[R] R,	_inst_4 : (submodule.map ϕ N).is_principal,	x : M,	hx : x ∈ N	⊢ submodule.is_principal.generator (submodule.map ϕ N) ∣ ⇑ϕ x
R : Type u_2,	_inst_1 : integral_domain R,	M : Type u_3,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	x : M,	N : submodule R M,	ortho : ∀ (c : R) (y : M), y ∈ N → c • x + y = 0 → c = 0,	hx : x ∈ N	⊢ false
R : Type u_2,	_inst_1 : integral_domain R,	M : Type u_3,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	x : M,	N : submodule R M,	ortho : ∀ (c : R) (y : M), y ∈ N → c • x + y = 0 → c = 0	⊢ x ∉ N
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∣ ⇑ψ ⟨y, _⟩
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N)	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∣ ⇑ψ ⟨y, _⟩
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩})	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∣ ⇑ψ ⟨y, _⟩
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∣ ⇑ψ ⟨y, _⟩
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∣ ⇑ψ ⟨y, _⟩
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∣ d
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.span R {submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩})} = submodule.span R {submodule.is_principal.generator (ϕ.submodule_image N)}		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ (submodule.span R {a, ⇑ψ ⟨y, _⟩}).is_principal		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ ∃ (r₁ r₂ : R), d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂' : R,	hr₂' : r₂' ∈ submodule.span R {⇑ψ ⟨y, _⟩},	hr₁ : submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}) = r₁ • a + r₂'	⊢ ∃ (r₁ r₂ : R), d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ ∃ (r₁ r₂ : R), d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩	⊢ submodule.span R {submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩})} = submodule.span R {submodule.is_principal.generator (ϕ.submodule_image N)}		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ (submodule.span R {a, ⇑ψ ⟨y, _⟩}).is_principal		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	hr₂' : r₂ • ⇑ψ ⟨y, _⟩ ∈ submodule.span R {⇑ψ ⟨y, _⟩},	hr₁ : submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}) = r₁ • a + r₂ • ⇑ψ ⟨y, _⟩	⊢ ∃ (r₁ r₂ : R), d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩	⊢ submodule.span R {submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩})} = submodule.span R {submodule.is_principal.generator (ϕ.submodule_image N)}		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ (submodule.span R {a, ⇑ψ ⟨y, _⟩}).is_principal		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ	⊢ submodule.span R {submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩})} = submodule.span R {submodule.is_principal.generator (ϕ.submodule_image N)}		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ (submodule.span R {a, ⇑ψ ⟨y, _⟩}).is_principal		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ	⊢ submodule.span R {d} ≤ ψ'.submodule_image N
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ	⊢ ∃ (y : M) (yN : y ∈ N), ⇑ψ' ⟨y, _⟩ = d
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ	⊢ ⇑ψ' ⟨y, _⟩ = d
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ	⊢ submodule.span R {d} ≤ ψ'.submodule_image N		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ,	this : submodule.span R {d} ≤ ψ'.submodule_image N	⊢ submodule.span R {submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩})} = submodule.span R {submodule.is_principal.generator (ϕ.submodule_image N)}		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ (submodule.span R {a, ⇑ψ ⟨y, _⟩}).is_principal		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ	⊢ r₁ * ⇑ϕ ⟨y, _⟩ + r₂ * ⇑ψ ⟨y, _⟩ = d
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ,	this : submodule.span R {d} ≤ ψ'.submodule_image N	⊢ submodule.span R {submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩})} = submodule.span R {submodule.is_principal.generator (ϕ.submodule_image N)}		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ (submodule.span R {a, ⇑ψ ⟨y, _⟩}).is_principal		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ,	this : submodule.span R {d} ≤ ψ'.submodule_image N	⊢ ψ'.submodule_image N = submodule.span R {submodule.is_principal.generator (ϕ.submodule_image N)}		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ,	this : submodule.span R {d} ≤ ψ'.submodule_image N	⊢ ψ'.submodule_image N = ϕ.submodule_image N		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ,	this : submodule.span R {d} ≤ ψ'.submodule_image N	⊢ ϕ.submodule_image N ≤ submodule.span R {d}		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩,	r₁ r₂ : R,	d_eq : d = r₁ * a + r₂ * ⇑ψ ⟨y, _⟩,	ψ' : ↥O →ₗ[R] R := r₁ • ϕ + r₂ • ψ,	this : submodule.span R {d} ≤ ψ'.submodule_image N	⊢ submodule.span R {submodule.is_principal.generator (ϕ.submodule_image N)} ≤ submodule.span R {d}		R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : is_principal_ideal_ring R,	M : Type u_3,	_inst_3 : add_comm_group M,	_inst_4 : module R M,	N O : submodule R M,	hNO : N ≤ O,	ϕ : ↥O →ₗ[R] R,	hϕ : ∀ (ψ : ↥O →ₗ[R] R), ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N,	_inst_5 : (ϕ.submodule_image N).is_principal,	y : M,	yN : y ∈ N,	ϕy_eq : ⇑ϕ ⟨y, _⟩ = submodule.is_principal.generator (ϕ.submodule_image N),	ψ : ↥O →ₗ[R] R,	a : R := submodule.is_principal.generator (ϕ.submodule_image N),	d : R := submodule.is_principal.generator (submodule.span R {a, ⇑ψ ⟨y, _⟩}),	d_dvd_left : d ∣ a,	d_dvd_right : d ∣ ⇑ψ ⟨y, _⟩	⊢ submodule.is_principal.generator (ϕ.submodule_image N) ∈ submodule.span R {a, ⇑ψ ⟨y, _⟩}
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	ι : Type u_1,	_inst_4 : no_zero_divisors R,	b : basis ι R M,	N : submodule R M,	rank_eq : ∀ {m : ℕ} (v : fin m → ↥N), linear_independent R (coe ∘ v) → m = 0	⊢ N = ⊥
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	ι : Type u_1,	_inst_4 : no_zero_divisors R,	b : basis ι R M,	N : submodule R M,	rank_eq : ∀ {m : ℕ} (v : fin m → ↥N), linear_independent R (coe ∘ v) → m = 0	⊢ ∀ (x : M), x ∈ N → x = 0
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	ι : Type u_1,	_inst_4 : no_zero_divisors R,	b : basis ι R M,	N : submodule R M,	rank_eq : ∀ {m : ℕ} (v : fin m → ↥N), linear_independent R (coe ∘ v) → m = 0,	x : M,	hx : x ∈ N	⊢ x = 0
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	ι : Type u_1,	_inst_4 : no_zero_divisors R,	b : basis ι R M,	N : submodule R M,	x : M,	hx : x ∈ N,	x_ne : x ≠ 0	⊢ ∃ {m : ℕ} (v : fin m → ↥N), linear_independent R (coe ∘ v) ∧ m ≠ 0
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	ι : Type u_1,	_inst_4 : no_zero_divisors R,	b : basis ι R M,	N : submodule R M,	x : M,	hx : x ∈ N,	x_ne : x ≠ 0	⊢ linear_independent R (coe ∘ λ (_x : fin 1), ⟨x, hx⟩)
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	ι : Type u_1,	_inst_4 : no_zero_divisors R,	b : basis ι R M,	N : submodule R M,	x : M,	hx : x ∈ N,	x_ne : x ≠ 0	⊢ ∀ (g : fin 1 → R), ∑ (i : fin 1), g i • (coe ∘ λ (_x : fin 1), ⟨x, hx⟩) i = 0 → ∀ (i : fin 1), g i = 0
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	ι : Type u_1,	_inst_4 : no_zero_divisors R,	b : basis ι R M,	N : submodule R M,	x : M,	hx : x ∈ N,	x_ne : x ≠ 0,	g : fin 1 → R,	sum_eq : ∑ (i : fin 1), g i • (coe ∘ λ (_x : fin 1), ⟨x, hx⟩) i = 0,	i : fin 1	⊢ g i = 0
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	ι : Type u_1,	_inst_4 : no_zero_divisors R,	b : basis ι R M,	N : submodule R M,	x : M,	hx : x ∈ N,	x_ne : x ≠ 0,	g : fin 1 → R,	sum_eq : ∑ (i : fin 1), g i • (coe ∘ λ (_x : fin 1), ⟨x, hx⟩) i = 0	⊢ g 0 = 0
R : Type u,	M : Type v,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	ι : Type u_1,	_inst_4 : no_zero_divisors R,	b : basis ι R M,	N : submodule R M,	x : M,	hx : x ∈ N,	x_ne : x ≠ 0,	g : fin 1 → R,	sum_eq : g 0 • x = 0	⊢ g 0 = 0
R : Type u,	_inst_1 : ring R,	_inst_2 : rank_condition R,	α : Type u_1,	β : Type u_2,	_inst_3 : fintype α,	_inst_4 : fintype β,	f : (α → R) →ₗ[R] β → R,	i : function.surjective ⇑f	⊢ fintype.card β ≤ fintype.card α
R : Type u,	_inst_1 : ring R,	_inst_2 : rank_condition R,	α : Type u_1,	β : Type u_2,	_inst_3 : fintype α,	_inst_4 : fintype β,	f : (α → R) →ₗ[R] β → R,	i : function.surjective ⇑f,	P : (fin (fintype.card α) → R) ≃ₗ[R] α → R := linear_equiv.fun_congr_left R R (fintype.equiv_fin α)	⊢ fintype.card β ≤ fintype.card α
R : Type u,	_inst_1 : ring R,	_inst_2 : rank_condition R,	α : Type u_1,	β : Type u_2,	_inst_3 : fintype α,	_inst_4 : fintype β,	f : (α → R) →ₗ[R] β → R,	i : function.surjective ⇑f,	P : (fin (fintype.card α) → R) ≃ₗ[R] α → R := linear_equiv.fun_congr_left R R (fintype.equiv_fin α),	Q : (fin (fintype.card β) → R) ≃ₗ[R] β → R := linear_equiv.fun_congr_left R R (fintype.equiv_fin β)	⊢ fintype.card β ≤ fintype.card α
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ (I.pi ι).quotient ≃ₗ[I.quotient] (I.pi ι').quotient
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ ∀ (x y : (I.pi ι).quotient), induced_map I ↑e (x + y) = induced_map I ↑e x + induced_map I ↑e y
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ ∀ (r : I.quotient) (x : (I.pi ι).quotient), induced_map I ↑e (r • x) = ⇑(ring_hom.id I.quotient) r • induced_map I ↑e x
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ function.left_inverse (induced_map I ↑(e.symm)) (induced_map I ↑e)
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ function.right_inverse (induced_map I ↑(e.symm)) (induced_map I ↑e)
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ function.left_inverse (induced_map I ↑(e.symm)) (induced_map I ↑e)
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ function.right_inverse (induced_map I ↑(e.symm)) (induced_map I ↑e)
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ ∀ (x y : (I.pi ι).quotient), induced_map I ↑e (x + y) = induced_map I ↑e x + induced_map I ↑e y		R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ ∀ (r : I.quotient) (x : (I.pi ι).quotient), induced_map I ↑e (r • x) = ⇑(ring_hom.id I.quotient) r • induced_map I ↑e x		R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ function.left_inverse (induced_map I ↑(e.symm)) (induced_map I ↑e)		R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R	⊢ function.right_inverse (induced_map I ↑(e.symm)) (induced_map I ↑e)
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a b : ι → R	⊢ induced_map I ↑e (quot.mk setoid.r a + quot.mk setoid.r b) = induced_map I ↑e (quot.mk setoid.r a) + induced_map I ↑e (quot.mk setoid.r b)
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a : R,	b : ι → R	⊢ induced_map I ↑e (quot.mk setoid.r a • quot.mk setoid.r b) = ⇑(ring_hom.id I.quotient) (quot.mk setoid.r a) • induced_map I ↑e (quot.mk setoid.r b)
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a : ι → R	⊢ induced_map I ↑(e.symm) (induced_map I ↑e (quot.mk setoid.r a)) = quot.mk setoid.r a
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a : ι' → R	⊢ induced_map I ↑e (induced_map I ↑(e.symm) (quot.mk setoid.r a)) = quot.mk setoid.r a
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a b : ι → R	⊢ ⇑↑e (a + b) = ⇑↑e a + ⇑↑e b
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a : R,	b : ι → R	⊢ ⇑↑e (a • b) = a • ⇑↑e b
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a : ι → R	⊢ ⇑↑(e.symm) (⇑↑e a) = a
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a : ι' → R	⊢ ⇑↑e (⇑↑(e.symm) a) = a
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a b : ι → R	⊢ ⇑(ideal.quotient.mk (I.pi ι')) (⇑↑e (a + b)) = ⇑(ideal.quotient.mk (I.pi ι')) (⇑↑e a + ⇑↑e b)
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a : R,	b : ι → R	⊢ ⇑(ideal.quotient.mk (I.pi ι')) (⇑↑e (a • b)) = ⇑(ideal.quotient.mk (I.pi ι')) (a • ⇑↑e b)
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a : ι → R	⊢ ⇑(ideal.quotient.mk (I.pi ι)) (⇑↑(e.symm) (⇑↑e a)) = ⇑(ideal.quotient.mk (I.pi ι)) a
R : Type u,	_inst_1 : comm_ring R,	ι : Type v,	_inst_2 : fintype ι,	ι' : Type w,	_inst_3 : fintype ι',	I : ideal R,	e : (ι → R) ≃ₗ[R] ι' → R,	a : ι' → R	⊢ ⇑(ideal.quotient.mk (I.pi ι')) (⇑↑e (⇑↑(e.symm) a)) = ⇑(ideal.quotient.mk (I.pi ι')) a
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	p p' : submodule R M	⊢ function.injective ⇑(linear_map.quotient_inf_to_sup_quotient p p')
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	p p' : submodule R M	⊢ ((submodule.comap (p ⊔ p').subtype p').mkq.comp (submodule.of_le _)).ker ≤ submodule.comap p.subtype (p ⊓ p')
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	p p' : submodule R M	⊢ submodule.comap (submodule.of_le _) (submodule.comap (p ⊔ p').subtype p') ≤ submodule.comap p.subtype (p ⊓ p')
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	p p' : submodule R M	⊢ function.surjective ⇑(linear_map.quotient_inf_to_sup_quotient p p')
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	p p' : submodule R M,	x : M,	hx : x ∈ p ⊔ p'	⊢ quot.mk setoid.r ⟨x, hx⟩ ∈ ((submodule.comap (p ⊔ p').subtype p').mkq.comp (submodule.of_le _)).range
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	p p' : submodule R M	⊢ ∀ (x : (submodule.comap (p ⊔ p').subtype p').quotient), x ∈ ((submodule.comap (p ⊔ p').subtype p').mkq.comp (submodule.of_le _)).range
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	p p' : submodule R M,	y : M,	hy : y ∈ p,	z : M,	hz : z ∈ p',	hx : y + z ∈ p ⊔ p'	⊢ ⇑((submodule.comap (p ⊔ p').subtype p').mkq.comp (submodule.of_le _)) ⟨y, hy⟩ = quot.mk setoid.r ⟨y + z, hx⟩
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	p p' : submodule R M,	y : M,	hy : y ∈ p,	z : M,	hz : z ∈ p',	hx : y + z ∈ p ⊔ p'	⊢ quot.mk setoid.r ⟨y + z, hx⟩ ∈ ((submodule.comap (p ⊔ p').subtype p').mkq.comp (submodule.of_le _)).range
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	p p' : submodule R M,	y : M,	hy : y ∈ p,	z : M,	hz : z ∈ p',	hx : y + z ∈ p ⊔ p'	⊢ ⇑(submodule.of_le _) ⟨y, hy⟩ - ⟨y + z, hx⟩ ∈ submodule.comap (p ⊔ p').subtype p'
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	p p' : submodule R M,	y : M,	hy : y ∈ p,	z : M,	hz : z ∈ p',	hx : y + z ∈ p ⊔ p'	⊢ y - (y + z) ∈ p'
F : Type u,	_inst_1 : decidable_eq F,	_inst_2 : field F,	s : finset F,	x : F	⊢ polynomial.eval x (lagrange.basis s x) = 1
F : Type u,	_inst_1 : decidable_eq F,	_inst_2 : field F,	s : finset F,	x y : F,	hy : y ∈ s.erase x	⊢ polynomial.eval x (⇑polynomial.C (x - y)⁻¹ * (polynomial.X - ⇑polynomial.C y)) = 1
F : Type u,	_inst_1 : decidable_eq F,	_inst_2 : field F,	s : finset F,	x : F	⊢ ∀ (x_1 : F), x_1 ∈ s.erase x → polynomial.eval x (⇑polynomial.C (x - x_1)⁻¹ * (polynomial.X - ⇑polynomial.C x_1)) = 1
F : Type u,	_inst_1 : decidable_eq F,	_inst_2 : field F,	s : finset F,	x y : F,	hy : y ∈ s.erase x	⊢ (x - y)⁻¹ * (x - y) = 1
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i)))	⊢ linear_independent R (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd)
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R	⊢ linear_independent R (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd)
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R	⊢ function.injective (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd)
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩	⊢ ⟨x₁, x₂⟩ = ⟨y₁, y₂⟩
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩,	h_cases : x₁ = y₁	⊢ ⟨x₁, x₂⟩ = ⟨y₁, y₂⟩		R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩,	h_cases : ¬x₁ = y₁	⊢ ⟨x₁, x₂⟩ = ⟨y₁, y₂⟩
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ y₂ : ιs x₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, y₂⟩	⊢ ⟨x₁, x₂⟩ = ⟨x₁, y₂⟩
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ y₂ : ιs x₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, y₂⟩	⊢ ?m_1.rec_on ⟨x₁, x₂⟩.snd = ⟨x₁, y₂⟩.snd		R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ y₂ : ιs x₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, y₂⟩	⊢ ⟨x₁, x₂⟩.fst = ⟨x₁, y₂⟩.fst
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ y₂ : ιs x₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, y₂⟩	⊢ ⟨x₁, x₂⟩ = ⟨x₁, y₂⟩		R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩,	h_cases : ¬x₁ = y₁	⊢ ⟨x₁, x₂⟩ = ⟨y₁, y₂⟩
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ y₂ : ιs x₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, y₂⟩	⊢ ⟨x₁, x₂⟩.fst = ⟨x₁, y₂⟩.fst
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩,	h_cases : ¬x₁ = y₁	⊢ ⟨x₁, x₂⟩ = ⟨y₁, y₂⟩
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩,	h_cases : ¬x₁ = y₁	⊢ f x₁ x₂ = 0
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩,	h_cases : ¬x₁ = y₁	⊢ f x₁ x₂ ∈ ⨆ (i : η) (H : i ∈ {y₁}), submodule.span R (set.range (f i))
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩,	h_cases : ¬x₁ = y₁	⊢ f x₁ x₂ ∈ submodule.span R (set.range (f y₁))
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	h_cases : ¬x₁ = y₁,	hxy : f ⟨x₁, x₂⟩.fst x₂ = f ⟨y₁, y₂⟩.fst y₂	⊢ f x₁ x₂ ∈ submodule.span R (set.range (f y₁))
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩,	h_cases : ¬x₁ = y₁	⊢ f x₁ x₂ = 0		R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩,	h_cases : ¬x₁ = y₁,	h0 : f x₁ x₂ = 0	⊢ ⟨x₁, x₂⟩ = ⟨y₁, y₂⟩
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	h_cases : ¬x₁ = y₁,	hxy : f ⟨x₁, x₂⟩.fst x₂ = f ⟨y₁, y₂⟩.fst y₂	⊢ f ⟨y₁, y₂⟩.fst y₂ ∈ submodule.span R (set.range (f y₁))
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R	⊢ function.injective (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd)		R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R	⊢ linear_independent R coe
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R,	x₁ : η,	x₂ : ιs x₁,	y₁ : η,	y₂ : ιs y₁,	hxy : (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨x₁, x₂⟩ = (λ (ji : Σ (j : η), ιs j), f ji.fst ji.snd) ⟨y₁, y₂⟩,	h_cases : ¬x₁ = y₁,	h0 : f x₁ x₂ = 0	⊢ ⟨x₁, x₂⟩ = ⟨y₁, y₂⟩
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R	⊢ linear_independent R coe
R : Type u_3,	M : Type u_5,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	η : Type u_1,	ιs : η → Type u_2,	f : Π (j : η), ιs j → M,	hindep : ∀ (j : η), linear_independent R (f j),	hd : ∀ (i : η) (t : set η), t.finite → i ∉ t → disjoint (submodule.span R (set.range (f i))) (⨆ (i : η) (H : i ∈ t), submodule.span R (set.range (f i))),	_inst : nontrivial R	⊢ linear_independent R coe
ι : Type u_1,	R : Type u_3,	M : Type u_5,	v : ι → M,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	hv : linear_independent R v,	l : ι →₀ R,	x : ↥(submodule.span R (set.range v)),	eq : ⇑(finsupp.total ι M R v) l = ↑x	⊢ ⇑(hv.repr) x = l
ι : Type u_1,	R : Type u_3,	M : Type u_5,	v : ι → M,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	hv : linear_independent R v,	l : ι →₀ R,	x : ↥(submodule.span R (set.range v)),	eq : ⇑(finsupp.total ι M R v) l = ↑x,	this : ↑(⇑↑(hv.total_equiv) l) = ⇑(finsupp.total ι M R v) l	⊢ ⇑(hv.repr) x = l
ι : Type u_1,	R : Type u_3,	M : Type u_5,	v : ι → M,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	hv : linear_independent R v,	l : ι →₀ R,	x : ↥(submodule.span R (set.range v)),	eq : ⇑(finsupp.total ι M R v) l = ↑x,	this : ↑(⇑↑(hv.total_equiv) l) = ⇑(finsupp.total ι M R v) l	⊢ ⇑↑(hv.total_equiv) l = x
ι : Type u_1,	R : Type u_3,	M : Type u_5,	v : ι → M,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	hv : linear_independent R v,	l : ι →₀ R,	x : ↥(submodule.span R (set.range v)),	eq : ⇑(finsupp.total ι M R v) l = ↑x,	this : ↑(⇑↑(hv.total_equiv) l) = ⇑(finsupp.total ι M R v) l	⊢ ⇑↑(hv.total_equiv) l = x		ι : Type u_1,	R : Type u_3,	M : Type u_5,	v : ι → M,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	hv : linear_independent R v,	l : ι →₀ R,	x : ↥(submodule.span R (set.range v)),	eq : ⇑(finsupp.total ι M R v) l = ↑x,	this : ↑(⇑↑(hv.total_equiv) l) = ⇑(finsupp.total ι M R v) l,	this : ⇑↑(hv.total_equiv) l = x	⊢ ⇑(hv.repr) x = l
ι : Type u_1,	R : Type u_3,	M : Type u_5,	v : ι → M,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	hv : linear_independent R v,	l : ι →₀ R,	x : ↥(submodule.span R (set.range v)),	eq : ⇑(finsupp.total ι M R v) l = ↑x,	this : ↑(⇑↑(hv.total_equiv) l) = ↑x	⊢ ⇑↑(hv.total_equiv) l = x
ι : Type u_1,	R : Type u_3,	M : Type u_5,	v : ι → M,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	hv : linear_independent R v,	l : ι →₀ R,	x : ↥(submodule.span R (set.range v)),	eq : ⇑(finsupp.total ι M R v) l = ↑x,	this : ↑(⇑↑(hv.total_equiv) l) = ⇑(finsupp.total ι M R v) l,	this : ⇑↑(hv.total_equiv) l = x	⊢ ⇑(hv.repr) x = l
ι : Type u_1,	R : Type u_3,	M : Type u_5,	v : ι → M,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	hv : linear_independent R v,	l : ι →₀ R,	x : ↥(submodule.span R (set.range v)),	eq : ⇑(finsupp.total ι M R v) l = ↑x,	this : ↑(⇑↑(hv.total_equiv) l) = ⇑(finsupp.total ι M R v) l,	this : ⇑↑(hv.total_equiv) l = x	⊢ ⇑(hv.repr) x = ⇑(hv.total_equiv.symm) (⇑(hv.total_equiv) l)
ι : Type u_1,	R : Type u_3,	M : Type u_5,	v : ι → M,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_5 : module R M,	hv : linear_independent R v,	l : ι →₀ R,	x : ↥(submodule.span R (set.range v)),	eq : ⇑(finsupp.total ι M R v) l = ↑x,	this : ↑(⇑↑(hv.total_equiv) l) = ⇑(finsupp.total ι M R v) l,	this : ⇑↑(hv.total_equiv) l = x	⊢ ⇑(hv.repr) (⇑↑(hv.total_equiv) l) = ⇑(hv.total_equiv.symm) (⇑(hv.total_equiv) l)
K : Type ?,	E : Type ?,	F : Type ?,	_inst_8 : division_ring K,	_inst_9 : add_comm_group E,	_inst_10 : module K E,	_inst_11 : add_comm_group F,	_inst_12 : module K F,	x : E,	y : F,	hx : x ≠ 0,	c : K,	hc : c • x = 0,	hc : c = 0	⊢ c • y = 0
ι : Type u_1,	R : Type u_5,	M : Type u_6,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	e : basis ι R M,	_inst_4 : decidable_eq ι	⊢ e.to_matrix ⇑e = 1
ι : Type u_1,	R : Type u_5,	M : Type u_6,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	e : basis ι R M,	_inst_4 : decidable_eq ι	⊢ (λ (i j : ι), ⇑(⇑(e.repr) (⇑e j)) i) = 1
ι : Type u_1,	R : Type u_5,	M : Type u_6,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	e : basis ι R M,	_inst_4 : decidable_eq ι,	i j : ι	⊢ ⇑(⇑(e.repr) (⇑e j)) i = 1 i j
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R	⊢ (M.charpoly - ∏ (i : n), (polynomial.X - ⇑polynomial.C (M i i))).degree < ↑(fintype.card n - 1)
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R	⊢ (∑ (x : n ≃ n) in finset.univ.erase (equiv.refl n), ↑↑(⇑equiv.perm.sign x) * ∏ (i : n), charmatrix M (⇑x i) i + ↑↑(⇑equiv.perm.sign (equiv.refl n)) * ∏ (i : n), charmatrix M (⇑(equiv.refl n) i) i - ∏ (i : n), (polynomial.X - ⇑polynomial.C (M i i))).degree < ↑(fintype.card n - 1)
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R	⊢ ∑ (x : n ≃ n) in finset.univ.erase (equiv.refl n), ↑↑(⇑equiv.perm.sign x) * ∏ (i : n), charmatrix M (⇑x i) i ∈ polynomial.degree_lt R (fintype.card n - 1)
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R	⊢ (∑ (x : n ≃ n) in finset.univ.erase (equiv.refl n), ↑↑(⇑equiv.perm.sign x) * ∏ (i : n), charmatrix M (⇑x i) i).degree < ↑(fintype.card n - 1)
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ ↑↑(⇑equiv.perm.sign c) * ∏ (i : n), charmatrix M (⇑c i) i ∈ polynomial.degree_lt R (fintype.card n - 1)
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R	⊢ ∀ (c : n ≃ n), c ∈ finset.univ.erase (equiv.refl n) → ↑↑(⇑equiv.perm.sign c) * ∏ (i : n), charmatrix M (⇑c i) i ∈ polynomial.degree_lt R (fintype.card n - 1)
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ ↑↑(⇑equiv.perm.sign c) • ∏ (i : n), charmatrix M (⇑c i) i ∈ polynomial.degree_lt R (fintype.card n - 1)
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ (∏ (i : n), charmatrix M (⇑c i) i).degree < ↑(fintype.card n - 1)
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ ∏ (i : n), charmatrix M (⇑c i) i ∈ polynomial.degree_lt R (fintype.card n - 1)
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ ↑((∏ (i : n), charmatrix M (⇑c i) i).nat_degree) < ↑(fintype.card n - 1)
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ (∏ (i : n), charmatrix M (⇑c i) i).nat_degree < fintype.card n - 1
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ (∏ (i : n), charmatrix M (⇑c i) i).nat_degree ≤ (finset.filter (λ (x : n), ⇑c x = x) finset.univ).card
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ ∑ (i : n), (charmatrix M (⇑c i) i).nat_degree ≤ ∑ (_x : n) in finset.filter (λ (x : n), ⇑c x = x) finset.univ, 1
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ ∑ (i : n), (charmatrix M (⇑c i) i).nat_degree ≤ ∑ (a : n), ite (⇑c a = a) 1 0
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ ∑ (i : n), (charmatrix M (⇑c i) i).nat_degree ≤ (finset.filter (λ (x : n), ⇑c x = x) finset.univ).card
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n),	i : n,	H : i ∈ finset.univ	⊢ (charmatrix M (⇑c i) i).nat_degree ≤ ite (⇑c i = i) 1 0
R : Type u,	_inst_1 : comm_ring R,	n : Type v,	_inst_2 : decidable_eq n,	_inst_3 : fintype n,	M : matrix n n R,	c : n ≃ n,	hc : c ∈ finset.univ.erase (equiv.refl n)	⊢ ∀ (i : n), i ∈ finset.univ → (charmatrix M (⇑c i) i).nat_degree ≤ ite (⇑c i = i) 1 0
α : Type u_1,	n : Type u_2,	_inst_1 : semiring α,	_inst_2 : decidable_eq n,	_inst_3 : add_group n,	_inst_4 : fintype n,	a : α	⊢ matrix.circulant (pi.single 0 a) = ⇑(matrix.scalar n) a
α : Type u_1,	n : Type u_2,	_inst_1 : semiring α,	_inst_2 : decidable_eq n,	_inst_3 : add_group n,	_inst_4 : fintype n,	a : α,	i j : n	⊢ matrix.circulant (pi.single 0 a) i j = ⇑(matrix.scalar n) a i j
n : Type u_2,	_inst_1 : decidable_eq n,	_inst_2 : fintype n,	R : Type v,	_inst_5 : comm_ring R,	A : matrix n n R,	i j : n,	hij : i ≠ j	⊢ (A.update_column i (λ (k : n), A k i + A k j)).det = A.det
n : Type u_2,	_inst_1 : decidable_eq n,	_inst_2 : fintype n,	R : Type v,	_inst_5 : comm_ring R,	A : matrix n n R,	i j : n,	hij : i ≠ j	⊢ (Aᵀ.update_row i (λ (k : n), A k i + A k j)).det = Aᵀ.det
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	m n : ℤ,	hm : 0 ≤ m,	hn : 0 ≤ n	⊢ A ^ (m + n) = A ^ m * A ^ n
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	m n : ℤ,	hm : 0 ≤ m,	hn : 0 ≤ n,	h : A⁻¹ ⬝ A = 1,	h' : A ⬝ A⁻¹ = 1	⊢ A ^ (m + n) = A ^ m * A ^ n		n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	m n : ℤ,	hm : 0 ≤ m,	hn : 0 ≤ n,	h : A⁻¹ = 0	⊢ A ^ (m + n) = A ^ m * A ^ n
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	m n : ℤ,	hm : 0 ≤ m,	hn : 0 ≤ n,	h : A⁻¹ ⬝ A = 1,	h' : A ⬝ A⁻¹ = 1	⊢ A ^ (m + n) = A ^ m * A ^ n
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	m n : ℤ,	hm : 0 ≤ m,	hn : 0 ≤ n,	h : A⁻¹ = 0	⊢ A ^ (m + n) = A ^ m * A ^ n
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	n : ℤ,	hn : 0 ≤ n,	h : A⁻¹ = 0,	k : ℕ,	hm : 0 ≤ ↑k	⊢ A ^ (↑k + n) = A ^ ↑k * A ^ n
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	h : A⁻¹ = 0,	k : ℕ,	hm : 0 ≤ ↑k,	l : ℕ,	hn : 0 ≤ ↑l	⊢ A ^ (↑k + ↑l) = A ^ ↑k * A ^ ↑l
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	fpow_add_one_of_ne_neg_one : ∀ (n : ℤ), n ≠ -1 → A ^ (n + 1) = A ^ n * A,	n : ℕ,	_x : ↑n ≠ -1	⊢ A ^ (↑n + 1) = A ^ ↑n * A
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	fpow_add_one_of_ne_neg_one : ∀ (n : ℤ), n ≠ -1 → A ^ (n + 1) = A ^ n * A,	n : ℕ,	_x : -(↑n + 2) ≠ -1	⊢ A ^ (-(↑n + 2) + 1) = A ^ -(↑n + 2) * A
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	fpow_add_one_of_ne_neg_one : ∀ (n : ℤ), n ≠ -1 → A ^ (n + 1) = A ^ n * A,	n : ℕ,	_x : -(↑n + 2) ≠ -1,	h : A⁻¹ ⬝ A = 1,	h' : A ⬝ A⁻¹ = 1	⊢ A ^ (-(↑n + 2) + 1) = A ^ -(↑n + 2) * A		n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	fpow_add_one_of_ne_neg_one : ∀ (n : ℤ), n ≠ -1 → A ^ (n + 1) = A ^ n * A,	n : ℕ,	_x : -(↑n + 2) ≠ -1,	h : A⁻¹ = 0	⊢ A ^ (-(↑n + 2) + 1) = A ^ -(↑n + 2) * A
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	fpow_add_one_of_ne_neg_one : ∀ (n : ℤ), n ≠ -1 → A ^ (n + 1) = A ^ n * A,	n : ℕ,	_x : -(↑n + 2) ≠ -1,	h : A⁻¹ ⬝ A = 1,	h' : A ⬝ A⁻¹ = 1	⊢ A ^ (-(↑n + 2) + 1) = A ^ -(↑n + 2) * A
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	fpow_add_one_of_ne_neg_one : ∀ (n : ℤ), n ≠ -1 → A ^ (n + 1) = A ^ n * A,	n : ℕ,	_x : -(↑n + 2) ≠ -1,	h : A⁻¹ = 0	⊢ A ^ (-(↑n + 2) + 1) = A ^ -(↑n + 2) * A
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	fpow_add_one_of_ne_neg_one : ∀ (n : ℤ), n ≠ -1 → A ^ (n + 1) = A ^ n * A,	n : ℕ,	_x : -(↑n + 2) ≠ -1,	h : A⁻¹ = 0	⊢ A ^ -↑(n + 1) = A ^ -↑(n + 2) * A
n' : Type u_1,	_inst_1 : decidable_eq n',	_inst_2 : fintype n',	R : Type u_2,	_inst_3 : comm_ring R,	A : matrix n' n' R,	n : ℤ	⊢ (1 / A) ^ n = 1 / A ^ n
α : Type u_1,	n : Type u_4,	m : Type u_5,	_inst_1 : mul_zero_class α,	A : matrix m m α,	B : matrix n n α,	hA : A.is_diag,	hB : B.is_diag	⊢ (A ⊗ₖ B).is_diag
α : Type u_1,	n : Type u_4,	m : Type u_5,	_inst_1 : mul_zero_class α,	A : matrix m m α,	B : matrix n n α,	hA : A.is_diag,	hB : B.is_diag,	a : m,	b : n,	c : m,	d : n,	h : (a, b) ≠ (c, d)	⊢ (A ⊗ₖ B) (a, b) (c, d) = 0
α : Type u_1,	n : Type u_4,	m : Type u_5,	_inst_1 : mul_zero_class α,	A : matrix m m α,	B : matrix n n α,	hA : A.is_diag,	hB : B.is_diag,	a : m,	b : n,	c : m,	d : n,	h : ¬a = c ∨ ¬b = d	⊢ (A ⊗ₖ B) (a, b) (c, d) = 0
α : Type u_1,	n : Type u_4,	m : Type u_5,	_inst_1 : mul_zero_class α,	A : matrix m m α,	B : matrix n n α,	hA : A.is_diag,	hB : B.is_diag,	a : m,	b : n,	c : m,	d : n,	hac : ¬a = c	⊢ (A ⊗ₖ B) (a, b) (c, d) = 0		case or.inr	α : Type u_1,	n : Type u_4,	m : Type u_5,	_inst_1 : mul_zero_class α,	A : matrix m m α,	B : matrix n n α,	hA : A.is_diag,	hB : B.is_diag,	a : m,	b : n,	c : m,	d : n,	hbd : ¬b = d	⊢ (A ⊗ₖ B) (a, b) (c, d) = 0
α : Type u_1,	n : Type u_4,	m : Type u_5,	_inst_1 : mul_zero_class α,	A : matrix m m α,	B : matrix n n α,	hA : A.is_diag,	hB : B.is_diag,	a : m,	b : n,	c : m,	d : n,	hac : ¬a = c	⊢ (A ⊗ₖ B) (a, b) (c, d) = 0
α : Type u_1,	n : Type u_4,	m : Type u_5,	_inst_1 : mul_zero_class α,	A : matrix m m α,	B : matrix n n α,	hA : A.is_diag,	hB : B.is_diag,	a : m,	b : n,	c : m,	d : n,	hbd : ¬b = d	⊢ (A ⊗ₖ B) (a, b) (c, d) = 0
n : Type u,	_inst_1 : decidable_eq n,	_inst_2 : fintype n,	α : Type v,	_inst_3 : comm_ring α,	A : matrix n n α	⊢ A ⬝ A.adjugate = A.det • 1
n : Type u,	_inst_1 : decidable_eq n,	_inst_2 : fintype n,	α : Type v,	_inst_3 : comm_ring α,	A : matrix n n α,	i j : n	⊢ (A ⬝ A.adjugate) i j = (A.det • 1) i j
n : Type u,	_inst_1 : decidable_eq n,	_inst_2 : fintype n,	α : Type v,	_inst_3 : comm_ring α,	A : matrix n n α,	i j : n	⊢ ∑ (j_1 : n), A i j_1 * A.adjugate j_1 j = ite (i = j) A.det 0
R : Type u_1,	_inst_1 : comm_ring R,	l : Type u_2,	m : Type u_3,	n : Type u_4,	_inst_2 : fintype n,	_inst_3 : fintype m,	_inst_4 : decidable_eq n,	M₁ : Type u_5,	M₂ : Type u_6,	_inst_5 : add_comm_group M₁,	_inst_6 : add_comm_group M₂,	_inst_7 : module R M₁,	_inst_8 : module R M₂,	v₁ : basis n R M₁,	v₂ : basis m R M₂,	M₃ : Type u_7,	_inst_9 : add_comm_group M₃,	_inst_10 : module R M₃,	v₃ : basis l R M₃,	_inst_11 : fintype l,	_inst_12 : decidable_eq m,	f : M₂ →ₗ[R] M₃,	g : M₁ →ₗ[R] M₂	⊢ ⇑(linear_map.to_matrix v₁ v₃) (f.comp g) = ⇑(linear_map.to_matrix v₂ v₃) f ⬝ ⇑(linear_map.to_matrix v₁ v₂) g
n : Type u_1,	p : Type u_2,	R : Type u₂,	_inst_2 : decidable_eq n,	_inst_3 : decidable_eq p,	_inst_4 : comm_ring R,	_inst_5 : fintype n,	_inst_6 : fintype p,	e : n ≃ p,	L : list (matrix.transvection_struct n R)	⊢ (list.map (matrix.transvection_struct.to_matrix ∘ matrix.transvection_struct.reindex_equiv e) L).prod = ⇑(matrix.reindex_alg_equiv R e) (list.map matrix.transvection_struct.to_matrix L).prod
n : Type u_1,	p : Type u_2,	R : Type u₂,	_inst_2 : decidable_eq n,	_inst_3 : decidable_eq p,	_inst_4 : comm_ring R,	_inst_5 : fintype n,	_inst_6 : fintype p,	e : n ≃ p	⊢ (list.map (matrix.transvection_struct.to_matrix ∘ matrix.transvection_struct.reindex_equiv e) list.nil).prod = ⇑(matrix.reindex_alg_equiv R e) (list.map matrix.transvection_struct.to_matrix list.nil).prod		case list.cons	n : Type u_1,	p : Type u_2,	R : Type u₂,	_inst_2 : decidable_eq n,	_inst_3 : decidable_eq p,	_inst_4 : comm_ring R,	_inst_5 : fintype n,	_inst_6 : fintype p,	e : n ≃ p,	t : matrix.transvection_struct n R,	L : list (matrix.transvection_struct n R),	IH : (list.map (matrix.transvection_struct.to_matrix ∘ matrix.transvection_struct.reindex_equiv e) L).prod = ⇑(matrix.reindex_alg_equiv R e) (list.map matrix.transvection_struct.to_matrix L).prod	⊢ (list.map (matrix.transvection_struct.to_matrix ∘ matrix.transvection_struct.reindex_equiv e) (t :: L)).prod = ⇑(matrix.reindex_alg_equiv R e) (list.map matrix.transvection_struct.to_matrix (t :: L)).prod
n : Type u_1,	p : Type u_2,	R : Type u₂,	_inst_2 : decidable_eq n,	_inst_3 : decidable_eq p,	_inst_4 : comm_ring R,	_inst_5 : fintype n,	_inst_6 : fintype p,	e : n ≃ p	⊢ (list.map (matrix.transvection_struct.to_matrix ∘ matrix.transvection_struct.reindex_equiv e) list.nil).prod = ⇑(matrix.reindex_alg_equiv R e) (list.map matrix.transvection_struct.to_matrix list.nil).prod
n : Type u_1,	p : Type u_2,	R : Type u₂,	_inst_2 : decidable_eq n,	_inst_3 : decidable_eq p,	_inst_4 : comm_ring R,	_inst_5 : fintype n,	_inst_6 : fintype p,	e : n ≃ p,	t : matrix.transvection_struct n R,	L : list (matrix.transvection_struct n R),	IH : (list.map (matrix.transvection_struct.to_matrix ∘ matrix.transvection_struct.reindex_equiv e) L).prod = ⇑(matrix.reindex_alg_equiv R e) (list.map matrix.transvection_struct.to_matrix L).prod	⊢ (list.map (matrix.transvection_struct.to_matrix ∘ matrix.transvection_struct.reindex_equiv e) (t :: L)).prod = ⇑(matrix.reindex_alg_equiv R e) (list.map matrix.transvection_struct.to_matrix (t :: L)).prod
n : Type u_1,	p : Type u_2,	R : Type u₂,	_inst_2 : decidable_eq n,	_inst_3 : decidable_eq p,	_inst_4 : comm_ring R,	_inst_5 : fintype n,	_inst_6 : fintype p,	e : n ≃ p,	t : matrix.transvection_struct n R,	L : list (matrix.transvection_struct n R),	IH : (list.map (matrix.transvection_struct.to_matrix ∘ matrix.transvection_struct.reindex_equiv e) L).prod = ⇑(matrix.reindex_alg_equiv R e) (list.map matrix.transvection_struct.to_matrix L).prod	⊢ ⇑(matrix.reindex e e) t.to_matrix ⬝ ⇑(matrix.reindex e e) (list.map matrix.transvection_struct.to_matrix L).prod = ⇑(matrix.reindex e e) (t.to_matrix ⬝ (list.map matrix.transvection_struct.to_matrix L).prod)
𝕜 : Type u_3,	_inst_1 : field 𝕜,	n : Type,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	M : matrix n n 𝕜	⊢ ∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D
𝕜 : Type u_3,	_inst_1 : field 𝕜,	n : Type,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	M : matrix n n 𝕜	⊢ ∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D
𝕜 : Type u_3,	_inst_1 : field 𝕜,	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = 0	⊢ ∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D
𝕜 : Type u_3,	_inst_1 : field 𝕜,	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = 0	⊢ (list.map matrix.transvection_struct.to_matrix list.nil).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix list.nil).prod = matrix.diagonal (λ (_x : n), 1)
𝕜 : Type u_3,	_inst_1 : field 𝕜,	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = 0,	i j : n	⊢ ((list.map matrix.transvection_struct.to_matrix list.nil).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix list.nil).prod) i j = matrix.diagonal (λ (_x : n), 1) i j
𝕜 : Type u_3,	_inst_1 : field 𝕜,	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = 0	⊢ ∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D		𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ	⊢ ∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D
𝕜 : Type u_3,	_inst_1 : field 𝕜,	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	i j : n,	hn : is_empty n	⊢ ((list.map matrix.transvection_struct.to_matrix list.nil).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix list.nil).prod) i j = matrix.diagonal (λ (_x : n), 1) i j
𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ	⊢ ∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D
𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ	⊢ n ≃ fin r ⊕ unit
𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ	⊢ fintype.card n = fintype.card (fin r ⊕ unit)
𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ	⊢ r.succ = fintype.card (fin r ⊕ unit)
𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ	⊢ n ≃ fin r ⊕ unit		𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ,	e : n ≃ fin r ⊕ unit	⊢ ∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D
𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ	⊢ r = (fintype.card (fin r)).add (list.nil.length.add 0)
𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ,	e : n ≃ fin r ⊕ unit	⊢ ∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D
𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ,	e : n ≃ fin r ⊕ unit	⊢ ∃ (L L' : list (matrix.transvection_struct (fin r ⊕ unit) 𝕜)) (D : fin r ⊕ unit → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ ⇑(matrix.reindex_alg_equiv 𝕜 e) M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D
𝕜 : Type u_3,	_inst_1 : field 𝕜,	r : ℕ,	IH : ∀ (n : Type) (M : matrix n n 𝕜) [_inst_7 : fintype n] [_inst_8 : decidable_eq n], fintype.card n = r → (∃ (L L' : list (matrix.transvection_struct n 𝕜)) (D : n → 𝕜), (list.map matrix.transvection_struct.to_matrix L).prod ⬝ M ⬝ (list.map matrix.transvection_struct.to_matrix L').prod = matrix.diagonal D),	n : Type,	M : matrix n n 𝕜,	_inst_7 : fintype n,	_inst_8 : decidable_eq n,	hn : fintype.card n = r.succ,	e : n ≃ fin r ⊕ unit,	N : matrix (fin r) (fin r) 𝕜	⊢ fintype.card (fin r) = r
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B)	⊢ P M
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod	⊢ P M
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod	⊢ (matrix.diagonal D).det = M.det
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D)	⊢ P M
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	H : ∀ (L₁ L₂ : list (matrix.transvection_struct n 𝕜)) (E : matrix n n 𝕜), P E → P ((list.map matrix.transvection_struct.to_matrix L₁).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)	⊢ P M
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	H : ∀ (L₁ L₂ : list (matrix.transvection_struct n 𝕜)) (E : matrix n n 𝕜), P E → P ((list.map matrix.transvection_struct.to_matrix L₁).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)	⊢ P ((list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	H : ∀ (L₁ L₂ : list (matrix.transvection_struct n 𝕜)) (E : matrix n n 𝕜), P E → P ((list.map matrix.transvection_struct.to_matrix L₁).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)	⊢ P (matrix.diagonal D)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D)	⊢ ∀ (L₁ L₂ : list (matrix.transvection_struct n 𝕜)) (E : matrix n n 𝕜), P E → P ((list.map matrix.transvection_struct.to_matrix L₁).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	L₁ L₂ : list (matrix.transvection_struct n 𝕜),	E : matrix n n 𝕜,	PE : P E	⊢ P ((list.map matrix.transvection_struct.to_matrix L₁).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	L₂ : list (matrix.transvection_struct n 𝕜),	E : matrix n n 𝕜,	PE : P E	⊢ P ((list.map matrix.transvection_struct.to_matrix list.nil).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	L₂ : list (matrix.transvection_struct n 𝕜),	E : matrix n n 𝕜,	PE : P E	⊢ P (E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	E : matrix n n 𝕜,	PE : P E	⊢ P (E ⬝ (list.map matrix.transvection_struct.to_matrix list.nil).prod)		case list.nil, list.cons	n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	t : matrix.transvection_struct n 𝕜,	L₂ : list (matrix.transvection_struct n 𝕜),	IH : ∀ (E : matrix n n 𝕜), P E → P (E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod),	E : matrix n n 𝕜,	PE : P E	⊢ P (E ⬝ (list.map matrix.transvection_struct.to_matrix (t :: L₂)).prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	E : matrix n n 𝕜,	PE : P E	⊢ P (E ⬝ (list.map matrix.transvection_struct.to_matrix list.nil).prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	t : matrix.transvection_struct n 𝕜,	L₂ : list (matrix.transvection_struct n 𝕜),	IH : ∀ (E : matrix n n 𝕜), P E → P (E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod),	E : matrix n n 𝕜,	PE : P E	⊢ P (E ⬝ (list.map matrix.transvection_struct.to_matrix (t :: L₂)).prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	t : matrix.transvection_struct n 𝕜,	L₂ : list (matrix.transvection_struct n 𝕜),	IH : ∀ (E : matrix n n 𝕜), P E → P (E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod),	E : matrix n n 𝕜,	PE : P E	⊢ P (E ⬝ t.to_matrix ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	L₂ : list (matrix.transvection_struct n 𝕜),	E : matrix n n 𝕜,	PE : P E	⊢ P ((list.map matrix.transvection_struct.to_matrix list.nil).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)		case list.cons	n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	L₂ : list (matrix.transvection_struct n 𝕜),	E : matrix n n 𝕜,	PE : P E,	t : matrix.transvection_struct n 𝕜,	L₁ : list (matrix.transvection_struct n 𝕜),	IH : P ((list.map matrix.transvection_struct.to_matrix L₁).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)	⊢ P ((list.map matrix.transvection_struct.to_matrix (t :: L₁)).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	t : matrix.transvection_struct n 𝕜,	L₂ : list (matrix.transvection_struct n 𝕜),	IH : ∀ (E : matrix n n 𝕜), P E → P (E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod),	E : matrix n n 𝕜,	PE : P E	⊢ P (E ⬝ t.to_matrix)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	L₂ : list (matrix.transvection_struct n 𝕜),	E : matrix n n 𝕜,	PE : P E,	t : matrix.transvection_struct n 𝕜,	L₁ : list (matrix.transvection_struct n 𝕜),	IH : P ((list.map matrix.transvection_struct.to_matrix L₁).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)	⊢ P ((list.map matrix.transvection_struct.to_matrix (t :: L₁)).prod ⬝ E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)
n : Type u_1,	𝕜 : Type u_3,	_inst_1 : field 𝕜,	_inst_2 : decidable_eq n,	_inst_5 : fintype n,	P : matrix n n 𝕜 → Prop,	M : matrix n n 𝕜,	hdiag : ∀ (D : n → 𝕜), (matrix.diagonal D).det = M.det → P (matrix.diagonal D),	htransvec : ∀ (t : matrix.transvection_struct n 𝕜), P t.to_matrix,	hmul : ∀ (A B : matrix n n 𝕜), P A → P B → P (A ⬝ B),	L L' : list (matrix.transvection_struct n 𝕜),	D : n → 𝕜,	h : M = (list.map matrix.transvection_struct.to_matrix L).prod ⬝ matrix.diagonal D ⬝ (list.map matrix.transvection_struct.to_matrix L').prod,	PD : P (matrix.diagonal D),	L₂ : list (matrix.transvection_struct n 𝕜),	E : matrix n n 𝕜,	PE : P E,	t : matrix.transvection_struct n 𝕜,	L₁ : list (matrix.transvection_struct n 𝕜),	IH : P ((list.map matrix.transvection_struct.to_matrix L₁).prod ⬝ (E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod))	⊢ P (t.to_matrix ⬝ ((list.map matrix.transvection_struct.to_matrix L₁).prod ⬝ (E ⬝ (list.map matrix.transvection_struct.to_matrix L₂).prod)))
R : Type u,	n : ℕ,	M : fin n.succ → Type v,	M₂ : Type v₂,	_inst_2 : comm_semiring R,	_inst_3 : Π (i : fin n.succ), add_comm_monoid (M i),	_inst_5 : add_comm_monoid M₂,	_inst_6 : Π (i : fin n.succ), module R (M i),	_inst_8 : module R M₂,	f₁ f₂ : multilinear_map R (λ (i : fin n), M (⇑fin.cast_succ i)) (M (fin.last n) →ₗ[R] M₂)	⊢ (f₁ + f₂).uncurry_right = f₁.uncurry_right + f₂.uncurry_right
R : Type u,	n : ℕ,	M : fin n.succ → Type v,	M₂ : Type v₂,	_inst_2 : comm_semiring R,	_inst_3 : Π (i : fin n.succ), add_comm_monoid (M i),	_inst_5 : add_comm_monoid M₂,	_inst_6 : Π (i : fin n.succ), module R (M i),	_inst_8 : module R M₂,	f₁ f₂ : multilinear_map R (λ (i : fin n), M (⇑fin.cast_succ i)) (M (fin.last n) →ₗ[R] M₂),	m : Π (i : fin n.succ), M i	⊢ ⇑((f₁ + f₂).uncurry_right) m = ⇑(f₁.uncurry_right + f₂.uncurry_right) m
R : Type u,	n : ℕ,	M : fin n.succ → Type v,	M₂ : Type v₂,	_inst_2 : comm_semiring R,	_inst_3 : Π (i : fin n.succ), add_comm_monoid (M i),	_inst_5 : add_comm_monoid M₂,	_inst_6 : Π (i : fin n.succ), module R (M i),	_inst_8 : module R M₂,	c : R,	f : multilinear_map R (λ (i : fin n), M (⇑fin.cast_succ i)) (M (fin.last n) →ₗ[R] M₂)	⊢ (c • f).uncurry_right = ⇑(ring_hom.id R) c • f.uncurry_right
R : Type u,	n : ℕ,	M : fin n.succ → Type v,	M₂ : Type v₂,	_inst_2 : comm_semiring R,	_inst_3 : Π (i : fin n.succ), add_comm_monoid (M i),	_inst_5 : add_comm_monoid M₂,	_inst_6 : Π (i : fin n.succ), module R (M i),	_inst_8 : module R M₂,	c : R,	f : multilinear_map R (λ (i : fin n), M (⇑fin.cast_succ i)) (M (fin.last n) →ₗ[R] M₂),	m : Π (i : fin n.succ), M i	⊢ ⇑((c • f).uncurry_right) m = ⇑(⇑(ring_hom.id R) c • f.uncurry_right) m
R : Type u,	n : ℕ,	M : fin n.succ → Type v,	M₂ : Type v₂,	_inst_2 : comm_semiring R,	_inst_3 : Π (i : fin n.succ), add_comm_monoid (M i),	_inst_5 : add_comm_monoid M₂,	_inst_6 : Π (i : fin n.succ), module R (M i),	_inst_8 : module R M₂,	c : R,	f : multilinear_map R (λ (i : fin n), M (⇑fin.cast_succ i)) (M (fin.last n) →ₗ[R] M₂),	m : Π (i : fin n.succ), M i	⊢ ⇑((c • f).uncurry_right) m = ⇑(ring_hom.id R) c • ⇑(f.uncurry_right) m
R : Type u,	ι : Type u',	M₂ : Type v₂,	M' : Type v',	_inst_1 : decidable_eq ι,	_inst_2 : comm_semiring R,	_inst_4 : add_comm_monoid M',	_inst_5 : add_comm_monoid M₂,	_inst_7 : module R M',	_inst_8 : module R M₂,	ι' : Type u_1,	_inst_9 : decidable_eq ι',	_inst_10 : decidable_eq (ι ⊕ ι'),	f : multilinear_map R (λ (x : ι ⊕ ι'), M') M₂,	u : ι → M',	v : ι' → M',	i : ι',	x y : M'	⊢ ⇑f (sum.elim u (function.update v i (x + y))) = ⇑f (sum.elim u (function.update v i x)) + ⇑f (sum.elim u (function.update v i y))
R : Type u,	ι : Type u',	M₂ : Type v₂,	M' : Type v',	_inst_1 : decidable_eq ι,	_inst_2 : comm_semiring R,	_inst_4 : add_comm_monoid M',	_inst_5 : add_comm_monoid M₂,	_inst_7 : module R M',	_inst_8 : module R M₂,	ι' : Type u_1,	_inst_9 : decidable_eq ι',	_inst_10 : decidable_eq (ι ⊕ ι'),	f : multilinear_map R (λ (x : ι ⊕ ι'), M') M₂,	u : ι → M',	v : ι' → M',	i : ι',	c : R,	x : M'	⊢ ⇑f (sum.elim u (function.update v i (c • x))) = c • ⇑f (sum.elim u (function.update v i x))
R : Type u,	ι : Type u',	M₂ : Type v₂,	M' : Type v',	_inst_1 : decidable_eq ι,	_inst_2 : comm_semiring R,	_inst_4 : add_comm_monoid M',	_inst_5 : add_comm_monoid M₂,	_inst_7 : module R M',	_inst_8 : module R M₂,	ι' : Type u_1,	_inst_9 : decidable_eq ι',	_inst_10 : decidable_eq (ι ⊕ ι'),	f : multilinear_map R (λ (x : ι ⊕ ι'), M') M₂,	u : ι → M',	i : ι,	x y : M',	v : ι' → M'	⊢ ⇑{to_fun := λ (v : ι' → M'), ⇑f (sum.elim (function.update u i (x + y)) v), map_add' := _, map_smul' := _} v = ⇑({to_fun := λ (v : ι' → M'), ⇑f (sum.elim (function.update u i x) v), map_add' := _, map_smul' := _} + {to_fun := λ (v : ι' → M'), ⇑f (sum.elim (function.update u i y) v), map_add' := _, map_smul' := _}) v
R : Type u,	ι : Type u',	M₂ : Type v₂,	M' : Type v',	_inst_1 : decidable_eq ι,	_inst_2 : comm_semiring R,	_inst_4 : add_comm_monoid M',	_inst_5 : add_comm_monoid M₂,	_inst_7 : module R M',	_inst_8 : module R M₂,	ι' : Type u_1,	_inst_9 : decidable_eq ι',	_inst_10 : decidable_eq (ι ⊕ ι'),	f : multilinear_map R (λ (x : ι ⊕ ι'), M') M₂,	u : ι → M',	i : ι,	c : R,	x : M',	v : ι' → M'	⊢ ⇑{to_fun := λ (v : ι' → M'), ⇑f (sum.elim (function.update u i (c • x)) v), map_add' := _, map_smul' := _} v = ⇑(c • {to_fun := λ (v : ι' → M'), ⇑f (sum.elim (function.update u i x) v), map_add' := _, map_smul' := _}) v
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	A : Π (i : ι), finset (α i),	_inst_13 : fintype ι,	n : ℕ,	h : ∑ (i : ι), (A i).card = n	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∃ (i : ι), A i = ∅	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	i : ι,	hi : A i = ∅	⊢ ∑ (j : α i) in A i, g i j = 0
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	i : ι,	hi : A i = ∅	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	i : ι,	hi : A i = ∅,	this : ∑ (j : α i) in A i, g i j = 0	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	i : ι,	hi : A i = ∅,	this : ∑ (j : α i) in A i, g i j = 0	⊢ 0 = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	i : ι,	hi : A i = ∅,	this : ∑ (j : α i) in A i, g i j = 0	⊢ fintype.pi_finset A = ∅
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	i : ι,	hi : A i = ∅,	this : ∑ (j : α i) in A i, g i j = 0,	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A	⊢ false
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	i : ι,	hi : A i = ∅,	this : ∑ (j : α i) in A i, g i j = 0	⊢ fintype.pi_finset A = ∅		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	i : ι,	hi : A i = ∅,	this : ∑ (j : α i) in A i, g i j = 0,	this : fintype.pi_finset A = ∅	⊢ 0 = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	i : ι,	hi : A i = ∅,	this : ∑ (j : α i) in A i, g i j = 0,	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	this : r i ∈ A i	⊢ false
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∃ (i : ι), A i = ∅	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ¬∃ (i : ι), A i = ∅	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	i : ι,	hi : A i = ∅,	this : ∑ (j : α i) in A i, g i j = 0,	this : fintype.pi_finset A = ∅	⊢ 0 = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ¬∃ (i : ι), A i = ∅	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1	⊢ ∀ (i : ι), (A i).card = 1
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	i : ι	⊢ (A i).card ≠ 0
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	i : ι	⊢ (A i).card = 1
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	i : ι,	pos : (A i).card ≠ 0	⊢ (A i).card = 1
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	i : ι,	pos : (A i).card ≠ 0,	this : (A i).card ≤ 1	⊢ (A i).card = 1
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1	⊢ ∀ (i : ι), (A i).card = 1		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1	⊢ ∀ (r : Π (i : ι), α i), r ∈ fintype.pi_finset A → ⇑f (λ (i : ι), g i (r i)) = ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	r : Π (i : ι), α i,	hr : r ∈ fintype.pi_finset A	⊢ ⇑f (λ (i : ι), g i (r i)) = ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	r : Π (i : ι), α i,	hr : r ∈ fintype.pi_finset A	⊢ f.to_fun (λ (i : ι), g i (r i)) = f.to_fun (λ (i : ι), ∑ (j : α i) in A i, g i j)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	r : Π (i : ι), α i,	hr : r ∈ fintype.pi_finset A,	i : ι	⊢ g i (r i) = ∑ (j : α i) in A i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	r : Π (i : ι), α i,	hr : r ∈ fintype.pi_finset A,	i : ι	⊢ ∀ (j : α i), j ∈ A i → g i j = g i (r i)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	r : Π (i : ι), α i,	hr : r ∈ fintype.pi_finset A,	i : ι,	j : α i,	hj : j ∈ A i	⊢ g i j = g i (r i)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	r : Π (i : ι), α i,	hr : r ∈ fintype.pi_finset A,	i : ι,	j : α i,	hj : j ∈ A i	⊢ j = r i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	r : Π (i : ι), α i,	hr : r ∈ fintype.pi_finset A,	i : ι	⊢ ∀ (j : α i), j ∈ A i → g i j = g i (r i)		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	r : Π (i : ι), α i,	hr : r ∈ fintype.pi_finset A,	i : ι,	this : ∀ (j : α i), j ∈ A i → g i j = g i (r i)	⊢ g i (r i) = ∑ (j : α i) in A i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	r : Π (i : ι), α i,	hr : r ∈ fintype.pi_finset A,	i : ι,	j : α i,	hj : j ∈ A i	⊢ r i ∈ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	r : Π (i : ι), α i,	hr : r ∈ fintype.pi_finset A,	i : ι,	this : ∀ (j : α i), j ∈ A i → g i j = g i (r i)	⊢ g i (r i) = ∑ (j : α i) in A i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1	⊢ ∀ (r : Π (i : ι), α i), r ∈ fintype.pi_finset A → ⇑f (λ (i : ι), g i (r i)) = ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j)		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	this : ∀ (r : Π (i : ι), α i), r ∈ fintype.pi_finset A → ⇑f (λ (i : ι), g i (r i)) = ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j)	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1,	Ai_card : ∀ (i : ι), (A i).card = 1,	this : ∀ (r : Π (i : ι), α i), r ∈ fintype.pi_finset A → ⇑f (λ (i : ι), g i (r i)) = ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j)	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∀ (i : ι), (A i).card ≤ 1	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ¬∀ (i : ι), (A i).card ≤ 1	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ¬∀ (i : ι), (A i).card ≤ 1	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	Ai_singleton : ∃ (i : ι), 1 < (A i).card	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂})	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂}	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂}	⊢ ∀ (i : ι), B i ⊆ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	i : ι	⊢ B i ⊆ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	i : ι,	hi : i = i₀	⊢ B i₀ ⊆ A i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	i : ι,	hi : i = i₀	⊢ B i ⊆ A i		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	i : ι,	hi : ¬i = i₀	⊢ B i ⊆ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	i : ι,	hi : i = i₀	⊢ B i ⊆ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	i : ι,	hi : ¬i = i₀	⊢ B i ⊆ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂}	⊢ ∀ (i : ι), B i ⊆ A i		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i	⊢ ∀ (i : ι), C i ⊆ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	i : ι	⊢ C i ⊆ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	i : ι,	hi : i = i₀	⊢ C i₀ ⊆ A i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	i : ι,	hi : i = i₀	⊢ C i ⊆ A i		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	i : ι,	hi : ¬i = i₀	⊢ C i ⊆ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	i : ι,	hi : i = i₀	⊢ C i ⊆ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	i : ι,	hi : ¬i = i₀	⊢ C i ⊆ A i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i	⊢ ∀ (i : ι), C i ⊆ A i		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i	⊢ (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι	⊢ ∑ (j : α i) in A i, g i j = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j) i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀	⊢ ∑ (j : α i) in A i, g i j = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j) i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀	⊢ ∑ (j : α i₀) in A i₀, g i₀ j = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j) i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀	⊢ (A i₀).sum (g i₀) = finset.sum (B i₀) (g i₀) + finset.sum (C i₀) (g i₀)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀	⊢ A i₀ = B i₀ ∪ C i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀	⊢ A i₀ = A i₀ ∪ {j₂}
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀	⊢ A i₀ = B i₀ ∪ C i₀		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀,	this : A i₀ = B i₀ ∪ C i₀	⊢ (A i₀).sum (g i₀) = finset.sum (B i₀) (g i₀) + finset.sum (C i₀) (g i₀)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀	⊢ A i₀ ∪ {j₂} = A i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀,	this : A i₀ = B i₀ ∪ C i₀	⊢ (A i₀).sum (g i₀) = finset.sum (B i₀) (g i₀) + finset.sum (C i₀) (g i₀)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀,	this : A i₀ = B i₀ ∪ C i₀	⊢ (B i₀ ∪ C i₀).sum (g i₀) = finset.sum (B i₀) (g i₀) + finset.sum (C i₀) (g i₀)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀,	this : A i₀ = B i₀ ∪ C i₀	⊢ disjoint (B i₀) (C i₀)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀,	this : A i₀ = B i₀ ∪ C i₀,	j : α i₀,	hj : j ∈ C i₀	⊢ j = j₂
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀,	this : A i₀ = B i₀ ∪ C i₀,	j : α i₀,	hj : j ∈ function.update A i₀ {j₂} i₀	⊢ j = j₂
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀,	this : A i₀ = B i₀ ∪ C i₀,	j : α i₀,	hj : j ∈ C i₀	⊢ j ∉ B i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀,	this : A i₀ = B i₀ ∪ C i₀,	j : α i₀,	hj : j ∈ C i₀,	this : j = j₂	⊢ j ∉ B i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀,	this : A i₀ = B i₀ ∪ C i₀,	j : α i₀,	hj : j ∈ C i₀,	this : j = j₂	⊢ j₂ ∉ B i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀,	this : A i₀ = B i₀ ∪ C i₀,	j : α i₀,	hj : j ∈ C i₀,	this : j = j₂	⊢ j₂ ∉ function.update A i₀ (A i₀ \ {j₂}) i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : i = i₀	⊢ ∑ (j : α i) in A i, g i j = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j) i		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : ¬i = i₀	⊢ ∑ (j : α i) in A i, g i j = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j) i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i	⊢ (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j)		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j)	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	i : ι,	hi : ¬i = i₀	⊢ ∑ (j : α i) in A i, g i j = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j) i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j)	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j)	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	i : ι	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) i = ∑ (j : α i) in B i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	i : ι,	hi : i = i₀	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) i₀ = ∑ (j : α i₀) in B i₀, g i₀ j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	i : ι,	hi : i = i₀	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) i = ∑ (j : α i) in B i, g i j		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	i : ι,	hi : ¬i = i₀	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) i = ∑ (j : α i) in B i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	i : ι,	hi : i = i₀	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) i = ∑ (j : α i) in B i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j)	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	i : ι,	hi : ¬i = i₀	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) i = ∑ (j : α i) in B i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	i : ι	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) i = ∑ (j : α i) in C i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	i : ι,	hi : i = i₀	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) i₀ = ∑ (j : α i₀) in C i₀, g i₀ j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	i : ι,	hi : i = i₀	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) i = ∑ (j : α i) in C i, g i j		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	i : ι,	hi : ¬i = i₀	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) i = ∑ (j : α i) in C i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	i : ι,	hi : i = i₀	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) i = ∑ (j : α i) in C i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	i : ι,	hi : ¬i = i₀	⊢ function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) i = ∑ (j : α i) in C i, g i j
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j	⊢ ∑ (i : ι), finset.card (B i) < ∑ (i : ι), (A i).card
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j	⊢ {j₂} ⊆ A i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j	⊢ finset.card (B i₀) < (A i₀).card
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	this : {j₂} ⊆ A i₀	⊢ finset.card (B i₀) < (A i₀).card
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j	⊢ ∑ (i : ι), finset.card (B i) < ∑ (i : ι), (A i).card		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	this : ∑ (i : ι), finset.card (B i) < ∑ (i : ι), (A i).card	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	this : {j₂} ⊆ A i₀	⊢ (A i₀).card - 1 < (A i₀).card
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	this : ∑ (i : ι), finset.card (B i) < ∑ (i : ι), (A i).card	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i))		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i))	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	this : ∑ (i : ι), finset.card (B i) < n	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i))	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i))	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i))	⊢ finset.card (C i₀) < (A i₀).card
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	this : ∑ (i : ι), finset.card (C i) < ∑ (i : ι), (A i).card	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i))	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i))		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i))	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	this : ∑ (i : ι), finset.card (C i) < n	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i))	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i))	⊢ disjoint (B i₀) (C i₀)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i))	⊢ disjoint (fintype.pi_finset B) (fintype.pi_finset C)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i))	⊢ disjoint (fintype.pi_finset B) (fintype.pi_finset C)		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C)	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	this : disjoint (B i₀) (C i₀)	⊢ disjoint (fintype.pi_finset B) (fintype.pi_finset C)
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C)	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C)	⊢ fintype.pi_finset A = fintype.pi_finset B ∪ fintype.pi_finset C
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C)	⊢ fintype.pi_finset A ⊆ fintype.pi_finset B ∪ fintype.pi_finset C
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A	⊢ r ∈ fintype.pi_finset B ∪ fintype.pi_finset C
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : r i₀ = j₂	⊢ r ∈ fintype.pi_finset B ∪ fintype.pi_finset C
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : r i₀ = j₂	⊢ r ∈ fintype.pi_finset C
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : r i₀ = j₂,	i : ι	⊢ r i ∈ C i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : r i₀ = j₂,	i : ι,	hi : i = i₀	⊢ r i ∈ C i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : r i₀ = j₂,	i : ι,	hi : i = i₀	⊢ r i₀ ∈ C i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : r i₀ = j₂,	i : ι,	hi : i = i₀,	this : r i₀ ∈ C i₀	⊢ r i ∈ C i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : r i₀ = j₂,	i : ι,	hi : i = i₀	⊢ r i ∈ C i		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : r i₀ = j₂,	i : ι,	hi : ¬i = i₀	⊢ r i ∈ C i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : r i₀ = j₂,	i : ι,	hi : ¬i = i₀	⊢ r i ∈ C i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : r i₀ = j₂	⊢ r ∈ fintype.pi_finset B ∪ fintype.pi_finset C		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : ¬r i₀ = j₂	⊢ r ∈ fintype.pi_finset B ∪ fintype.pi_finset C
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : ¬r i₀ = j₂	⊢ r ∈ fintype.pi_finset B ∪ fintype.pi_finset C
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : ¬r i₀ = j₂	⊢ r ∈ fintype.pi_finset B
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : ¬r i₀ = j₂,	i : ι	⊢ r i ∈ B i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : ¬r i₀ = j₂,	i : ι,	hi : i = i₀	⊢ r i ∈ B i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : ¬r i₀ = j₂,	i : ι,	hi : i = i₀	⊢ r i₀ ∈ B i₀
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : ¬r i₀ = j₂,	i : ι,	hi : i = i₀,	this : r i₀ ∈ B i₀	⊢ r i ∈ B i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : ¬r i₀ = j₂,	i : ι,	hi : i = i₀	⊢ r i ∈ B i		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : ¬r i₀ = j₂,	i : ι,	hi : ¬i = i₀	⊢ r i ∈ B i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	r : Π (a : ι), (λ (i : ι), α i) a,	hr : r ∈ fintype.pi_finset A,	hri₀ : ¬r i₀ = j₂,	i : ι,	hi : ¬i = i₀	⊢ r i ∈ B i
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C)	⊢ fintype.pi_finset A ⊆ fintype.pi_finset B ∪ fintype.pi_finset C		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C)	⊢ fintype.pi_finset B ∪ fintype.pi_finset C ⊆ fintype.pi_finset A
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C)	⊢ fintype.pi_finset B ∪ fintype.pi_finset C ⊆ fintype.pi_finset A
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C)	⊢ fintype.pi_finset A = fintype.pi_finset B ∪ fintype.pi_finset C		R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	pi_BC : fintype.pi_finset A = fintype.pi_finset B ∪ fintype.pi_finset C	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	pi_BC : fintype.pi_finset A = fintype.pi_finset B ∪ fintype.pi_finset C	⊢ ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	pi_BC : fintype.pi_finset A = fintype.pi_finset B ∪ fintype.pi_finset C	⊢ ⇑f (function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j)) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))
R : Type u,	ι : Type u',	M₁ : ι → Type v₁,	M₂ : Type v₂,	_inst_1 : decidable_eq ι,	_inst_2 : semiring R,	_inst_4 : Π (i : ι), add_comm_monoid (M₁ i),	_inst_5 : add_comm_monoid M₂,	_inst_9 : Π (i : ι), module R (M₁ i),	_inst_10 : module R M₂,	f : multilinear_map R M₁ M₂,	α : ι → Type u_1,	g : Π (i : ι), α i → M₁ i,	_inst_13 : fintype ι,	n : ℕ,	IH : ∀ (m : ℕ), m < n → (λ {n : ℕ}, ∀ (A : Π (i : ι), finset (α i)), ∑ (i : ι), (A i).card = n → ⇑f (λ (i : ι), ∑ (j : α i) in A i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset A, ⇑f (λ (i : ι), g i (r i))),	A : Π (i : ι), finset (α i),	h : ∑ (i : ι), (A i).card = n,	Ai_empty : ∀ (i : ι), A i ≠ ∅,	i₀ : ι,	hi₀ : 1 < (A i₀).card,	j₁ j₂ : α i₀,	hj₁ : j₁ ∈ A i₀,	hj₂ : j₂ ∈ A i₀,	j₁_ne_j₂ : j₁ ≠ j₂,	B : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ (A i₀ \ {j₂}),	C : Π (a : ι), (λ (i : ι), finset (α i)) a := function.update A i₀ {j₂},	B_subset_A : ∀ (i : ι), B i ⊆ A i,	C_subset_A : ∀ (i : ι), C i ⊆ A i,	A_eq_BC : (λ (i : ι), ∑ (j : α i) in A i, g i j) = function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j + ∑ (j : α i₀) in C i₀, g i₀ j),	Beq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in B i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in B i, g i j,	Ceq : function.update (λ (i : ι), ∑ (j : α i) in A i, g i j) i₀ (∑ (j : α i₀) in C i₀, g i₀ j) = λ (i : ι), ∑ (j : α i) in C i, g i j,	Brec : ⇑f (λ (i : ι), ∑ (j : α i) in B i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)),	Crec : ⇑f (λ (i : ι), ∑ (j : α i) in C i, g i j) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)),	D : disjoint (fintype.pi_finset B) (fintype.pi_finset C),	pi_BC : fintype.pi_finset A = fintype.pi_finset B ∪ fintype.pi_finset C	⊢ ∑ (r : Π (a : ι), α a) in fintype.pi_finset B, ⇑f (λ (i : ι), g i (r i)) + ∑ (r : Π (a : ι), α a) in fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i)) = ∑ (r : Π (a : ι), α a) in fintype.pi_finset B ∪ fintype.pi_finset C, ⇑f (λ (i : ι), g i (r i))
R : Type u,	M : Type v,	ι : Type x,	_inst_1 : semiring R,	S : Type u_4,	_inst_8 : fintype ι,	_inst_9 : decidable_eq ι,	_inst_10 : semiring S,	_inst_11 : add_comm_monoid M,	_inst_12 : module R M,	_inst_13 : module S M,	_inst_14 : smul_comm_class R S M,	f : ι → M,	g : ι → R	⊢ ⇑(⇑((linear_equiv.pi_ring R M ι S).symm) f) g = ∑ (i : ι), g i • f i
R : Type u,	M : Type v,	M₂ : Type w,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : add_comm_monoid M₂,	_inst_7 : module R M,	_inst_8 : module R M₂	⊢ linear_map.snd R M M₂ = 0.coprod linear_map.id
R : Type u,	M : Type v,	M₂ : Type w,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : add_comm_monoid M₂,	_inst_7 : module R M,	_inst_8 : module R M₂	⊢ linear_map.snd R M M₂ = 0.coprod linear_map.id
R : Type u,	M : Type v,	M₂ : Type w,	_inst_1 : semiring R,	_inst_3 : add_comm_monoid M,	_inst_4 : add_comm_monoid M₂,	_inst_7 : module R M,	_inst_8 : module R M₂,	x : M × M₂	⊢ ⇑(linear_map.snd R M M₂) x = ⇑(0.coprod linear_map.id) x
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range	⊢ (f.coprod g).ker = f.ker.prod g.ker
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range	⊢ (f.coprod g).ker ≤ f.ker.prod g.ker
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range,	y : M,	z : M₂,	h : (y, z) ∈ (f.coprod g).ker	⊢ (y, z) ∈ f.ker.prod g.ker
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range,	y : M,	z : M₂,	h : ⇑f y + ⇑g z = 0	⊢ ⇑f y = 0 ∧ ⇑g z = 0
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range,	y : M,	z : M₂,	h : ⇑f y + ⇑g z = 0	⊢ ⇑f y ∈ f.range ⊓ g.range
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range,	y : M,	z : M₂,	h : ⇑f y + ⇑g z = 0	⊢ ∃ (y_1 : M₂), ⇑g y_1 = ⇑f y
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range,	y : M,	z : M₂,	h : ⇑f y + ⇑g z = 0	⊢ ⇑f y ∈ f.range ⊓ g.range		R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range,	y : M,	z : M₂,	h : ⇑f y + ⇑g z = 0,	this : ⇑f y ∈ f.range ⊓ g.range	⊢ ⇑f y = 0 ∧ ⇑g z = 0
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range,	y : M,	z : M₂,	h : ⇑f y + ⇑g z = 0	⊢ ⇑g (-z) = ⇑f y
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range,	y : M,	z : M₂,	h : ⇑f y + ⇑g z = 0,	this : ⇑f y ∈ f.range ⊓ g.range	⊢ ⇑f y = 0 ∧ ⇑g z = 0
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range,	y : M,	z : M₂,	h : ⇑f y + ⇑g z = 0,	this : ⇑f y = 0	⊢ ⇑f y = 0 ∧ ⇑g z = 0
R : Type u,	M : Type v,	_inst_1 : semiring R,	_inst_2 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_1,	_inst_10 : add_comm_group M₂,	_inst_11 : module R M₂,	M₃ : Type u_2,	_inst_12 : add_comm_group M₃,	_inst_13 : module R M₃,	f : M →ₗ[R] M₃,	g : M₂ →ₗ[R] M₃,	hd : disjoint f.range g.range,	y : M,	z : M₂,	this : ⇑f y = 0,	h : 0 + ⇑g z = 0	⊢ ⇑f y = 0 ∧ ⇑g z = 0
R : Type u_1,	_inst_1 : ring R,	E : Type u_2,	_inst_2 : add_comm_group E,	_inst_3 : module R E,	p : submodule R E,	f : E →ₗ[R] ↥p,	hf : ∀ (x : ↥p), ⇑f ↑x = x	⊢ p.linear_proj_of_is_compl f.ker _ = f
R : Type u_1,	_inst_1 : ring R,	E : Type u_2,	_inst_2 : add_comm_group E,	_inst_3 : module R E,	p : submodule R E,	f : E →ₗ[R] ↥p,	hf : ∀ (x : ↥p), ⇑f ↑x = x,	x : E	⊢ ↑(⇑(p.linear_proj_of_is_compl f.ker _) x) = ↑(⇑f x)
R : Type u_1,	_inst_1 : ring R,	E : Type u_2,	_inst_2 : add_comm_group E,	_inst_3 : module R E,	p : submodule R E,	f : E →ₗ[R] ↥p,	hf : ∀ (x : ↥p), ⇑f ↑x = x,	x : E	⊢ x ∈ p ⊔ f.ker		R : Type u_1,	_inst_1 : ring R,	E : Type u_2,	_inst_2 : add_comm_group E,	_inst_3 : module R E,	p : submodule R E,	f : E →ₗ[R] ↥p,	hf : ∀ (x : ↥p), ⇑f ↑x = x,	x : E,	this : x ∈ p ⊔ f.ker	⊢ ↑(⇑(p.linear_proj_of_is_compl f.ker _) x) = ↑(⇑f x)
R : Type u_1,	_inst_1 : ring R,	E : Type u_2,	_inst_2 : add_comm_group E,	_inst_3 : module R E,	p : submodule R E,	f : E →ₗ[R] ↥p,	hf : ∀ (x : ↥p), ⇑f ↑x = x,	x : E	⊢ x ∈ p ⊔ f.ker
R : Type u_1,	_inst_1 : ring R,	E : Type u_2,	_inst_2 : add_comm_group E,	_inst_3 : module R E,	p : submodule R E,	f : E →ₗ[R] ↥p,	hf : ∀ (x : ↥p), ⇑f ↑x = x,	x : E,	this : x ∈ p ⊔ f.ker	⊢ ↑(⇑(p.linear_proj_of_is_compl f.ker _) x) = ↑(⇑f x)
R : Type u_1,	_inst_1 : ring R,	E : Type u_2,	_inst_2 : add_comm_group E,	_inst_3 : module R E,	p : submodule R E,	f : E →ₗ[R] ↥p,	hf : ∀ (x : ↥p), ⇑f ↑x = x,	x : ↥p,	y : ↥(f.ker),	this : ↑x + ↑y ∈ p ⊔ f.ker	⊢ ↑(⇑(p.linear_proj_of_is_compl f.ker _) (↑x + ↑y)) = ↑(⇑f (↑x + ↑y))
R : Type u_2,	M : Type u_3,	_inst_1 : add_comm_group M,	_inst_2 : ring R,	_inst_4 : module R M,	Q : quadratic_form R M,	x y : M	⊢ ⇑Q (x - y) = ⇑Q (y - x)
M : Type u_3,	_inst_1 : add_comm_group M,	R₁ : Type u_4,	_inst_3 : comm_ring R₁,	_inst_5 : module R₁ M,	f : M → R₁,	to_fun_smul : ∀ (a : R₁) (x : M), f (a • x) = a * a * f x,	polar_add_left : ∀ (x x' y : M), quadratic_form.polar f (x + x') y = quadratic_form.polar f x y + quadratic_form.polar f x' y,	polar_smul_left : ∀ (a : R₁) (x y : M), quadratic_form.polar f (a • x) y = a * quadratic_form.polar f x y,	x y y' : M	⊢ quadratic_form.polar f x (y + y') = quadratic_form.polar f x y + quadratic_form.polar f x y'
M : Type u_3,	_inst_1 : add_comm_group M,	R₁ : Type u_4,	_inst_3 : comm_ring R₁,	_inst_5 : module R₁ M,	f : M → R₁,	to_fun_smul : ∀ (a : R₁) (x : M), f (a • x) = a * a * f x,	polar_add_left : ∀ (x x' y : M), quadratic_form.polar f (x + x') y = quadratic_form.polar f x y + quadratic_form.polar f x' y,	polar_smul_left : ∀ (a : R₁) (x y : M), quadratic_form.polar f (a • x) y = a * quadratic_form.polar f x y,	a : R₁,	x y : M	⊢ quadratic_form.polar f x (a • y) = a • quadratic_form.polar f x y
R₁ : Type u_4,	_inst_3 : comm_ring R₁,	n : Type w,	_inst_6 : fintype n,	_inst_7 : decidable_eq n,	_inst_8 : invertible 2,	Q : quadratic_form R₁ (n → R₁),	a : R₁	⊢ (a • Q).discr = a ^ fintype.card n * Q.discr
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ	⊢ (quadratic_form.weighted_sum_squares ℂ w).isometry (quadratic_form.weighted_sum_squares ℂ 1)
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ	⊢ ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	i : ι,	hi : ↑(w i) ^ -(1 / 2) = 0	⊢ false
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ	⊢ ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0		ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0	⊢ (quadratic_form.weighted_sum_squares ℂ w).isometry (quadratic_form.weighted_sum_squares ℂ 1)
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0	⊢ (quadratic_form.weighted_sum_squares ℂ w).isometry (quadratic_form.weighted_sum_squares ℂ 1)
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0	⊢ quadratic_form.weighted_sum_squares ℂ 1 = (quadratic_form.weighted_sum_squares ℂ w).basis_repr ((pi.basis_fun ℂ ι).units_smul (λ (i : ι), _.unit))
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ	⊢ ⇑(quadratic_form.weighted_sum_squares ℂ 1) v = ⇑((quadratic_form.weighted_sum_squares ℂ w).basis_repr ((pi.basis_fun ℂ ι).units_smul (λ (i : ι), _.unit))) v
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ	⊢ ∑ (i : ι), 1 i • (v i * v i) = ∑ (i : ι), w i • ((∑ (i : ι), v i • ⇑((pi.basis_fun ℂ ι).units_smul (λ (i : ι), _.unit)) i) i * (∑ (i : ι), v i • ⇑((pi.basis_fun ℂ ι).units_smul (λ (i : ι), _.unit)) i) i)
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ	⊢ 1 j • (v j * v j) = w j • ((∑ (i : ι), v i • ⇑((pi.basis_fun ℂ ι).units_smul (λ (i : ι), _.unit)) i) j * (∑ (i : ι), v i • ⇑((pi.basis_fun ℂ ι).units_smul (λ (i : ι), _.unit)) i) j)
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ	⊢ (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2)
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ	⊢ ∀ (b : ι), b ∈ finset.univ → b ≠ j → (v b • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) b) j = 0		ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ	⊢ j ∉ finset.univ → (v j • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) j) j = 0
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	i : ι,	H : i ∈ finset.univ,	hij : i ≠ j	⊢ (v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = 0		ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ	⊢ j ∉ finset.univ → (v j • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) j) j = 0
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hj' : j ∉ finset.univ	⊢ (v j • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) j) j = 0
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ	⊢ (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2)		ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hsum : (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2)	⊢ 1 j • (v j * v j) = w j • ((∑ (i : ι), v i • ⇑((pi.basis_fun ℂ ι).units_smul (λ (i : ι), _.unit)) i) j * (∑ (i : ι), v i • ⇑((pi.basis_fun ℂ ι).units_smul (λ (i : ι), _.unit)) i) j)
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ	⊢ j ∉ finset.univ → (v j • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) j) j = 0
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hsum : (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2)	⊢ 1 j • (v j * v j) = w j • ((∑ (i : ι), v i • ⇑((pi.basis_fun ℂ ι).units_smul (λ (i : ι), _.unit)) i) j * (∑ (i : ι), v i • ⇑((pi.basis_fun ℂ ι).units_smul (λ (i : ι), _.unit)) i) j)
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hsum : (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2)	⊢ 1 j • (v j * v j) = w j • ((∑ (i : ι), v i • _.unit • ⇑(pi.basis_fun ℂ ι) i) j * (∑ (i : ι), v i • _.unit • ⇑(pi.basis_fun ℂ ι) i) j)
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hsum : (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2)	⊢ 1 j * (v j * v j) = w j • (v j • ↑(w j) ^ -(1 / 2) * v j • ↑(w j) ^ -(1 / 2))
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hsum : (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2),	this : 1 * v j * v j = ↑(w j) ^ -(1 / 2) * ↑(w j) ^ -(1 / 2) * ↑(w j) * v j * v j	⊢ 1 j * (v j * v j) = w j • (v j • ↑(w j) ^ -(1 / 2) * v j • ↑(w j) ^ -(1 / 2))
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hsum : (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2),	this : 1 * v j * v j = ↑(w j) ^ -(1 / 2) * ↑(w j) ^ -(1 / 2) * ↑(w j) * v j * v j	⊢ ↑(w j) ^ -(1 / 2) * ↑(w j) ^ -(1 / 2) * ↑(w j) * v j * v j = ↑(w j) * (v j * ↑(w j) ^ -(1 / 2) * (v j * ↑(w j) ^ -(1 / 2)))
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hsum : (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2),	this : 1 * v j * v j = ↑(w j) ^ -(1 / 2) * ↑(w j) ^ -(1 / 2) * ↑(w j) * v j * v j	⊢ 1 j * (v j * v j) = w j • (v j • ↑(w j) ^ -(1 / 2) * v j • ↑(w j) ^ -(1 / 2))		ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hsum : (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2)	⊢ 1 * v j * v j = ↑(w j) ^ -(1 / 2) * ↑(w j) ^ -(1 / 2) * ↑(w j) * v j * v j
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hsum : (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2)	⊢ 1 * v j * v j = ↑(w j) ^ -(1 / 2) * ↑(w j) ^ -(1 / 2) * ↑(w j) * v j * v j
ι : Type u_6,	_inst_8 : fintype ι,	_inst_14 : decidable_eq ι,	w : ι → units ℂ,	hw' : ∀ (i : ι), ↑(w i) ^ -(1 / 2) ≠ 0,	v : ι → ℂ,	j : ι,	hj : j ∈ finset.univ,	hsum : (∑ (i : ι), v i • ↑(_.unit) • ⇑(pi.basis_fun ℂ ι) i) j = v j • ↑(w j) ^ -(1 / 2)	⊢ -(1 / 2) + -(1 / 2) = -1
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ	⊢ ∀ (a b c : sesq_form R M I), a + b + c = a + (b + c)
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a b c : sesq_form R M I	⊢ a + b + c = a + (b + c)
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a b c : sesq_form R M I,	x y : M	⊢ ⇑(a + b + c) x y = ⇑(a + (b + c)) x y
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a b c : sesq_form R M I,	x y : M	⊢ a.sesq x y + b.sesq x y + c.sesq x y = a.sesq x y + (b.sesq x y + c.sesq x y)
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ	⊢ ∀ (a : sesq_form R M I), 0 + a = a
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a : sesq_form R M I	⊢ 0 + a = a
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a : sesq_form R M I,	x y : M	⊢ ⇑(0 + a) x y = ⇑a x y
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a : sesq_form R M I,	x y : M	⊢ 0 + a.sesq x y = a.sesq x y
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ	⊢ ∀ (a : sesq_form R M I), a + 0 = a
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a : sesq_form R M I	⊢ a + 0 = a
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a : sesq_form R M I,	x y : M	⊢ ⇑(a + 0) x y = ⇑a x y
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a : sesq_form R M I,	x y : M	⊢ a.sesq x y + 0 = a.sesq x y
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ	⊢ ∀ (a : sesq_form R M I), -a + a = 0
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a : sesq_form R M I	⊢ -a + a = 0
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a : sesq_form R M I,	x y : M	⊢ ⇑(-a + a) x y = ⇑0 x y
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a : sesq_form R M I,	x y : M	⊢ -a.sesq x y + a.sesq x y = 0
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ	⊢ ∀ (a b : sesq_form R M I), a + b = b + a
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a b : sesq_form R M I	⊢ a + b = b + a
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a b : sesq_form R M I,	x y : M	⊢ ⇑(a + b) x y = ⇑(b + a) x y
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	a b : sesq_form R M I,	x y : M	⊢ a.sesq x y + b.sesq x y = b.sesq x y + a.sesq x y
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	M₂ : Type w,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M₂,	S : sesq_form R M I,	f g : M₂ →ₗ[R] M	⊢ ∀ (x y z : M₂), ⇑S (⇑f (x + y)) (⇑g z) = ⇑S (⇑f x) (⇑g z) + ⇑S (⇑f y) (⇑g z)
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	M₂ : Type w,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M₂,	S : sesq_form R M I,	f g : M₂ →ₗ[R] M	⊢ ∀ (a : R) (x y : M₂), ⇑S (⇑f (a • x)) (⇑g y) = a * ⇑S (⇑f x) (⇑g y)
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	M₂ : Type w,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M₂,	S : sesq_form R M I,	f g : M₂ →ₗ[R] M	⊢ ∀ (x y z : M₂), ⇑S (⇑f x) (⇑g (y + z)) = ⇑S (⇑f x) (⇑g y) + ⇑S (⇑f x) (⇑g z)
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	M₂ : Type w,	_inst_4 : add_comm_group M₂,	_inst_5 : module R M₂,	S : sesq_form R M I,	f g : M₂ →ₗ[R] M	⊢ ∀ (a : R) (x y : M₂), ⇑S (⇑f x) (⇑g (a • y)) = opposite.unop (⇑I a) * ⇑S (⇑f x) (⇑g y)
R : Type u,	M : Type v,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I : R ≃+* Rᵒᵖ,	S : sesq_form R M I,	x : M	⊢ ⇑S 0 x = 0
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m	⊢ ⇑(matrix.std_basis R n m) (i, j) = matrix.std_basis_matrix i j 1
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : i = a	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : ¬i = a	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : i = a,	hj : j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b		R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : i = a,	hj : ¬j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b		R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : ¬i = a,	hj : j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b		R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : ¬i = a,	hj : ¬j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : i = a,	hj : j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : i = a,	hj : ¬j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : i = a,	hj : ¬j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b		R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : ¬i = a,	hj : j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b		R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : ¬i = a,	hj : ¬j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : ¬i = a,	hj : j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : ¬i = a,	hj : j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b		R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : ¬i = a,	hj : ¬j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
R : Type u_1,	n : Type u_2,	m : Type u_3,	_inst_1 : fintype m,	_inst_2 : fintype n,	_inst_3 : semiring R,	i : n,	j : m,	_inst_4 : decidable_eq n,	_inst_5 : decidable_eq m,	a : n,	b : m,	hi : ¬i = a,	hj : ¬j = b	⊢ ⇑(matrix.std_basis R n m) (i, j) a b = matrix.std_basis_matrix i j 1 a b
a b c : Prop,	_inst_1 : decidable a	⊢ a → b ∨ c ↔ (a → b) ∨ (a → c)
α : Sort u_1,	p : α → Prop,	a' : α	⊢ (∃ (a : α), a' = a ∧ p a) ↔ p a'
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b)	⊢ function.injective (λ (a' : α), ite (a' = a) b (ite (⇑f a' = b) (⇑f a) (⇑f a')))
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h : (λ (a' : α), ite (a' = a) b (ite (⇑f a' = b) (⇑f a) (⇑f a'))) x = (λ (a' : α), ite (a' = a) b (ite (⇑f a' = b) (⇑f a) (⇑f a'))) y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h : ite (x = a) b (ite (⇑f x = b) (⇑f a) (⇑f x)) = ite (y = a) b (ite (⇑f y = b) (⇑f a) (⇑f y))	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h : ite (x = a) b (ite (⇑f x = b) (⇑f a) (⇑f x)) = ite (y = a) b (ite (⇑f y = b) (⇑f a) (⇑f y))	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h : ite (x = a) b (ite (⇑f x = b) (⇑f a) (⇑f x)) = ite (y = a) b (ite (⇑f y = b) (⇑f a) (⇑f y))	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : x = a,	h_2 : y = a,	h : b = b	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : x = a,	h_2 : ¬y = a,	h_3 : ⇑f y = b,	h : b = ⇑f a	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : x = a,	h_2 : ¬y = a,	h_3 : ¬⇑f y = b,	h : b = ⇑f y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : ¬x = a,	h_2 : ⇑f x = b,	h_3 : y = a,	h : ⇑f a = b	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : ¬x = a,	h_2 : ⇑f x = b,	h_3 : ¬y = a,	h_4 : ⇑f y = b,	h : ⇑f a = ⇑f a	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : ¬x = a,	h_2 : ⇑f x = b,	h_3 : ¬y = a,	h_4 : ¬⇑f y = b,	h : ⇑f a = ⇑f y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : ¬x = a,	h_2 : ¬⇑f x = b,	h_3 : y = a,	h : ⇑f x = b	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : ¬x = a,	h_2 : ¬⇑f x = b,	h_3 : ¬y = a,	h_4 : ⇑f y = b,	h : ⇑f x = ⇑f a	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : ¬x = a,	h_2 : ¬⇑f x = b,	h_3 : ¬y = a,	h_4 : ¬⇑f y = b,	h : ⇑f x = ⇑f y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : ¬x = a,	h_2 : ¬⇑f x = b,	h_3 : ¬y = a,	h_4 : ¬⇑f y = b,	h : ⇑f x = ⇑f y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : x = a,	h_2 : y = a,	h : b = b	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : x = a,	h_2 : ¬y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f y),	h : ⇑f y = ⇑f a	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : x = a,	h_2 : ¬y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f y),	h_3 : ¬⇑f y = ⇑f y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : ¬x = a,	h_3 : y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f x),	h : ⇑f a = ⇑f x	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : ¬x = a,	h_3 : ¬y = a,	h : ⇑f a = ⇑f a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f x),	h_4 : ⇑f y = ⇑f x	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : ¬x = a,	h_3 : ¬y = a,	h : ⇑f a = ⇑f y,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f x),	h_4 : ¬⇑f y = ⇑f x	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : ¬x = a,	h_3 : y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f x),	h_2 : ¬⇑f x = ⇑f x	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : ¬x = a,	h_3 : ¬y = a,	h : ⇑f x = ⇑f a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f y),	h_2 : ¬⇑f x = ⇑f y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : ¬x = a,	h_2 : ¬⇑f x = b,	h_3 : ¬y = a,	h_4 : ¬⇑f y = b,	h : ⇑f x = ⇑f y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : ¬x = a,	h_2 : ¬⇑f x = b,	h_3 : ¬y = a,	h_4 : ¬⇑f y = b,	h : ⇑f x = ⇑f y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h : ite (x = a) b (ite (⇑f x = b) (⇑f a) (⇑f x)) = ite (y = a) b (ite (⇑f y = b) (⇑f a) (⇑f y))	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : x = a,	h_2 : y = a,	h : b = b	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : x = a,	h_2 : ¬y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f y),	h : y = a	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : x = a,	h_2 : ¬y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f y),	h_3 : ¬y = y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : ¬x = a,	h_3 : y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f x),	h : a = x	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : ¬x = a,	h_3 : ¬y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f x),	h : a = a,	h_4 : y = x	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : ¬x = a,	h_3 : ¬y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f x),	h : a = y,	h_4 : ¬y = x	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : ¬x = a,	h_3 : y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f x),	h_2 : ¬x = x	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	_inst_1 : Π (a' : α), decidable (a' = a),	x y : α,	h_1 : ¬x = a,	h_3 : ¬y = a,	_inst_2 : Π (a' : α), decidable (⇑f a' = ⇑f y),	h : x = a,	h_2 : ¬x = y	⊢ x = y
α : Sort ?,	β : Sort ?,	f : α ↪ β,	a : α,	b : β,	_inst_1 : Π (a' : α), decidable (a' = a),	_inst_2 : Π (a' : α), decidable (⇑f a' = b),	x y : α,	h_1 : ¬x = a,	h_2 : ¬⇑f x = b,	h_3 : ¬y = a,	h_4 : ¬⇑f y = b,	h : x = y	⊢ x = y
α α' : Sort u,	β : α → Sort v,	β' : α' → Sort v,	f : Π (a : α), β a,	f' : Π (a : α'), β' a,	hα : α = α',	h : ∀ (a : α) (a' : α'), a == a' → f a == f' a'	⊢ f == f'
α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a'	⊢ f == f'
α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a',	a : α	⊢ f a == f' a
α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a'	⊢ ∀ (a : α), f a == f' a		α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a',	this : ∀ (a : α), f a == f' a	⊢ f == f'
α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a'	⊢ ∀ (a : α), f a == f' a
α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a',	this : ∀ (a : α), f a == f' a	⊢ f == f'
α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a',	this : ∀ (a : α), f a == f' a,	a : α	⊢ β a = β' a
α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a',	this : ∀ (a : α), f a == f' a	⊢ β = β'		α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a',	this : ∀ (a : α), f a == f' a,	this : β = β'	⊢ f == f'
α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a',	this : ∀ (a : α), f a == f' a	⊢ β = β'
α : Sort u,	β : α → Sort v,	f : Π (a : α), β a,	β' : α → Sort v,	f' : Π (a : α), β' a,	h : ∀ (a a' : α), a == a' → f a == f' a',	this : ∀ (a : α), f a == f' a,	this : β = β'	⊢ f == f'
α : Sort u,	β : α → Sort v,	f f' : Π (a : α), β a,	h : ∀ (a a' : α), a == a' → f a == f' a',	this : ∀ (a : α), f a == f' a	⊢ f == f'
α : Sort u,	β : α → Sort v,	f f' : Π (a : α), β a,	h : ∀ (a a' : α), a == a' → f a == f' a',	this : ∀ (a : α), f a == f' a	⊢ f = f'
α : Sort u,	β : α → Sort v,	f f' : Π (a : α), β a,	h : ∀ (a a' : α), a == a' → f a == f' a',	this : ∀ (a : α), f a == f' a,	a : α	⊢ f a = f' a
α : Type u,	f : α → α,	iterate_add : ∀ (m n : ℕ), f^[m + n] = f^[m] ∘ (f^[n]),	m n : ℕ	⊢ f^[m + n.succ] = f^[m] ∘ (f^[n.succ])
α : Type u_1,	_inst_1 : nontrivial α,	_inst_2 : decidable_eq α,	x : α	⊢ ∃ (y : α), y ≠ x
α : Type u_1,	_inst_1 : nontrivial α,	_inst_2 : decidable_eq α,	x y y' : α,	h : y ≠ y'	⊢ ∃ (y : α), y ≠ x
α : Type u_1,	_inst_1 : nontrivial α,	_inst_2 : decidable_eq α,	x y y' : α,	h : y ≠ y',	hx : x = y	⊢ ∃ (y : α), y ≠ x
α : Type u_1,	_inst_1 : nontrivial α,	_inst_2 : decidable_eq α,	x y y' : α,	h : y ≠ y',	hx : x = y	⊢ ∃ (y : α), y ≠ x		α : Type u_1,	_inst_1 : nontrivial α,	_inst_2 : decidable_eq α,	x y y' : α,	h : y ≠ y',	hx : ¬x = y	⊢ ∃ (y : α), y ≠ x
α : Type u_1,	_inst_1 : nontrivial α,	_inst_2 : decidable_eq α,	x y y' : α,	hx : x = y,	h : x ≠ y'	⊢ ∃ (y : α), y ≠ x
α : Type u_1,	_inst_1 : nontrivial α,	_inst_2 : decidable_eq α,	x y y' : α,	h : y ≠ y',	hx : ¬x = y	⊢ ∃ (y : α), y ≠ x
α : Type u_1,	r : α → α → Prop,	h : symmetric r	⊢ symmetric (relation.refl_trans_gen r)
α : Type u_1,	r : α → α → Prop,	h : symmetric r,	x y : α,	h : relation.refl_trans_gen r x y	⊢ relation.refl_trans_gen r y x
α : Type u_1,	r : α → α → Prop,	h : symmetric r,	x y : α	⊢ relation.refl_trans_gen r x x		case relation.refl_trans_gen.tail	α : Type u_1,	r : α → α → Prop,	h : symmetric r,	x y z w : α,	a : relation.refl_trans_gen r x z,	b : r z w,	c : relation.refl_trans_gen r z x	⊢ relation.refl_trans_gen r w x
α : Type u_1,	r : α → α → Prop,	h : symmetric r,	x y : α	⊢ relation.refl_trans_gen r x x
α : Type u_1,	r : α → α → Prop,	h : symmetric r,	x y z w : α,	a : relation.refl_trans_gen r x z,	b : r z w,	c : relation.refl_trans_gen r z x	⊢ relation.refl_trans_gen r w x
α : Type u_1,	r : α → α → Prop,	b : α,	P : Π (a : α), relation.refl_trans_gen r a b → Prop,	a : α,	h : relation.refl_trans_gen r a b,	refl : P b relation.refl_trans_gen.refl,	head : ∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c b), P c h → P a _	⊢ P a h
α : Type u_1,	r : α → α → Prop,	a b : α,	P : Π (a_1 : α), relation.refl_trans_gen r a_1 a → Prop,	refl : P a relation.refl_trans_gen.refl,	head : ∀ {a_1 c : α} (h' : r a_1 c) (h : relation.refl_trans_gen r c a), P c h → P a_1 _	⊢ P a relation.refl_trans_gen.refl
α : Type u_1,	r : α → α → Prop,	a b : α,	P : Π (a_1 : α), relation.refl_trans_gen r a_1 a → Prop,	refl : P a relation.refl_trans_gen.refl,	head : ∀ {a_1 c : α} (h' : r a_1 c) (h : relation.refl_trans_gen r c a), P c h → P a_1 _	⊢ P a relation.refl_trans_gen.refl		case relation.refl_trans_gen.tail	α : Type u_1,	r : α → α → Prop,	a b h_b h_c : α,	h_ᾰ : relation.refl_trans_gen r a h_b,	h_ᾰ_1 : r h_b h_c,	h_ih : ∀ {P : Π (a : α), relation.refl_trans_gen r a h_b → Prop}, P h_b relation.refl_trans_gen.refl → (∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c h_b), P c h → P a _) → P a h_ᾰ,	P : Π (a : α), relation.refl_trans_gen r a h_c → Prop,	refl : P h_c relation.refl_trans_gen.refl,	head : ∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c h_c), P c h → P a _	⊢ P a _
α : Type u_1,	r : α → α → Prop,	a b h_b h_c : α,	h_ᾰ : relation.refl_trans_gen r a h_b,	h_ᾰ_1 : r h_b h_c,	h_ih : ∀ {P : Π (a : α), relation.refl_trans_gen r a h_b → Prop}, P h_b relation.refl_trans_gen.refl → (∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c h_b), P c h → P a _) → P a h_ᾰ,	P : Π (a : α), relation.refl_trans_gen r a h_c → Prop,	refl : P h_c relation.refl_trans_gen.refl,	head : ∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c h_c), P c h → P a _	⊢ P a _
α : Type u_1,	r : α → α → Prop,	a b b c : α,	hab : relation.refl_trans_gen r a b,	hbc : r b c,	ih : ∀ {P : Π (a : α), relation.refl_trans_gen r a b → Prop}, P b relation.refl_trans_gen.refl → (∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c b), P c h → P a _) → P a hab,	P : Π (a : α), relation.refl_trans_gen r a c → Prop,	refl : P c relation.refl_trans_gen.refl,	head : ∀ {a c_1 : α} (h' : r a c_1) (h : relation.refl_trans_gen r c_1 c), P c_1 h → P a _	⊢ P a _
α : Type u_1,	r : α → α → Prop,	a b b c : α,	hab : relation.refl_trans_gen r a b,	hbc : r b c,	ih : ∀ {P : Π (a : α), relation.refl_trans_gen r a b → Prop}, P b relation.refl_trans_gen.refl → (∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c b), P c h → P a _) → P a hab,	P : Π (a : α), relation.refl_trans_gen r a c → Prop,	refl : P c relation.refl_trans_gen.refl,	head : ∀ {a c_1 : α} (h' : r a c_1) (h : relation.refl_trans_gen r c_1 c), P c_1 h → P a _	⊢ P b _		α : Type u_1,	r : α → α → Prop,	a b b c : α,	hab : relation.refl_trans_gen r a b,	hbc : r b c,	ih : ∀ {P : Π (a : α), relation.refl_trans_gen r a b → Prop}, P b relation.refl_trans_gen.refl → (∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c b), P c h → P a _) → P a hab,	P : Π (a : α), relation.refl_trans_gen r a c → Prop,	refl : P c relation.refl_trans_gen.refl,	head : ∀ {a c_1 : α} (h' : r a c_1) (h : relation.refl_trans_gen r c_1 c), P c_1 h → P a _	⊢ ∀ {a c_1 : α} (h' : r a c_1) (h : relation.refl_trans_gen r c_1 b), P c_1 _ → P a _
α : Type u_1,	r : α → α → Prop,	a b b c : α,	hab : relation.refl_trans_gen r a b,	hbc : r b c,	ih : ∀ {P : Π (a : α), relation.refl_trans_gen r a b → Prop}, P b relation.refl_trans_gen.refl → (∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c b), P c h → P a _) → P a hab,	P : Π (a : α), relation.refl_trans_gen r a c → Prop,	refl : P c relation.refl_trans_gen.refl,	head : ∀ {a c_1 : α} (h' : r a c_1) (h : relation.refl_trans_gen r c_1 c), P c_1 h → P a _	⊢ P b _		α : Type u_1,	r : α → α → Prop,	a b b c : α,	hab : relation.refl_trans_gen r a b,	hbc : r b c,	ih : ∀ {P : Π (a : α), relation.refl_trans_gen r a b → Prop}, P b relation.refl_trans_gen.refl → (∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c b), P c h → P a _) → P a hab,	P : Π (a : α), relation.refl_trans_gen r a c → Prop,	refl : P c relation.refl_trans_gen.refl,	head : ∀ {a c_1 : α} (h' : r a c_1) (h : relation.refl_trans_gen r c_1 c), P c_1 h → P a _	⊢ ∀ {a c_1 : α} (h' : r a c_1) (h : relation.refl_trans_gen r c_1 b), P c_1 _ → P a _
α : Type u_1,	r : α → α → Prop,	a b b c : α,	hab : relation.refl_trans_gen r a b,	hbc : r b c,	ih : ∀ {P : Π (a : α), relation.refl_trans_gen r a b → Prop}, P b relation.refl_trans_gen.refl → (∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c b), P c h → P a _) → P a hab,	P : Π (a : α), relation.refl_trans_gen r a c → Prop,	refl : P c relation.refl_trans_gen.refl,	head : ∀ {a c_1 : α} (h' : r a c_1) (h : relation.refl_trans_gen r c_1 c), P c_1 h → P a _	⊢ ∀ {a c_1 : α} (h' : r a c_1) (h : relation.refl_trans_gen r c_1 b), P c_1 _ → P a _
α : Type u_1,	r : α → α → Prop,	a b b c : α,	hab : relation.refl_trans_gen r a b,	hbc : r b c,	ih : ∀ {P : Π (a : α), relation.refl_trans_gen r a b → Prop}, P b relation.refl_trans_gen.refl → (∀ {a c : α} (h' : r a c) (h : relation.refl_trans_gen r c b), P c h → P a _) → P a hab,	P : Π (a : α), relation.refl_trans_gen r a c → Prop,	refl : P c relation.refl_trans_gen.refl,	head : ∀ {a c_1 : α} (h' : r a c_1) (h : relation.refl_trans_gen r c_1 c), P c_1 h → P a _	⊢ ∀ (a a' : α) (ᾰ : r a a') (ᾰ_1 : relation.refl_trans_gen r a' b), P a' _ → P a _
α : Type u_1,	_inst_1 : topological_space α,	_inst_2 : t1_space α,	_inst_3 : encodable α	⊢ borel α = ⊤
α : Type u_1,	_inst_1 : topological_space α,	_inst_2 : t1_space α,	_inst_3 : encodable α,	s : set α,	hs : ⊤.measurable_set' s	⊢ (borel α).measurable_set' (⋃ (x : α) (H : x ∈ s), {x})
α : Type u_1,	_inst_1 : topological_space α,	_inst_2 : t1_space α,	_inst_3 : encodable α,	s : set α,	hs : ⊤.measurable_set' s	⊢ ∀ (b : α), b ∈ s → measurable_set {b}
β : Type u_2,	γ : Type u_3,	δ : Type u_5,	_inst_4 : topological_space β,	_inst_5 : measurable_space β,	_inst_6 : borel_space β,	_inst_7 : topological_space γ,	_inst_8 : measurable_space γ,	_inst_9 : borel_space γ,	_inst_10 : measurable_space δ,	f : δ → β,	μ : measure_theory.measure δ,	g : β → γ,	hg : closed_embedding g	⊢ ae_measurable (g ∘ f) μ ↔ ae_measurable f μ
β : Type u_2,	γ : Type u_3,	δ : Type u_5,	_inst_4 : topological_space β,	_inst_5 : measurable_space β,	_inst_6 : borel_space β,	_inst_7 : topological_space γ,	_inst_8 : measurable_space γ,	_inst_9 : borel_space γ,	_inst_10 : measurable_space δ,	f : δ → β,	μ : measure_theory.measure δ,	g : β → γ,	hg : closed_embedding g,	h : is_empty β	⊢ ae_measurable (g ∘ f) μ ↔ ae_measurable f μ
β : Type u_2,	γ : Type u_3,	δ : Type u_5,	_inst_4 : topological_space β,	_inst_5 : measurable_space β,	_inst_6 : borel_space β,	_inst_7 : topological_space γ,	_inst_8 : measurable_space γ,	_inst_9 : borel_space γ,	_inst_10 : measurable_space δ,	f : δ → β,	μ : measure_theory.measure δ,	g : β → γ,	hg : closed_embedding g,	h : is_empty β,	_inst : is_empty δ	⊢ ae_measurable (g ∘ f) μ ↔ ae_measurable f μ
β : Type u_2,	γ : Type u_3,	δ : Type u_5,	_inst_4 : topological_space β,	_inst_5 : measurable_space β,	_inst_6 : borel_space β,	_inst_7 : topological_space γ,	_inst_8 : measurable_space γ,	_inst_9 : borel_space γ,	_inst_10 : measurable_space δ,	f : δ → β,	μ : measure_theory.measure δ,	g : β → γ,	hg : closed_embedding g,	h : is_empty β	⊢ ae_measurable (g ∘ f) μ ↔ ae_measurable f μ		β : Type u_2,	γ : Type u_3,	δ : Type u_5,	_inst_4 : topological_space β,	_inst_5 : measurable_space β,	_inst_6 : borel_space β,	_inst_7 : topological_space γ,	_inst_8 : measurable_space γ,	_inst_9 : borel_space γ,	_inst_10 : measurable_space δ,	f : δ → β,	μ : measure_theory.measure δ,	g : β → γ,	hg : closed_embedding g,	h : nonempty β	⊢ ae_measurable (g ∘ f) μ ↔ ae_measurable f μ
β : Type u_2,	γ : Type u_3,	δ : Type u_5,	_inst_4 : topological_space β,	_inst_5 : measurable_space β,	_inst_6 : borel_space β,	_inst_7 : topological_space γ,	_inst_8 : measurable_space γ,	_inst_9 : borel_space γ,	_inst_10 : measurable_space δ,	f : δ → β,	μ : measure_theory.measure δ,	g : β → γ,	hg : closed_embedding g,	h : nonempty β	⊢ ae_measurable (g ∘ f) μ ↔ ae_measurable f μ
β : Type u_2,	γ : Type u_3,	δ : Type u_5,	_inst_4 : topological_space β,	_inst_5 : measurable_space β,	_inst_6 : borel_space β,	_inst_7 : topological_space γ,	_inst_8 : measurable_space γ,	_inst_9 : borel_space γ,	_inst_10 : measurable_space δ,	f : δ → β,	μ : measure_theory.measure δ,	g : β → γ,	hg : closed_embedding g,	h : nonempty β,	hf : ae_measurable (g ∘ f) μ	⊢ ae_measurable f μ
β : Type u_2,	γ : Type u_3,	δ : Type u_5,	_inst_4 : topological_space β,	_inst_5 : measurable_space β,	_inst_6 : borel_space β,	_inst_7 : topological_space γ,	_inst_8 : measurable_space γ,	_inst_9 : borel_space γ,	_inst_10 : measurable_space δ,	f : δ → β,	μ : measure_theory.measure δ,	g : β → γ,	hg : closed_embedding g,	h : nonempty β,	hf : ae_measurable (g ∘ f) μ	⊢ f = function.inv_fun g ∘ g ∘ f
α : Type u_1,	_inst_1 : topological_space α,	_inst_2 : t1_space α,	_inst_3 : encodable α,	s : set α,	hs : ⊤.measurable_set' s,	x : α,	hx : x ∈ s	⊢ measurable_set {x}
β : Type u_2,	γ : Type u_3,	δ : Type u_5,	_inst_4 : topological_space β,	_inst_5 : measurable_space β,	_inst_6 : borel_space β,	_inst_7 : topological_space γ,	_inst_8 : measurable_space γ,	_inst_9 : borel_space γ,	_inst_10 : measurable_space δ,	f : δ → β,	μ : measure_theory.measure δ,	g : β → γ,	hg : closed_embedding g,	h : nonempty β,	hf : ae_measurable (g ∘ f) μ,	x : δ	⊢ f x = (function.inv_fun g ∘ g ∘ f) x
α : Type u_1,	_inst_1 : topological_space α,	_inst_2 : t1_space α,	_inst_3 : encodable α,	s : set α,	hs : ⊤.measurable_set' s,	x : α,	hx : x ∈ s	⊢ measurable_set {x}ᶜ
α : Type u_1,	_inst_1 : topological_space α,	_inst_2 : t1_space α,	_inst_3 : encodable α,	s : set α,	hs : ⊤.measurable_set' s,	x : α,	hx : x ∈ s	⊢ {x}ᶜ ∈ {s : set α | is_open s}
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : μ = 0	⊢ ae_measurable g μ
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : μ = 0	⊢ ae_measurable g 0
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b)	⊢ ae_measurable g μ
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : μ = 0	⊢ ae_measurable g μ		α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0	⊢ ae_measurable g μ
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0	⊢ μ.ae.ne_bot
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0	⊢ ae_measurable g μ
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0	⊢ μ.ae.ne_bot		α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot	⊢ ae_measurable g μ
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : nonempty ι	⊢ ae_measurable g μ
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot	⊢ ae_measurable g μ
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : nonempty ι	⊢ ae_measurable g μ		α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι	⊢ ae_measurable g μ
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι	⊢ ae_measurable g μ
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι,	this : ∃ (x : δ), g =ᵐ[μ] λ (y : δ), g x	⊢ ae_measurable g μ
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι	⊢ ∃ (x : δ), g =ᵐ[μ] λ (y : δ), g x
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι	⊢ ∀ (x : δ), {a : α | ∃ (i : ι), f i x = a} = ∅
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι,	x : δ	⊢ {a : α | ∃ (i : ι), f i x = a} = ∅
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι,	x : δ,	y : α	⊢ y ∈ {a : α | ∃ (i : ι), f i x = a} ↔ y ∈ ∅
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι	⊢ ∀ (x : δ), {a : α | ∃ (i : ι), f i x = a} = ∅		α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι,	h_empty : ∀ (x : δ), {a : α | ∃ (i : ι), f i x = a} = ∅	⊢ ∃ (x : δ), g =ᵐ[μ] λ (y : δ), g x
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι,	x : δ,	y : α	⊢ ¬∃ (i : ι), f i x = y
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hg : ∀ᵐ (b : δ) ∂μ, is_lub {a : α | ∃ (i : ι), f i b = a} (g b),	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι,	h_empty : ∀ (x : δ), {a : α | ∃ (i : ι), f i x = a} = ∅	⊢ ∃ (x : δ), g =ᵐ[μ] λ (y : δ), g x
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	μ : measure_theory.measure δ,	_inst_14 : encodable ι,	f : ι → δ → α,	g : δ → α,	hf : ∀ (i : ι), ae_measurable (f i) μ,	hμ : ¬μ = 0,	_inst : μ.ae.ne_bot,	hι : ¬nonempty ι,	h_empty : ∀ (x : δ), {a : α | ∃ (i : ι), f i x = a} = ∅,	hg : ∀ᵐ (b : δ) ∂μ, is_lub ∅ (g b)	⊢ ∃ (x : δ), g =ᵐ[μ] λ (y : δ), g x
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : complete_linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	ι' : Type u_3,	f : ι → δ → α,	u : filter ι,	hf : ∀ (i : ι), measurable (f i),	p : ι' → Prop,	s : ι' → set ι,	hu : u.has_countable_basis p s,	hs : ∀ (i : ι'), (s i).countable	⊢ measurable (λ (x : δ), u.liminf (λ (i : ι), f i x))
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : complete_linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	ι' : Type u_3,	f : ι → δ → α,	u : filter ι,	hf : ∀ (i : ι), measurable (f i),	p : ι' → Prop,	s : ι' → set ι,	hu : u.has_countable_basis p s,	hs : ∀ (i : ι'), (s i).countable	⊢ measurable (λ (x : δ), ⨆ (i : ι') (hi : p i), ⨅ (a : ι) (H : a ∈ s i), f a x)
α : Type u_1,	δ : Type u_5,	_inst_1 : topological_space α,	_inst_2 : measurable_space α,	_inst_3 : borel_space α,	_inst_10 : measurable_space δ,	_inst_11 : complete_linear_order α,	_inst_12 : order_topology α,	_inst_13 : topological_space.second_countable_topology α,	ι : Type u_2,	ι' : Type u_3,	f : ι → δ → α,	u : filter ι,	hf : ∀ (i : ι), measurable (f i),	p : ι' → Prop,	s : ι' → set ι,	hu : u.has_countable_basis p s,	hs : ∀ (i : ι'), (s i).countable	⊢ ∀ (i : ι'), measurable (λ (x : δ), ⨅ (a : ι) (H : a ∈ s i), f a x)
ι : Type u_1,	α : ι → Type u_3,	_inst_1 : fintype ι,	h : Π (i : ι), measurable_space (α i),	C : Π (i : ι), set (set (α i)),	hC : ∀ (i : ι), measurable_space.generate_from (C i) = h i,	h2C : ∀ (i : ι), is_countably_spanning (C i)	⊢ measurable_space.generate_from (set.univ.pi '' set.univ.pi C) = measurable_space.pi
ι : Type u_1,	α : ι → Type u_3,	_inst_1 : fintype ι,	_inst_3 : Π (i : ι), measurable_space (α i),	μ : Π (i : ι), measure_theory.measure (α i),	_inst_4 : ∀ (i : ι), measure_theory.sigma_finite (μ i),	_inst_5 : Π (i : ι), partial_order (α i),	_inst_6 : ∀ (i : ι), measure_theory.has_no_atoms (μ i),	f g : Π (i : ι), α i	⊢ set.univ.pi (λ (i : ι), set.Ico (f i) (g i)) =ᵐ[measure_theory.measure.pi μ] set.univ.pi (λ (i : ι), set.Icc (f i) (g i))
ι : Type u_1,	α : ι → Type u_3,	_inst_1 : fintype ι,	_inst_3 : Π (i : ι), measurable_space (α i),	μ : Π (i : ι), measure_theory.measure (α i),	_inst_4 : ∀ (i : ι), measure_theory.sigma_finite (μ i),	_inst_5 : Π (i : ι), partial_order (α i),	_inst_6 : ∀ (i : ι), measure_theory.has_no_atoms (μ i),	f g : Π (i : ι), α i	⊢ set.univ.pi (λ (i : ι), set.Ico (f i) (g i)) =ᵐ[measure_theory.measure.pi μ] set.Icc f g
β : Type u_4,	E : Type u_5,	_inst_3 : normed_group E,	_inst_4 : normed_space ℝ E,	_inst_5 : measurable_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : borel_space E,	_inst_8 : complete_space E,	ι : Type u_1,	_inst_9 : unique ι,	_inst_10 : measure_theory.measure_space β,	f : β → E,	s : set β	⊢ ∫ (y : ι → β) in function.eval (inhabited.default ι) ⁻¹' s, f (y (inhabited.default ι)) = ∫ (x : β) in s, f x
α : Type u_1,	β : Type u_3,	_inst_1 : measurable_space α,	_inst_3 : measurable_space β,	ν : measure_theory.measure β,	_inst_8 : measure_theory.sigma_finite ν,	x : α	⊢ (measure_theory.measure.dirac x).prod ν = ⇑(measure_theory.measure.map (prod.mk x)) ν
α : Type u_1,	β : Type u_3,	_inst_1 : measurable_space α,	_inst_3 : measurable_space β,	ν : measure_theory.measure β,	_inst_8 : measure_theory.sigma_finite ν,	x : α,	s : set α,	t : set β,	hs : measurable_set s,	ht : measurable_set t	⊢ ⇑(⇑(measure_theory.measure.map (prod.mk x)) ν) (set.prod s t) = ⇑(measure_theory.measure.dirac x) s * ⇑ν t
α : Type u_1,	_inst_1 : measurable_space α,	j : measure_theory.jordan_decomposition α,	r : ℝ≥0	⊢ (r • j).to_signed_measure = r • j.to_signed_measure
α : Type u_1,	_inst_1 : measurable_space α,	j : measure_theory.jordan_decomposition α,	r : ℝ≥0,	i : set α,	hi : measurable_set i	⊢ ⇑((r • j).to_signed_measure) i = ⇑(r • j.to_signed_measure) i
α : Type u_1,	_inst_1 : measurable_space α,	j : measure_theory.jordan_decomposition α,	r : ℝ≥0,	i : set α,	hi : measurable_set i	⊢ (⇑(r • j.pos_part) i).to_real - (⇑(r • j.neg_part) i).to_real = (r • ⇑(j.pos_part) i).to_real - (r • ⇑(j.neg_part) i).to_real
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hsv : 0.restrict v ≤ measure_theory.vector_measure.restrict s v,	hs : ⇑s (u Δ v) = 0	⊢ ⇑s (u \ v) = 0 ∧ ⇑s (v \ u) = 0
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j	⊢ ⇑s (u \ v) = 0 ∧ ⇑s (v \ u) = 0		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j	⊢ measurable_set u		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hsv : 0.restrict v ≤ measure_theory.vector_measure.restrict s v,	hs : ⇑s (u Δ v) = 0	⊢ measurable_set v
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	a : ⇑0 (u \ v) ≤ ⇑s (u \ v)	⊢ ⇑s (u \ v) = 0 ∧ ⇑s (v \ u) = 0		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j	⊢ measurable_set u		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hsv : 0.restrict v ≤ measure_theory.vector_measure.restrict s v,	hs : ⇑s (u Δ v) = 0	⊢ measurable_set v
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	a : ⇑0 (u \ v) ≤ ⇑s (u \ v),	b : ⇑0 (v \ u) ≤ ⇑s (v \ u)	⊢ ⇑s (u \ v) = 0 ∧ ⇑s (v \ u) = 0		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j	⊢ measurable_set u		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hsv : 0.restrict v ≤ measure_theory.vector_measure.restrict s v,	hs : ⇑s (u Δ v) = 0	⊢ measurable_set v
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	a : ⇑0 (u \ v) ≤ ⇑s (u \ v),	b : ⇑0 (v \ u) ≤ ⇑s (v \ u),	hs : ⇑s (u \ v) + ⇑s (v \ u) = 0	⊢ ⇑s (u \ v) = 0 ∧ ⇑s (v \ u) = 0		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	a : ⇑0 (u \ v) ≤ ⇑s (u \ v),	b : ⇑0 (v \ u) ≤ ⇑s (v \ u)	⊢ t2_space ℝ		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j	⊢ measurable_set u		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hsv : 0.restrict v ≤ measure_theory.vector_measure.restrict s v,	hs : ⇑s (u Δ v) = 0	⊢ measurable_set v
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	hs : ⇑s (u \ v) + ⇑s (v \ u) = 0,	b : 0 ≤ ⇑s (v \ u),	a : 0 ≤ ⇑s (u \ v)	⊢ ⇑s (u \ v) = 0 ∧ ⇑s (v \ u) = 0		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	a : ⇑0 (u \ v) ≤ ⇑s (u \ v),	b : ⇑0 (v \ u) ≤ ⇑s (v \ u)	⊢ t2_space ℝ		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j	⊢ measurable_set u		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hsv : 0.restrict v ≤ measure_theory.vector_measure.restrict s v,	hs : ⇑s (u Δ v) = 0	⊢ measurable_set v
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	hs : ⇑s (u \ v) + ⇑s (v \ u) = 0,	b : 0 ≤ ⇑s (v \ u),	a : 0 ≤ ⇑s (u \ v)	⊢ ⇑s (u \ v) = 0
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	hs : ⇑s (u \ v) + ⇑s (v \ u) = 0,	b : 0 ≤ ⇑s (v \ u),	a : 0 ≤ ⇑s (u \ v)	⊢ ⇑s (v \ u) = 0
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	a : ⇑0 (u \ v) ≤ ⇑s (u \ v),	b : ⇑0 (v \ u) ≤ ⇑s (v \ u)	⊢ t2_space ℝ
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j	⊢ measurable_set u
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hsv : 0.restrict v ≤ measure_theory.vector_measure.restrict s v,	hs : ⇑s (u Δ v) = 0	⊢ measurable_set v
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	a : ⇑0 (u \ v) ≤ ⇑s (u \ v),	b : ⇑0 (v \ u) ≤ ⇑s (v \ u)	⊢ t2_space ℝ
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j	⊢ measurable_set u
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hsv : 0.restrict v ≤ measure_theory.vector_measure.restrict s v,	hs : ⇑s (u Δ v) = 0	⊢ measurable_set v
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	hs : ⇑s (u \ v) + ⇑s (v \ u) = 0,	b : 0 ≤ ⇑s (v \ u),	a : 0 ≤ ⇑s (u \ v)	⊢ ⇑s (u \ v) = 0		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	hs : ⇑s (u \ v) + ⇑s (v \ u) = 0,	b : 0 ≤ ⇑s (v \ u),	a : 0 ≤ ⇑s (u \ v)	⊢ ⇑s (v \ u) = 0		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j,	hsu : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ u → ⇑0 j ≤ ⇑s j,	a : ⇑0 (u \ v) ≤ ⇑s (u \ v),	b : ⇑0 (v \ u) ≤ ⇑s (v \ u)	⊢ t2_space ℝ		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j	⊢ measurable_set u		α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hsv : 0.restrict v ≤ measure_theory.vector_measure.restrict s v,	hs : ⇑s (u Δ v) = 0	⊢ measurable_set v
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hs : ⇑s (u Δ v) = 0,	hsv : ∀ ⦃j : set α⦄, measurable_set j → j ⊆ v → ⇑0 j ≤ ⇑s j	⊢ measurable_set u
α : Type u_1,	_inst_1 : measurable_space α,	s : measure_theory.signed_measure α,	u v : set α,	hu : measurable_set u,	hv : measurable_set v,	hsu : 0.restrict u ≤ measure_theory.vector_measure.restrict s u,	hsv : 0.restrict v ≤ measure_theory.vector_measure.restrict s v,	hs : ⇑s (u Δ v) = 0	⊢ measurable_set v
α : Type u_1,	_inst_1 : measurable_space α	⊢ 0.total_variation = 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	hs : s ⊥ₘ ν,	hadd : μ = s + ν.with_density f	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	hs : s ⊥ₘ ν,	hadd : μ = s + ν.with_density f,	_inst : μ.have_lebesgue_decomposition ν	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	hs : s ⊥ₘ ν,	hadd : μ = s + ν.with_density f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hsing : μ.singular_part ν ⊥ₘ ν,	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν)	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	hadd : μ = s + ν.with_density f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f	⊢ ⇑ν (S ∩ T)ᶜ = 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f	⊢ ⇑ν (Sᶜ ∪ Tᶜ) = 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f	⊢ ⇑ν Sᶜ + ⇑ν Tᶜ ≤ 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f	⊢ ⇑ν (S ∩ T)ᶜ = 0		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f	⊢ 0 ≤ 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0	⊢ s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A	⊢ ⇑(s.restrict (S ∩ T)ᶜ) A = ⇑((μ.singular_part ν).restrict (S ∩ T)ᶜ) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A	⊢ ⇑(ν.with_density f) (A ∩ (S ∩ T)ᶜ) = 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A	⊢ ⇑ν (A ∩ (S ∩ T)ᶜ) = 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A	⊢ ⇑(ν.with_density f) (A ∩ (S ∩ T)ᶜ) = 0		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A,	hf : ⇑(ν.with_density f) (A ∩ (S ∩ T)ᶜ) = 0	⊢ ⇑(s.restrict (S ∩ T)ᶜ) A = ⇑((μ.singular_part ν).restrict (S ∩ T)ᶜ) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A	⊢ ⇑ν (A ∩ (S ∩ T)ᶜ) ≤ 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A,	hf : ⇑(ν.with_density f) (A ∩ (S ∩ T)ᶜ) = 0	⊢ ⇑(s.restrict (S ∩ T)ᶜ) A = ⇑((μ.singular_part ν).restrict (S ∩ T)ᶜ) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A,	hf : ⇑(ν.with_density f) (A ∩ (S ∩ T)ᶜ) = 0	⊢ ⇑(ν.with_density (μ.rn_deriv ν)) (A ∩ (S ∩ T)ᶜ) = 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A,	hf : ⇑(ν.with_density f) (A ∩ (S ∩ T)ᶜ) = 0	⊢ ⇑ν (A ∩ (S ∩ T)ᶜ) = 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A,	hf : ⇑(ν.with_density f) (A ∩ (S ∩ T)ᶜ) = 0	⊢ ⇑(ν.with_density (μ.rn_deriv ν)) (A ∩ (S ∩ T)ᶜ) = 0		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A,	hf : ⇑(ν.with_density f) (A ∩ (S ∩ T)ᶜ) = 0,	hrn : ⇑(ν.with_density (μ.rn_deriv ν)) (A ∩ (S ∩ T)ᶜ) = 0	⊢ ⇑(s.restrict (S ∩ T)ᶜ) A = ⇑((μ.singular_part ν).restrict (S ∩ T)ᶜ) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A,	hf : ⇑(ν.with_density f) (A ∩ (S ∩ T)ᶜ) = 0	⊢ ⇑ν (A ∩ (S ∩ T)ᶜ) ≤ 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	A : set α,	hA : measurable_set A,	hf : ⇑(ν.with_density f) (A ∩ (S ∩ T)ᶜ) = 0,	hrn : ⇑(ν.with_density (μ.rn_deriv ν)) (A ∩ (S ∩ T)ᶜ) = 0	⊢ ⇑(s.restrict (S ∩ T)ᶜ) A = ⇑((μ.singular_part ν).restrict (S ∩ T)ᶜ) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0	⊢ s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ	⊢ ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A	⊢ ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A	⊢ ⇑s (A ∩ (S ∩ T)) = 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A	⊢ ⇑s (A ∩ (S ∩ T)) ≤ 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A	⊢ ⇑s (A ∩ (S ∩ T)) = 0		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A,	hsinter : ⇑s (A ∩ (S ∩ T)) = 0	⊢ ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A,	hsinter : ⇑s (A ∩ (S ∩ T)) = 0	⊢ ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A,	hsinter : ⇑s (A ∩ (S ∩ T)) = 0	⊢ disjoint (A ∩ (S ∩ T)ᶜ) (A ∩ (S ∩ T))
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A,	hsinter : ⇑s (A ∩ (S ∩ T)) = 0	⊢ disjoint (A ∩ (S ∩ T)ᶜ) (A ∩ (S ∩ T))		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A,	hsinter : ⇑s (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T)ᶜ)		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A,	hsinter : ⇑s (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T))
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A,	hsinter : ⇑s (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T)ᶜ)		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A,	hsinter : ⇑s (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T))
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A,	hsinter : ⇑s (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T)ᶜ)
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ	⊢ ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	A : set α,	hA : measurable_set A,	hsinter : ⇑s (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T))
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A	⊢ s = μ.singular_part ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A	⊢ ⇑s A = ⇑(μ.singular_part ν) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A	⊢ ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A	⊢ ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) ≤ 0
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A	⊢ ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A,	hμinter : ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0	⊢ ⇑s A = ⇑(μ.singular_part ν) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A,	hμinter : ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0	⊢ ⇑s A = ⇑(μ.singular_part ν) A
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A,	hμinter : ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0	⊢ disjoint (A ∩ (S ∩ T)ᶜ) (A ∩ (S ∩ T))
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A,	hμinter : ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0	⊢ disjoint (A ∩ (S ∩ T)ᶜ) (A ∩ (S ∩ T))		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A,	hμinter : ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T)ᶜ)		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A,	hμinter : ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T))
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A,	hμinter : ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T)ᶜ)		α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A,	hμinter : ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T))
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A,	hμinter : ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T)ᶜ)
α : Type u_1,	_inst_1 : measurable_space α,	μ ν s : measure_theory.measure α,	f : α → ℝ≥0∞,	hf : measurable f,	_inst : μ.have_lebesgue_decomposition ν,	hmeas : measurable (μ.rn_deriv ν),	hadd' : μ = μ.singular_part ν + ν.with_density (μ.rn_deriv ν),	S : set α,	hS₁ : measurable_set S,	hS₂ : ⇑s S = 0,	hS₃ : ⇑ν Sᶜ = 0,	T : set α,	hT₁ : measurable_set T,	hT₂ : ⇑(μ.singular_part ν) T = 0,	hT₃ : ⇑ν Tᶜ = 0,	hadd : μ.singular_part ν + ν.with_density (μ.rn_deriv ν) = s + ν.with_density f,	hνinter : ⇑ν (S ∩ T)ᶜ = 0,	heq : s.restrict (S ∩ T)ᶜ = (μ.singular_part ν).restrict (S ∩ T)ᶜ,	heq' : ∀ (A : set α), measurable_set A → ⇑s A = ⇑(s.restrict (S ∩ T)ᶜ) A,	A : set α,	hA : measurable_set A,	hμinter : ⇑(μ.singular_part ν) (A ∩ (S ∩ T)) = 0	⊢ measurable_set (A ∩ (S ∩ T))
α : Type u_1,	_inst_1 : measurable_space α,	μ ν : measure_theory.measure α,	f : ℕ → α → ℝ≥0∞,	hf : ∀ (n : ℕ), f n ∈ measure_theory.measure.lebesgue_decomposition.measurable_le μ ν,	n : ℕ	⊢ (⨆ (k : ℕ) (hk : k ≤ n), f k) ∈ measure_theory.measure.lebesgue_decomposition.measurable_le μ ν
α : Type u_1,	_inst_1 : measurable_space α,	μ ν : measure_theory.measure α,	f : ℕ → α → ℝ≥0∞,	hf : ∀ (n : ℕ), f n ∈ measure_theory.measure.lebesgue_decomposition.measurable_le μ ν,	n : ℕ	⊢ (⨆ (k : ℕ) (hk : k ≤ n), f k) = λ (x : α), ⨆ (k : ℕ) (hk : k ≤ n), f k x
α : Type u_1,	_inst_1 : measurable_space α,	μ ν : measure_theory.measure α,	f : ℕ → α → ℝ≥0∞,	hf : ∀ (n : ℕ), f n ∈ measure_theory.measure.lebesgue_decomposition.measurable_le μ ν,	n : ℕ,	x : α,	a : ℝ≥0	⊢ a ∈ (⨆ (k : ℕ) (hk : k ≤ n), f k) x ↔ a ∈ ⨆ (k : ℕ) (hk : k ≤ n), f k x
α : Type u_1,	β : Type u_2,	γ : Type u_3,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	_inst_2 : measurable_space β,	_inst_3 : measurable_space γ,	f : α →ₘ[μ] β,	g : α →ₘ[μ] γ	⊢ ⇑(measure_theory.ae_eq_fun.mk (λ (x : α), (⇑f x, ⇑g x)) _) =ᵐ[μ] λ (x : α), (⇑f x, ⇑g x)
α : Type u_1,	β : Type u_2,	γ : Type u_3,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	_inst_2 : measurable_space β,	_inst_3 : measurable_space γ,	f : α →ₘ[μ] β,	g : α →ₘ[μ] γ	⊢ ⇑(f.pair g) =ᵐ[μ] λ (x : α), (⇑f x, ⇑g x)
α : Type u_1,	G : Type u_8,	_inst_26 : normed_group G,	_inst_27 : measurable_space G,	_inst_28 : borel_space G,	_inst_29 : topological_space.second_countable_topology G,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	_inst_40 : normed_space ℝ G,	hm : m ≤ m0,	_inst_41 : measure_theory.sigma_finite (μ.trim hm),	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	x y : G	⊢ measure_theory.condexp_ind_L1_fin hm hs hμs (x + y) = measure_theory.condexp_ind_L1_fin hm hs hμs x + measure_theory.condexp_ind_L1_fin hm hs hμs y
α : Type u_1,	G : Type u_8,	_inst_26 : normed_group G,	_inst_27 : measurable_space G,	_inst_28 : borel_space G,	_inst_29 : topological_space.second_countable_topology G,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	_inst_40 : normed_space ℝ G,	hm : m ≤ m0,	_inst_41 : measure_theory.sigma_finite (μ.trim hm),	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	x y : G	⊢ ⇑(measure_theory.condexp_ind_L1_fin hm hs hμs (x + y)) =ᵐ[μ] ⇑(measure_theory.condexp_ind_L1_fin hm hs hμs x + measure_theory.condexp_ind_L1_fin hm hs hμs y)
α : Type u_1,	G : Type u_8,	_inst_26 : normed_group G,	_inst_27 : measurable_space G,	_inst_28 : borel_space G,	_inst_29 : topological_space.second_countable_topology G,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	_inst_40 : normed_space ℝ G,	hm : m ≤ m0,	_inst_41 : measure_theory.sigma_finite (μ.trim hm),	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	x y : G	⊢ ⇑(measure_theory.condexp_ind_smul hm hs hμs (x + y)) =ᵐ[μ] ⇑(measure_theory.condexp_ind_L1_fin hm hs hμs x + measure_theory.condexp_ind_L1_fin hm hs hμs y)
α : Type u_1,	G : Type u_8,	_inst_26 : normed_group G,	_inst_27 : measurable_space G,	_inst_28 : borel_space G,	_inst_29 : topological_space.second_countable_topology G,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	_inst_40 : normed_space ℝ G,	hm : m ≤ m0,	_inst_41 : measure_theory.sigma_finite (μ.trim hm),	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	x y : G	⊢ ⇑(measure_theory.condexp_ind_smul hm hs hμs (x + y)) =ᵐ[μ] ⇑(measure_theory.condexp_ind_L1_fin hm hs hμs x) + ⇑(measure_theory.condexp_ind_L1_fin hm hs hμs y)
α : Type u_1,	G : Type u_8,	_inst_26 : normed_group G,	_inst_27 : measurable_space G,	_inst_28 : borel_space G,	_inst_29 : topological_space.second_countable_topology G,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	_inst_40 : normed_space ℝ G,	hm : m ≤ m0,	_inst_41 : measure_theory.sigma_finite (μ.trim hm),	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	x y : G	⊢ ⇑(measure_theory.condexp_ind_smul hm hs hμs (x + y)) =ᵐ[μ] λ (x_1 : α), ⇑(measure_theory.condexp_ind_smul hm hs hμs x) x_1 + ⇑(measure_theory.condexp_ind_smul hm hs hμs y) x_1
α : Type u_1,	G : Type u_8,	_inst_26 : normed_group G,	_inst_27 : measurable_space G,	_inst_28 : borel_space G,	_inst_29 : topological_space.second_countable_topology G,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	_inst_40 : normed_space ℝ G,	hm : m ≤ m0,	_inst_41 : measure_theory.sigma_finite (μ.trim hm),	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	x y : G	⊢ ⇑(measure_theory.condexp_ind_smul hm hs hμs x + measure_theory.condexp_ind_smul hm hs hμs y) =ᵐ[μ] λ (x_1 : α), ⇑(measure_theory.condexp_ind_smul hm hs hμs x) x_1 + ⇑(measure_theory.condexp_ind_smul hm hs hμs y) x_1
α : Type u_1,	G : Type u_8,	_inst_26 : normed_group G,	_inst_27 : measurable_space G,	_inst_28 : borel_space G,	_inst_29 : topological_space.second_countable_topology G,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	_inst_40 : normed_space ℝ G,	hm : m ≤ m0,	_inst_41 : measure_theory.sigma_finite (μ.trim hm),	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	x y : G,	a : α	⊢ (⇑(measure_theory.condexp_ind_smul hm hs hμs x) + ⇑(measure_theory.condexp_ind_smul hm hs hμs y)) a = ⇑(measure_theory.condexp_ind_smul hm hs hμs x) a + ⇑(measure_theory.condexp_ind_smul hm hs hμs y) a
α : Type u_1,	F' : Type u_7,	_inst_19 : normed_group F',	_inst_21 : measurable_space F',	_inst_22 : borel_space F',	_inst_23 : topological_space.second_countable_topology F',	_inst_24 : normed_space ℝ F',	_inst_25 : complete_space F',	m m0 : measurable_space α,	μ : measure_theory.measure α,	hm : m ≤ m0,	_inst_40 : measure_theory.sigma_finite (μ.trim hm),	s : set α,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	x : F'	⊢ ⇑(measure_theory.condexp_L1_clm hm μ) (measure_theory.indicator_const_Lp 1 hs hμs x) = ⇑(measure_theory.condexp_ind hm μ s) x
α : Type u_1,	F' : Type u_7,	_inst_19 : normed_group F',	_inst_21 : measurable_space F',	_inst_22 : borel_space F',	_inst_23 : topological_space.second_countable_topology F',	_inst_24 : normed_space ℝ F',	_inst_25 : complete_space F',	m m0 : measurable_space α,	μ : measure_theory.measure α,	hm : m ≤ m0,	_inst_40 : measure_theory.sigma_finite (μ.trim hm),	s : set α,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	x : F'	⊢ ⇑(measure_theory.condexp_L1_clm hm μ) ↑(measure_theory.Lp.simple_func.indicator_const 1 hs hμs x) = ⇑(measure_theory.condexp_ind hm μ s) x
α : Type u_1,	F' : Type u_7,	_inst_19 : normed_group F',	_inst_21 : measurable_space F',	_inst_22 : borel_space F',	_inst_23 : topological_space.second_countable_topology F',	_inst_24 : normed_space ℝ F',	_inst_25 : complete_space F',	m m0 : measurable_space α,	μ : measure_theory.measure α,	hm : m ≤ m0,	_inst_40 : measure_theory.sigma_finite (μ.trim hm),	f : α → F',	s : set α,	hf : measure_theory.integrable f μ,	hs : measurable_set s	⊢ ∫ (x : α) in s, μ[f|hm] x ∂μ = ∫ (x : α) in s, f x ∂μ
α : Type u_1,	F' : Type u_7,	_inst_19 : normed_group F',	_inst_21 : measurable_space F',	_inst_22 : borel_space F',	_inst_23 : topological_space.second_countable_topology F',	_inst_24 : normed_space ℝ F',	_inst_25 : complete_space F',	m m0 : measurable_space α,	μ : measure_theory.measure α,	hm : m ≤ m0,	_inst_40 : measure_theory.sigma_finite (μ.trim hm),	f : α → F',	s : set α,	hf : measure_theory.integrable f μ,	hs : measurable_set s	⊢ ∫ (x : α) in s, (λ (x : α), ⇑(measure_theory.condexp_L1 hm μ f) x) x ∂μ = ∫ (x : α) in s, f x ∂μ
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0	⊢ ⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) =ᵐ[μ.restrict s] 0
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0	⊢ ⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) =ᵐ[μ.restrict s] 0
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊) =ᵐ[μ.restrict s] 0	⊢ ⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) =ᵐ[μ.restrict s] 0		α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0	⊢ measurable (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊)
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊) =ᵐ[μ.restrict s] 0,	x : α,	hx : (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊) x = 0 x	⊢ ⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x = 0 x		α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0	⊢ measurable (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊)
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊) =ᵐ[μ.restrict s] 0,	x : α,	hx : ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ = 0 x	⊢ ⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x = 0 x		α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0	⊢ measurable (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊)
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊) =ᵐ[μ.restrict s] 0,	x : α,	hx : ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ = 0	⊢ ⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x = 0		α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0	⊢ measurable (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊)
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊) =ᵐ[μ.restrict s] 0,	x : α,	hx : ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ = 0	⊢ ⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x = 0
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0	⊢ measurable (λ (a : α), ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a∥₊)
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0	⊢ measurable (λ (a : α), ⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) a)
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0	⊢ ⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) =ᵐ[μ.restrict s] 0		α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0	⊢ ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	h_nnnorm_eq_zero : ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0	⊢ measurable (λ (a : α), ⇑↑(⇑(measure_theory.condexp_L2 ℝ hm) f) a)
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0	⊢ ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ = 0
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0	⊢ ∫⁻ (x : α) in s, ↑∥⇑(⇑(measure_theory.condexp_L2 ℝ hm) f) x∥₊ ∂μ ≤ 0
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0	⊢ ∫⁻ (x : α) in s, ↑∥⇑f x∥₊ ∂μ = 0
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0	⊢ (λ (a : α), ↑∥⇑f a∥₊) =ᵐ[μ.restrict s] 0
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	x : α,	hx : ⇑f x = 0 x	⊢ (λ (a : α), ↑∥⇑f a∥₊) x = 0 x
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	x : α,	hx : ⇑f x = 0 x	⊢ ↑∥⇑f x∥₊ = 0 x
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0	⊢ (λ (a : α), ↑∥⇑f a∥₊) =ᵐ[μ.restrict s] 0		α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0	⊢ measurable (λ (a : α), ↑∥⇑f a∥₊)
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0,	x : α,	hx : ⇑f x = 0 x	⊢ ↑∥0 x∥₊ = 0 x
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : measurable_set s,	hμs : ⇑μ s ≠ ⊤,	f : ↥(measure_theory.Lp ℝ 2 μ),	hf : ⇑f =ᵐ[μ.restrict s] 0	⊢ measurable (λ (a : α), ↑∥⇑f a∥₊)
α : Type u_1,	E : Type u_2,	𝕜 : Type u_4,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : measurable_space E,	_inst_4 : inner_product_space 𝕜 E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_11 : measurable_space 𝕜,	_inst_12 : borel_space 𝕜,	f g : ↥(measure_theory.Lp E 2 μ),	r : 𝕜	⊢ has_inner.inner (r • f) g = ⇑is_R_or_C.conj r * has_inner.inner f g
α : Type u_1,	E : Type u_2,	𝕜 : Type u_4,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : measurable_space E,	_inst_4 : inner_product_space 𝕜 E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_11 : measurable_space 𝕜,	_inst_12 : borel_space 𝕜,	f g : ↥(measure_theory.Lp E 2 μ),	r : 𝕜	⊢ ∫ (a : α), has_inner.inner (⇑(r • f) a) (⇑g a) ∂μ = ∫ (a : α), ⇑is_R_or_C.conj r • has_inner.inner (⇑f a) (⇑g a) ∂μ
α : Type u_1,	E : Type u_2,	𝕜 : Type u_4,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : measurable_space E,	_inst_4 : inner_product_space 𝕜 E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_11 : measurable_space 𝕜,	_inst_12 : borel_space 𝕜,	f g : ↥(measure_theory.Lp E 2 μ),	r : 𝕜,	x : α,	hx : ⇑(r • f) x = (r • ⇑f) x	⊢ has_inner.inner (⇑(r • f) x) (⇑g x) = ⇑is_R_or_C.conj r • has_inner.inner (⇑f x) (⇑g x)
α : Type u_1,	E : Type u_2,	𝕜 : Type u_4,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : measurable_space E,	_inst_4 : inner_product_space 𝕜 E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_11 : measurable_space 𝕜,	_inst_12 : borel_space 𝕜,	f g : ↥(measure_theory.Lp E 2 μ),	r : 𝕜,	x : α,	hx : ⇑(r • f) x = (r • ⇑f) x	⊢ has_inner.inner (⇑(r • f) x) (⇑g x) = has_inner.inner (r • ⇑f x) (⇑g x)
α : Type u_1,	E : Type u_2,	𝕜 : Type u_4,	_inst_1 : is_R_or_C 𝕜,	_inst_2 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : measurable_space E,	_inst_4 : inner_product_space 𝕜 E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_11 : measurable_space 𝕜,	_inst_12 : borel_space 𝕜,	f g : ↥(measure_theory.Lp E 2 μ),	r : 𝕜,	x : α,	hx : ⇑(r • f) x = (r • ⇑f) x	⊢ ⇑(r • f) x = r • ⇑f x
α : Type u_1,	F : Type u_3,	G : Type u_4,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	_inst_4 : normed_group G,	f : α → F,	g : α → G,	c : ℝ,	h : ∀ᵐ (x : α) ∂μ, ∥f x∥ ≤ c * ∥g x∥,	hc : 0 ≤ c,	p : ℝ≥0∞	⊢ measure_theory.snorm f p μ ≤ ennreal.of_real c * measure_theory.snorm g p μ
α : Type u_1,	F : Type u_3,	G : Type u_4,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	_inst_4 : normed_group G,	f : α → F,	g : α → G,	p : ℝ≥0∞,	c : ℝ≥0,	h : ∀ᵐ (x : α) ∂μ, ∥f x∥ ≤ ↑c * ∥g x∥	⊢ measure_theory.snorm f p μ ≤ ennreal.of_real ↑c * measure_theory.snorm g p μ
α : Type u_1,	F : Type u_3,	G : Type u_4,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	_inst_4 : normed_group G,	f : α → F,	g : α → G,	p : ℝ≥0∞,	c : ℝ≥0,	h : ∀ᵐ (x : α) ∂μ, ∥f x∥ ≤ ↑c * ∥g x∥	⊢ measure_theory.snorm f p μ ≤ measure_theory.snorm (↑c • λ (x : α), ∥g x∥) p μ		α : Type u_1,	F : Type u_3,	G : Type u_4,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	_inst_4 : normed_group G,	f : α → F,	g : α → G,	p : ℝ≥0∞,	c : ℝ≥0,	h : ∀ᵐ (x : α) ∂μ, ∥f x∥ ≤ ↑c * ∥g x∥	⊢ normed_space ℝ ℝ
α : Type u_1,	F : Type u_3,	G : Type u_4,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	_inst_4 : normed_group G,	f : α → F,	g : α → G,	p : ℝ≥0∞,	c : ℝ≥0,	h : ∀ᵐ (x : α) ∂μ, ∥f x∥ ≤ ↑c * ∥g x∥	⊢ normed_space ℝ ℝ		α : Type u_1,	F : Type u_3,	G : Type u_4,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	_inst_4 : normed_group G,	f : α → F,	g : α → G,	p : ℝ≥0∞,	c : ℝ≥0,	h : ∀ᵐ (x : α) ∂μ, ∥f x∥ ≤ ↑c * ∥g x∥	⊢ measure_theory.snorm f p μ ≤ measure_theory.snorm (↑c • λ (x : α), ∥g x∥) p μ
α : Type u_1,	F : Type u_3,	G : Type u_4,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	_inst_4 : normed_group G,	f : α → F,	g : α → G,	p : ℝ≥0∞,	c : ℝ≥0,	h : ∀ᵐ (x : α) ∂μ, ∥f x∥ ≤ ↑c * ∥g x∥	⊢ measure_theory.snorm f p μ ≤ measure_theory.snorm (↑c • λ (x : α), ∥g x∥) p μ
α : Type u_1,	F : Type u_3,	G : Type u_4,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	_inst_4 : normed_group G,	f : α → F,	g : α → G,	p : ℝ≥0∞,	c : ℝ≥0,	h : ∀ᵐ (x : α) ∂μ, ∥f x∥ ≤ ↑c * ∥g x∥	⊢ ∀ᵐ (x : α) ∂μ, ∥f x∥ ≤ ∥(↑c • λ (x : α), ∥g x∥) x∥
α : Type u_1,	E : Type u_2,	F : Type u_3,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_3 : normed_group F,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : topological_space.second_countable_topology F,	_inst_8 : measurable_space F,	_inst_9 : borel_space F,	f : ↥(measure_theory.Lp E p μ),	g : ↥(measure_theory.Lp F p μ),	h : ∀ᵐ (x : α) ∂μ, ∥⇑f x∥ ≤ ∥⇑g x∥	⊢ ∥f∥ ≤ ∥g∥
α : Type u_1,	E : Type u_2,	F : Type u_3,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_3 : normed_group F,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : topological_space.second_countable_topology F,	_inst_8 : measurable_space F,	_inst_9 : borel_space F,	f : ↥(measure_theory.Lp E p μ),	g : ↥(measure_theory.Lp F p μ),	h : ∀ᵐ (x : α) ∂μ, ∥⇑f x∥ ≤ ∥⇑g x∥	⊢ measure_theory.snorm ⇑f p μ ≤ measure_theory.snorm ⇑g p μ
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	𝕜 : Type u_5,	_inst_7 : normed_field 𝕜,	_inst_8 : normed_space 𝕜 E,	_inst_9 : measurable_space 𝕜,	_inst_10 : opens_measurable_space 𝕜	⊢ normed_space 𝕜 ↥(measure_theory.Lp E 2 μ)
α : Type u_1,	F : Type u_3,	m0 : measurable_space α,	q : ℝ,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	f : α → F,	hq0_lt : 0 < q	⊢ ∫⁻ (a : α), ↑∥f a∥₊ ^ q ∂μ = measure_theory.snorm' f q μ ^ q
α : Type u_1,	F : Type u_3,	m0 : measurable_space α,	q : ℝ,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	f : α → F,	hq0_lt : 0 < q	⊢ q ≠ 0
α : Type u_1,	F : Type u_3,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	f : α → F	⊢ measure_theory.snorm' f 0 μ = 1
α : Type u_1,	F : Type u_3,	m0 : measurable_space α,	q : ℝ,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	hq0_ne : q ≠ 0,	hμ : μ ≠ 0	⊢ measure_theory.snorm' 0 q μ = 0
α : Type u_1,	F : Type u_3,	m0 : measurable_space α,	q : ℝ,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	hq0_ne : q ≠ 0,	hμ : μ ≠ 0,	hq0 : 0 ≤ q	⊢ measure_theory.snorm' 0 q μ = 0		case or.inr	α : Type u_1,	F : Type u_3,	m0 : measurable_space α,	q : ℝ,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	hq0_ne : q ≠ 0,	hμ : μ ≠ 0,	hq_neg : q < 0	⊢ measure_theory.snorm' 0 q μ = 0
α : Type u_1,	F : Type u_3,	m0 : measurable_space α,	q : ℝ,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	hq0_ne : q ≠ 0,	hμ : μ ≠ 0,	hq0 : 0 ≤ q	⊢ measure_theory.snorm' 0 q μ = 0
α : Type u_1,	F : Type u_3,	m0 : measurable_space α,	q : ℝ,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	hq0_ne : q ≠ 0,	hμ : μ ≠ 0,	hq_neg : q < 0	⊢ measure_theory.snorm' 0 q μ = 0
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : p = ⊤	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) ⊤ μ < B N,	hp_top : ⊤ = ⊤	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) ⊤ μ < B N,	hp_top : ⊤ = ⊤	⊢ ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) ⊤ μ < B N,	hp_top : ⊤ = ⊤	⊢ ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N		α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) ⊤ μ < B N,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) ⊤ μ < B N,	hp_top : ⊤ = ⊤	⊢ ∀ (i i_1 i_2 : ℕ), i ≤ i_1 → i ≤ i_2 → (∀ᵐ (x : α) ∂μ, ↑∥(f i_1 - f i_2) x∥₊ < B i)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) ⊤ μ < B N,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N,	x : α,	hx : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N	⊢ cauchy_seq (λ (n : ℕ), f n x)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N,	x : α,	hx : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N	⊢ ∀ (n m N : ℕ), N ≤ n → N ≤ m → has_dist.dist (f n x) (f m x) ≤ (B N).to_real
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N,	x : α,	hx : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	n m N : ℕ,	hnN : N ≤ n,	hmN : N ≤ m	⊢ has_dist.dist (f n x) (f m x) ≤ (B N).to_real
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N,	x : α,	n m N : ℕ,	hnN : N ≤ n,	hmN : N ≤ m,	hx : ↑∥(f n - f m) x∥₊ < B N	⊢ has_dist.dist (f n x) (f m x) ≤ (B N).to_real
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N,	x : α,	n m N : ℕ,	hnN : N ≤ n,	hmN : N ≤ m,	hx : ↑∥(f n - f m) x∥₊ < B N	⊢ ennreal.of_real ∥f n x - f m x∥ ≤ B N
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N,	x : α,	hx : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N	⊢ ∀ (n m N : ℕ), N ≤ n → N ≤ m → has_dist.dist (f n x) (f m x) ≤ (B N).to_real		α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N,	x : α,	hx : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N	⊢ filter.tendsto (λ (n : ℕ), (B n).to_real) filter.at_top (𝓝 0)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N,	x : α,	n m N : ℕ,	hnN : N ≤ n,	hmN : N ≤ m,	hx : ennreal.of_real ∥(f n - f m) x∥ < B N	⊢ ennreal.of_real ∥f n x - f m x∥ ≤ B N
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N,	x : α,	hx : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N	⊢ filter.tendsto (λ (n : ℕ), (B n).to_real) filter.at_top (𝓝 0)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	B : ℕ → ℝ≥0∞,	hp : 1 ≤ ⊤,	hB : tsum B ≠ ⊤,	hp_top : ⊤ = ⊤,	h_cau_ae : ∀ᵐ (x : α) ∂μ, ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ess_sup (λ (x : α), ↑∥(f n - f m) x∥₊) μ < B N,	x : α,	hx : ∀ (N n m : ℕ), N ≤ n → N ≤ m → ↑∥(f n - f m) x∥₊ < B N	⊢ filter.tendsto (λ (n : ℕ), (B n).to_real) filter.at_top (𝓝 0.to_real)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : p = ⊤	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)		α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤	⊢ 1 ≤ p.to_real
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤	⊢ 1 ≤ p.to_real		α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤,	hp1 : 1 ≤ p.to_real	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤	⊢ 1 ≤ p
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤,	hp1 : 1 ≤ p.to_real	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤,	hp1 : 1 ≤ p.to_real	⊢ ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm' (f n - f m) p.to_real μ < B N
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤,	hp1 : 1 ≤ p.to_real,	N n m : ℕ,	hn : N ≤ n,	hm : N ≤ m	⊢ measure_theory.snorm' (f n - f m) p.to_real μ < B N
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	hp_top : ¬p = ⊤,	hp1 : 1 ≤ p.to_real,	N n m : ℕ,	hn : N ≤ n,	hm : N ≤ m,	h_cau : measure_theory.snorm (f n - f m) p μ < B N	⊢ measure_theory.snorm' (f n - f m) p.to_real μ < B N
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤,	hp1 : 1 ≤ p.to_real	⊢ ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm' (f n - f m) p.to_real μ < B N		α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤,	hp1 : 1 ≤ p.to_real,	h_cau' : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm' (f n - f m) p.to_real μ < B N	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : complete_space E,	f : ℕ → α → E,	hf : ∀ (n : ℕ), ae_measurable (f n) μ,	hp : 1 ≤ p,	B : ℕ → ℝ≥0∞,	hB : ∑' (i : ℕ), B i ≠ ⊤,	h_cau : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm (f n - f m) p μ < B N,	hp_top : ¬p = ⊤,	hp1 : 1 ≤ p.to_real,	h_cau' : ∀ (N n m : ℕ), N ≤ n → N ≤ m → measure_theory.snorm' (f n - f m) p.to_real μ < B N	⊢ ∀ᵐ (x : α) ∂μ, ∃ (l : E), filter.tendsto (λ (n : ℕ), f n x) filter.at_top (𝓝 l)
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : topological_space α,	_inst_8 : borel_space α,	_inst_9 : measure_theory.is_finite_measure μ,	f : α →ᵇ E	⊢ continuous_map.to_ae_eq_fun μ f.to_continuous_map ∈ measure_theory.Lp E p μ
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : topological_space α,	_inst_8 : borel_space α,	_inst_9 : measure_theory.is_finite_measure μ,	f : α →ᵇ E	⊢ ∀ᵐ (x : α) ∂μ, ∥⇑(continuous_map.to_ae_eq_fun μ f.to_continuous_map) x∥ ≤ ∥f∥
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : topological_space α,	_inst_8 : borel_space α,	_inst_9 : measure_theory.is_finite_measure μ,	f : α →ᵇ E	⊢ ∀ (a : α), ⇑(continuous_map.to_ae_eq_fun μ f.to_continuous_map) a = ⇑(f.to_continuous_map) a → ∥⇑(continuous_map.to_ae_eq_fun μ f.to_continuous_map) a∥ ≤ ∥f∥
α : Type u_1,	E : Type u_2,	m0 : measurable_space α,	p : ℝ≥0∞,	μ : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : borel_space E,	_inst_6 : topological_space.second_countable_topology E,	_inst_7 : topological_space α,	_inst_8 : borel_space α,	_inst_9 : measure_theory.is_finite_measure μ,	f : α →ᵇ E,	x : α,	hx : ⇑(continuous_map.to_ae_eq_fun μ f.to_continuous_map) x = ⇑(f.to_continuous_map) x	⊢ ∥⇑(continuous_map.to_ae_eq_fun μ f.to_continuous_map) x∥ ≤ ∥f∥
α : Type u_1,	F : Type u_3,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_3 : normed_group F,	f : α → F	⊢ measure_theory.snorm_ess_sup f μ = 0 ↔ f =ᵐ[μ] 0
α : Type u_1,	m m0 : measurable_space α,	ν : measure_theory.measure α,	hm : m ≤ m0,	f : α → ℝ≥0∞,	hf : measurable f	⊢ (ν.trim hm).ae.limsup f = ν.ae.limsup f
α : Type u_1,	m m0 : measurable_space α,	ν : measure_theory.measure α,	hm : m ≤ m0,	f : α → ℝ≥0∞,	hf : measurable f	⊢ ess_sup f (ν.trim hm) = ess_sup f ν
α : Type u_1,	E : Type u_2,	m m0 : measurable_space α,	p : ℝ≥0∞,	ν : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : opens_measurable_space E,	hm : m ≤ m0,	f : α → E,	hf : measurable f	⊢ measure_theory.snorm f p (ν.trim hm) = measure_theory.snorm f p ν
α : Type u_1,	E : Type u_2,	m m0 : measurable_space α,	p : ℝ≥0∞,	ν : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : opens_measurable_space E,	hm : m ≤ m0,	f : α → E,	hf : measurable f,	h0 : p = 0	⊢ measure_theory.snorm f p (ν.trim hm) = measure_theory.snorm f p ν		α : Type u_1,	E : Type u_2,	m m0 : measurable_space α,	p : ℝ≥0∞,	ν : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : opens_measurable_space E,	hm : m ≤ m0,	f : α → E,	hf : measurable f,	h0 : ¬p = 0	⊢ measure_theory.snorm f p (ν.trim hm) = measure_theory.snorm f p ν
α : Type u_1,	E : Type u_2,	m m0 : measurable_space α,	p : ℝ≥0∞,	ν : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : opens_measurable_space E,	hm : m ≤ m0,	f : α → E,	hf : measurable f,	h0 : p = 0	⊢ measure_theory.snorm f p (ν.trim hm) = measure_theory.snorm f p ν
α : Type u_1,	E : Type u_2,	m m0 : measurable_space α,	p : ℝ≥0∞,	ν : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : opens_measurable_space E,	hm : m ≤ m0,	f : α → E,	hf : measurable f,	h0 : ¬p = 0	⊢ measure_theory.snorm f p (ν.trim hm) = measure_theory.snorm f p ν
α : Type u_1,	E : Type u_2,	m m0 : measurable_space α,	p : ℝ≥0∞,	ν : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : opens_measurable_space E,	hm : m ≤ m0,	f : α → E,	hf : measurable f,	h0 : ¬p = 0,	h_top : p = ⊤	⊢ measure_theory.snorm f p (ν.trim hm) = measure_theory.snorm f p ν
α : Type u_1,	E : Type u_2,	m m0 : measurable_space α,	p : ℝ≥0∞,	ν : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : opens_measurable_space E,	hm : m ≤ m0,	f : α → E,	hf : measurable f,	h0 : ¬p = 0,	h_top : p = ⊤	⊢ measure_theory.snorm f p (ν.trim hm) = measure_theory.snorm f p ν		α : Type u_1,	E : Type u_2,	m m0 : measurable_space α,	p : ℝ≥0∞,	ν : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : opens_measurable_space E,	hm : m ≤ m0,	f : α → E,	hf : measurable f,	h0 : ¬p = 0,	h_top : ¬p = ⊤	⊢ measure_theory.snorm f p (ν.trim hm) = measure_theory.snorm f p ν
α : Type u_1,	E : Type u_2,	m m0 : measurable_space α,	p : ℝ≥0∞,	ν : measure_theory.measure α,	_inst_1 : measurable_space E,	_inst_2 : normed_group E,	_inst_5 : opens_measurable_space E,	hm : m ≤ m0,	f : α → E,	hf : measurable f,	h0 : ¬p = 0,	h_top : ¬p = ⊤	⊢ measure_theory.snorm f p (ν.trim hm) = measure_theory.snorm f p ν
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ	⊢ measure_theory.mem_ℒp ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) p μ
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ	⊢ measure_theory.snorm ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) p μ < ⊤
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	this : measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤	⊢ measure_theory.snorm ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) p μ < ⊤
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	this : measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤,	this : measure_theory.mem_ℒp (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ	⊢ measure_theory.snorm ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) p μ < ⊤
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	this : measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤,	this : measure_theory.mem_ℒp (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ	⊢ ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) = (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) + λ (x : β), y₀
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	this : measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤	⊢ measure_theory.snorm ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) p μ < ⊤		β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ	⊢ measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	this : measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤,	this : measure_theory.mem_ℒp (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ,	x : β	⊢ ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x = ((λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) + λ (x : β), y₀) x
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ	⊢ measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ	⊢ measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ	⊢ measurable (λ (x : β), ∥f x - y₀∥)
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ	⊢ measurable (λ (x : β), ∥f x - y₀∥)		β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	h_meas : measurable (λ (x : β), ∥f x - y₀∥)	⊢ measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ	⊢ measurable (λ (x : β), has_dist.dist (f x) y₀)
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	h_meas : measurable (λ (x : β), ∥f x - y₀∥)	⊢ measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	h_meas : measurable (λ (x : β), ∥f x - y₀∥)	⊢ measure_theory.snorm (λ (x : β), ∥f x - y₀∥) p μ < ⊤
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	h_meas : measurable (λ (x : β), ∥f x - y₀∥)	⊢ measure_theory.snorm (λ (x : β), f x - y₀) p μ < ⊤
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	h_meas : measurable (λ (x : β), ∥f x - y₀∥)	⊢ (λ (x : β), f x - y₀) = f + -λ (x : β), y₀
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ	⊢ measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ		β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	hf' : measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ	⊢ measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	h_meas : measurable (λ (x : β), ∥f x - y₀∥),	x : β	⊢ f x - y₀ = (f + -λ (x : β), y₀) x
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	hf' : measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ	⊢ measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	hf' : measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ	⊢ ∀ᵐ (x : β) ∂μ, ∥⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀∥ ≤ ∥∥f x - y₀∥ + ∥f x - y₀∥∥
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	hf' : measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ	⊢ ∀ (x : β), ∥⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀∥ ≤ ∥∥f x - y₀∥ + ∥f x - y₀∥∥
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	hf' : measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ,	x : β	⊢ ∥⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀∥ ≤ ∥∥f x - y₀∥ + ∥f x - y₀∥∥
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	hf' : measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ,	x : β	⊢ ∥∥f x - y₀∥ + ∥f x - y₀∥∥ = ∥f x - y₀∥ + ∥f x - y₀∥
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	hf' : measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ	⊢ ∀ᵐ (x : β) ∂μ, ∥⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀∥ ≤ ∥∥f x - y₀∥ + ∥f x - y₀∥∥		β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	hf' : measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ,	this : ∀ᵐ (x : β) ∂μ, ∥⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀∥ ≤ ∥∥f x - y₀∥ + ∥f x - y₀∥∥	⊢ measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	hf' : measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ,	x : β	⊢ 0 ≤ ∥f x - y₀∥ + ∥f x - y₀∥
β : Type u_2,	E : Type u_4,	_inst_1 : measurable_space β,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	p : ℝ≥0∞,	_inst_4 : borel_space E,	f : β → E,	μ : measure_theory.measure β,	fmeas : measurable f,	hf : measure_theory.mem_ℒp f p μ,	s : set E,	y₀ : E,	h₀ : y₀ ∈ s,	_inst_5 : topological_space.separable_space ↥s,	hi₀ : measure_theory.mem_ℒp (λ (x : β), y₀) p μ,	n : ℕ,	hf' : measure_theory.mem_ℒp (λ (x : β), ∥f x - y₀∥) p μ,	this : ∀ᵐ (x : β) ∂μ, ∥⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀∥ ≤ ∥∥f x - y₀∥ + ∥f x - y₀∥∥	⊢ measure_theory.snorm (λ (x : β), ⇑(measure_theory.simple_func.approx_on f fmeas s y₀ h₀ n) x - y₀) p μ < ⊤
α : Type u_1,	G : Type u_2,	p : ℝ≥0∞,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : normed_group G,	_inst_2 : measurable_space G,	_inst_3 : borel_space G,	_inst_4 : topological_space.second_countable_topology G,	f : α → G,	hf : measure_theory.mem_ℒp f p μ,	hf_meas : measurable f,	hp_ne_zero : p ≠ 0,	hp_ne_top : p ≠ ⊤	⊢ measure_theory.fin_strongly_measurable f μ
α : Type u_1,	G : Type u_2,	p : ℝ≥0∞,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : normed_group G,	_inst_2 : measurable_space G,	_inst_3 : borel_space G,	_inst_4 : topological_space.second_countable_topology G,	f : α → G,	hf : measure_theory.mem_ℒp f p μ,	hf_meas : measurable f,	hp_ne_zero : p ≠ 0,	hp_ne_top : p ≠ ⊤,	fs : ℕ → α →ₛ G := measure_theory.simple_func.approx_on f hf_meas set.univ 0 _	⊢ measure_theory.fin_strongly_measurable f μ
α : Type u_1,	G : Type u_2,	p : ℝ≥0∞,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : normed_group G,	_inst_2 : measurable_space G,	_inst_3 : borel_space G,	_inst_4 : topological_space.second_countable_topology G,	f : α → G,	hf : measure_theory.mem_ℒp f p μ,	hf_meas : measurable f,	hp_ne_zero : p ≠ 0,	hp_ne_top : p ≠ ⊤,	fs : ℕ → α →ₛ G := measure_theory.simple_func.approx_on f hf_meas set.univ 0 _	⊢ ∀ (n : ℕ), measure_theory.mem_ℒp ⇑(fs n) p μ		α : Type u_1,	G : Type u_2,	p : ℝ≥0∞,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : normed_group G,	_inst_2 : measurable_space G,	_inst_3 : borel_space G,	_inst_4 : topological_space.second_countable_topology G,	f : α → G,	hf : measure_theory.mem_ℒp f p μ,	hf_meas : measurable f,	hp_ne_zero : p ≠ 0,	hp_ne_top : p ≠ ⊤,	fs : ℕ → α →ₛ G := measure_theory.simple_func.approx_on f hf_meas set.univ 0 _,	h_fs_Lp : ∀ (n : ℕ), measure_theory.mem_ℒp ⇑(fs n) p μ	⊢ ∀ (n : ℕ), ⇑μ (function.support ⇑(fs n)) < ⊤
α : Type u_1,	G : Type u_2,	p : ℝ≥0∞,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : normed_group G,	_inst_2 : measurable_space G,	_inst_3 : borel_space G,	_inst_4 : topological_space.second_countable_topology G,	f : α → G,	hf : measure_theory.mem_ℒp f p μ,	hf_meas : measurable f,	hp_ne_zero : p ≠ 0,	hp_ne_top : p ≠ ⊤,	fs : ℕ → α →ₛ G := measure_theory.simple_func.approx_on f hf_meas set.univ 0 _	⊢ ∀ (n : ℕ), ⇑μ (function.support ⇑(fs n)) < ⊤
α : Type u_1,	G : Type u_2,	p : ℝ≥0∞,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : normed_group G,	_inst_2 : measurable_space G,	_inst_3 : borel_space G,	_inst_4 : topological_space.second_countable_topology G,	f : α → G,	hf : measure_theory.mem_ℒp f p μ,	hf_meas : measurable f,	hp_ne_zero : p ≠ 0,	hp_ne_top : p ≠ ⊤,	fs : ℕ → α →ₛ G := measure_theory.simple_func.approx_on f hf_meas set.univ 0 _,	h_fs_Lp : ∀ (n : ℕ), measure_theory.mem_ℒp ⇑(fs n) p μ	⊢ ∀ (n : ℕ), ⇑μ (function.support ⇑(fs n)) < ⊤
α : Type u_1,	G : Type u_2,	p : ℝ≥0∞,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : normed_group G,	_inst_2 : measurable_space G,	_inst_3 : borel_space G,	_inst_4 : topological_space.second_countable_topology G,	f : α → G,	hf : measure_theory.mem_ℒp f p μ,	hf_meas : measurable f,	hp_ne_zero : p ≠ 0,	hp_ne_top : p ≠ ⊤,	fs : ℕ → α →ₛ G := measure_theory.simple_func.approx_on f hf_meas set.univ 0 _	⊢ ∀ (n : ℕ), ⇑μ (function.support ⇑(fs n)) < ⊤		α : Type u_1,	G : Type u_2,	p : ℝ≥0∞,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : normed_group G,	_inst_2 : measurable_space G,	_inst_3 : borel_space G,	_inst_4 : topological_space.second_countable_topology G,	f : α → G,	hf : measure_theory.mem_ℒp f p μ,	hf_meas : measurable f,	hp_ne_zero : p ≠ 0,	hp_ne_top : p ≠ ⊤,	fs : ℕ → α →ₛ G := measure_theory.simple_func.approx_on f hf_meas set.univ 0 _	⊢ ∀ (x : α), filter.tendsto (λ (n : ℕ), ⇑(fs n) x) filter.at_top (𝓝 (f x))
α : Type u_1,	G : Type u_2,	p : ℝ≥0∞,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : normed_group G,	_inst_2 : measurable_space G,	_inst_3 : borel_space G,	_inst_4 : topological_space.second_countable_topology G,	f : α → G,	hf : measure_theory.mem_ℒp f p μ,	hf_meas : measurable f,	hp_ne_zero : p ≠ 0,	hp_ne_top : p ≠ ⊤,	fs : ℕ → α →ₛ G := measure_theory.simple_func.approx_on f hf_meas set.univ 0 _	⊢ ∀ (x : α), filter.tendsto (λ (n : ℕ), ⇑(fs n) x) filter.at_top (𝓝 (f x))
α : Type u_1,	G : Type u_2,	p : ℝ≥0∞,	m0 : measurable_space α,	μ : measure_theory.measure α,	_inst_1 : normed_group G,	_inst_2 : measurable_space G,	_inst_3 : borel_space G,	_inst_4 : topological_space.second_countable_topology G,	f : α → G,	hf : measure_theory.mem_ℒp f p μ,	hf_meas : measurable f,	hp_ne_zero : p ≠ 0,	hp_ne_top : p ≠ ⊤,	fs : ℕ → α →ₛ G := measure_theory.simple_func.approx_on f hf_meas set.univ 0 _,	x : α	⊢ f x ∈ closure set.univ
α : Type u_2,	_inst_4 : measurable_space α,	G₀ : Type u_1,	_inst_5 : group_with_zero G₀,	_inst_6 : measurable_space G₀,	_inst_7 : has_measurable_inv G₀,	f : α → G₀,	h : measurable (λ (x : α), (f x)⁻¹)	⊢ measurable f
G : Type u_1,	_inst_1 : topological_space G,	_inst_2 : measurable_space G,	_inst_3 : topological_space.second_countable_topology G,	_inst_4 : borel_space G,	_inst_5 : group G,	_inst_6 : topological_group G,	μ : measure_theory.measure G,	_inst_8 : measure_theory.sigma_finite μ,	hμ : measure_theory.is_mul_left_invariant ⇑μ,	E : set G,	hE : measurable_set E,	y : G	⊢ ⇑μ ((λ (x : G), x * y) ⁻¹' E) = 0 ↔ ⇑μ E = 0
G : Type u_1,	_inst_1 : topological_space G,	_inst_2 : measurable_space G,	_inst_3 : topological_space.second_countable_topology G,	_inst_4 : borel_space G,	_inst_5 : group G,	_inst_6 : topological_group G,	μ : measure_theory.measure G,	_inst_8 : measure_theory.sigma_finite μ,	hμ : measure_theory.is_mul_left_invariant ⇑μ,	E : set G,	hE : measurable_set E,	y : G	⊢ (λ (h : G), y⁻¹ * h) ⁻¹' (has_inv.inv ⁻¹' E) = (λ (x : G), x⁻¹) ⁻¹' ((λ (_x : G), _x * y) ⁻¹' E)
G : Type u_1,	_inst_1 : topological_space G,	_inst_2 : measurable_space G,	_inst_3 : topological_space.second_countable_topology G,	_inst_4 : borel_space G,	_inst_5 : group G,	_inst_6 : topological_group G,	μ : measure_theory.measure G,	_inst_8 : measure_theory.sigma_finite μ,	hμ : measure_theory.is_mul_left_invariant ⇑μ,	E : set G,	hE : measurable_set E,	y x : G	⊢ x ∈ (λ (h : G), y⁻¹ * h) ⁻¹' (has_inv.inv ⁻¹' E) ↔ x ∈ (λ (x : G), x⁻¹) ⁻¹' ((λ (_x : G), _x * y) ⁻¹' E)
G : Type u_1,	_inst_1 : topological_space G,	_inst_2 : measurable_space G,	_inst_3 : topological_space.second_countable_topology G,	_inst_4 : borel_space G,	_inst_5 : group G,	_inst_6 : topological_group G,	μ : measure_theory.measure G,	_inst_8 : measure_theory.sigma_finite μ,	hμ : measure_theory.is_mul_left_invariant ⇑μ,	E : set G,	hE : measurable_set E,	y : G	⊢ ⇑μ ((λ (x : G), x⁻¹) ⁻¹' ((λ (_x : G), _x * y) ⁻¹' E)) = 0 ↔ ⇑μ ((λ (h : G), y⁻¹ * h) ⁻¹' (has_inv.inv ⁻¹' E)) = 0
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	H : Type u_6,	_inst_18 : normed_group H,	_inst_19 : topological_space.second_countable_topology H,	_inst_20 : measurable_space H,	_inst_21 : borel_space H,	f : α → H,	hf : measure_theory.integrable f μ	⊢ ∥measure_theory.integrable.to_L1 f hf∥ = ∫ (a : α), ∥f a∥ ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	H : Type u_6,	_inst_18 : normed_group H,	_inst_19 : topological_space.second_countable_topology H,	_inst_20 : measurable_space H,	_inst_21 : borel_space H,	f : α → H,	hf : measure_theory.integrable f μ	⊢ ∫ (a : α), ∥⇑(measure_theory.integrable.to_L1 f hf) a∥ ∂μ = ∫ (a : α), ∥f a∥ ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	H : Type u_6,	_inst_18 : normed_group H,	_inst_19 : topological_space.second_countable_topology H,	_inst_20 : measurable_space H,	_inst_21 : borel_space H,	f : α → H,	hf : measure_theory.integrable f μ	⊢ (λ (a : α), ∥⇑(measure_theory.integrable.to_L1 f hf) a∥) =ᵐ[μ] λ (a : α), ∥f a∥
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	H : Type u_6,	_inst_18 : normed_group H,	_inst_19 : topological_space.second_countable_topology H,	_inst_20 : measurable_space H,	_inst_21 : borel_space H,	f : α → H,	hf : measure_theory.integrable f μ	⊢ ∀ (x : α), (λ (x : α), ⇑(measure_theory.integrable.to_L1 f hf) x = f x) x → (λ (a : α), ∥⇑(measure_theory.integrable.to_L1 f hf) a∥) x = (λ (a : α), ∥f a∥) x
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	H : Type u_6,	_inst_18 : normed_group H,	_inst_19 : topological_space.second_countable_topology H,	_inst_20 : measurable_space H,	_inst_21 : borel_space H,	f : α → H,	hf : measure_theory.integrable f μ,	a : α,	ha : ⇑(measure_theory.integrable.to_L1 f hf) a = f a	⊢ (λ (a : α), ∥⇑(measure_theory.integrable.to_L1 f hf) a∥) a = (λ (a : α), ∥f a∥) a
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E	⊢ ∫ (x : α), f x ∂0 • μ = 0.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E	⊢ ∫ (x : α), f x ∂0 • μ = 0.to_real • ∫ (x : α), f x ∂μ		α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ		α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ¬ae_measurable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ¬ae_measurable f μ	⊢ ¬ae_measurable f (c • μ)
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ¬ae_measurable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ¬ae_measurable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ		α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ¬ae_measurable f μ,	this : ¬ae_measurable f (c • μ)	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0	⊢ ∫ (x : α), f x ∂⊤ • μ = ⊤.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0	⊢ ∫ (x : α), f x ∂⊤ • μ = 0
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : f =ᵐ[μ] 0	⊢ ∫ (x : α), f x ∂⊤ • μ = 0
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : f =ᵐ[μ] 0	⊢ ∫ (x : α), f x ∂⊤ • μ = 0		α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : ¬f =ᵐ[μ] 0	⊢ ∫ (x : α), f x ∂⊤ • μ = 0
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : f =ᵐ[μ] 0,	this : f =ᵐ[⊤ • μ] 0	⊢ ∫ (x : α), f x ∂⊤ • μ = 0
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : ¬f =ᵐ[μ] 0	⊢ ∫ (x : α), f x ∂⊤ • μ = 0
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : ¬f =ᵐ[μ] 0	⊢ ¬measure_theory.integrable (λ (a : α), f a) (⊤ • μ)
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : ¬f =ᵐ[μ] 0	⊢ ¬⊤ < ⊤		α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : ¬f =ᵐ[μ] 0	⊢ ¬∫⁻ (a : α), ↑∥f a∥₊ ∂μ = 0
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : ¬f =ᵐ[μ] 0	⊢ ¬⊤ < ⊤
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : ¬f =ᵐ[μ] 0	⊢ ¬∫⁻ (a : α), ↑∥f a∥₊ ∂μ = 0
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : ¬f =ᵐ[μ] 0	⊢ ¬(λ (a : α), ↑∥f a∥₊) =ᵐ[μ] 0
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0	⊢ ∫ (x : α), f x ∂⊤ • μ = ⊤.to_real • ∫ (x : α), f x ∂μ		α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hfm : ae_measurable f μ,	h0 : ⊤ ≠ 0,	hf : ¬f =ᵐ[μ] 0,	h : (λ (a : α), ↑∥f a∥₊) =ᵐ[μ] 0,	x : α	⊢ (λ (a : α), ↑∥f a∥₊) x = 0 x → f x = 0 x
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : measure_theory.integrable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ		α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : ¬measure_theory.integrable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : ¬measure_theory.integrable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : ¬measure_theory.integrable f μ	⊢ ∫ (x : α), f x ∂c • μ = 0
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : ¬measure_theory.integrable f μ,	h : measure_theory.integrable (λ (x : α), f x) (c • μ)	⊢ measure_theory.integrable f μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : ¬measure_theory.integrable f μ,	h : measure_theory.integrable (λ (x : α), f x) (c • μ)	⊢ μ = c⁻¹ • c • μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : ¬measure_theory.integrable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ		α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : measure_theory.integrable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : measure_theory.integrable f μ	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : measure_theory.integrable f μ,	g : α → E := ae_measurable.mk f hfm	⊢ ∫ (x : α), f x ∂c • μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : measure_theory.integrable f μ,	g : α → E := ae_measurable.mk f hfm	⊢ c.to_real • ∫ (x : α), g x ∂μ = c.to_real • ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	c : ℝ≥0∞,	h0 : c ≠ 0,	hfm : ae_measurable f μ,	hc : c ≠ ⊤,	hfi : measure_theory.integrable f μ,	g : α → E := ae_measurable.mk f hfm	⊢ ∫ (x : α), g x ∂μ = ∫ (x : α), f x ∂μ
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	_inst_18 : measurable_space α,	f : α → E,	a : α,	hfm : measurable f	⊢ ∫ (x : α), f a ∂measure_theory.measure.dirac a = f a
α : Type u_1,	E : Type u_2,	_inst_1 : normed_group E,	_inst_2 : topological_space.second_countable_topology E,	_inst_3 : normed_space ℝ E,	_inst_4 : complete_space E,	_inst_5 : measurable_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hf : f =ᵐ[μ] 0	⊢ ∫ (a : α), f a ∂μ = 0
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ	⊢ ∫ (a : α), f a ∂μ = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ ∫ (a : α), f a ∂μ = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real - (∫⁻ (a : α), ennreal.of_real (-f a) ∂μ).to_real = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ ∫⁻ (a : α), ennreal.of_real (-f a) ∂μ = 0
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ (λ (a : α), ennreal.of_real (-f a)) =ᵐ[μ] 0
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ ∀ (x : α), 0 x ≤ f x → (λ (a : α), ennreal.of_real (-f a)) x = 0 x
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ ∀ (x : α), 0 ≤ f x → ennreal.of_real (-f x) = 0
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ (λ (a : α), ennreal.of_real (-f a)) =ᵐ[μ] 0		α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ ae_measurable (λ (a : α), ennreal.of_real (-f a)) μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ,	a : α,	h : 0 ≤ f a	⊢ ennreal.of_real (-f a) = 0
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ ∫⁻ (a : α), ennreal.of_real (-f a) ∂μ = 0		α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ,	h_min : ∫⁻ (a : α), ennreal.of_real (-f a) ∂μ = 0	⊢ (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real - (∫⁻ (a : α), ennreal.of_real (-f a) ∂μ).to_real = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ ae_measurable (λ (a : α), ennreal.of_real (-f a)) μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ	⊢ ∫ (a : α), f a ∂μ = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real		α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : ¬measure_theory.integrable f μ	⊢ ∫ (a : α), f a ∂μ = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : measure_theory.integrable f μ,	h_min : ∫⁻ (a : α), ennreal.of_real (-f a) ∂μ = 0	⊢ (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real - (∫⁻ (a : α), ennreal.of_real (-f a) ∂μ).to_real = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : ¬measure_theory.integrable f μ	⊢ ∫ (a : α), f a ∂μ = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : ¬measure_theory.integrable f μ	⊢ 0 = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ = ⊤	⊢ 0 = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ = ⊤	⊢ ∫⁻ (a : α), ennreal.of_real (f a) ∂μ = ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ = ⊤	⊢ ∫⁻ (a : α), ennreal.of_real (f a) ∂μ = ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ		α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ = ⊤,	this : ∫⁻ (a : α), ennreal.of_real (f a) ∂μ = ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ	⊢ 0 = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ = ⊤,	a : α,	h : 0 a ≤ f a	⊢ ennreal.of_real (f a) = ennreal.of_real ∥f a∥
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ = ⊤,	this : ∫⁻ (a : α), ennreal.of_real (f a) ∂μ = ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ	⊢ 0 = ⊤.to_real
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → ℝ,	hf : 0 ≤ᵐ[μ] f,	hfm : ae_measurable f μ,	hfi : ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ = ⊤,	this : ∫⁻ (a : α), ennreal.of_real (f a) ∂μ = ∫⁻ (a : α), ennreal.of_real ∥f a∥ ∂μ	⊢ 0 = (∫⁻ (a : α), ennreal.of_real (f a) ∂μ).to_real
α : Type u_1,	E : Type u_3,	_inst_1 : measurable_space α,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	_inst_4 : topological_space α,	_inst_5 : opens_measurable_space α,	_inst_6 : t2_space α,	_inst_7 : borel_space E,	μ : measure_theory.measure α,	_inst_8 : measure_theory.is_locally_finite_measure μ,	f : α → E,	hf : continuous f,	hfc : is_compact (closure (function.support f))	⊢ measure_theory.integrable f μ
α : Type u_1,	E : Type u_3,	_inst_1 : measurable_space α,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	_inst_4 : topological_space α,	_inst_5 : opens_measurable_space α,	_inst_6 : t2_space α,	_inst_7 : borel_space E,	μ : measure_theory.measure α,	_inst_8 : measure_theory.is_locally_finite_measure μ,	f : α → E,	hf : continuous f,	hfc : is_compact (closure (function.support f))	⊢ measure_theory.integrable_on f (closure (function.support f)) μ		α : Type u_1,	E : Type u_3,	_inst_1 : measurable_space α,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	_inst_4 : topological_space α,	_inst_5 : opens_measurable_space α,	_inst_6 : t2_space α,	_inst_7 : borel_space E,	μ : measure_theory.measure α,	_inst_8 : measure_theory.is_locally_finite_measure μ,	f : α → E,	hf : continuous f,	hfc : is_compact (closure (function.support f))	⊢ opens_measurable_space α
α : Type u_1,	E : Type u_3,	_inst_1 : measurable_space α,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	_inst_4 : topological_space α,	_inst_5 : opens_measurable_space α,	_inst_6 : t2_space α,	_inst_7 : borel_space E,	μ : measure_theory.measure α,	_inst_8 : measure_theory.is_locally_finite_measure μ,	f : α → E,	hf : continuous f,	hfc : is_compact (closure (function.support f))	⊢ measure_theory.integrable_on f (closure (function.support f)) μ
α : Type u_1,	E : Type u_3,	_inst_1 : measurable_space α,	_inst_2 : measurable_space E,	_inst_3 : normed_group E,	_inst_4 : topological_space α,	_inst_5 : opens_measurable_space α,	_inst_6 : t2_space α,	_inst_7 : borel_space E,	μ : measure_theory.measure α,	_inst_8 : measure_theory.is_locally_finite_measure μ,	f : α → E,	hf : continuous f,	hfc : is_compact (closure (function.support f))	⊢ opens_measurable_space α
α : Type u_1,	_inst_1 : measurable_space α,	_inst_4 : topological_space α,	_inst_5 : opens_measurable_space α,	μ : measure_theory.measure α,	s t : set α,	f g : α → ℝ,	hf : measure_theory.integrable_on f s μ,	hg : continuous_on g t,	hs : measurable_set s,	ht : is_compact t,	hst : s ⊆ t	⊢ measure_theory.integrable_on (λ (x : α), g x * f x) s μ
α : Type u_1,	E : Type u_3,	_inst_1 : measurable_space α,	_inst_2 : normed_group E,	_inst_3 : measurable_space E,	s : set α,	μ : measure_theory.measure α,	C : E	⊢ C = 0 ∨ ⇑(μ.restrict s) set.univ < ⊤ ↔ C = 0 ∨ ⇑μ s < ⊤
α : Type u_1,	E : Type u_4,	_inst_1 : linear_order α,	_inst_2 : measurable_space α,	_inst_3 : measurable_space E,	_inst_4 : normed_group E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : complete_space E,	_inst_7 : normed_space ℝ E,	_inst_8 : borel_space E,	_inst_9 : topological_space α,	_inst_10 : order_topology α,	_inst_11 : opens_measurable_space α,	_inst_12 : topological_space.first_countable_topology α,	μ : measure_theory.measure α,	f : α → E,	a b : α,	_inst_13 : measure_theory.has_no_atoms μ,	h_int : measure_theory.integrable_on f (set.Icc a b) μ	⊢ continuous_on (λ (x : α), ∫ (t : α) in set.Icc a x, f t ∂μ) (set.Icc a b)
α : Type u_1,	E : Type u_4,	_inst_1 : linear_order α,	_inst_2 : measurable_space α,	_inst_3 : measurable_space E,	_inst_4 : normed_group E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : complete_space E,	_inst_7 : normed_space ℝ E,	_inst_8 : borel_space E,	_inst_9 : topological_space α,	_inst_10 : order_topology α,	_inst_11 : opens_measurable_space α,	_inst_12 : topological_space.first_countable_topology α,	μ : measure_theory.measure α,	f : α → E,	a b : α,	_inst_13 : measure_theory.has_no_atoms μ,	h_int : measure_theory.integrable_on f (set.Icc a b) μ	⊢ (λ (x : α), ∫ (t : α) in set.Icc a x, f t ∂μ) = λ (x : α), ∫ (t : α) in set.Ioc a x, f t ∂μ
α : Type u_1,	E : Type u_4,	_inst_1 : linear_order α,	_inst_2 : measurable_space α,	_inst_3 : measurable_space E,	_inst_4 : normed_group E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : complete_space E,	_inst_7 : normed_space ℝ E,	_inst_8 : borel_space E,	_inst_9 : topological_space α,	_inst_10 : order_topology α,	_inst_11 : opens_measurable_space α,	_inst_12 : topological_space.first_countable_topology α,	μ : measure_theory.measure α,	f : α → E,	a b : α,	_inst_13 : measure_theory.has_no_atoms μ,	h_int : measure_theory.integrable_on f (set.Icc a b) μ,	x : α	⊢ ∫ (t : α) in set.Icc a x, f t ∂μ = ∫ (t : α) in set.Ioc a x, f t ∂μ
α : Type u_1,	E : Type u_4,	_inst_1 : linear_order α,	_inst_2 : measurable_space α,	_inst_3 : measurable_space E,	_inst_4 : normed_group E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : complete_space E,	_inst_7 : normed_space ℝ E,	_inst_8 : borel_space E,	_inst_9 : topological_space α,	_inst_10 : order_topology α,	_inst_11 : opens_measurable_space α,	_inst_12 : topological_space.first_countable_topology α,	μ : measure_theory.measure α,	f : α → E,	a b : α,	_inst_13 : measure_theory.has_no_atoms μ,	h_int : measure_theory.integrable_on f (set.Icc a b) μ	⊢ continuous_on (λ (x : α), ∫ (t : α) in set.Ioc a x, f t ∂μ) (set.Icc a b)
α : Type u_1,	_inst_1 : linear_order α,	_inst_2 : measurable_space α,	f : α → ℝ,	a b : α,	μ : measure_theory.measure α,	hab : a ≤ b,	hf : 0 ≤ᵐ[μ.restrict (set.Icc a b)] f,	H : ∀ᵐ (x : α) ∂μ.restrict (set.Ioc a b), 0 x ≤ f x := measure_theory.ae_restrict_of_ae_restrict_of_subset set.Ioc_subset_Icc_self hf	⊢ 0 ≤ ∫ (u : α) in a..b, f u ∂μ
α : Type u_1,	β : Type u_2,	E : Type u_4,	_inst_1 : linear_order α,	_inst_2 : measurable_space α,	_inst_3 : measurable_space E,	_inst_4 : normed_group E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : complete_space E,	_inst_7 : normed_space ℝ E,	_inst_8 : borel_space E,	f : α → E,	c : E,	l l' : filter α,	lt : filter β,	μ : measure_theory.measure α,	u v : β → α,	_inst_9 : l'.is_measurably_generated,	_inst_10 : filter.tendsto_Ixx_class set.Ioc l l',	hfm : measurable_at_filter f l' μ,	hf : filter.tendsto f (l' ⊓ μ.ae) (𝓝 c),	hl : μ.finite_at_filter l',	hu : filter.tendsto u lt l,	hv : filter.tendsto v lt l,	huv : v ≤ᶠ[lt] u,	t : β	⊢ -(∫ (x : α) in v t..u t, f x ∂μ - (⇑μ (set.Ioc (v t) (u t))).to_real • c) = ∫ (x : α) in u t..v t, f x ∂μ + (⇑μ (set.Ioc (v t) (u t))).to_real • c
α : Type u_1,	β : Type u_2,	E : Type u_4,	_inst_1 : linear_order α,	_inst_2 : measurable_space α,	_inst_3 : measurable_space E,	_inst_4 : normed_group E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : complete_space E,	_inst_7 : normed_space ℝ E,	_inst_8 : borel_space E,	f : α → E,	a b : α,	c : E,	la la' : filter α,	lt : filter β,	μ : measure_theory.measure α,	u v : β → α,	_inst_9 : topological_space α,	_inst_10 : order_topology α,	_inst_11 : borel_space α,	_inst_12 : interval_integral.FTC_filter a la la',	_inst_14 : measure_theory.is_locally_finite_measure μ,	hab : interval_integrable f μ a b,	hmeas : measurable_at_filter f la' μ,	hf : filter.tendsto f (la' ⊓ μ.ae) (𝓝 c),	hu : filter.tendsto u lt la,	hv : filter.tendsto v lt la	⊢ asymptotics.is_o (λ (t : β), ∫ (x : α) in v t..b, f x ∂μ - ∫ (x : α) in u t..b, f x ∂μ + ∫ (x : α) in u t..v t, c ∂μ) (λ (t : β), ∫ (x : α) in u t..v t, 1 ∂μ) lt
α : Type u_1,	_inst_6 : conditionally_complete_linear_order α,	_inst_7 : measurable_space α,	_inst_8 : topological_space α,	_inst_9 : order_topology α,	_inst_10 : opens_measurable_space α,	μ : measure_theory.measure α,	a b : α,	f g : α → ℝ,	hf : interval_integrable f μ a b,	hg : continuous_on g [a, b]	⊢ interval_integrable (λ (x : α), g x * f x) μ a b
E : Type u_4,	_inst_3 : measurable_space E,	_inst_4 : normed_group E,	_inst_5 : topological_space.second_countable_topology E,	_inst_6 : complete_space E,	_inst_7 : normed_space ℝ E,	_inst_8 : borel_space E,	a b : ℝ,	f : ℝ → E,	d : ℝ	⊢ ∫ (x : ℝ) in a..b, f (x - d) = ∫ (x : ℝ) in a - d..b - d, f x
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	ι : Sort u_2,	ι' : ι → Sort u_3,	f : Π (i : ι), ι' i → α → ℝ≥0∞	⊢ (λ (a : α), ⨅ (i : ι) (h : ι' i), f i h a) = ⨅ (i : ι), infi (f i)
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	ι : Sort u_2,	ι' : ι → Sort u_3,	f : Π (i : ι), ι' i → α → ℝ≥0∞,	a : α	⊢ (⨅ (i : ι) (h : ι' i), f i h a) = (⨅ (i : ι), infi (f i)) a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	ι : Sort u_2,	ι' : ι → Sort u_3,	f : Π (i : ι), ι' i → α → ℝ≥0∞	⊢ ∫⁻ (a : α), (⨅ (i : ι) (h : ι' i), f i h a) ∂μ ≤ ⨅ (i : ι) (h : ι' i), ∫⁻ (a : α), f i h a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a	⊢ ∫⁻ (a : α), f a ∂μ ≤ ∫⁻ (a : α), g a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0	⊢ ∫⁻ (a : α), f a ∂μ ≤ ∫⁻ (a : α), g a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t	⊢ ∫⁻ (a : α), f a ∂μ ≤ ∫⁻ (a : α), g a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a	⊢ ⇑(measure_theory.simple_func.restrict s tᶜ) ≤ λ (a : α), g a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a,	a : α	⊢ ⇑(measure_theory.simple_func.restrict s tᶜ) a ≤ (λ (a : α), g a) a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a,	a : α	⊢ ⇑(measure_theory.simple_func.restrict s tᶜ) a ≤ (λ (a : α), g a) a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a,	a : α,	h : a ∈ t	⊢ ⇑(measure_theory.simple_func.restrict s tᶜ) a ≤ (λ (a : α), g a) a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a,	a : α,	h : a ∉ t	⊢ ⇑(measure_theory.simple_func.restrict s tᶜ) a ≤ (λ (a : α), g a) a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a,	a : α,	h : a ∉ t	⊢ ⇑s a ≤ g a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a	⊢ ⇑(measure_theory.simple_func.restrict s tᶜ) ≤ λ (a : α), g a		α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a	⊢ measure_theory.simple_func.lintegral s μ ≤ (measure_theory.simple_func.restrict s tᶜ).lintegral μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a	⊢ measure_theory.simple_func.lintegral s μ ≤ (measure_theory.simple_func.restrict s tᶜ).lintegral μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a,	a : α,	hnt : a ∉ t	⊢ ⇑s a = ⇑(measure_theory.simple_func.restrict s tᶜ) a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a,	a : α,	hnt : a ∉ t,	hat : a ∈ t	⊢ ⇑s a = ⇑(measure_theory.simple_func.restrict s tᶜ) a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a,	a : α,	hnt hat : a ∉ t	⊢ ⇑s a = ⇑(measure_theory.simple_func.restrict s tᶜ) a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a,	a : α,	hnt : a ∉ t	⊢ ⇑s a = ⇑(measure_theory.simple_func.restrict s tᶜ) a
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	f g : α → ℝ≥0∞,	h : ∀ᵐ (a : α) ∂μ, f a ≤ g a,	t : set α,	hts : {x : α | (λ (a : α), f a ≤ g a) x}ᶜ ⊆ t,	ht : measurable_set t,	ht0 : ⇑μ t = 0,	this : ∀ᵐ (x : α) ∂μ, x ∉ t,	s : α →ₛ ℝ≥0∞,	hfs : ⇑s ≤ λ (a : α), f a,	a : α,	hnt : a ∉ t,	hat : a ∈ t	⊢ ⇑s a = 0
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞	⊢ r * ∫⁻ (a : α), f a ∂μ ≤ ∫⁻ (a : α), r * f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞	⊢ (⨆ (i : α →ₛ ℝ≥0∞), r * ⨆ (hf : ⇑i ≤ λ (a : α), f a), i.lintegral μ) ≤ ∫⁻ (a : α), r * f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	s : α →ₛ ℝ≥0∞	⊢ (r * ⨆ (hf : ⇑s ≤ λ (a : α), f a), measure_theory.simple_func.lintegral s μ) ≤ ∫⁻ (a : α), r * f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	s : α →ₛ ℝ≥0∞	⊢ (⨆ (i : ⇑s ≤ λ (a : α), f a), r * measure_theory.simple_func.lintegral s μ) ≤ ∫⁻ (a : α), r * f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	s : α →ₛ ℝ≥0∞	⊢ ⇑s ≤ f → r * measure_theory.simple_func.lintegral s μ ≤ ∫⁻ (a : α), r * f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	s : α →ₛ ℝ≥0∞,	hs : ⇑s ≤ f	⊢ r * measure_theory.simple_func.lintegral s μ ≤ ∫⁻ (a : α), r * f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	s : α →ₛ ℝ≥0∞,	hs : ⇑s ≤ f	⊢ (measure_theory.simple_func.const α r * s).lintegral μ ≤ ∫⁻ (a : α), r * f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	s : α →ₛ ℝ≥0∞,	hs : ⇑s ≤ f,	x : α	⊢ ⇑(measure_theory.simple_func.const α r * s) x ≤ (λ (a : α), r * f a) x
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤	⊢ ∫⁻ (a : α), r * f a ∂μ = r * ∫⁻ (a : α), f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : r = 0	⊢ ∫⁻ (a : α), r * f a ∂μ = r * ∫⁻ (a : α), f a ∂μ		α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0	⊢ ∫⁻ (a : α), r * f a ∂μ = r * ∫⁻ (a : α), f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : r = 0	⊢ ∫⁻ (a : α), r * f a ∂μ = r * ∫⁻ (a : α), f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0	⊢ ∫⁻ (a : α), r * f a ∂μ = r * ∫⁻ (a : α), f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0	⊢ ∫⁻ (a : α), r * f a ∂μ ≤ r * ∫⁻ (a : α), f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0,	rinv : r * r⁻¹ = 1	⊢ r⁻¹ * r = 1
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0,	rinv : r * r⁻¹ = 1	⊢ ∫⁻ (a : α), r * f a ∂μ ≤ r * ∫⁻ (a : α), f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0,	rinv : r * r⁻¹ = 1	⊢ r * r⁻¹ = 1
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0,	rinv : r * r⁻¹ = 1,	rinv' : r⁻¹ * r = 1	⊢ ∫⁻ (a : α), r * f a ∂μ ≤ r * ∫⁻ (a : α), f a ∂μ
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0,	rinv : r * r⁻¹ = 1,	rinv' : r⁻¹ * r = 1,	this : r⁻¹ * ∫⁻ (a : α), (λ (x : α), r * f x) a ∂?m_2 ≤ ∫⁻ (a : α), r⁻¹ * (λ (x : α), r * f x) a ∂?m_2	⊢ ∫⁻ (a : α), r * f a ∂μ ≤ r * ∫⁻ (a : α), f a ∂μ		α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0,	rinv : r * r⁻¹ = 1,	rinv' : r⁻¹ * r = 1	⊢ measurable_space α		α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0,	rinv : r * r⁻¹ = 1,	rinv' : r⁻¹ * r = 1	⊢ measure_theory.measure α
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0,	rinv : r * r⁻¹ = 1,	rinv' : r⁻¹ * r = 1,	this : r⁻¹ * ∫⁻ (a : α), r * f a ∂?m_2 ≤ measure_theory.lintegral ?m_2 f	⊢ ∫⁻ (a : α), r * f a ∂μ ≤ r * ∫⁻ (a : α), f a ∂μ		α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0,	rinv : r * r⁻¹ = 1,	rinv' : r⁻¹ * r = 1	⊢ measurable_space α		α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	r : ℝ≥0∞,	f : α → ℝ≥0∞,	hr : r ≠ ⊤,	h : ¬r = 0,	rinv : r * r⁻¹ = 1,	rinv' : r⁻¹ * r = 1	⊢ measure_theory.measure α
α : Type u_1,	m : measurable_space α,	μ : measure_theory.measure α,	β : Type u_2,	_inst_1 : measurable_space β,	ν : measure_theory.measure β,	f : α → ℝ≥0∞,	g : β → ℝ≥0∞,	hf : ae_measurable f μ,	hg : ae_measurable g ν	⊢ ∫⁻ (x : α), ∫⁻ (y : β), f x * g y ∂ν ∂μ = ∫⁻ (x : α), f x ∂μ * ∫⁻ (y : β), g y ∂ν
α : Type u_1,	β : Type u_2,	_inst_1 : measurable_space α,	_inst_2 : has_zero β,	f : α →ₛ β,	s : set α,	hs : measurable_set s,	t : set β,	ht : 0 ∉ t	⊢ ⇑(f.restrict s) ⁻¹' t = s ∩ ⇑f ⁻¹' t
α : Type u_1,	_inst_1 : measurable_space α,	f : α → ℝ≥0∞,	n : ℕ,	a : α	⊢ ∑ (k : ℕ) in finset.range (n + 1), ↑(⇑(measure_theory.simple_func.eapprox_diff f k) a) = ⇑(measure_theory.simple_func.eapprox f n) a
α : Type u_1,	_inst_1 : measurable_space α,	f : α → ℝ≥0∞,	a : α	⊢ ∑ (k : ℕ) in finset.range (0 + 1), ↑(⇑(measure_theory.simple_func.eapprox_diff f k) a) = ⇑(measure_theory.simple_func.eapprox f 0) a
α : Type u_1,	_inst_1 : measurable_space α,	f : α → ℝ≥0∞,	a : α	⊢ ↑(⇑(measure_theory.simple_func.eapprox_diff f 0) a) = ⇑(measure_theory.simple_func.eapprox f 0) a
α : Type u_1,	_inst_1 : measurable_space α,	f : α → ℝ≥0∞,	a : α	⊢ ∑ (k : ℕ) in finset.range (0 + 1), ↑(⇑(measure_theory.simple_func.eapprox_diff f k) a) = ⇑(measure_theory.simple_func.eapprox f 0) a		case nat.succ	α : Type u_1,	_inst_1 : measurable_space α,	f : α → ℝ≥0∞,	a : α,	n : ℕ,	IH : ∑ (k : ℕ) in finset.range (n + 1), ↑(⇑(measure_theory.simple_func.eapprox_diff f k) a) = ⇑(measure_theory.simple_func.eapprox f n) a	⊢ ∑ (k : ℕ) in finset.range (n.succ + 1), ↑(⇑(measure_theory.simple_func.eapprox_diff f k) a) = ⇑(measure_theory.simple_func.eapprox f n.succ) a
α : Type u_1,	_inst_1 : measurable_space α,	f : α → ℝ≥0∞,	a : α,	n : ℕ,	IH : ∑ (k : ℕ) in finset.range (n + 1), ↑(⇑(measure_theory.simple_func.eapprox_diff f k) a) = ⇑(measure_theory.simple_func.eapprox f n) a	⊢ ∑ (k : ℕ) in finset.range (n.succ + 1), ↑(⇑(measure_theory.simple_func.eapprox_diff f k) a) = ⇑(measure_theory.simple_func.eapprox f n.succ) a
α : Type u_1,	_inst_1 : measurable_space α,	f : α → ℝ≥0∞,	a : α,	n : ℕ,	IH : ∑ (k : ℕ) in finset.range (n + 1), ↑(⇑(measure_theory.simple_func.eapprox_diff f k) a) = ⇑(measure_theory.simple_func.eapprox f n) a	⊢ ⇑(measure_theory.simple_func.eapprox f (n + 1)) a - ⇑(measure_theory.simple_func.eapprox f n) a ≠ ⊤
α : Type u_1,	_inst_1 : measurable_space α,	f : α → ℝ≥0∞,	a : α,	n : ℕ,	IH : ∑ (k : ℕ) in finset.range (n + 1), ↑(⇑(measure_theory.simple_func.eapprox_diff f k) a) = ⇑(measure_theory.simple_func.eapprox f n) a	⊢ ⇑(measure_theory.simple_func.eapprox f (n + 1)) a - ⇑(measure_theory.simple_func.eapprox f n) a ≤ ⇑(measure_theory.simple_func.eapprox f (n + 1)) a
α : Type u_1,	_inst_1 : measurable_space α,	f : α → ℝ≥0∞,	a : α,	n : ℕ,	IH : ∑ (k : ℕ) in finset.range (n + 1), ↑(⇑(measure_theory.simple_func.eapprox_diff f k) a) = ⇑(measure_theory.simple_func.eapprox f n) a	⊢ ⇑(measure_theory.simple_func.eapprox f (n + 1)) a ≤ ⇑(measure_theory.simple_func.eapprox f (n + 1)) a + ⇑(measure_theory.simple_func.eapprox f n) a
α : Type u_1,	β : Type u_2,	_inst_1 : measurable_space α,	f : α →ₛ β,	p : β → Prop	⊢ (∃ (y : β) (H : y ∈ f.range), p y) ↔ ∃ (x : α), p (⇑f x)
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : s = ∅	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : s = ∅	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x		α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : s = set.univ	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : s = set.univ,	h : is_empty α,	hα : _ = _	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : s = set.univ,	h : is_empty α,	hα : _ = _	⊢ subsingleton (set α)
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : s = set.univ,	h : is_empty α,	hα : _ = _	⊢ subsingleton (α → Prop)
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : s = set.univ,	h : is_empty α,	hα : _ = _	⊢ s = ∅
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : s = set.univ,	h : is_empty α,	hα : _ = _	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x		α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : s = set.univ,	h : nonempty α,	hα : _ = _	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : s = set.univ,	h : is_empty α,	hα : _ = _,	_inst : subsingleton (set α)	⊢ s = ∅
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : s = set.univ	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x		α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : ¬s = set.univ	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : s = set.univ,	h : nonempty α,	hα : _ = _	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : ¬s = set.univ	⊢ measure_theory.simple_func.set_to_simple_func T (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_empty : ¬s = ∅,	hs_univ : ¬s = set.univ	⊢ ∑ (x_1 : F) in (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)).range, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x_1})) x_1 = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty	⊢ ∑ (x_1 : F) in (measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)).range, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x_1})) x_1 = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty	⊢ ∑ (x_1 : F) in {x, 0}, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x_1})) x_1 = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : x = 0	⊢ ∑ (x : F) in {0, 0}, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α 0) (measure_theory.simple_func.const α 0)) ⁻¹' {x})) x = ⇑(T s) 0
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : x = 0	⊢ ∑ (x_1 : F) in {x, 0}, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x_1})) x_1 = ⇑(T s) x		α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ ∑ (x_1 : F) in {x, 0}, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x_1})) x_1 = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : x = 0	⊢ ∑ (x_1 : F) in {x, 0}, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x_1})) x_1 = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ ∑ (x_1 : F) in {x, 0}, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x_1})) x_1 = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ x ∉ {0}
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ ¬x = 0
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x})) x + ∑ (x_1 : F) in {0}, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x_1})) x_1 = ⇑(T s) x		α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ x ∉ {0}
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ x ∉ {0}		α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x})) x + ∑ (x_1 : F) in {0}, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x_1})) x_1 = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x})) x + ∑ (x_1 : F) in {0}, ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x_1})) x_1 = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ ⇑(T (⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x})) x = ⇑(T s) x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ ⇑(measure_theory.simple_func.piecewise s hs (measure_theory.simple_func.const α x) (measure_theory.simple_func.const α 0)) ⁻¹' {x} = s
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ s.indicator (function.const α x) ⁻¹' {x} = s
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ x ∈ {x}
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ x ∈ {x}		α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ s.ite set.univ (0 ⁻¹' {x}) = s
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ s.ite set.univ (0 ⁻¹' {x}) = s		α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ x ∈ {x}
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ s.ite set.univ (0 ⁻¹' {x}) = s
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ 0 ∉ {x}
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ ¬0 = x
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ s.ite set.univ ∅ = s		α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ 0 ∉ {x}
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ 0 ∉ {x}		α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ s.ite set.univ ∅ = s
α : Type u_1,	F : Type u_3,	F' : Type u_4,	_inst_4 : normed_group F,	_inst_5 : normed_space ℝ F,	_inst_6 : normed_group F',	_inst_7 : normed_space ℝ F',	T : set α → (F →L[ℝ] F'),	hT_empty : T ∅ = 0,	m : measurable_space α,	s : set α,	hs : measurable_set s,	x : F,	hs_univ : ¬s = set.univ,	hs_empty : s.nonempty,	hx0 : ¬x = 0	⊢ s.ite set.univ ∅ = s
α : Type u_1,	β : Type u_2,	_inst_1 : measurable_space α,	_inst_2 : measurable_space β,	_inst_4 : is_empty β,	f : α → β,	_inst : is_empty α	⊢ measurable f
α : Type u_1,	β : Type u_2,	_inst_1 : measurable_space α,	_inst_2 : measurable_space β,	_inst_4 : is_empty β,	f : α → β	⊢ measurable f
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	U : set G,	hU : (interior U).nonempty,	K : set G,	h1K : is_compact K,	h2K : (interior K).nonempty	⊢ 0 < measure_theory.measure.haar.prehaar K₀.val U ⟨K, h1K⟩
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	U : set G,	hU : (interior U).nonempty,	K : set G,	h1K : is_compact K,	h2K : (interior K).nonempty	⊢ 0 < ↑(measure_theory.measure.haar.index ⟨K, h1K⟩.val U)
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	U : set G,	hU : (interior U).nonempty,	K : set G,	h1K : is_compact K,	h2K : (interior K).nonempty	⊢ 0 < ↑(measure_theory.measure.haar.index K₀.val U)
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	U : set G,	hU : (interior U).nonempty,	K : set G,	h1K : is_compact K,	h2K : (interior K).nonempty	⊢ 0 < measure_theory.measure.haar.index ⟨K, h1K⟩.val U		G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	U : set G,	hU : (interior U).nonempty,	K : set G,	h1K : is_compact K,	h2K : (interior K).nonempty	⊢ 0 < measure_theory.measure.haar.index K₀.val U
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	U : set G,	hU : (interior U).nonempty,	K : set G,	h1K : is_compact K,	h2K : (interior K).nonempty	⊢ 0 < measure_theory.measure.haar.index K₀.val U
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	U : set G,	hU : (interior U).nonempty,	K : set G,	h1K : is_compact K,	h2K : (interior K).nonempty	⊢ 0 < measure_theory.measure.haar.prehaar K₀.val U ⟨K, h1K⟩
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G	⊢ measure_theory.measure.haar.chaar K₀ (topological_space.compacts.map (λ (b : G), g * b) _ K) = measure_theory.measure.haar.chaar K₀ K
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K	⊢ measure_theory.measure.haar.chaar K₀ (topological_space.compacts.map (λ (b : G), g * b) _ K) = measure_theory.measure.haar.chaar K₀ K
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval	⊢ measure_theory.measure.haar.chaar K₀ (topological_space.compacts.map (λ (b : G), g * b) _ K) - measure_theory.measure.haar.chaar K₀ K = 0
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval	⊢ measure_theory.measure.haar.chaar K₀ (topological_space.compacts.map (λ (b : G), g * b) _ K) = measure_theory.measure.haar.chaar K₀ K
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval	⊢ measure_theory.measure.haar.chaar K₀ ∈ eval ⁻¹' {0}
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval	⊢ closure (measure_theory.measure.haar.prehaar K₀.val '' {U : set G | U ⊆ ⟨set.univ G, _⟩.val ∧ is_open U ∧ 1 ∈ U}) ⊆ eval ⁻¹' {0}
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval	⊢ measure_theory.measure.haar.cl_prehaar K₀.val ⟨set.univ G, _⟩ ⊆ eval ⁻¹' {0}
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval	⊢ measure_theory.measure.haar.prehaar K₀.val '' {U : set G | U ⊆ ⟨set.univ G, _⟩.val ∧ is_open U ∧ 1 ∈ U} ⊆ eval ⁻¹' {0}
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval,	U : set G,	h1U : U ⊆ ⟨set.univ G, _⟩.val,	h2U : is_open U,	h3U : 1 ∈ U	⊢ measure_theory.measure.haar.prehaar K₀.val U ∈ eval ⁻¹' {0}
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval,	U : set G,	h1U : U ⊆ ⟨set.univ G, _⟩.val,	h2U : is_open U,	h3U : 1 ∈ U	⊢ (interior U).nonempty
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval,	U : set G,	h1U : U ⊆ ⟨set.univ G, _⟩.val,	h2U : is_open U,	h3U : 1 ∈ U	⊢ U.nonempty
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval,	U : set G,	h1U : U ⊆ ⟨set.univ G, _⟩.val,	h2U : is_open U,	h3U : 1 ∈ U	⊢ measure_theory.measure.haar.prehaar K₀.val U (topological_space.compacts.map (has_mul.mul g) _ K) = measure_theory.measure.haar.prehaar K₀.val U K
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval	⊢ measure_theory.measure.haar.prehaar K₀.val '' {U : set G | U ⊆ ⟨set.univ G, _⟩.val ∧ is_open U ∧ 1 ∈ U} ⊆ eval ⁻¹' {0}		G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval	⊢ is_closed (eval ⁻¹' {0})
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval	⊢ is_closed {0}
G : Type u_1,	_inst_1 : group G,	_inst_2 : topological_space G,	_inst_3 : topological_group G,	K₀ : topological_space.positive_compacts G,	g : G,	K : topological_space.compacts G,	eval : (topological_space.compacts G → ℝ) → ℝ := λ (f : topological_space.compacts G → ℝ), f (topological_space.compacts.map (λ (b : G), g * b) _ K) - f K,	this : continuous eval	⊢ is_closed (eval ⁻¹' {0})
X : Type u_2,	Y : Type u_3,	_inst_1 : emetric_space X,	_inst_2 : emetric_space Y,	_inst_3 : measurable_space X,	_inst_4 : borel_space X,	_inst_5 : measurable_space Y,	_inst_6 : borel_space Y,	f : X → Y,	d : ℝ,	hf : isometry f,	hd : 0 ≤ d ∨ function.surjective f,	s : set Y	⊢ ⇑μH[d] (f ⁻¹' s) = ⇑μH[d] (s ∩ set.range f)
a : ℝ,	n : ℕ	⊢ ↑n = ⇑measure_theory.measure_space.volume (set.Ioo a (a + ↑n))
a : ℝ,	p q : ℚ	⊢ ⇑measure_theory.measure_space.volume (set.Ioo ↑p ↑q) = ⇑(⇑(measure_theory.measure.map (has_add.add a)) measure_theory.measure_space.volume) (set.Ioo ↑p ↑q)
ι : Type u_1,	_inst_1 : fintype ι,	a : ι → ℝ	⊢ ⇑(measure_theory.measure.map (has_add.add a)) measure_theory.measure_space.volume = measure_theory.measure_space.volume
ι : Type u_1,	_inst_1 : fintype ι,	a : ι → ℝ,	s : ι → set ℝ,	hs : ∀ (i : ι), measurable_set (s i)	⊢ ⇑(⇑(measure_theory.measure.map (has_add.add a)) measure_theory.measure_space.volume) (set.univ.pi s) = ∏ (i : ι), ⇑measure_theory.measure_space.volume (s i)
ι : Type u_1,	_inst_1 : fintype ι,	a : ι → ℝ,	s : ι → set ℝ,	hs : ∀ (i : ι), measurable_set (s i)	⊢ has_add.add a ⁻¹' set.univ.pi (λ (i : ι), s i) = set.univ.pi (λ (i : ι), has_add.add (a i) ⁻¹' s i)
ι : Type u_1,	_inst_1 : fintype ι,	a : ι → ℝ,	s : ι → set ℝ,	hs : ∀ (i : ι), measurable_set (s i),	x : ι → ℝ	⊢ x ∈ has_add.add a ⁻¹' set.univ.pi (λ (i : ι), s i) ↔ x ∈ set.univ.pi (λ (i : ι), has_add.add (a i) ⁻¹' s i)
ι : Type u_1,	_inst_1 : fintype ι,	a : ι → ℝ,	s : ι → set ℝ,	hs : ∀ (i : ι), measurable_set (s i),	A : has_add.add a ⁻¹' set.univ.pi (λ (i : ι), s i) = set.univ.pi (λ (i : ι), has_add.add (a i) ⁻¹' s i)	⊢ ⇑(⇑(measure_theory.measure.map (has_add.add a)) measure_theory.measure_space.volume) (set.univ.pi s) = ∏ (i : ι), ⇑measure_theory.measure_space.volume (s i)
ι : Type u_1,	_inst_1 : fintype ι,	a : ι → ℝ,	s : ι → set ℝ,	hs : ∀ (i : ι), measurable_set (s i),	A : has_add.add a ⁻¹' set.univ.pi (λ (i : ι), s i) = set.univ.pi (λ (i : ι), has_add.add (a i) ⁻¹' s i)	⊢ ∏ (i : ι), ⇑measure_theory.measure_space.volume (has_add.add (a i) ⁻¹' s i) = ∏ (i : ι), ⇑measure_theory.measure_space.volume (s i)		ι : Type u_1,	_inst_1 : fintype ι,	a : ι → ℝ,	s : ι → set ℝ,	hs : ∀ (i : ι), measurable_set (s i),	A : has_add.add a ⁻¹' set.univ.pi (λ (i : ι), s i) = set.univ.pi (λ (i : ι), has_add.add (a i) ⁻¹' s i)	⊢ ∀ (i : ι), measurable_set (has_add.add (a i) ⁻¹' s i)
ι : Type u_1,	_inst_1 : fintype ι,	a : ι → ℝ,	s : ι → set ℝ,	hs : ∀ (i : ι), measurable_set (s i),	A : has_add.add a ⁻¹' set.univ.pi (λ (i : ι), s i) = set.univ.pi (λ (i : ι), has_add.add (a i) ⁻¹' s i)	⊢ ∏ (i : ι), ⇑measure_theory.measure_space.volume (has_add.add (a i) ⁻¹' s i) = ∏ (i : ι), ⇑measure_theory.measure_space.volume (s i)
ι : Type u_1,	_inst_1 : fintype ι,	a : ι → ℝ,	s : ι → set ℝ,	hs : ∀ (i : ι), measurable_set (s i),	A : has_add.add a ⁻¹' set.univ.pi (λ (i : ι), s i) = set.univ.pi (λ (i : ι), has_add.add (a i) ⁻¹' s i)	⊢ ∀ (i : ι), measurable_set (has_add.add (a i) ⁻¹' s i)
α : Type u_1,	m0 : measurable_space α,	μ ν : measure_theory.measure α,	h : μ.ae ≤ ν.ae,	s : set α	⊢ ⇑ν s = 0 → ⇑μ s = 0
α : Type u_1,	m0 : measurable_space α,	μ ν : measure_theory.measure α,	h : μ.ae ≤ ν.ae,	s : set α	⊢ (∀ᵐ (a : α) ∂ν, a ∉ s) → (∀ᵐ (a : α) ∂μ, a ∉ s)
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	p : α → Prop,	h : ∀ᵐ (x : α) ∂μ, p x,	c : ℝ≥0∞	⊢ ⇑(c • μ) {a : α | ¬p a} = 0
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hs : measurable_set s	⊢ (μ.restrict s).ae = μ.ae ⊓ 𝓟 s
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hs : measurable_set s,	t : set α	⊢ t ∈ (μ.restrict s).ae ↔ t ∈ μ.ae ⊓ 𝓟 s
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hs : measurable_set s,	t : set α	⊢ ⇑μ (tᶜ ∩ s) = 0 ↔ ⇑μ {a : α | a ∉ t ∧ a ∈ s} = 0
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hs : measurable_set s	⊢ s ∈ (μ.restrict s).ae
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hs : measurable_set s	⊢ s ∈ (μ.restrict s).ae
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hs : measurable_set s	⊢ ∃ (t₁ : set α), t₁ ∈ μ.ae ∧ ∃ (t₂ : set α), s ⊆ t₂ ∧ s = t₁ ∩ t₂
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	s t : set α,	_inst_3 : measure_theory.is_finite_measure μ,	hs : measurable_set s,	ht : measurable_set t,	ε : ℝ≥0∞,	h : ⇑μ s ≤ ⇑μ t + ε	⊢ ⇑μ tᶜ ≤ ⇑μ sᶜ + ε
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	s t : set α,	_inst_3 : measure_theory.is_finite_measure μ,	hs : measurable_set s,	ht : measurable_set t,	ε : ℝ≥0∞,	h : ⇑μ s ≤ ⇑μ t + ε	⊢ ⇑μ set.univ ≤ ⇑μ set.univ - ⇑μ s + ε + ⇑μ t
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	s t : set α,	_inst_3 : measure_theory.is_finite_measure μ,	hs : measurable_set s,	ht : measurable_set t,	ε : ℝ≥0∞,	h : ⇑μ s ≤ ⇑μ t + ε	⊢ ⇑μ set.univ - ⇑μ s + (⇑μ t + ε) = ⇑μ set.univ - ⇑μ s + ε + ⇑μ t
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s	⊢ ⇑μ s = ⇑ν s
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s	⊢ measure_theory.is_finite_measure ν
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s	⊢ ⇑ν set.univ < ⊤
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s	⊢ ⇑μ set.univ < ⊤
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν	⊢ ⇑μ ∅ = ⇑ν ∅
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν	⊢ ⇑μ s = ⇑ν s
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν	⊢ ∀ (t : set α), measurable_set t → ⇑μ t = ⇑ν t → ⇑μ tᶜ = ⇑ν tᶜ
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	t : set α,	h1t : measurable_set t,	h2t : ⇑μ t = ⇑ν t	⊢ measurable_set t		α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	t : set α,	h1t : measurable_set t,	h2t : ⇑μ t = ⇑ν t,	h1t_ : measurable_set t	⊢ ⇑μ tᶜ = ⇑ν tᶜ
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	t : set α,	h1t : measurable_set t,	h2t : ⇑μ t = ⇑ν t	⊢ ⇑μ tᶜ = ⇑ν tᶜ
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	t : set α,	h1t : measurable_set t,	h2t : ⇑μ t = ⇑ν t,	h1t_ : measurable_set t	⊢ ⇑μ tᶜ = ⇑ν tᶜ
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν	⊢ ∀ (t : set α), measurable_set t → ⇑μ t = ⇑ν t → ⇑μ tᶜ = ⇑ν tᶜ		α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν	⊢ ∀ (f : ℕ → set α), pairwise (disjoint on f) → (∀ (i : ℕ), measurable_set (f i)) → (∀ (i : ℕ), ⇑μ (f i) = ⇑ν (f i)) → ⇑μ (⋃ (i : ℕ), f i) = ⇑ν (⋃ (i : ℕ), f i)
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν	⊢ ∀ (f : ℕ → set α), pairwise (disjoint on f) → (∀ (i : ℕ), measurable_set (f i)) → (∀ (i : ℕ), ⇑μ (f i) = ⇑ν (f i)) → ⇑μ (⋃ (i : ℕ), f i) = ⇑ν (⋃ (i : ℕ), f i)
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	f : ℕ → set α,	h1f : pairwise (disjoint on f),	h2f : ∀ (i : ℕ), measurable_set (f i),	h3f : ∀ (i : ℕ), ⇑μ (f i) = ⇑ν (f i)	⊢ ∀ (i : ℕ), measurable_set (f i)		α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	f : ℕ → set α,	h1f : pairwise (disjoint on f),	h2f : ∀ (i : ℕ), measurable_set (f i),	h3f : ∀ (i : ℕ), ⇑μ (f i) = ⇑ν (f i),	h2f_ : ∀ (i : ℕ), measurable_set (f i)	⊢ ⇑μ (⋃ (i : ℕ), f i) = ⇑ν (⋃ (i : ℕ), f i)
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	f : ℕ → set α,	h1f : pairwise (disjoint on f),	h2f : ∀ (i : ℕ), measurable_set (f i),	h3f : ∀ (i : ℕ), ⇑μ (f i) = ⇑ν (f i)	⊢ ⇑μ (⋃ (i : ℕ), f i) = ⇑ν (⋃ (i : ℕ), f i)
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	f : ℕ → set α,	h1f : pairwise (disjoint on f),	h2f : ∀ (i : ℕ), measurable_set (f i),	h3f : ∀ (i : ℕ), ⇑μ (f i) = ⇑ν (f i),	h2f_ : ∀ (i : ℕ), measurable_set (f i)	⊢ measurable_set (⋃ (i : ℕ), f i)		α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	f : ℕ → set α,	h1f : pairwise (disjoint on f),	h2f : ∀ (i : ℕ), measurable_set (f i),	h3f : ∀ (i : ℕ), ⇑μ (f i) = ⇑ν (f i),	h2f_ : ∀ (i : ℕ), measurable_set (f i),	h_Union : measurable_set (⋃ (i : ℕ), f i)	⊢ ⇑μ (⋃ (i : ℕ), f i) = ⇑ν (⋃ (i : ℕ), f i)
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	f : ℕ → set α,	h1f : pairwise (disjoint on f),	h2f : ∀ (i : ℕ), measurable_set (f i),	h3f : ∀ (i : ℕ), ⇑μ (f i) = ⇑ν (f i),	h2f_ : ∀ (i : ℕ), measurable_set (f i)	⊢ ⇑μ (⋃ (i : ℕ), f i) = ⇑ν (⋃ (i : ℕ), f i)
α : Type u_1,	m₀ : measurable_space α,	μ ν : measure_theory.measure α,	_inst_3 : measure_theory.is_finite_measure μ,	C : set (set α),	hμν : ∀ (s : set α), s ∈ C → ⇑μ s = ⇑ν s,	m : measurable_space α,	h : m ≤ m₀,	hA : m = measurable_space.generate_from C,	hC : is_pi_system C,	h_univ : ⇑μ set.univ = ⇑ν set.univ,	s : set α,	hs : m.measurable_set' s,	_inst : measure_theory.is_finite_measure ν,	f : ℕ → set α,	h1f : pairwise (disjoint on f),	h2f : ∀ (i : ℕ), measurable_set (f i),	h3f : ∀ (i : ℕ), ⇑μ (f i) = ⇑ν (f i),	h2f_ : ∀ (i : ℕ), measurable_set (f i),	h_Union : measurable_set (⋃ (i : ℕ), f i)	⊢ ⇑μ (⋃ (i : ℕ), f i) = ⇑ν (⋃ (i : ℕ), f i)
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	f : filter α	⊢ μ.finite_at_filter (f ⊓ μ.ae) ↔ μ.finite_at_filter f
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	f : filter α	⊢ μ.finite_at_filter (f ⊓ μ.ae) → μ.finite_at_filter f
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	f : filter α,	t : set α,	ht : t ∈ f,	u : set α,	hu : u ∈ μ.ae,	hμ : ⇑μ (t ∩ u) < ⊤,	this : ⇑μ t ≤ ⇑μ (t ∩ u)	⊢ μ.finite_at_filter f		α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	f : filter α,	t : set α,	ht : t ∈ f,	u : set α,	hu : u ∈ μ.ae,	hμ : ⇑μ (t ∩ u) < ⊤	⊢ ⇑μ t ≤ ⇑μ (t ∩ u)
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	f : filter α,	t : set α,	ht : t ∈ f,	u : set α,	hu : u ∈ μ.ae,	hμ : ⇑μ (t ∩ u) < ⊤	⊢ μ.finite_at_filter f
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	f : filter α,	t : set α,	ht : t ∈ f,	u : set α,	hu : u ∈ μ.ae,	hμ : ⇑μ (t ∩ u) < ⊤	⊢ ⇑μ t ≤ ⇑μ (t ∩ u)
α : Type u_1,	m m0 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hm : m ≤ m0,	hs : ⇑(μ.trim hm) s = 0	⊢ ⇑(μ.trim hm) (measure_theory.to_measurable (μ.trim hm) s) = 0
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	m : set (measure_theory.measure α),	h : μ ∈ m,	this : has_Inf.Inf (measure_theory.measure.to_outer_measure '' m) ≤ μ.to_outer_measure,	s : set α,	hs : measurable_set s	⊢ ⇑(has_Inf.Inf m) s ≤ ⇑μ s
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	m : set (measure_theory.measure α),	h : μ ∈ m,	this : has_Inf.Inf (measure_theory.measure.to_outer_measure '' m) ≤ μ.to_outer_measure,	s : set α,	hs : measurable_set s	⊢ ⇑(has_Inf.Inf m) s ≤ ⇑μ s
α : Type u_1,	m0 : measurable_space α,	μ : measure_theory.measure α,	m : set (measure_theory.measure α),	h : μ ∈ m,	this : has_Inf.Inf (measure_theory.measure.to_outer_measure '' m) ≤ μ.to_outer_measure,	s : set α,	hs : measurable_set s	⊢ ⇑(has_Inf.Inf (measure_theory.measure.to_outer_measure '' m)) s ≤ ⇑(μ.to_outer_measure) s
α : Type u_1,	_inst_1 : measurable_space α,	μ₁ μ₂ : measure_theory.measure α,	h : ∀ (s : set α), measurable_set s → ⇑μ₁ s = ⇑μ₂ s	⊢ μ₁.to_outer_measure = μ₂.to_outer_measure
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hs : measurable_set s	⊢ ⇑μ s = measure_theory.extend (λ (t : set α) (ht : measurable_set t), ⇑μ t) s
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	s : set α,	hs : measurable_set s	⊢ ∀ ⦃f : ℕ → set α⦄, (∀ (i : ℕ), measurable_set (f i)) → pairwise (disjoint on f) → ⇑μ (⋃ (i : ℕ), f i) = ∑' (i : ℕ), ⇑μ (f i)
α : Type u_1,	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	s t : set α	⊢ s ∪ t =ᵐ[μ] t ↔ ⇑μ (s \ t) = 0
α : Type u,	m : measure_theory.outer_measure α,	s₁ s₂ : set α,	h₁ : measure_theory.outer_measure.is_caratheodory s₁,	h₂ : measure_theory.outer_measure.is_caratheodory s₂,	t : set α	⊢ ⇑m t = ⇑m (t ∩ (s₁ ∪ s₂)) + ⇑m (t \ (s₁ ∪ s₂))
α : Type u,	m : measure_theory.outer_measure α,	s₁ s₂ : set α,	h₁ : measure_theory.outer_measure.is_caratheodory s₁,	h₂ : measure_theory.outer_measure.is_caratheodory s₂,	t : set α	⊢ ⇑m (t ∩ s₁ ∩ s₂) + ⇑m (t ∩ s₁ \ s₂) + (⇑m (t \ s₁ ∩ s₂) + ⇑m (t \ s₁ \ s₂)) = ⇑m (t ∩ s₁ ∩ s₂) + ⇑m (t ∩ s₁ \ s₂) + ⇑m (t ∩ (s₂ \ s₁)) + ⇑m (t \ (s₁ ∪ s₂))
X : Type u_1,	_inst_3 : pseudo_emetric_space X,	_inst_4 : measurable_space X,	_inst_5 : opens_measurable_space X,	μ : measure_theory.measure X	⊢ μ.inner_regular is_closed is_open
X : Type u_1,	_inst_3 : pseudo_emetric_space X,	_inst_4 : measurable_space X,	_inst_5 : opens_measurable_space X,	μ : measure_theory.measure X,	U : set X,	hU : is_open U,	r : ℝ≥0∞,	hr : r < ⇑μ U	⊢ ∃ (K : set X) (H : K ⊆ U), is_closed K ∧ r < ⇑μ K
X : Type u_1,	_inst_3 : pseudo_emetric_space X,	_inst_4 : measurable_space X,	_inst_5 : opens_measurable_space X,	μ : measure_theory.measure X,	r : ℝ≥0∞,	F : ℕ → set X,	F_closed : ∀ (n : ℕ), is_closed (F n),	F_mono : monotone F,	hU : is_open (⋃ (n : ℕ), F n),	hr : r < ⇑μ (⋃ (n : ℕ), F n)	⊢ ∃ (K : set X) (H : K ⊆ ⋃ (n : ℕ), F n), is_closed K ∧ r < ⇑μ K
X : Type u_1,	_inst_3 : pseudo_emetric_space X,	_inst_4 : measurable_space X,	_inst_5 : opens_measurable_space X,	μ : measure_theory.measure X,	r : ℝ≥0∞,	F : ℕ → set X,	F_closed : ∀ (n : ℕ), is_closed (F n),	F_mono : monotone F,	hU : is_open (⋃ (n : ℕ), F n),	hr : r < ⨆ (i : ℕ), ⇑μ ((λ (n : ℕ), F n) i)	⊢ ∃ (K : set X) (H : K ⊆ ⋃ (n : ℕ), F n), is_closed K ∧ r < ⇑μ K
X : Type u_1,	_inst_3 : pseudo_emetric_space X,	_inst_4 : measurable_space X,	_inst_5 : opens_measurable_space X,	μ : measure_theory.measure X,	r : ℝ≥0∞,	F : ℕ → set X,	F_closed : ∀ (n : ℕ), is_closed (F n),	F_mono : monotone F,	hU : is_open (⋃ (n : ℕ), F n),	hr : r < ⨆ (i : ℕ), ⇑μ ((λ (n : ℕ), F n) i),	n : ℕ,	hn : r < ⇑μ ((λ (n : ℕ), F n) n)	⊢ ∃ (K : set X) (H : K ⊆ ⋃ (n : ℕ), F n), is_closed K ∧ r < ⇑μ K
α : Type u_1,	_inst_1 : measurable_space α,	_inst_2 : topological_space α,	μ : measure_theory.measure α,	_inst_3 : μ.regular	⊢ (∃ (K : set α), is_compact K ∧ ⇑μ K ≠ 0) ↔ μ ≠ 0
f : stieltjes_function,	c : ℝ	⊢ f.outer.caratheodory.measurable_set' (set.Ioi c)
f : stieltjes_function,	c : ℝ,	t : set ℝ	⊢ f.length (t ∩ set.Ioi c) + f.length (t \ set.Ioi c) ≤ f.length t
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b	⊢ f.length (t ∩ set.Ioi c) + f.length (t \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : a ≤ c	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : c ≤ a	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : a ≤ c,	hbc : b ≤ c	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : a ≤ c,	hbc : b ≤ c	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)		case or.inl, or.inr	f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : a ≤ c,	hbc : c ≤ b	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)		case or.inr, or.inl	f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : c ≤ a,	hbc : b ≤ c	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)		case or.inr, or.inr	f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : c ≤ a,	hbc : c ≤ b	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : a ≤ c,	hbc : c ≤ b	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : a ≤ c,	hbc : c ≤ b	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)		case or.inr, or.inl	f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : c ≤ a,	hbc : b ≤ c	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)		case or.inr, or.inr	f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : c ≤ a,	hbc : c ≤ b	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : c ≤ a,	hbc : b ≤ c	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : c ≤ a,	hbc : b ≤ c	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)		case or.inr, or.inr	f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : c ≤ a,	hbc : c ≤ b	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	c : ℝ,	t : set ℝ,	a b : ℝ,	h : t ⊆ set.Ioc a b,	hac : c ≤ a,	hbc : c ≤ b	⊢ f.length (set.Ioc a b ∩ set.Ioi c) + f.length (set.Ioc a b \ set.Ioi c) ≤ ennreal.of_real (⇑f b - ⇑f a)
f : stieltjes_function,	x y : ℝ,	h : x ≤ y	⊢ f.left_lim x ≤ f.left_lim y
f : stieltjes_function,	x : ℝ,	h : x ≤ x	⊢ f.left_lim x ≤ f.left_lim x		f : stieltjes_function,	x y : ℝ,	h : x ≤ y,	hxy : x < y	⊢ f.left_lim x ≤ f.left_lim y
f : stieltjes_function,	x : ℝ,	h : x ≤ x	⊢ f.left_lim x ≤ f.left_lim x
f : stieltjes_function,	x y : ℝ,	h : x ≤ y,	hxy : x < y	⊢ f.left_lim x ≤ f.left_lim y
α : Type u_1,	m : measurable_space α,	M : Type u_4,	_inst_3 : add_comm_monoid M,	_inst_4 : topological_space M,	N : Type u_2,	_inst_7 : add_comm_group N,	_inst_8 : topological_space N,	_inst_9 : topological_add_group N,	v : measure_theory.vector_measure α M,	w : measure_theory.vector_measure α N,	h : v ≪ w	⊢ v ≪ -w
α : Type u_1,	m : measurable_space α,	M : Type u_4,	_inst_3 : add_comm_monoid M,	_inst_4 : topological_space M,	N : Type u_2,	_inst_7 : add_comm_group N,	_inst_8 : topological_space N,	_inst_9 : topological_add_group N,	v : measure_theory.vector_measure α M,	w : measure_theory.vector_measure α N,	h : v ≪ w,	s : set α,	hs : (⇑-w) s = 0	⊢ ⇑v s = 0
α : Type u_1,	m : measurable_space α,	M : Type u_4,	_inst_3 : add_comm_monoid M,	_inst_4 : topological_space M,	N : Type u_2,	_inst_7 : add_comm_group N,	_inst_8 : topological_space N,	_inst_9 : topological_add_group N,	v : measure_theory.vector_measure α M,	w : measure_theory.vector_measure α N,	h : v ≪ w,	s : set α,	hs : ⇑w s = 0	⊢ ⇑v s = 0
α : Type u_1,	E : Type u_3,	_inst_1 : normed_group E,	_inst_2 : measurable_space E,	_inst_3 : topological_space.second_countable_topology E,	_inst_4 : normed_space ℝ E,	_inst_5 : complete_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hf : measure_theory.integrable f μ	⊢ ite (measurable_set ∅) (∫ (x : α) in ∅, f x ∂μ) 0 = 0
α : Type u_1,	E : Type u_3,	_inst_1 : normed_group E,	_inst_2 : measurable_space E,	_inst_3 : topological_space.second_countable_topology E,	_inst_4 : normed_space ℝ E,	_inst_5 : complete_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hf : measure_theory.integrable f μ,	s : ℕ → set α,	hs₁ : ∀ (i : ℕ), measurable_set (s i),	hs₂ : pairwise (disjoint on s)	⊢ has_sum (λ (i : ℕ), ite (measurable_set (s i)) (∫ (x : α) in s i, f x ∂μ) 0) (ite (measurable_set (⋃ (i : ℕ), s i)) (∫ (x : α) in ⋃ (i : ℕ), s i, f x ∂μ) 0)
α : Type u_1,	E : Type u_3,	_inst_1 : normed_group E,	_inst_2 : measurable_space E,	_inst_3 : topological_space.second_countable_topology E,	_inst_4 : normed_space ℝ E,	_inst_5 : complete_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hf : measure_theory.integrable f μ,	s : ℕ → set α,	hs₁ : ∀ (i : ℕ), measurable_set (s i),	hs₂ : pairwise (disjoint on s),	n : ℕ	⊢ ite (measurable_set (s n)) (∫ (x : α) in s n, f x ∂μ) 0 = measure_theory.integral (μ.restrict (s n)) f
α : Type u_1,	E : Type u_3,	_inst_1 : normed_group E,	_inst_2 : measurable_space E,	_inst_3 : topological_space.second_countable_topology E,	_inst_4 : normed_space ℝ E,	_inst_5 : complete_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hf : measure_theory.integrable f μ,	s : ℕ → set α,	hs₁ : ∀ (i : ℕ), measurable_set (s i),	hs₂ : pairwise (disjoint on s)	⊢ (λ (i : ℕ), ite (measurable_set (s i)) (∫ (x : α) in s i, f x ∂μ) 0) = λ (n : ℕ), measure_theory.integral (μ.restrict (s n)) f		α : Type u_1,	E : Type u_3,	_inst_1 : normed_group E,	_inst_2 : measurable_space E,	_inst_3 : topological_space.second_countable_topology E,	_inst_4 : normed_space ℝ E,	_inst_5 : complete_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hf : measure_theory.integrable f μ,	s : ℕ → set α,	hs₁ : ∀ (i : ℕ), measurable_set (s i),	hs₂ : pairwise (disjoint on s)	⊢ ite (measurable_set (⋃ (i : ℕ), s i)) (∫ (x : α) in ⋃ (i : ℕ), s i, f x ∂μ) 0 = measure_theory.integral (μ.restrict (set.Union s)) f
α : Type u_1,	E : Type u_3,	_inst_1 : normed_group E,	_inst_2 : measurable_space E,	_inst_3 : topological_space.second_countable_topology E,	_inst_4 : normed_space ℝ E,	_inst_5 : complete_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hf : measure_theory.integrable f μ,	s : ℕ → set α,	hs₁ : ∀ (i : ℕ), measurable_set (s i),	hs₂ : pairwise (disjoint on s)	⊢ (λ (i : ℕ), ite (measurable_set (s i)) (∫ (x : α) in s i, f x ∂μ) 0) = λ (n : ℕ), measure_theory.integral (μ.restrict (s n)) f
α : Type u_1,	E : Type u_3,	_inst_1 : normed_group E,	_inst_2 : measurable_space E,	_inst_3 : topological_space.second_countable_topology E,	_inst_4 : normed_space ℝ E,	_inst_5 : complete_space E,	_inst_6 : borel_space E,	m : measurable_space α,	μ : measure_theory.measure α,	f : α → E,	hf : measure_theory.integrable f μ,	s : ℕ → set α,	hs₁ : ∀ (i : ℕ), measurable_set (s i),	hs₂ : pairwise (disjoint on s)	⊢ ite (measurable_set (⋃ (i : ℕ), s i)) (∫ (x : α) in ⋃ (i : ℕ), s i, f x ∂μ) 0 = measure_theory.integral (μ.restrict (set.Union s)) f
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	h_t : t ∈ generate_pi_system (⋃ (b : β), g b)	⊢ ∃ (T : finset β) (f : β → set α), (t = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t s : set α,	h_s : s ∈ ⋃ (b : β), g b	⊢ ∃ (T : finset β) (f : β → set α), (s = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t s : set α,	b : β,	h_s_in_t' : s ∈ (λ (b : β), g b) b	⊢ ∃ (T : finset β) (f : β → set α), (s = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t s : set α,	h_s : s ∈ ⋃ (b : β), g b	⊢ ∃ (T : finset β) (f : β → set α), (s = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b		case generate_pi_system.inter	α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t s t' : set α,	h_gen_s : generate_pi_system (⋃ (b : β), g b) s,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) t',	h_nonempty : (s ∩ t').nonempty,	h_s : ∃ (T : finset β) (f : β → set α), (s = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b,	h_t' : ∃ (T : finset β) (f : β → set α), (t' = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b	⊢ ∃ (T : finset β) (f : β → set α), (s ∩ t' = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t s : set α,	b : β,	h_s_in_t' : s ∈ (λ (b : β), g b) b	⊢ (s = ⋂ (b_1 : β) (H : b_1 ∈ {b}), s) ∧ ∀ (b_1 : β), b_1 ∈ {b} → s ∈ g b_1
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t s t' : set α,	h_gen_s : generate_pi_system (⋃ (b : β), g b) s,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) t',	h_nonempty : (s ∩ t').nonempty,	h_s : ∃ (T : finset β) (f : β → set α), (s = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b,	h_t' : ∃ (T : finset β) (f : β → set α), (t' = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b	⊢ ∃ (T : finset β) (f : β → set α), (s ∩ t' = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t s : set α,	h_gen_s : generate_pi_system (⋃ (b : β), g b) s,	h_s : ∃ (T : finset β) (f : β → set α), (s = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	h_nonempty : (s ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty	⊢ ∃ (T : finset β) (f : β → set α), ((s ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b) = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty	⊢ ∃ (T : finset β) (f : β → set α), (((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b) = ⋂ (b : β) (H : b ∈ T), f b) ∧ ∀ (b : β), b ∈ T → f b ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty	⊢ (((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b) = ⋂ (b : β) (H : b ∈ T_s ∪ T_t'), ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ ∀ (b : β), b ∈ T_s ∪ T_t' → ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅) ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty	⊢ ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b) = ⋂ (b : β) (H : b ∈ T_s ∪ T_t'), ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α	⊢ (a ∈ (⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b) ↔ a ∈ ⋂ (b : β) (H : b ∈ T_s ∪ T_t'), ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α	⊢ ((∀ (i : β), i ∈ T_s → a ∈ f_s i) ∧ ∀ (i : β), i ∈ T_t' → a ∈ f_t' i) ↔ ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α	⊢ (∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x)) ↔ ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α	⊢ (∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x)) ↔ ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α	⊢ (∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x)) ↔ ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α	⊢ (∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x)) ↔ ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α	⊢ (∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x)) ↔ ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α	⊢ (∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x)) → ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α	⊢ (∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅))) → ∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x),	b : β	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)),	b : β	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x),	b : β,	hbs : b ∈ T_s	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x),	b : β,	hbs : b ∉ T_s	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)),	b : β,	hbs : b ∈ T_s	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)),	b : β,	hbs : b ∉ T_s	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x),	b : β,	hbs : b ∈ T_s,	hbt : b ∈ T_t'	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x),	b : β,	hbs : b ∈ T_s,	hbt : b ∉ T_t'	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x),	b : β,	hbs : b ∉ T_s,	hbt : b ∈ T_t'	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x),	b : β,	hbs : b ∉ T_s,	hbt : b ∉ T_t'	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)),	b : β,	hbs : b ∈ T_s,	hbt : b ∈ T_t'	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)),	b : β,	hbs : b ∈ T_s,	hbt : b ∉ T_t'	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)),	b : β,	hbs : b ∉ T_s,	hbt : b ∈ T_t'	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	h1 : ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)),	b : β,	hbs : b ∉ T_s,	hbt : b ∉ T_t'	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α	⊢ (∀ (x : β), (x ∈ T_s → a ∈ f_s x) ∧ (x ∈ T_t' → a ∈ f_t' x)) ↔ ∀ (i : β), (i ∈ T_s → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅)) ∧ (i ∈ T_t' → a ∈ ite (i ∈ T_s) (ite (i ∈ T_t') (f_s i ∩ f_t' i) (f_s i)) (ite (i ∈ T_t') (f_t' i) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∈ T_t',	h1 : (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∉ T_t',	h1 : (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∉ T_s,	hbt : b ∈ T_t',	h1 : (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∉ T_s,	hbt : b ∉ T_t',	h1 : (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)	⊢ (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∈ T_t',	h1 : (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∉ T_t',	h1 : (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∉ T_s,	hbt : b ∈ T_t',	h1 : (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∉ T_s,	hbt : b ∉ T_t',	h1 : (b ∈ T_s → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)) ∧ (b ∈ T_t' → a ∈ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅))	⊢ (b ∈ T_s → a ∈ f_s b) ∧ (b ∈ T_t' → a ∈ f_t' b)
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∈ T_t',	h1 : a ∈ f_s b ∧ a ∈ f_t' b	⊢ a ∈ f_s b ∩ f_t' b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∉ T_t',	h1 : a ∈ f_s b	⊢ a ∈ f_s b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∉ T_s,	hbt : b ∈ T_t',	h1 : a ∈ f_t' b	⊢ a ∈ f_t' b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∈ T_t',	h1 : a ∈ f_s b ∩ f_t' b	⊢ a ∈ f_s b ∧ a ∈ f_t' b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty	⊢ ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b) = ⋂ (b : β) (H : b ∈ T_s ∪ T_t'), ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅)		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty	⊢ ∀ (b : β), b ∈ T_s ∪ T_t' → ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅) ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∈ T_t',	h1 : a ∈ f_s b ∧ a ∈ f_t' b	⊢ a ∈ f_s b ∩ f_t' b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∉ T_t',	h1 : a ∈ f_s b	⊢ a ∈ f_s b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∉ T_s,	hbt : b ∈ T_t',	h1 : a ∈ f_t' b	⊢ a ∈ f_t' b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∈ T_t',	h1 : a ∈ f_s b ∩ f_t' b	⊢ a ∈ f_s b ∧ a ∈ f_t' b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∈ T_s,	hbt : b ∉ T_t',	h1 : a ∈ f_s b	⊢ a ∈ f_s b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	a : α,	b : β,	hbs : b ∉ T_s,	hbt : b ∈ T_t',	h1 : a ∈ f_t' b	⊢ a ∈ f_t' b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty	⊢ ∀ (b : β), b ∈ T_s ∪ T_t' → ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅) ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t'	⊢ ite (b ∈ T_s) (ite (b ∈ T_t') (f_s b ∩ f_t' b) (f_s b)) (ite (b ∈ T_t') (f_t' b) ∅) ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∈ T_s,	hbt : b ∈ T_t'	⊢ f_s b ∩ f_t' b ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∈ T_s,	hbt : b ∈ T_t'	⊢ ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b) ⊆ f_s b ∩ f_t' b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∈ T_s,	hbt : b ∈ T_t'	⊢ f_s b ∩ f_t' b ∈ g b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∈ T_s,	hbt : b ∉ T_t'	⊢ f_s b ∈ g b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∉ T_s,	hbt : b ∈ T_t'	⊢ f_t' b ∈ g b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∉ T_s,	hbt : b ∉ T_t'	⊢ ∅ ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∈ T_s,	hbt : b ∉ T_t'	⊢ f_s b ∈ g b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∉ T_s,	hbt : b ∈ T_t'	⊢ f_t' b ∈ g b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∉ T_s,	hbt : b ∉ T_t'	⊢ ∅ ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∈ T_s,	hbt : b ∉ T_t'	⊢ f_s b ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∉ T_s,	hbt : b ∈ T_t'	⊢ f_t' b ∈ g b		α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∉ T_s,	hbt : b ∉ T_t'	⊢ ∅ ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∉ T_s,	hbt : b ∈ T_t'	⊢ f_t' b ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	h_b : b ∈ T_s ∪ T_t',	hbs : b ∉ T_s,	hbt : b ∉ T_t'	⊢ ∅ ∈ g b
α : Type u_1,	β : Type u_2,	g : β → set (set α),	h_pi : ∀ (b : β), is_pi_system (g b),	t : set α,	T_t' : finset β,	f_t' : β → set α,	h_t' : ∀ (b : β), b ∈ T_t' → f_t' b ∈ g b,	h_gen_t' : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_t'), f_t' b),	T_s : finset β,	f_s : β → set α,	h_s : ∀ (b : β), b ∈ T_s → f_s b ∈ g b,	h_gen_s : generate_pi_system (⋃ (b : β), g b) (⋂ (b : β) (H : b ∈ T_s), f_s b),	h_nonempty : ((⋂ (b : β) (H : b ∈ T_s), f_s b) ∩ ⋂ (b : β) (H : b ∈ T_t'), f_t' b).nonempty,	b : β,	hbs : b ∉ T_s,	hbt : b ∉ T_t',	h_b : b ∈ T_s ∨ b ∈ T_t'	⊢ ∅ ∈ g b
pqr : multiset ℕ+	⊢ ADE_inequality.admissible pqr → 1 < ADE_inequality.sum_inv pqr
pqr : multiset ℕ+	⊢ (∃ (q r : ℕ+), ADE_inequality.A' q r = pqr) ∨ (∃ (r : ℕ+), ADE_inequality.D' r = pqr) ∨ ADE_inequality.E' 3 = pqr ∨ ADE_inequality.E' 4 = pqr ∨ ADE_inequality.E' 5 = pqr → 1 < ADE_inequality.sum_inv pqr
pqr : multiset ℕ+,	p' q' : ℕ+,	H : ADE_inequality.A' p' q' = pqr	⊢ 1 < ADE_inequality.sum_inv pqr
pqr : multiset ℕ+,	p' q' : ℕ+,	H : ADE_inequality.A' p' q' = pqr	⊢ 1 < (↑1)⁻¹ + ((↑p')⁻¹ + (↑q')⁻¹)
pqr : multiset ℕ+,	p' q' : ℕ+,	H : ADE_inequality.A' p' q' = pqr	⊢ 0 < (↑↑p')⁻¹ + (↑↑q')⁻¹
pqr : multiset ℕ+,	p' q' : ℕ+,	H : ADE_inequality.A' p' q' = pqr	⊢ 0 < (↑↑p')⁻¹
pqr : multiset ℕ+,	p' q' : ℕ+,	H : ADE_inequality.A' p' q' = pqr	⊢ 0 < (↑↑q')⁻¹
pqr : multiset ℕ+,	p' q' : ℕ+,	H : ADE_inequality.A' p' q' = pqr	⊢ 0 < (↑↑p')⁻¹ + (↑↑q')⁻¹
pqr : multiset ℕ+,	p' q' : ℕ+,	H : ADE_inequality.A' p' q' = pqr	⊢ 1 < ADE_inequality.sum_inv pqr		pqr : multiset ℕ+,	n : ℕ+,	H : ADE_inequality.D' n = pqr	⊢ 1 < ADE_inequality.sum_inv pqr		pqr : multiset ℕ+,	H : ADE_inequality.E' 3 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr		pqr : multiset ℕ+,	H : ADE_inequality.E' 4 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr		pqr : multiset ℕ+,	H : ADE_inequality.E' 5 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr
pqr : multiset ℕ+,	n : ℕ+,	H : ADE_inequality.D' n = pqr	⊢ 1 < ADE_inequality.sum_inv pqr
pqr : multiset ℕ+,	n : ℕ+,	H : ADE_inequality.D' n = pqr	⊢ 1 < (↑2)⁻¹ + (↑2)⁻¹ + (↑n)⁻¹
pqr : multiset ℕ+,	n : ℕ+,	H : ADE_inequality.D' n = pqr	⊢ 1 < ADE_inequality.sum_inv pqr		pqr : multiset ℕ+,	H : ADE_inequality.E' 3 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr		pqr : multiset ℕ+,	H : ADE_inequality.E' 4 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr		pqr : multiset ℕ+,	H : ADE_inequality.E' 5 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr
pqr : multiset ℕ+,	n : ℕ+,	H : ADE_inequality.D' n = pqr	⊢ 1 < 2⁻¹ + 2⁻¹ + (↑↑n)⁻¹
pqr : multiset ℕ+,	H : ADE_inequality.E' 3 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr
pqr : multiset ℕ+,	H : ADE_inequality.E' 4 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr
pqr : multiset ℕ+,	H : ADE_inequality.E' 5 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr
pqr : multiset ℕ+,	H : ADE_inequality.E' 3 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr		pqr : multiset ℕ+,	H : ADE_inequality.E' 4 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr		pqr : multiset ℕ+,	H : ADE_inequality.E' 5 = pqr	⊢ 1 < ADE_inequality.sum_inv pqr
pqr : multiset ℕ+,	H : ADE_inequality.E' 3 = pqr	⊢ 1 < (↑2)⁻¹ + (↑3)⁻¹ + (↑3)⁻¹
pqr : multiset ℕ+,	H : ADE_inequality.E' 4 = pqr	⊢ 1 < (↑2)⁻¹ + (↑3)⁻¹ + (↑4)⁻¹
pqr : multiset ℕ+,	H : ADE_inequality.E' 5 = pqr	⊢ 1 < (↑2)⁻¹ + (↑3)⁻¹ + (↑5)⁻¹
R : Type u_1,	_inst_1 : semiring R,	f : nat.arithmetic_function R	⊢ f.ppow 0 = ↑ζ
k : ℕ	⊢ (σ k).is_multiplicative
k : ℕ	⊢ (ζ * nat.arithmetic_function.pow k).is_multiplicative
R : Type u_1,	_inst_1 : comm_ring R	⊢ ↑ζ * ↑μ = 1
n : ℕ,	h_odd : odd n,	hlt : 1 < n	⊢ bernoulli' n = 0
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!)	⊢ bernoulli' n = 0
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1)	⊢ bernoulli' n = 0
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1)	⊢ bernoulli' n = 0
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h : B - ⇑power_series.eval_neg_hom B = power_series.X	⊢ bernoulli' n = 0
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h : power_series.exp ℚ - 1 = 0	⊢ bernoulli' n = 0
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h : ∀ (n : ℕ), ⇑(power_series.coeff ℚ n) (B - ⇑(power_series.rescale (-1)) B) = ite (n = 1) 1 0	⊢ bernoulli' n = 0
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h : ∀ (n : ℕ), ⇑(power_series.coeff ℚ n) (B - ⇑(power_series.rescale (-1)) B) = ite (n = 1) 1 0	⊢ -bernoulli' n = bernoulli' n
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h : ⇑(power_series.coeff ℚ n) (B - ⇑(power_series.rescale (-1)) B) = ite (n = 1) 1 0	⊢ -bernoulli' n = bernoulli' n
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h : ⇑(power_series.coeff ℚ n) (B - ⇑(power_series.rescale (-1)) B) = ite (n = 1) 1 0	⊢ -bernoulli' n = bernoulli' n
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h : ∀ (n : ℕ), ⇑(power_series.coeff ℚ n) (B - ⇑(power_series.rescale (-1)) B) = ite (n = 1) 1 0	⊢ bernoulli' n = 0		case or.inr	n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h : ∀ (n : ℕ), ⇑(power_series.coeff ℚ n) (power_series.exp ℚ - 1) = ⇑(power_series.coeff ℚ n) 0	⊢ bernoulli' n = 0
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h_1 : n = 1,	h : ⇑(power_series.coeff ℚ n) (B - ⇑(power_series.rescale (-1)) B) = 1	⊢ -bernoulli' n = bernoulli' n
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h_1 : ¬n = 1,	h : ⇑(power_series.coeff ℚ n) (B - ⇑(power_series.rescale (-1)) B) = 0	⊢ -bernoulli' n = bernoulli' n
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1)	⊢ bernoulli' n = 0		n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!)	⊢ (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1)
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	this : (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1),	h : ∀ (n : ℕ), ⇑(power_series.coeff ℚ n) (power_series.exp ℚ - 1) = ⇑(power_series.coeff ℚ n) 0	⊢ bernoulli' n = 0
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!)	⊢ (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1)
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!)	⊢ B * (power_series.exp ℚ - 1) = power_series.X * power_series.exp ℚ
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!)	⊢ B * (power_series.exp ℚ - 1) = power_series.X * power_series.exp ℚ		n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	h : B * (power_series.exp ℚ - 1) = power_series.X * power_series.exp ℚ	⊢ (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1)
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	h : B * (power_series.exp ℚ - 1) = power_series.X * power_series.exp ℚ	⊢ (B - ⇑power_series.eval_neg_hom B) * (power_series.exp ℚ - 1) = power_series.X * (power_series.exp ℚ - 1)
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	h : B * (power_series.exp ℚ - 1) = power_series.X * power_series.exp ℚ	⊢ -(power_series.X * 1) = ⇑power_series.eval_neg_hom B * (1 - power_series.exp ℚ)
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	h : B * (power_series.exp ℚ - 1) = power_series.X * power_series.exp ℚ,	this : ⇑power_series.eval_neg_hom (B * (power_series.exp ℚ - 1)) * power_series.exp ℚ = ⇑power_series.eval_neg_hom (power_series.X * power_series.exp ℚ) * power_series.exp ℚ	⊢ -(power_series.X * 1) = ⇑power_series.eval_neg_hom B * (1 - power_series.exp ℚ)
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	h : B * (power_series.exp ℚ - 1) = power_series.X * power_series.exp ℚ,	this : ⇑power_series.eval_neg_hom (B * (power_series.exp ℚ - 1)) * power_series.exp ℚ = ⇑power_series.eval_neg_hom (power_series.X * power_series.exp ℚ) * power_series.exp ℚ	⊢ -(power_series.X * 1) = ⇑power_series.eval_neg_hom B * (1 - power_series.exp ℚ)		n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	h : B * (power_series.exp ℚ - 1) = power_series.X * power_series.exp ℚ	⊢ ⇑power_series.eval_neg_hom (B * (power_series.exp ℚ - 1)) * power_series.exp ℚ = ⇑power_series.eval_neg_hom (power_series.X * power_series.exp ℚ) * power_series.exp ℚ
n : ℕ,	h_odd : odd n,	hlt : 1 < n,	B : power_series ℚ := power_series.mk (λ (n : ℕ), bernoulli' n / ↑n!),	h : B * (power_series.exp ℚ - 1) = power_series.X * power_series.exp ℚ	⊢ ⇑power_series.eval_neg_hom (B * (power_series.exp ℚ - 1)) * power_series.exp ℚ = ⇑power_series.eval_neg_hom (power_series.X * power_series.exp ℚ) * power_series.exp ℚ
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A	⊢ bernoulli_power_series A * (power_series.exp A - 1) = power_series.X
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A	⊢ ⇑(power_series.coeff A 0) (bernoulli_power_series A * (power_series.exp A - 1)) = ⇑(power_series.coeff A 0) power_series.X
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A	⊢ ⇑(power_series.coeff A 0) (bernoulli_power_series A * (power_series.exp A - 1)) = ⇑(power_series.coeff A 0) power_series.X		case nat.succ	A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ	⊢ ⇑(power_series.coeff A n.succ) (bernoulli_power_series A * (power_series.exp A - 1)) = ⇑(power_series.coeff A n.succ) power_series.X
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ	⊢ ⇑(power_series.coeff A n) (bernoulli_power_series A * (power_series.exp A - 1)) = ⇑(power_series.coeff A n) power_series.X
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ	⊢ ⇑(power_series.coeff A n.succ) (bernoulli_power_series A * (power_series.exp A - 1)) = ⇑(power_series.coeff A n.succ) power_series.X
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ	⊢ ⇑(algebra_map ℚ A) (∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹) = ite (n.succ = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	this : ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ = 1) 1 0	⊢ ⇑(algebra_map ℚ A) (∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹) = ite (n.succ = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	this : ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ = 1) 1 0	⊢ ⇑(algebra_map ℚ A) (∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹) = ite (n.succ = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	this : ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ = 1) 1 0,	h : n.succ = 1	⊢ ⇑(algebra_map ℚ A) (∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹) = 1
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	this : ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ = 1) 1 0,	h : ¬n.succ = 1	⊢ ⇑(algebra_map ℚ A) (∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹) = 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	this : ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ = 1) 1 0	⊢ ⇑(algebra_map ℚ A) (∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹) = ite (n.succ = 1) 1 0		A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ	⊢ ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A	⊢ ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal 0, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (1 = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A	⊢ ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal 0, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (1 = 1) 1 0		case nat.succ	A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ	⊢ ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n.succ, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ.succ = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ	⊢ ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ	⊢ ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n.succ, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ.succ = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n m : ℕ	⊢ ↑m! ≠ 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0	⊢ ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n.succ, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ.succ = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0	⊢ ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!	⊢ ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n.succ, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ.succ = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!	⊢ ite (n.succ = 0) 1 0 = 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!,	hite2 : ite (n.succ = 0) 1 0 = 0	⊢ ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n.succ, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ = ite (n.succ.succ = 1) 1 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!,	hite2 : ite (n.succ = 0) 1 0 = 0	⊢ ∑ (x : ℕ × ℕ) in finset.nat.antidiagonal n.succ, bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ * ↑(n.succ)! = ∑ (k : ℕ × ℕ) in finset.nat.antidiagonal n.succ, ↑((k.fst + k.snd).choose k.snd) / (↑(k.snd) + 1) * bernoulli k.fst
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!,	hite2 : ite (n.succ = 0) 1 0 = 0	⊢ ∀ (x : ℕ × ℕ), x ∈ finset.nat.antidiagonal n.succ → bernoulli x.fst / ↑(x.fst)! * ((↑(x.snd) + 1) * ↑(x.snd)!)⁻¹ * ↑(n.succ)! = ↑((x.fst + x.snd).choose x.snd) / (↑(x.snd) + 1) * bernoulli x.fst
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!,	hite2 : ite (n.succ = 0) 1 0 = 0,	i j : ℕ,	h : (i, j) ∈ finset.nat.antidiagonal n.succ	⊢ bernoulli (i, j).fst / ↑((i, j).fst)! * ((↑((i, j).snd) + 1) * ↑((i, j).snd)!)⁻¹ * ↑(n.succ)! = ↑(((i, j).fst + (i, j).snd).choose (i, j).snd) / (↑((i, j).snd) + 1) * bernoulli (i, j).fst
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!,	hite2 : ite (n.succ = 0) 1 0 = 0,	i j : ℕ,	h : (i, j).fst + (i, j).snd = n.succ	⊢ ↑(j.succ) ≠ 0
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!,	hite2 : ite (n.succ = 0) 1 0 = 0,	i j : ℕ,	h : (i, j).fst + (i, j).snd = n.succ	⊢ bernoulli (i, j).fst / ↑((i, j).fst)! * ((↑((i, j).snd) + 1) * ↑((i, j).snd)!)⁻¹ * ↑(n.succ)! = ↑(((i, j).fst + (i, j).snd).choose (i, j).snd) / (↑((i, j).snd) + 1) * bernoulli (i, j).fst
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!,	hite2 : ite (n.succ = 0) 1 0 = 0,	i j : ℕ,	h : (i, j).fst + (i, j).snd = n.succ,	hj : ↑(j.succ) ≠ 0	⊢ bernoulli (i, j).fst / ↑((i, j).fst)! * ((↑((i, j).snd) + 1) * ↑((i, j).snd)!)⁻¹ * ↑(n.succ)! = ↑(((i, j).fst + (i, j).snd).choose (i, j).snd) / (↑((i, j).snd) + 1) * bernoulli (i, j).fst
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!,	hite2 : ite (n.succ = 0) 1 0 = 0,	i j : ℕ,	h : (i, j).fst + (i, j).snd = n.succ,	hj : ↑(j.succ) ≠ 0	⊢ bernoulli i * (↑(i + j)! * (↑j + 1)) / (↑i! * ((↑j + 1) * ↑j!)) = bernoulli i * ↑((i + j).choose j)
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!,	hite2 : ite (n.succ = 0) 1 0 = 0,	i j : ℕ,	h : (i, j).fst + (i, j).snd = n.succ,	hj : ↑(j.succ) ≠ 0	⊢ bernoulli i * (↑((i + j)! * (j + 1)) / ↑(i! * j! * (j + 1))) = bernoulli i * ↑((i + j).choose j)
A : Type u_1,	_inst_1 : comm_ring A,	_inst_2 : algebra ℚ A,	n : ℕ,	hfact : ∀ (m : ℕ), ↑m! ≠ 0,	hite1 : ite (n.succ.succ = 1) 1 0 = 0 / ↑(n.succ)!,	hite2 : ite (n.succ = 0) 1 0 = 0,	i j : ℕ,	h : (i, j).fst + (i, j).snd = n.succ,	hj : ↑(j.succ) ≠ 0	⊢ i! * j! ∣ (i + j)!
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	n : ℕ,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	A : fin n → polynomial Fq	⊢ ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	n : ℕ,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	A : fin n → polynomial Fq	⊢ 0 < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	n : ℕ,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	A : fin n → polynomial Fq	⊢ 0 < ↑(⇑polynomial.card_pow_degree b) * ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	n : ℕ,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	A : fin n → polynomial Fq	⊢ 0 < ⇑polynomial.card_pow_degree b • ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	n : ℕ,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	A : fin n → polynomial Fq,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	n : ℕ,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	A : fin n → polynomial Fq,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	A : fin 0 → polynomial Fq	⊢ ∃ (t : fin 0 → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin 0), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε		case nat.succ	Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq	⊢ ∃ (t : fin n.succ → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n.succ), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	A : fin 0 → polynomial Fq	⊢ ∃ (t : fin 0 → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin 0), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq	⊢ ∃ (t : fin n.succ → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n.succ), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq	⊢ ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	i j k : fin n.succ,	ε : ℝ	⊢ ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq	⊢ ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε	⊢ ∃ (t : fin n.succ → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n.succ), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	i j k : fin n.succ,	ε : ℝ	⊢ ⇑polynomial.card_pow_degree (A i % b - A j % b) < ⌈ε⌉ → ⇑polynomial.card_pow_degree (A j % b - A k % b) < ⌈ε⌉ → ⇑polynomial.card_pow_degree (A i % b - A k % b) < ⌈ε⌉
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε	⊢ ∃ (t : fin n.succ → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n.succ), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (t : fin n.succ → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n.succ), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (t : fin n.succ → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n.succ), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (t : fin n.succ → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n.succ), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ	⊢ fin.cons j t' i₀ = fin.cons j t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ	⊢ fin.cons j t' 0 = fin.cons j t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A 0 % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ : fin n	⊢ fin.cons j t' (fin.succ i₀) = fin.cons j t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ	⊢ fin.cons j t' i₀ = fin.cons j t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ	⊢ fin.cons j t' 0 = fin.cons j t' 0 ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A 0 % b)) < ⇑polynomial.card_pow_degree b • ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₁ : fin n	⊢ fin.cons j t' 0 = fin.cons j t' (fin.succ i₁) ↔ ↑(⇑polynomial.card_pow_degree (A (fin.succ i₁) % b - A 0 % b)) < ⇑polynomial.card_pow_degree b • ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ : fin n	⊢ fin.cons j t' (fin.succ i₀) = fin.cons j t' 0 ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ i₁ : fin n	⊢ fin.cons j t' (fin.succ i₀) = fin.cons j t' (fin.succ i₁) ↔ ↑(⇑polynomial.card_pow_degree (A (fin.succ i₁) % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ	⊢ fin.cons j t' 0 = fin.cons j t' 0 ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A 0 % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₁ : fin n	⊢ fin.cons j t' 0 = fin.cons j t' (fin.succ i₁) ↔ ↑(⇑polynomial.card_pow_degree (A (fin.succ i₁) % b - A 0 % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₁ : fin n	⊢ fin.cons j t' 0 = fin.cons j t' (fin.succ i₁) ↔ ↑(⇑polynomial.card_pow_degree (A (fin.succ i₁) % b - A 0 % b)) < ⇑polynomial.card_pow_degree b • ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ : fin n	⊢ fin.cons j t' (fin.succ i₀) = fin.cons j t' 0 ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ i₁ : fin n	⊢ fin.cons j t' (fin.succ i₀) = fin.cons j t' (fin.succ i₁) ↔ ↑(⇑polynomial.card_pow_degree (A (fin.succ i₁) % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₁ : fin n	⊢ t' i₁ = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i₁) % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ : fin n	⊢ fin.cons j t' (fin.succ i₀) = fin.cons j t' 0 ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ : fin n	⊢ fin.cons j t' (fin.succ i₀) = fin.cons j t' 0 ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ i₁ : fin n	⊢ fin.cons j t' (fin.succ i₀) = fin.cons j t' (fin.succ i₁) ↔ ↑(⇑polynomial.card_pow_degree (A (fin.succ i₁) % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ : fin n	⊢ t' i₀ = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ i₁ : fin n	⊢ fin.cons j t' (fin.succ i₀) = fin.cons j t' (fin.succ i₁) ↔ ↑(⇑polynomial.card_pow_degree (A (fin.succ i₁) % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (t : fin n.succ → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n.succ), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i₀ i₁ : fin n.succ,	i₀ i₁ : fin n	⊢ t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (A (fin.succ i₁) % b - A (fin.succ i₀) % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ¬∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b))	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j_ne : j₀ ≠ j₁,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) j₁ % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) j₀ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ	⊢ j₀ ≠ j₁ → ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) j₁ % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) j₀ % b)) < ⇑polynomial.card_pow_degree b • ε → false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ	⊢ 0 ≠ j₁ → ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) j₁ % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b)) < ⇑polynomial.card_pow_degree b • ε → false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)	⊢ fin.succ j₀ ≠ j₁ → ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) j₁ % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₀) % b)) < ⇑polynomial.card_pow_degree b • ε → false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ	⊢ j₀ ≠ j₁ → ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) j₁ % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) j₀ % b)) < ⇑polynomial.card_pow_degree b • ε → false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j_ne : 0 ≠ 0,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : 0 ≠ fin.succ j₁,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₁) % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ 0,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₀) % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ fin.succ j₁,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₁) % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₀) % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j_ne : 0 ≠ 0,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : 0 ≠ fin.succ j₁,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₁) % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : 0 ≠ fin.succ j₁,	approx : ¬⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (classical.some _).succ % b))	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : 0 ≠ fin.succ j₁,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₁) % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ 0,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₀) % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ fin.succ j₁,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₁) % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₀) % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : 0 ≠ fin.succ j₁,	approx : ¬⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (classical.some _).succ % b)),	this : ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (classical.some _).succ % b))	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ 0,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₀) % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ 0,	approx : ¬⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (classical.some _).succ % b))	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ 0,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) 0 % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₀) % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ fin.succ j₁,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₁) % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₀) % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ 0,	approx : ¬⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (classical.some _).succ % b)),	this : ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A (classical.some _).succ % b))	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ fin.succ j₁,	approx : ↑(⇑polynomial.card_pow_degree (fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₁) % b - fin.cons (A 0) (λ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), A (classical.some _).succ) (fin.succ j₀) % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	j_ne : fin.succ j₀ ≠ fin.succ j₁,	approx : ↑(⇑polynomial.card_pow_degree (A (classical.some _).succ % b - A (classical.some _).succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	approx : ↑(⇑polynomial.card_pow_degree (A (classical.some _).succ % b - A (classical.some _).succ % b)) < ⇑polynomial.card_pow_degree b • ε,	j_ne : ¬j₀ = j₁	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	this : ∀ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∃ (i : fin n), t' i = j ∧ ⇑polynomial.card_pow_degree b • ε ≤ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)),	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊).succ,	j₀ j₁ : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	approx : ↑(⇑polynomial.card_pow_degree (A (classical.some _).succ % b - A (classical.some _).succ % b)) < ⇑polynomial.card_pow_degree b • ε,	j_ne : ¬j₀ = j₁,	this : j₀ = j₁	⊢ false
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	exists_nonempty_j : ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), (∃ (i : fin n), t' i = j) ∧ ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i : fin n,	hi : t' i = j	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i : fin n,	hi : t' i = j,	i' : fin n,	hi' : ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i') % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ↑(⇑polynomial.card_pow_degree (fin.tail A i % b - fin.tail A i' % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i : fin n,	hi : t' i = j,	i' : fin n,	hi' : ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i') % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ↑(⇑polynomial.card_pow_degree (A i.succ % b - A 0 % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	exists_nonempty_j : ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), (∃ (i : fin n), t' i = j) ∧ ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε		Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	exists_nonempty_j : ¬∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), (∃ (i : fin n), t' i = j) ∧ ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i : fin n,	hi : t' i = j,	i' : fin n,	hi' : ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i') % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	exists_nonempty_j : ¬∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), (∃ (i : fin n), t' i = j) ∧ ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ ∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i : fin n), t' i = j ↔ ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	exists_nonempty_j : ¬∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), (∃ (i : fin n), t' i = j) ∧ ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i : fin n,	hi : ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i) % b)) < ⇑polynomial.card_pow_degree b • ε	⊢ t' i = j
Fq : Type u_1,	_inst_1 : field Fq,	_inst_2 : fintype Fq,	ε : ℝ,	hε : 0 < ε,	b : polynomial Fq,	hb : b ≠ 0,	hbε : 0 < ⇑polynomial.card_pow_degree b • ε,	n : ℕ,	ih : ∀ (A : fin n → polynomial Fq), ∃ (t : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), ∀ (i₀ i₁ : fin n), t i₀ = t i₁ ↔ ↑(⇑polynomial.card_pow_degree (A i₁ % b - A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	A : fin n.succ → polynomial Fq,	anti_archim' : ∀ {i j k : fin n.succ} {ε : ℝ}, ↑(⇑polynomial.card_pow_degree (A i % b - A j % b)) < ε → ↑(⇑polynomial.card_pow_degree (A j % b - A k % b)) < ε → ↑(⇑polynomial.card_pow_degree (A i % b - A k % b)) < ε,	t' : fin n → fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	ht' : ∀ (i₀ i₁ : fin n), t' i₀ = t' i₁ ↔ ↑(⇑polynomial.card_pow_degree (fin.tail A i₁ % b - fin.tail A i₀ % b)) < ⇑polynomial.card_pow_degree b • ε,	j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊),	hj : ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	exists_nonempty_j : ¬∃ (j : fin (fintype.card Fq ^ ⌈-real.log ε / real.log ↑(fintype.card Fq)⌉₊)), (∃ (i : fin n), t' i = j) ∧ ∀ (i : fin n), t' i = j → ↑(⇑polynomial.card_pow_degree (A 0 % b - A i.succ % b)) < ⇑polynomial.card_pow_degree b • ε,	i : fin n,	hi : ↑(⇑polynomial.card_pow_degree (A 0 % b - A (fin.succ i) % b)) < ⇑polynomial.card_pow_degree b • ε,	this : false	⊢ t' i = j
a : ℕ × ℕ	⊢ a ∈ 1.divisors_antidiagonal ↔ a ∈ {(1, 1)}
⊢ 1.divisors_antidiagonal = {(1, 1)}
f g : nat.arithmetic_function ℂ,	z : ℂ,	hf : f.l_series_summable z,	hg : g.l_series_summable z	⊢ (f + g).l_series z = f.l_series z + g.l_series z
f g : nat.arithmetic_function ℂ,	z : ℂ,	hf : f.l_series_summable z,	hg : g.l_series_summable z	⊢ ∑' (n : ℕ), (⇑f n + ⇑g n) / ↑n ^ z = ∑' (n : ℕ), ⇑f n / ↑n ^ z + ∑' (n : ℕ), ⇑g n / ↑n ^ z
f g : nat.arithmetic_function ℂ,	z : ℂ,	hf : f.l_series_summable z,	hg : g.l_series_summable z	⊢ ∑' (n : ℕ), (⇑f n + ⇑g n) / ↑n ^ z = ∑' (b : ℕ), ((λ (n : ℕ), ⇑f n / ↑n ^ z) b + (λ (n : ℕ), ⇑g n / ↑n ^ z) b)
f g : nat.arithmetic_function ℂ,	z : ℂ,	hf : f.l_series_summable z,	hg : g.l_series_summable z,	n : ℕ	⊢ (⇑f n + ⇑g n) / ↑n ^ z = (λ (n : ℕ), ⇑f n / ↑n ^ z) n + (λ (n : ℕ), ⇑g n / ↑n ^ z) n
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z	⊢ f.l_series_summable ↑z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : m = 0	⊢ f.l_series_summable ↑z
f : nat.arithmetic_function ℂ,	z : ℝ,	hz : 1 < z,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ 0	⊢ f.l_series_summable ↑z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : m = 0	⊢ f.l_series_summable ↑z		f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0	⊢ f.l_series_summable ↑z
f : nat.arithmetic_function ℂ,	z : ℝ,	hz : 1 < z,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ 0,	hf : f = 0	⊢ f.l_series_summable ↑z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0	⊢ f.l_series_summable ↑z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0	⊢ summable (λ (n : ℕ), m / ↑n ^ z)
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0	⊢ summable (λ (n : ℕ), m * (↑n ^ z)⁻¹)
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0	⊢ summable (λ (n : ℕ), m / ↑n ^ z)		f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0	⊢ ∀ (i : ℕ), ∥⇑f i / ↑i ^ ↑z∥ ≤ m / ↑i ^ z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0	⊢ ∀ (i : ℕ), ∥⇑f i / ↑i ^ ↑z∥ ≤ m / ↑i ^ z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0,	n : ℕ	⊢ ∥⇑f n / ↑n ^ ↑z∥ ≤ m / ↑n ^ z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0,	n : ℕ,	hm : 0 ≤ m	⊢ ∥⇑f n / ↑n ^ ↑z∥ ≤ m / ↑n ^ z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0,	hm : 0 ≤ m	⊢ ∥⇑f 0 / ↑0 ^ ↑z∥ ≤ m / ↑0 ^ z		case nat.succ	f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0,	hm : 0 ≤ m,	n : ℕ	⊢ ∥⇑f n.succ / ↑(n.succ) ^ ↑z∥ ≤ m / ↑(n.succ) ^ z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0,	hm : 0 ≤ m	⊢ ∥⇑f 0 / ↑0 ^ ↑z∥ ≤ m / ↑0 ^ z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0,	hm : 0 ≤ m,	n : ℕ	⊢ ∥⇑f n.succ / ↑(n.succ) ^ ↑z∥ ≤ m / ↑(n.succ) ^ z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0,	hm : 0 ≤ m,	n : ℕ	⊢ complex.abs (⇑f n.succ) / complex.abs (↑(n.succ) ^ ↑z) ≤ m / ↑(n.succ) ^ z
f : nat.arithmetic_function ℂ,	m : ℝ,	h : ∀ (n : ℕ), complex.abs (⇑f n) ≤ m,	z : ℝ,	hz : 1 < z,	h0 : ¬m = 0,	hm : 0 ≤ m,	n : ℕ	⊢ ↑(n.succ) ^ z = complex.abs (↑(n.succ) ^ ↑z)
p : ℕ,	_inst_1 : fact (nat.prime p),	F : polynomial ℤ_[p],	a : ℤ_[p],	ha : polynomial.eval a F = 0,	z' : ℤ_[p],	hz' : polynomial.eval z' F = 0,	hnormz' : ∥z' - a∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥,	h : ℤ_[p] := z' - a,	_let_match : {k // polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + k * h ^ 2} → z' = a,	q : ℤ_[p],	hq : polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2	⊢ 0 = polynomial.eval (a + (z' - a)) F
p : ℕ,	_inst_1 : fact (nat.prime p),	F : polynomial ℤ_[p],	a : ℤ_[p],	ha : polynomial.eval a F = 0,	z' : ℤ_[p],	hz' : polynomial.eval z' F = 0,	hnormz' : ∥z' - a∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥,	h : ℤ_[p] := z' - a,	_let_match : {k // polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + k * h ^ 2} → z' = a,	q : ℤ_[p],	hq : polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2	⊢ 0 = polynomial.eval (a + (z' - a)) F
p : ℕ,	_inst_1 : fact (nat.prime p),	F : polynomial ℤ_[p],	a : ℤ_[p],	ha : polynomial.eval a F = 0,	z' : ℤ_[p],	hz' : polynomial.eval z' F = 0,	hnormz' : ∥z' - a∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥,	h : ℤ_[p] := z' - a,	_let_match : {k // polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + k * h ^ 2} → z' = a,	q : ℤ_[p],	hq : polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2	⊢ 0 = polynomial.eval (z' - a + a) F
p : ℕ,	_inst_1 : fact (nat.prime p),	F : polynomial ℤ_[p],	a : ℤ_[p],	ha : polynomial.eval a F = 0,	z' : ℤ_[p],	hz' : polynomial.eval z' F = 0,	hnormz' : ∥z' - a∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥,	h : ℤ_[p] := z' - a,	_let_match : {k // polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + k * h ^ 2} → z' = a,	q : ℤ_[p],	hq : polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2	⊢ polynomial.eval (a + h) F = polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2
p : ℕ,	_inst_1 : fact (nat.prime p),	F : polynomial ℤ_[p],	a : ℤ_[p],	ha : polynomial.eval a F = 0,	z' : ℤ_[p],	hz' : polynomial.eval z' F = 0,	hnormz' : ∥z' - a∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥,	h : ℤ_[p] := z' - a,	_let_match : {k // polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + k * h ^ 2} → z' = a,	q : ℤ_[p],	hq : polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2	⊢ polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2 = (polynomial.eval a (⇑polynomial.derivative F) + q * h) * h
p : ℕ,	_inst_1 : fact (nat.prime p),	F : polynomial ℤ_[p],	a : ℤ_[p],	ha : polynomial.eval a F = 0,	z' : ℤ_[p],	hz' : polynomial.eval z' F = 0,	hnormz' : ∥z' - a∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥,	h : ℤ_[p] := z' - a,	_let_match : {k // polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + k * h ^ 2} → z' = a,	q : ℤ_[p],	hq : polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2,	this : (polynomial.eval a (⇑polynomial.derivative F) + q * h) * h = 0,	hne : ¬h = 0,	this : polynomial.eval a (⇑polynomial.derivative F) + q * h = 0	⊢ polynomial.eval a (⇑polynomial.derivative F) = -q * h
p : ℕ,	_inst_1 : fact (nat.prime p),	F : polynomial ℤ_[p],	a : ℤ_[p],	ha : polynomial.eval a F = 0,	z' : ℤ_[p],	hz' : polynomial.eval z' F = 0,	hnormz' : ∥z' - a∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥,	h : ℤ_[p] := z' - a,	_let_match : {k // polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + k * h ^ 2} → z' = a,	q : ℤ_[p],	hq : polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2,	this : (polynomial.eval a (⇑polynomial.derivative F) + q * h) * h = 0,	hne : ¬h = 0,	this : polynomial.eval a (⇑polynomial.derivative F) + q * h = 0,	this : polynomial.eval a (⇑polynomial.derivative F) = -q * h	⊢ ∥polynomial.eval a (⇑polynomial.derivative F)∥ = ∥q∥ * ∥h∥
p : ℕ,	_inst_1 : fact (nat.prime p),	F : polynomial ℤ_[p],	a : ℤ_[p],	ha : polynomial.eval a F = 0,	z' : ℤ_[p],	hz' : polynomial.eval z' F = 0,	hnormz' : ∥z' - a∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥,	h : ℤ_[p] := z' - a,	_let_match : {k // polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + k * h ^ 2} → z' = a,	q : ℤ_[p],	hq : polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2,	this : (polynomial.eval a (⇑polynomial.derivative F) + q * h) * h = 0,	hne : ¬h = 0,	this : polynomial.eval a (⇑polynomial.derivative F) + q * h = 0,	this : polynomial.eval a (⇑polynomial.derivative F) = -q * h	⊢ 1 * ∥h∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥
p : ℕ,	_inst_1 : fact (nat.prime p),	F : polynomial ℤ_[p],	a : ℤ_[p],	ha : polynomial.eval a F = 0,	z' : ℤ_[p],	hz' : polynomial.eval z' F = 0,	hnormz' : ∥z' - a∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥,	h : ℤ_[p] := z' - a,	_let_match : {k // polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + k * h ^ 2} → z' = a,	q : ℤ_[p],	hq : polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2,	this : (polynomial.eval a (⇑polynomial.derivative F) + q * h) * h = 0,	this : h = 0	⊢ z' - a = 0
p : ℕ,	_inst_1 : fact (nat.prime p),	F : polynomial ℤ_[p],	a : ℤ_[p],	ha : polynomial.eval a F = 0,	z' : ℤ_[p],	hz' : polynomial.eval z' F = 0,	hnormz' : ∥z' - a∥ < ∥polynomial.eval a (⇑polynomial.derivative F)∥,	h : ℤ_[p] := z' - a,	_let_match : {k // polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + k * h ^ 2} → z' = a,	q : ℤ_[p],	hq : polynomial.eval (a + h) F = polynomial.eval a F + polynomial.eval a (⇑polynomial.derivative F) * h + q * h ^ 2,	this : (polynomial.eval a (⇑polynomial.derivative F) + q * h) * h = 0,	this : h = 0	⊢ z' - a = 0
p : ℕ,	hp_prime : fact (nat.prime p),	ε : ℚ,	hε : 0 < ε	⊢ ∃ (k : ℕ), ↑p ^ -↑k < ε
p : ℕ,	hp_prime : fact (nat.prime p),	ε : ℚ,	hε : 0 < ε	⊢ 0 < ↑ε
p : ℕ,	hp_prime : fact (nat.prime p),	ε : ℚ,	hε : 0 < ε,	k : ℕ,	hk : ↑p ^ -↑k < ↑ε	⊢ ∃ (k : ℕ), ↑p ^ -↑k < ε
p : ℕ,	hp_prime : fact (nat.prime p),	ε : ℚ,	hε : 0 < ε,	k : ℕ,	hk : ↑p ^ -↑k < ↑ε	⊢ ↑p = ↑↑p
p : ℕ,	hp_prime : fact (nat.prime p),	ε : ℚ,	hε : 0 < ε,	k : ℕ,	hk : ↑p ^ -↑k < ↑ε	⊢ ↑p ^ -↑k < ε
p : ℕ,	hp_prime : fact (nat.prime p),	ε : ℚ,	hε : 0 < ε,	k : ℕ,	hk : ↑↑p ^ -↑k < ↑ε	⊢ ↑p ^ -↑k < ε
p n : ℕ,	_inst_1 : fact (nat.prime p)	⊢ padic_val_nat p (p ^ n) = n
p : ℕ,	hp : fact (nat.prime p),	q r : ℚ,	hr : r = 0	⊢ padic_norm p (q / r) = padic_norm p q / padic_norm p r
p : ℕ,	hp : fact (nat.prime p),	q r : ℚ,	hr : ¬r = 0	⊢ padic_norm p (q / r) * padic_norm p r = padic_norm p q
p : ℕ	⊢ padic_val_rat p 1 = 0
p : ℕ	⊢ padic_val_rat p 1 = 0
p : ℕ	⊢ dite (1 ≠ 0 ∧ p ≠ 1) (λ (h : 1 ≠ 0 ∧ p ≠ 1), ↑((multiplicity ↑p 1.num).get _) - ↑((multiplicity ↑p ↑(1.denom)).get _)) (λ (h : ¬(1 ≠ 0 ∧ p ≠ 1)), 0) = 0
p : ℕ,	h : 1 ≠ 0 ∧ p ≠ 1	⊢ ↑((multiplicity ↑p 1.num).get _) - ↑((multiplicity ↑p ↑(1.denom)).get _) = 0
p : ℕ,	h : ¬(1 ≠ 0 ∧ p ≠ 1)	⊢ 0 = 0
p : ℕ	⊢ padic_val_rat p 1 = 0
p : ℕ,	_inst_1 : fact (nat.prime p),	f : padic_seq p,	hf : ¬f ≈ 0,	v1 v3 : ℕ	⊢ padic_norm p (⇑f (padic_seq.stationary_point hf)) = padic_norm p (⇑f (linear_order.max v1 (linear_order.max (padic_seq.stationary_point hf) v3)))
p : ℕ,	_inst_1 : fact (nat.prime p),	f : padic_seq p,	hf : ¬f ≈ 0,	v1 v3 : ℕ	⊢ padic_seq.stationary_point hf ≤ linear_order.max v1 (linear_order.max (padic_seq.stationary_point hf) v3)
p : ℕ,	_inst_1 : fact (nat.prime p),	f : padic_seq p,	hf : ¬f ≈ 0,	v1 v3 : ℕ	⊢ padic_seq.stationary_point hf ≤ ?m_1		p : ℕ,	_inst_1 : fact (nat.prime p),	f : padic_seq p,	hf : ¬f ≈ 0,	v1 v3 : ℕ	⊢ ?m_1 ≤ linear_order.max v1 (linear_order.max (padic_seq.stationary_point hf) v3)		p : ℕ,	_inst_1 : fact (nat.prime p),	f : padic_seq p,	hf : ¬f ≈ 0,	v1 v3 : ℕ	⊢ ℕ
p : ℕ,	_inst_1 : fact (nat.prime p),	f : padic_seq p,	hf : ¬f ≈ 0,	v1 v3 : ℕ	⊢ padic_seq.stationary_point hf ≤ ?m_1
p : ℕ,	_inst_1 : fact (nat.prime p),	f : padic_seq p,	hf : ¬f ≈ 0,	v1 v3 : ℕ	⊢ padic_seq.stationary_point hf ≤ linear_order.max v1 (linear_order.max (padic_seq.stationary_point hf) v3)		p : ℕ,	_inst_1 : fact (nat.prime p),	f : padic_seq p,	hf : ¬f ≈ 0,	v1 v3 : ℕ	⊢ padic_seq.stationary_point hf ≤ padic_seq.stationary_point hf
p : ℕ,	_inst_1 : fact (nat.prime p),	f : padic_seq p,	hf : ¬f ≈ 0,	v1 v3 : ℕ	⊢ linear_order.max (padic_seq.stationary_point hf) v3 ≤ linear_order.max v1 (linear_order.max (padic_seq.stationary_point hf) v3)
p : ℕ,	_inst_1 : fact (nat.prime p),	f : padic_seq p,	hf : ¬f ≈ 0,	v1 v3 : ℕ	⊢ padic_seq.stationary_point hf ≤ padic_seq.stationary_point hf
p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g	⊢ f.valuation = g.valuation
p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : f ≈ 0	⊢ g ≈ 0		p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : f ≈ 0,	hg : g ≈ 0	⊢ f.valuation = g.valuation
p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : f ≈ 0	⊢ f.valuation = g.valuation
p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : f ≈ 0	⊢ f.valuation = g.valuation		p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : ¬f ≈ 0	⊢ f.valuation = g.valuation
p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : f ≈ 0,	hg : g ≈ 0	⊢ f.valuation = g.valuation
p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : ¬f ≈ 0	⊢ ¬g ≈ 0		p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : ¬f ≈ 0,	hg : ¬g ≈ 0	⊢ f.valuation = g.valuation
p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : ¬f ≈ 0	⊢ f.valuation = g.valuation
p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : ¬f ≈ 0,	hg : ¬g ≈ 0	⊢ f.valuation = g.valuation
p : ℕ,	_inst_1 : fact (nat.prime p),	f g : padic_seq p,	h : f ≈ g,	hf : ¬f ≈ 0,	hg : ¬g ≈ 0	⊢ f.norm = g.norm
a : ℕ,	a1 : 1 < a,	m n : ℕ,	h : n ≤ m	⊢ pell.xz (m - n) = pell.xz m * pell.xz n - ↑d * pell.yz m * pell.yz n
a : ℕ,	a1 : 1 < a,	m n : ℕ,	h : n ≤ m	⊢ pell.xz (m - n) = pell.xz m * pell.xz n - ↑d * pell.yz m * pell.yz n
a : ℕ,	a1 : 1 < a,	m n : ℕ,	h : n ≤ m,	h : ↑(pell.xn ?m_2 (m - n)) = ↑(pell.xn ?m_2 m) * ↑(pell.xn ?m_2 n) + ↑(d ?m_2) * ↑(pell.yn ?m_2 m) * -↑(pell.yn ?m_2 n),	a_1 : ↑(pell.yn ?m_2 (m - n)) = ↑(pell.xn ?m_2 m) * -↑(pell.yn ?m_2 n) + ↑(pell.yn ?m_2 m) * ↑(pell.xn ?m_2 n)	⊢ pell.xz (m - n) = pell.xz m * pell.xz n - ↑d * pell.yz m * pell.yz n
a : ℕ,	a1 : 1 < a,	m n : ℕ,	h : n ≤ m	⊢ ℕ
a : ℕ,	a1 : 1 < a,	m n : ℕ,	h : n ≤ m	⊢ 1 < ?m_1
a : ℕ,	a1 : 1 < a,	m n : ℕ,	h : n ≤ m	⊢ pell.xz (m - n) = pell.xz m * pell.xz n - ↑d * pell.yz m * pell.yz n
a : ℕ,	a1 : 1 < a,	m n : ℕ,	h : n ≤ m	⊢ 1 < ?m_1
a : ℕ,	a1 : 1 < a,	m n : ℕ,	h : n ≤ m,	a_1 : ↑(pell.yn ?m_2 (m - n)) = ↑(pell.xn ?m_2 m) * -↑(pell.yn ?m_2 n) + ↑(pell.yn ?m_2 m) * ↑(pell.xn ?m_2 n),	h : ↑(pell.xn ?m_2 (m - n)) = ↑(pell.xn ?m_2 m) * ↑(pell.xn ?m_2 n) + -(↑(d ?m_2) * ↑(pell.yn ?m_2 m) * ↑(pell.yn ?m_2 n))	⊢ pell.xz (m - n) = pell.xz m * pell.xz n - ↑d * pell.yz m * pell.yz n
a : ℕ,	a1 : 1 < a,	m n : ℕ,	h : n ≤ m,	a_1 : ↑(pell.yn ?m_2 (m - n)) = ↑(pell.xn ?m_2 m) * -↑(pell.yn ?m_2 n) + ↑(pell.yn ?m_2 m) * ↑(pell.xn ?m_2 n),	h : ↑(pell.xn ?m_2 (m - n)) = ↑(pell.xn ?m_2 m) * ↑(pell.xn ?m_2 n) + -(↑(d ?m_2) * ↑(pell.yn ?m_2 m) * ↑(pell.yn ?m_2 n))	⊢ pell.xz (m - n) = pell.xz m * pell.xz n - ↑d * pell.yz m * pell.yz n
x y z : ℤ,	h : pythagorean_triple x y z	⊢ h.is_classified
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0	⊢ x = 0
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0	⊢ x.nat_abs = 0
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0	⊢ h.is_classified
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0	⊢ x = 0		x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0,	hx : x = 0	⊢ h.is_classified
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0,	hx : x = 0	⊢ y = 0
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0,	hx : x = 0	⊢ y.nat_abs = 0
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0,	hx : x = 0	⊢ h.is_classified
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0,	hx : x = 0	⊢ y = 0		x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0,	hx : x = 0,	hy : y = 0	⊢ h.is_classified
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0,	hx : x = 0,	hy : y = 0	⊢ (x = 0 * (1 ^ 2 - 0 ^ 2) ∧ y = 0 * (2 * 1 * 0) ∨ x = 0 * (2 * 1 * 0) ∧ y = 0 * (1 ^ 2 - 0 ^ 2)) ∧ 1.gcd 0 = 1
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0	⊢ h.is_classified		x y z : ℤ,	h : pythagorean_triple x y z,	h0 : ¬x.gcd y = 0	⊢ h.is_classified
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : x.gcd y = 0,	hx : x = 0,	hy : y = 0	⊢ h.is_classified
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : ¬x.gcd y = 0	⊢ h.is_classified
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : ¬x.gcd y = 0	⊢ _.is_primitive_classified
x y z : ℤ,	h : pythagorean_triple x y z,	h0 : ¬x.gcd y = 0	⊢ (x / ↑(x.gcd y)).gcd (y / ↑(x.gcd y)) = 1
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0	⊢ ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card)
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0	⊢ (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card)
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0	⊢ ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card)
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0,	this : ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card)	⊢ zmod.legendre_sym a p = (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0,	this : ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card)	⊢ zmod.legendre_sym a p = (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0,	this : ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card)	⊢ zmod.legendre_sym a p = (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0,	this : ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card),	h : zmod.legendre_sym a p = -1	⊢ zmod.legendre_sym a p = (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0,	this : ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card),	h : zmod.legendre_sym a p = 1	⊢ zmod.legendre_sym a p = (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0,	this : ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card),	h : zmod.legendre_sym a p = -1,	h_1 : (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card = 1	⊢ zmod.legendre_sym a p = (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0,	this : ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card),	h : zmod.legendre_sym a p = -1,	h_1 : (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card = -1	⊢ zmod.legendre_sym a p = (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0,	this : ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card),	h : zmod.legendre_sym a p = 1,	h_1 : (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card = 1	⊢ zmod.legendre_sym a p = (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card
p : ℕ,	_inst_1 : fact (nat.prime p),	a : ℕ,	_inst_3 : fact (p % 2 = 1),	ha0 : ↑a ≠ 0,	this : ↑(zmod.legendre_sym a p) = ↑((-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card),	h : zmod.legendre_sym a p = 1,	h_1 : (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card = -1	⊢ zmod.legendre_sym a p = (-1) ^ (finset.filter (λ (x : ℕ), p / 2 < (↑a * ↑x).val) (finset.Ico 1 (p / 2).succ)).card
d : ℤ	⊢ comm_semiring (ℤ√d)
d : ℤ,	m n : ℕ	⊢ ↑m = ↑n → m = n
d n x y : ℤ	⊢ zsqrtd.sqrtd * ↑n * {re := x, im := y} = {re := d * n * y, im := n * x}
d : ℤ,	z : ℤ√d	⊢ (bit1 z).im = bit0 z.im
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_coatomistic α,	b : α	⊢ b = ⊤ ∨ ∃ (a : α), is_coatom a ∧ b ≤ a
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_coatomistic α,	s : set α,	hs : ∀ (a : α), a ∈ s → is_coatom a	⊢ has_Inf.Inf s = ⊤ ∨ ∃ (a : α), is_coatom a ∧ has_Inf.Inf s ≤ a
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_coatomistic α,	s : set α,	hs : ∀ (a : α), a ∈ s → is_coatom a,	h : s = ∅	⊢ has_Inf.Inf s = ⊤ ∨ ∃ (a : α), is_coatom a ∧ has_Inf.Inf s ≤ a		case or.inr	α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_coatomistic α,	s : set α,	hs : ∀ (a : α), a ∈ s → is_coatom a,	h : s.nonempty	⊢ has_Inf.Inf s = ⊤ ∨ ∃ (a : α), is_coatom a ∧ has_Inf.Inf s ≤ a
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_coatomistic α,	s : set α,	hs : ∀ (a : α), a ∈ s → is_coatom a,	h : s = ∅	⊢ has_Inf.Inf s = ⊤ ∨ ∃ (a : α), is_coatom a ∧ has_Inf.Inf s ≤ a
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_coatomistic α,	s : set α,	hs : ∀ (a : α), a ∈ s → is_coatom a,	h : s.nonempty	⊢ has_Inf.Inf s = ⊤ ∨ ∃ (a : α), is_coatom a ∧ has_Inf.Inf s ≤ a
α : Type u,	x y z : α,	_inst_1 : generalized_boolean_algebra α,	hi : disjoint x z,	hs : x ⊔ z = y,	h : y ⊓ x = x	⊢ y ⊓ x ⊔ z = y
α : Type u,	x y z : α,	_inst_1 : generalized_boolean_algebra α,	hi : disjoint x z,	hs : x ⊔ z = y,	h : y ⊓ x = x	⊢ y ⊓ x ⊓ z = ⊥
α : Type u,	_inst_1 : bounded_lattice α,	a b : α,	w : disjoint a b,	h : a ⊔ b = a	⊢ b = ⊥
α : Type u,	_inst_1 : bounded_lattice α,	a b : α,	h : a ⊔ b = a,	w : a ⊓ b = ⊥	⊢ b = ⊥
α : Type u,	_inst_1 : bounded_lattice α,	a b : α,	h : a ⊔ b = a,	w : a ⊓ b = ⊥	⊢ b ≤ a
α : Type u,	_inst_1 : bounded_lattice α,	x y : α,	h : is_compl x y	⊢ x ⊓ y ≤ ⊥
α : Type u,	_inst_1 : bounded_lattice α,	x y : α,	h : is_compl x y	⊢ ⊤ ≤ y ⊔ x
α : Type u,	_inst_1 : bounded_lattice α,	x y : α,	h : is_compl x y	⊢ ⊤ ≤ x ⊔ y
α : Type u,	_inst_1 : bounded_lattice α,	x y : α,	h : is_compl x y	⊢ y ⊓ x ≤ ⊥
α : Type u,	_inst_1 : order_bot α,	a : with_bot α,	b : α	⊢ option.get_or_else a ⊥ ≤ b ↔ a ≤ ↑b
α : Type u,	_inst_1 : order_bot α,	b : α	⊢ option.none.get_or_else ⊥ ≤ b ↔ option.none ≤ ↑b
α : Type u,	_inst_1 : order_bot α,	b a : α	⊢ (option.some a).get_or_else ⊥ ≤ b ↔ option.some a ≤ ↑b
α : Type u,	_inst_1 : order_bot α,	a : with_bot α,	b : α	⊢ option.get_or_else a ⊥ ≤ b ↔ a ≤ ↑b
α : Type u,	_inst_1 : semilattice_sup α,	o₁ o₂ : with_top α,	a : α,	ha : ∃ (a_1 : α), o₁ = option.some a_1 ∧ ∃ (a_2 : α), o₂ = option.some a_2 ∧ a_1 ⊔ a_2 = a	⊢ ∃ (b : α) (H : b ∈ o₁), b ≤ a
α : Type u,	_inst_1 : semilattice_sup α,	o₁ o₂ : with_top α,	a : α,	ha : a ∈ o₁ ⊔ o₂	⊢ ∃ (b : α) (H : b ∈ o₁), b ≤ a
α : Type u,	_inst_1 : semilattice_sup α,	b c : α	⊢ ∃ (b_1 : α) (H : b_1 ∈ option.some b), b_1 ≤ b ⊔ c
α : Type u,	_inst_1 : semilattice_sup α,	o₁ o₂ : with_top α,	a : α,	ha : ∃ (a_1 : α), o₁ = option.some a_1 ∧ ∃ (a_2 : α), o₂ = option.some a_2 ∧ a_1 ⊔ a_2 = a	⊢ ∃ (b : α) (H : b ∈ o₂), b ≤ a
α : Type u,	_inst_1 : semilattice_sup α,	o₁ o₂ : with_top α,	a : α,	ha : a ∈ o₁ ⊔ o₂	⊢ ∃ (b : α) (H : b ∈ o₂), b ≤ a
α : Type u,	_inst_1 : semilattice_sup α,	b c : α	⊢ ∃ (b_1 : α) (H : b_1 ∈ option.some c), b_1 ≤ b ⊔ c
α : Type u,	_inst_1 : semilattice_sup α,	o₁ o₂ o₃ : with_top α,	h₁ : o₁ ≤ o₃,	h₂ : o₂ ≤ o₃,	a : α,	ha : a ∈ o₃	⊢ ∃ (b : α) (H : b ∈ o₁ ⊔ o₂), b ≤ a
α : Type u,	_inst_1 : semilattice_sup α,	o₁ o₂ : with_top α,	a : α,	h₁ : o₁ ≤ option.some a,	h₂ : o₂ ≤ option.some a,	ha : a ∈ option.some a	⊢ ∃ (b : α) (H : b ∈ o₁ ⊔ o₂), b ≤ a
α : Type u,	_inst_1 : semilattice_sup α,	o₂ : with_top α,	a : α,	h₂ : o₂ ≤ option.some a,	ha : a ∈ option.some a,	b : α,	ab : b ≤ a,	h₁ : option.some b ≤ option.some a,	h_w : b ∈ option.some b	⊢ ∃ (b_1 : α) (H : b_1 ∈ option.some b ⊔ o₂), b_1 ≤ a
α : Type u,	_inst_1 : semilattice_sup α,	a : α,	ha : a ∈ option.some a,	b : α,	ab : b ≤ a,	h₁ : option.some b ≤ option.some a,	h_w : b ∈ option.some b,	c : α,	ac : c ≤ a,	h₂ : option.some c ≤ option.some a,	h_w_1 : c ∈ option.some c	⊢ ∃ (b_1 : α) (H : b_1 ∈ option.some b ⊔ option.some c), b_1 ≤ a
γ : Type w,	_inst_3 : semilattice_sup γ,	_inst_4 : densely_ordered γ,	a b : γ,	h : a < b,	x : γ,	hx : x ∈ lower_bounds (set.Ioo a b)	⊢ x ≤ a
γ : Type w,	_inst_3 : semilattice_sup γ,	_inst_4 : densely_ordered γ,	a b : γ,	h : a < b,	x : γ,	hx : x ∈ lower_bounds (set.Ioo a b),	h₁ : a = x ⊔ a	⊢ x ≤ a		case or.inr	γ : Type w,	_inst_3 : semilattice_sup γ,	_inst_4 : densely_ordered γ,	a b : γ,	h : a < b,	x : γ,	hx : x ∈ lower_bounds (set.Ioo a b),	h₂ : a < x ⊔ a	⊢ x ≤ a
γ : Type w,	_inst_3 : semilattice_sup γ,	_inst_4 : densely_ordered γ,	a b : γ,	h : a < b,	x : γ,	hx : x ∈ lower_bounds (set.Ioo a b),	h₁ : a = x ⊔ a	⊢ x ≤ a
γ : Type w,	_inst_3 : semilattice_sup γ,	_inst_4 : densely_ordered γ,	a b : γ,	h : a < b,	x : γ,	hx : x ∈ lower_bounds (set.Ioo a b),	h₂ : a < x ⊔ a	⊢ x ≤ a
γ : Type w,	_inst_3 : semilattice_sup γ,	_inst_4 : densely_ordered γ,	a b : γ,	h : a < b,	x : γ,	hx : x ∈ lower_bounds (set.Ioo a b),	h₂ : a < x ⊔ a,	y : γ,	lty : a < y,	ylt : y < x ⊔ a	⊢ x ≤ a
γ : Type w,	_inst_3 : semilattice_sup γ,	_inst_4 : densely_ordered γ,	a b : γ,	h : a < b,	x : γ,	hx : x ∈ lower_bounds (set.Ioo a b),	h₂ : a < x ⊔ a,	y : γ,	lty : a < y,	ylt : y < x ⊔ a	⊢ x ≤ b
γ : Type w,	_inst_3 : semilattice_sup γ,	_inst_4 : densely_ordered γ,	a b : γ,	h : a < b,	x : γ,	hx : x ∈ lower_bounds (set.Ioo a b),	h₂ : a < x ⊔ a,	y : γ,	lty : a < y,	ylt : y < x ⊔ a,	u : γ,	au : a < u,	ub : u < b	⊢ x ≤ b
γ : Type w,	_inst_3 : linear_order γ,	a b : γ,	s : set γ,	hs : is_least s b	⊢ is_least ({a} ∪ s) (linear_order.min a b)
γ : Type w,	_inst_3 : linear_order γ,	a b : γ,	s : set γ,	hs : is_least s b	⊢ is_least (has_insert.insert a s) (linear_order.min a b)
α : Type u_1,	_inst_1 : partial_order α,	c : closure_operator α,	x : α	⊢ ⇑c x = ⇑(closure_operator.mk₃ ⇑c c.closed _ _ _) x
α : Type u_1,	_inst_1 : partial_order α,	c : closure_operator α	⊢ c = closure_operator.mk₃ ⇑c c.closed _ _ _
α : Type u_1,	_inst_2 : complete_lattice α,	k : α,	hk : complete_lattice.is_compact_element k,	s : set α,	hemp : s.nonempty,	hdir : directed_on has_le.le s,	hbelow : ∀ (x : α), x ∈ s → x < k	⊢ has_Sup.Sup s < k
α : Type u_1,	_inst_2 : complete_lattice α,	k : α,	s : set α,	hemp : s.nonempty,	hdir : directed_on has_le.le s,	hbelow : ∀ (x : α), x ∈ s → x < k,	hk : ∀ (s : set α), s.nonempty → directed_on has_le.le s → k ≤ has_Sup.Sup s → (∃ (x : α), x ∈ s ∧ k ≤ x)	⊢ has_Sup.Sup s < k
α : Type u_1,	_inst_2 : complete_lattice α,	k : α,	s : set α,	hemp : s.nonempty,	hdir : directed_on has_le.le s,	hbelow : ∀ (x : α), x ∈ s → x < k,	hk : ∀ (s : set α), s.nonempty → directed_on has_le.le s → k ≤ has_Sup.Sup s → (∃ (x : α), x ∈ s ∧ k ≤ x),	h : ¬has_Sup.Sup s < k	⊢ has_Sup.Sup s ≤ k		α : Type u_1,	_inst_2 : complete_lattice α,	k : α,	s : set α,	hemp : s.nonempty,	hdir : directed_on has_le.le s,	hbelow : ∀ (x : α), x ∈ s → x < k,	hk : ∀ (s : set α), s.nonempty → directed_on has_le.le s → k ≤ has_Sup.Sup s → (∃ (x : α), x ∈ s ∧ k ≤ x),	h : ¬has_Sup.Sup s < k,	sSup : has_Sup.Sup s ≤ k	⊢ false
α : Type u_1,	_inst_2 : complete_lattice α,	k : α,	s : set α,	hemp : s.nonempty,	hdir : directed_on has_le.le s,	hbelow : ∀ (x : α), x ∈ s → x < k,	hk : ∀ (s : set α), s.nonempty → directed_on has_le.le s → k ≤ has_Sup.Sup s → (∃ (x : α), x ∈ s ∧ k ≤ x),	h : ¬has_Sup.Sup s < k	⊢ false
α : Type u_1,	_inst_2 : complete_lattice α,	k : α,	s : set α,	hemp : s.nonempty,	hdir : directed_on has_le.le s,	hbelow : ∀ (x : α), x ∈ s → x < k,	hk : ∀ (s : set α), s.nonempty → directed_on has_le.le s → k ≤ has_Sup.Sup s → (∃ (x : α), x ∈ s ∧ k ≤ x),	h : ¬has_Sup.Sup s < k,	sSup : has_Sup.Sup s ≤ k	⊢ false
α : Type u_1,	_inst_2 : complete_lattice α,	k : α,	s : set α,	hemp : s.nonempty,	hdir : directed_on has_le.le s,	hbelow : ∀ (x : α), x ∈ s → x < k,	hk : ∀ (s : set α), s.nonempty → directed_on has_le.le s → k ≤ has_Sup.Sup s → (∃ (x : α), x ∈ s ∧ k ≤ x),	h : ¬has_Sup.Sup s < k,	sSup : has_Sup.Sup s = k	⊢ false
α : Type u_1,	_inst_2 : complete_lattice α,	k : α,	s : set α,	hemp : s.nonempty,	hdir : directed_on has_le.le s,	hbelow : ∀ (x : α), x ∈ s → x < k,	hk : ∀ (s : set α), s.nonempty → directed_on has_le.le s → k ≤ has_Sup.Sup s → (∃ (x : α), x ∈ s ∧ k ≤ x),	h : ¬has_Sup.Sup s < k,	sSup : has_Sup.Sup s = k,	x : α,	hxs : x ∈ s,	hkx : k ≤ x	⊢ false
α : Type u_1,	_inst_2 : complete_lattice α,	k : α,	s : set α,	hemp : s.nonempty,	hdir : directed_on has_le.le s,	hbelow : ∀ (x : α), x ∈ s → x < k,	hk : ∀ (s : set α), s.nonempty → directed_on has_le.le s → k ≤ has_Sup.Sup s → (∃ (x : α), x ∈ s ∧ k ≤ x),	h : ¬has_Sup.Sup s < k,	sSup : has_Sup.Sup s = k,	x : α,	hxs : x ∈ s,	hkx : k ≤ x,	hxk : x < k	⊢ false
α : Type u_1,	_inst_1 : complete_lattice α,	h : complete_lattice.is_Sup_finite_compact α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s	⊢ has_Sup.Sup s ∈ s
α : Type u_1,	_inst_1 : complete_lattice α,	h : complete_lattice.is_Sup_finite_compact α	⊢ complete_lattice.is_sup_closed_compact α
α : Type u_1,	_inst_1 : complete_lattice α,	h : complete_lattice.is_Sup_finite_compact α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s,	t : finset α,	ht₁ : ↑t ⊆ s,	ht₂ : has_Sup.Sup s = t.sup id	⊢ has_Sup.Sup s ∈ s
α : Type u_1,	_inst_1 : complete_lattice α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s,	t : finset α,	ht₁ : ↑t ⊆ s,	ht₂ : has_Sup.Sup s = t.sup id	⊢ has_Sup.Sup s ∈ s
α : Type u_1,	_inst_1 : complete_lattice α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s,	ht₁ : ↑∅ ⊆ s,	ht₂ : has_Sup.Sup s = ∅.sup id	⊢ has_Sup.Sup s ∈ s
α : Type u_1,	_inst_1 : complete_lattice α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s,	ht₁ : ↑∅ ⊆ s,	ht₂ : has_Sup.Sup s = ⊥	⊢ has_Sup.Sup s ∈ s
α : Type u_1,	_inst_1 : complete_lattice α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s,	t : finset α,	ht₁ : ↑t ⊆ s,	ht₂ : has_Sup.Sup s = t.sup id,	h : t = ∅	⊢ has_Sup.Sup s ∈ s
α : Type u_1,	_inst_1 : complete_lattice α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s,	ht₁ : ↑∅ ⊆ s,	ht₂ : has_Sup.Sup s = ⊥	⊢ ⊥ ∈ s
α : Type u_1,	_inst_1 : complete_lattice α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s,	t : finset α,	ht₁ : ↑t ⊆ s,	ht₂ : has_Sup.Sup s = t.sup id,	h : t = ∅	⊢ has_Sup.Sup s ∈ s		case or.inr	α : Type u_1,	_inst_1 : complete_lattice α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s,	t : finset α,	ht₁ : ↑t ⊆ s,	ht₂ : has_Sup.Sup s = t.sup id,	h : t.nonempty	⊢ has_Sup.Sup s ∈ s
α : Type u_1,	_inst_1 : complete_lattice α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s,	t : finset α,	ht₁ : ↑t ⊆ s,	ht₂ : has_Sup.Sup s = t.sup id,	h : t.nonempty	⊢ t.sup id ∈ s
α : Type u_1,	_inst_1 : complete_lattice α,	s : set α,	hne : s.nonempty,	hsc : ∀ (a b : α), a ∈ s → b ∈ s → a ⊔ b ∈ s,	t : finset α,	ht₁ : ↑t ⊆ s,	ht₂ : has_Sup.Sup s = t.sup id,	h : t.nonempty	⊢ has_Sup.Sup s ∈ s
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α	⊢ b = has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α	⊢ has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} = b
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b	⊢ has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} = b
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b,	con : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} < b	⊢ false
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b,	con : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} < b,	c : {x // x ∈ set.Iic b},	hc : is_compl ⟨has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}, hle⟩ c	⊢ false
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b,	con : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} < b,	hc : is_compl ⟨has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}, hle⟩ ⊥	⊢ false
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b,	con : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} < b,	hc : is_compl ⟨has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}, hle⟩ ⊥	⊢ false		α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b,	con : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} < b,	c : {x // x ∈ set.Iic b},	hc : is_compl ⟨has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}, hle⟩ c,	a : {x // x ∈ set.Iic b},	ha : is_atom a,	hac : a ≤ c	⊢ false
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b,	con : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} < b,	c : {x // x ∈ set.Iic b},	hc : is_compl ⟨has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}, hle⟩ c,	a : {x // x ∈ set.Iic b},	ha : is_atom a,	hac : a ≤ c	⊢ false
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b,	con : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} < b,	c : {x // x ∈ set.Iic b},	hc : is_compl ⟨has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}, hle⟩ c,	a : {x // x ∈ set.Iic b},	ha : is_atom a,	hac : a ≤ c	⊢ a = ⊥
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b,	con : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} < b,	c : {x // x ∈ set.Iic b},	hc : is_compl ⟨has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}, hle⟩ c,	a : {x // x ∈ set.Iic b},	ha : is_atom a,	hac : a ≤ c	⊢ a ≤ ⊥
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b,	con : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} < b,	c : {x // x ∈ set.Iic b},	hc : is_compl ⟨has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}, hle⟩ c,	a : {x // x ∈ set.Iic b},	ha : is_atom a,	hac : a ≤ c	⊢ a ≤ ⟨has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}, hle⟩
α : Type u_1,	_inst_1 : complete_lattice α,	_inst_2 : is_modular_lattice α,	_inst_3 : is_compactly_generated α,	_inst_4 : is_complemented α,	b : α,	hle : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} ≤ b,	con : has_Sup.Sup {a : α | is_atom a ∧ a ≤ b} < b,	c : {x // x ∈ set.Iic b},	hc : is_compl ⟨has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}, hle⟩ c,	a : {x // x ∈ set.Iic b},	ha : is_atom a,	hac : a ≤ c	⊢ ↑a ≤ has_Sup.Sup {a : α | is_atom a ∧ a ≤ b}
α : Type u,	ι : Sort w,	_inst_1 : complete_distrib_lattice α,	a : α,	f : ι → α	⊢ disjoint (⨆ (i : ι), f i) a ↔ ∀ (i : ι), disjoint (f i) a
α : Type u,	ι : Sort w,	_inst_1 : complete_boolean_algebra α,	f : ι → α	⊢ (supr f)ᶜᶜ = (⨅ (i : ι), (f i)ᶜ)ᶜ
α : Type u_1,	β : Type u_2,	_inst_1 : complete_lattice α,	s : set β,	f : β → α	⊢ is_lub (f '' s) (⨆ (x : β) (H : x ∈ s), f x)
ι : Sort u_1,	ι' : Sort u_2,	α : Type u_3,	_inst_2 : complete_lattice α,	s : ι → α,	hs : complete_lattice.independent s,	f : ι' → ι,	hf : function.injective f,	i : ι'	⊢ (⨆ (j : ι') (H : j ≠ i), (s ∘ f) j) ≤ ⨆ (j : ι) (H : j ≠ f i), s j
ι : Sort u_1,	ι' : Sort u_2,	α : Type u_3,	_inst_2 : complete_lattice α,	s : ι → α,	hs : complete_lattice.independent s,	f : ι' → ι,	hf : function.injective f,	i i : ι'	⊢ (⨆ (H : i ≠ i), (s ∘ f) i) ≤ ⨆ (H : f i ≠ f i), s (f i)
α : Type u_1,	β : Type u_2,	_inst_1 : complete_lattice α,	f : β → α	⊢ (⨆ (x : β) (H : x ∈ ∅), f x) = ⊥
α : Type u_1,	β : Type u_2,	_inst_1 : complete_lattice α,	f : β → α	⊢ (⨅ (x : β) (H : x ∈ set.univ), f x) = ⨅ (x : β), f x
α : Type u,	c : complete_distrib_lattice α,	le : α → α → Prop,	eq_le : le = complete_distrib_lattice.le,	top : α,	eq_top : top = complete_distrib_lattice.top,	bot : α,	eq_bot : bot = complete_distrib_lattice.bot,	sup : α → α → α,	eq_sup : sup = complete_distrib_lattice.sup,	inf : α → α → α,	eq_inf : inf = complete_distrib_lattice.inf,	Sup : set α → α,	eq_Sup : Sup = complete_distrib_lattice.Sup,	Inf : set α → α,	eq_Inf : Inf = complete_distrib_lattice.Inf	⊢ complete_distrib_lattice α
α : Type u,	c : complete_distrib_lattice α,	le : α → α → Prop,	eq_le : le = complete_distrib_lattice.le,	top : α,	eq_top : top = complete_distrib_lattice.top,	bot : α,	eq_bot : bot = complete_distrib_lattice.bot,	sup : α → α → α,	eq_sup : sup = complete_distrib_lattice.sup,	inf : α → α → α,	eq_inf : inf = complete_distrib_lattice.inf,	Sup : set α → α,	eq_Sup : Sup = complete_distrib_lattice.Sup,	Inf : set α → α,	eq_Inf : Inf = complete_distrib_lattice.Inf	⊢ ∀ (a : α) (s : set α), (⨅ (b : α) (H : b ∈ s), a ⊔ b) ≤ a ⊔ Inf s
α : Type u,	c : complete_distrib_lattice α,	le : α → α → Prop,	eq_le : le = complete_distrib_lattice.le,	top : α,	eq_top : top = complete_distrib_lattice.top,	bot : α,	eq_bot : bot = complete_distrib_lattice.bot,	sup : α → α → α,	eq_sup : sup = complete_distrib_lattice.sup,	inf : α → α → α,	eq_inf : inf = complete_distrib_lattice.inf,	Sup : set α → α,	eq_Sup : Sup = complete_distrib_lattice.Sup,	Inf : set α → α,	eq_Inf : Inf = complete_distrib_lattice.Inf	⊢ ∀ (a : α) (s : set α), a ⊓ Sup s ≤ ⨆ (b : α) (H : b ∈ s), a ⊓ b
α : Type u,	c : complete_distrib_lattice α,	le : α → α → Prop,	eq_le : le = complete_distrib_lattice.le,	top : α,	eq_top : top = complete_distrib_lattice.top,	bot : α,	eq_bot : bot = complete_distrib_lattice.bot,	sup : α → α → α,	eq_sup : sup = complete_distrib_lattice.sup,	inf : α → α → α,	eq_inf : inf = complete_distrib_lattice.inf,	Sup : set α → α,	eq_Sup : Sup = complete_distrib_lattice.Sup,	Inf : set α → α,	eq_Inf : Inf = complete_distrib_lattice.Inf	⊢ ∀ (a : α) (s : set α), a ⊓ Sup s ≤ ⨆ (b : α) (H : b ∈ s), a ⊓ b
α : Type u,	c : complete_distrib_lattice α	⊢ ∀ (a : α) (s : set α), a ⊓ complete_distrib_lattice.Sup s ≤ ⨆ (b : α) (H : b ∈ s), a ⊓ b
α : Type u,	c : complete_distrib_lattice α,	le : α → α → Prop,	eq_le : le = complete_distrib_lattice.le,	top : α,	eq_top : top = complete_distrib_lattice.top,	bot : α,	eq_bot : bot = complete_distrib_lattice.bot,	sup : α → α → α,	eq_sup : sup = complete_distrib_lattice.sup,	inf : α → α → α,	eq_inf : inf = complete_distrib_lattice.inf,	Sup : set α → α,	eq_Sup : Sup = complete_distrib_lattice.Sup,	Inf : set α → α,	eq_Inf : Inf = complete_distrib_lattice.Inf	⊢ ∀ (a : α) (s : set α), (⨅ (b : α) (H : b ∈ s), a ⊔ b) ≤ a ⊔ Inf s		α : Type u,	c : complete_distrib_lattice α,	le : α → α → Prop,	eq_le : le = complete_distrib_lattice.le,	top : α,	eq_top : top = complete_distrib_lattice.top,	bot : α,	eq_bot : bot = complete_distrib_lattice.bot,	sup : α → α → α,	eq_sup : sup = complete_distrib_lattice.sup,	inf : α → α → α,	eq_inf : inf = complete_distrib_lattice.inf,	Sup : set α → α,	eq_Sup : Sup = complete_distrib_lattice.Sup,	Inf : set α → α,	eq_Inf : Inf = complete_distrib_lattice.Inf	⊢ ∀ (a : α) (s : set α), a ⊓ Sup s ≤ ⨆ (b : α) (H : b ∈ s), a ⊓ b
α : Type u,	c_sup : α → α → α,	c_le c_lt : α → α → Prop,	c_le_refl : ∀ (a : α), a ≤ a,	c_le_trans : ∀ (a b c : α), a ≤ b → b ≤ c → a ≤ c,	c_lt_iff_le_not_le : auto_param (∀ (a b : α), a < b ↔ a ≤ b ∧ ¬b ≤ a) (name.mk_string "order_laws_tac" name.anonymous),	c_le_antisymm : ∀ (a b : α), a ≤ b → b ≤ a → a = b,	c_le_sup_left : ∀ (a b : α), a ≤ a ⊔ b,	c_le_sup_right : ∀ (a b : α), b ≤ a ⊔ b,	c_sup_le : ∀ (a b c : α), a ≤ c → b ≤ c → a ⊔ b ≤ c,	c_inf : α → α → α,	c_inf_le_left : ∀ (a b : α), a ⊓ b ≤ a,	c_inf_le_right : ∀ (a b : α), a ⊓ b ≤ b,	c_le_inf : ∀ (a b c : α), a ≤ b → a ≤ c → a ≤ b ⊓ c,	c_top : α,	c_le_top : ∀ (a : α), a ≤ ⊤,	c_bot : α,	c_bot_le : ∀ (a : α), ⊥ ≤ a,	c_Sup : set α → α,	c_le_Sup : ∀ (s : set α) (a : α), a ∈ s → a ≤ c_Sup s,	c_Sup_le : ∀ (s : set α) (a : α), (∀ (b : α), b ∈ s → b ≤ a) → c_Sup s ≤ a,	c_Inf : set α → α,	c_Inf_le : ∀ (s : set α) (a : α), a ∈ s → c_Inf s ≤ a,	c_le_Inf : ∀ (s : set α) (a : α), (∀ (b : α), b ∈ s → a ≤ b) → a ≤ c_Inf s,	c_infi_sup_le_sup_Inf : ∀ (a : α) (s : set α), (⨅ (b : α) (H : b ∈ s), a ⊔ b) ≤ a ⊔ c_Inf s,	c_inf_Sup_le_supr_inf : ∀ (a : α) (s : set α), a ⊓ c_Sup s ≤ ⨆ (b : α) (H : b ∈ s), a ⊓ b	⊢ ∀ (a : α) (s : set α), a ⊓ complete_distrib_lattice.Sup s ≤ ⨆ (b : α) (H : b ∈ s), a ⊓ b
α : Type u_1,	R : Type u_2,	_inst_1 : linear_ordered_semiring R,	_inst_2 : archimedean R,	l : filter α,	f : α → R,	r : R,	hr : 0 < r,	hf : filter.tendsto f l filter.at_top	⊢ filter.tendsto (λ (x : α), f x * r) l filter.at_top
α : Type u_1,	R : Type u_2,	_inst_1 : linear_ordered_semiring R,	_inst_2 : archimedean R,	l : filter α,	f : α → R,	r : R,	hr : 0 < r,	hf : filter.tendsto f l filter.at_top,	b : R	⊢ ∀ᶠ (a : α) in l, b ≤ f a * r
α : Type u_1,	R : Type u_2,	_inst_1 : linear_ordered_semiring R,	_inst_2 : archimedean R,	l : filter α,	f : α → R,	r : R,	hr : 0 < r,	hf : filter.tendsto f l filter.at_top,	b : R,	n : ℕ,	hn : 1 ≤ n • r	⊢ 1 ≤ ↑n * r
α : Type u_1,	R : Type u_2,	_inst_1 : linear_ordered_semiring R,	_inst_2 : archimedean R,	l : filter α,	f : α → R,	r : R,	hr : 0 < r,	hf : filter.tendsto f l filter.at_top,	b : R,	n : ℕ,	hn : 1 ≤ n • r	⊢ ∀ᶠ (a : α) in l, b ≤ f a * r
α : Type u_1,	R : Type u_2,	_inst_1 : linear_ordered_semiring R,	_inst_2 : archimedean R,	l : filter α,	f : α → R,	r : R,	hr : 0 < r,	hf : filter.tendsto f l filter.at_top,	b : R,	n : ℕ,	hn : 1 ≤ n • r,	hn' : 1 ≤ ↑n * r	⊢ ∀ᶠ (a : α) in l, b ≤ f a * r
α : Type u_1,	R : Type u_2,	_inst_1 : linear_ordered_semiring R,	_inst_2 : archimedean R,	l : filter α,	f : α → R,	r : R,	hr : 0 < r,	hf : filter.tendsto f l filter.at_top,	b : R,	n : ℕ,	hn : 1 ≤ n • r,	hn' : 1 ≤ ↑n * r	⊢ ∀ (a : α), linear_order.max b 0 * ↑n ≤ f a → b ≤ f a * r
α : Type u_1,	R : Type u_2,	_inst_1 : linear_ordered_semiring R,	_inst_2 : archimedean R,	l : filter α,	f : α → R,	r : R,	hr : 0 < r,	hf : filter.tendsto f l filter.at_top,	b : R,	n : ℕ,	hn : 1 ≤ n • r,	hn' : 1 ≤ ↑n * r,	x : α,	hx : linear_order.max b 0 * ↑n ≤ f x	⊢ b ≤ linear_order.max b 0 * 1
α : Type u_1,	R : Type u_2,	_inst_1 : linear_ordered_semiring R,	_inst_2 : archimedean R,	l : filter α,	f : α → R,	r : R,	hr : 0 < r,	hf : filter.tendsto f l filter.at_top,	b : R,	n : ℕ,	hn : 1 ≤ n • r,	hn' : 1 ≤ ↑n * r,	x : α,	hx : linear_order.max b 0 * ↑n ≤ f x	⊢ b ≤ f x * r
α : Type u_1,	R : Type u_2,	_inst_1 : linear_ordered_semiring R,	_inst_2 : archimedean R,	l : filter α,	f : α → R,	r : R,	hr : 0 < r,	hf : filter.tendsto f l filter.at_top,	b : R,	n : ℕ,	hn : 1 ≤ n • r,	hn' : 1 ≤ ↑n * r,	x : α,	hx : linear_order.max b 0 * ↑n ≤ f x	⊢ b ≤ linear_order.max b 0
α : Type u_1,	R : Type u_2,	_inst_1 : linear_ordered_semiring R,	_inst_2 : archimedean R,	l : filter α,	f : α → R,	r : R,	hr : 0 < r,	hf : filter.tendsto f l filter.at_top,	b : R,	n : ℕ,	hn : 1 ≤ n • r,	hn' : 1 ≤ ↑n * r,	x : α,	hx : linear_order.max b 0 * ↑n ≤ f x	⊢ linear_order.max b 0 * (↑n * r) = linear_order.max b 0 * ↑n * r
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1	⊢ filter.map (λ (s : finset γ), ∏ (i : γ) in s, f (g i)) filter.at_top = filter.map (λ (s : finset β), ∏ (i : β) in s, f i) filter.at_top
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1	⊢ filter.map (λ (s : finset γ), ∏ (i : γ) in s, f (g i)) filter.at_top ≤ filter.map (λ (s : finset β), ∏ (i : β) in s, f i) filter.at_top
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1	⊢ filter.map (λ (s : finset β), ∏ (i : β) in s, f i) filter.at_top ≤ filter.map (λ (s : finset γ), ∏ (i : γ) in s, f (g i)) filter.at_top
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1	⊢ filter.map (λ (s : finset γ), ∏ (i : γ) in s, f (g i)) filter.at_top = filter.map (λ (s : finset β), ∏ (i : β) in s, f i) filter.at_top
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset β	⊢ ∃ (v : finset γ), ∀ (v' : finset γ), v ⊆ v' → (∃ (u' : finset β), s ⊆ u' ∧ ∏ (x : β) in u', f x = ∏ (b : γ) in v', f (g b))
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset β,	t : finset γ,	ht : finset.preimage s g _ ⊆ t	⊢ ∃ (u' : finset β), s ⊆ u' ∧ ∏ (x : β) in u', f x = ∏ (b : γ) in t, f (g b)
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset β,	t : finset γ,	ht : finset.preimage s g _ ⊆ t	⊢ ∏ (x : β) in finset.image g t ∪ s, f x = ∏ (b : γ) in t, f (g b)
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset β,	t : finset γ,	ht : finset.preimage s g _ ⊆ t	⊢ ∏ (x : β) in finset.image g t ∪ s, f x = ∏ (x : β) in finset.image (λ (x : γ), g x) t, f x
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset β,	t : finset γ,	ht : finset.preimage s g _ ⊆ t	⊢ ∀ (x : β), x ∈ finset.image g t ∪ s → x ∉ finset.image g t → f x = 1
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset β,	t : finset γ,	ht : finset.preimage s g _ ⊆ t	⊢ ∀ (x : β), (∃ (a : γ) (H : a ∈ t), g a = x) ∨ x ∈ s → (¬∃ (a : γ) (H : a ∈ t), g a = x) → f x = 1
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset β,	t : finset γ,	ht : finset.preimage s g _ ⊆ t,	y : β,	hy : (∃ (a : γ) (H : a ∈ t), g a = y) ∨ y ∈ s,	hyt : ¬∃ (a : γ) (H : a ∈ t), g a = y	⊢ y ∈ set.range g → (∃ (a : γ) (H : a ∈ t), g a = y)
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset β,	t : finset γ,	ht : finset.preimage s g _ ⊆ t,	x : γ,	hy : (∃ (a : γ) (H : a ∈ t), g a = g x) ∨ g x ∈ s,	hyt : ¬∃ (a : γ) (H : a ∈ t), g a = g x	⊢ ∃ (a : γ) (H : a ∈ t), g a = g x
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset β	⊢ ∃ (v : finset γ), ∀ (v' : finset γ), v ⊆ v' → (∃ (u' : finset β), s ⊆ u' ∧ ∏ (x : β) in u', f x = ∏ (b : γ) in v', f (g b))		α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset γ	⊢ ∃ (v : finset β), ∀ (v' : finset β), v ⊆ v' → (∃ (u' : finset γ), s ⊆ u' ∧ ∏ (x : γ) in u', f (g x) = ∏ (b : β) in v', f b)
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset γ	⊢ ∃ (v : finset β), ∀ (v' : finset β), v ⊆ v' → (∃ (u' : finset γ), s ⊆ u' ∧ ∏ (x : γ) in u', f (g x) = ∏ (b : β) in v', f b)
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset γ,	t : finset β,	ht : finset.image g s ⊆ t	⊢ ∃ (u' : finset γ), s ⊆ u' ∧ ∏ (x : γ) in u', f (g x) = ∏ (b : β) in t, f b
α : Type u_3,	β : Type u_4,	γ : Type u_5,	_inst_1 : comm_monoid α,	g : γ → β,	hg : function.injective g,	f : β → α,	hf : ∀ (x : β), x ∉ set.range g → f x = 1,	s : finset γ,	t : finset β,	ht : finset.image g s ⊆ t	⊢ ∃ (u' : finset γ), s ⊆ u' ∧ ∏ (x : γ) in u', f (g x) = ∏ (x : γ) in finset.preimage t g _, f (g x)
α : Type u_3,	_inst_1 : linear_ordered_field α,	c : α,	n : ℕ	⊢ filter.tendsto (λ (x : α), c * x ^ n) filter.at_top filter.at_bot ↔ 1 ≤ n ∧ c < 0
α : Type u_3,	_inst_1 : linear_ordered_field α,	c : α,	n : ℕ,	h : filter.tendsto (λ (x : α), c * x ^ n) filter.at_top filter.at_bot	⊢ 1 ≤ n ∧ c < 0
α : Type u_3,	_inst_1 : linear_ordered_field α,	c : α,	n : ℕ,	h : ∀ (b : α), ∃ (a : α), ∀ (b_1 : α), b_1 ≥ a → c * b_1 ^ n ≤ b	⊢ 1 ≤ n ∧ c < 0
α : Type u_3,	_inst_1 : linear_ordered_field α,	c : α,	n : ℕ,	h : ∀ (b : α), ∃ (a : α), ∀ (b_1 : α), b_1 ≥ a → c * b_1 ^ n ≤ b,	_let_match : (∃ (a : α), ∀ (b : α), b ≥ a → c * b ^ n ≤ -1) → c < 0,	x : α,	hx : ∀ (b : α), b ≥ x → c * b ^ n ≤ -1	⊢ -1 < 0
α : Type u_3,	_inst_1 : linear_ordered_field α,	c : α,	n : ℕ,	h : ∀ (b : α), ∃ (a : α), ∀ (b_1 : α), b_1 ≥ a → c * b_1 ^ n ≤ b,	this : c < 0	⊢ 1 ≤ n ∧ c < 0
α : Type u_3,	_inst_1 : linear_ordered_field α,	c : α,	n : ℕ,	h : ∀ (b : α), ∃ (a : α), ∀ (b_1 : α), b_1 ≥ a → c * b_1 ^ n ≤ b,	this : c < 0,	hn : n = 0	⊢ false
α : Type u_3,	_inst_1 : linear_ordered_field α,	c : α,	n : ℕ,	h : ∀ (b : α), ∃ (a : α), ∀ (b_1 : α), b_1 ≥ a → c * b_1 ^ n ≤ b,	this : c < 0,	hn : n = 0,	x : α,	hx : ∀ (b : α), b ≥ x → c * b ^ n ≤ c - 1	⊢ false
α : Type u_3,	_inst_1 : linear_ordered_field α,	c : α,	n : ℕ,	h : ∀ (b : α), ∃ (a : α), ∀ (b_1 : α), b_1 ≥ a → c * b_1 ^ n ≤ b,	this : c < 0,	hn : n = 0,	x : α,	hx : c * x ^ n ≤ c - 1	⊢ false
α : Type u_3,	_inst_1 : linear_ordered_field α,	c : α,	n : ℕ,	h : ∀ (b : α), ∃ (a : α), ∀ (b_1 : α), b_1 ≥ a → c * b_1 ^ n ≤ b,	this : c < 0,	hn : n = 0,	x : α,	hx : 1 ≤ 0	⊢ false
α : Type u_1,	B : filter_basis α	⊢ filter.generate B.sets = B.filter
α : Type u_1,	B : filter_basis α	⊢ filter.generate B.sets ≤ B.filter
α : Type u_1,	B : filter_basis α,	U : set α,	U_in : U ∈ B.filter	⊢ U ∈ filter.generate B.sets
α : Type u_1,	B : filter_basis α,	U : set α,	U_in : U ∈ B.filter,	V : set α,	V_in : V ∈ B,	h : V ⊆ U	⊢ U ∈ filter.generate B.sets
α : Type u_1,	B : filter_basis α	⊢ filter.generate B.sets ≤ B.filter		α : Type u_1,	B : filter_basis α	⊢ B.filter ≤ filter.generate B.sets
α : Type u_1,	B : filter_basis α	⊢ B.filter ≤ filter.generate B.sets
α : Type u_1,	B : filter_basis α	⊢ B.sets ⊆ B.filter.sets
α : Type u_1,	f g : filter α	⊢ (g ⊓ f).ne_bot ↔ ∀ {p : α → Prop}, (∀ᶠ (x : α) in g, p x) → (∃ᶠ (x : α) in f, p x)
α : Type u_1,	f g : filter α	⊢ (f ⊓ g).ne_bot ↔ ∀ {p : α → Prop}, (∀ᶠ (x : α) in g, p x) → (∃ᶠ (x : α) in f, p x)
α : Type u_1,	f : filter α,	cblb : f.is_countably_generated	⊢ ∃ (x : ℕ → set α), f = ⨅ (i : ℕ), 𝓟 (x i)
α : Type u_1,	B : set (set α),	Bcbl : B.countable,	cblb : (⨅ (t : set α) (H : t ∈ B), 𝓟 t).is_countably_generated	⊢ ∃ (x : ℕ → set α), (⨅ (t : set α) (H : t ∈ B), 𝓟 t) = ⨅ (i : ℕ), 𝓟 (x i)
α : Type u,	f : filter α,	_inst_1 : f.ne_bot,	p : Prop,	h : p	⊢ (∃ᶠ (x : α) in f, p) ↔ p
α : Type u,	f : filter α,	_inst_1 : f.ne_bot,	p : Prop,	h : ¬p	⊢ (∃ᶠ (x : α) in f, p) ↔ p
α β : Type u_1,	f : α → β,	x : filter α,	s : set β	⊢ s ∈ x >>= has_pure.pure ∘ f ↔ s ∈ f <$> x
α : Type u,	β : Type v,	f : α → β,	a : filter α,	b : β	⊢ filter.tendsto f a (has_pure.pure b) ↔ ∀ᶠ (x : α) in a, f x = b
α : Type u,	β : Type v,	ι : Sort x,	_inst_1 : nonempty ι,	f : filter α,	g : ι → filter β	⊢ (⨅ (x : ι), filter.comap prod.fst f ⊓ filter.comap prod.snd (g x)) = ⨅ (i : ι), f ×ᶠ g i
α : Type u,	β : Type v,	ι : Sort x,	_inst_1 : nonempty ι,	f : filter α,	g : ι → filter β	⊢ (f ×ᶠ ⨅ (i : ι), g i) = ⨅ (i : ι), f ×ᶠ g i
α : Type u,	β : Type v,	f : β → filter α,	s : set β,	h : directed_on (f ⁻¹'o ge) s,	ne : s.nonempty,	t : set α	⊢ t ∈ (⨅ (i : β) (H : i ∈ s), f i).sets ↔ t ∈ ⋃ (i : β) (H : i ∈ s), (f i).sets
α : Type u_1,	M : Type u_3,	_inst_1 : has_zero M,	s t : set α,	f g : α → M,	l : filter α,	hf : f =ᶠ[l ⊓ 𝓟 s] g,	hs : s =ᶠ[l] t,	x : α,	hst : x ∈ s ↔ x ∈ t,	hfg : x ∈ s → f x = g x,	hxs : x ∈ s	⊢ s.indicator f x = t.indicator g x
α : Type u_1,	M : Type u_3,	_inst_1 : has_zero M,	s t : set α,	f g : α → M,	l : filter α,	hf : f =ᶠ[l ⊓ 𝓟 s] g,	hs : s =ᶠ[l] t,	x : α,	hst : x ∈ s ↔ x ∈ t,	hfg : x ∈ s → f x = g x,	hxs : x ∉ s	⊢ s.indicator f x = t.indicator g x
α : Type u_1,	β : Type u_2,	f : filter α,	g : set α → filter β,	hg : monotone g,	s : set β	⊢ (∃ (i : set α) (hi : i ∈ f) (x : set β) (hx : x ∈ g i), id x ⊆ s) ↔ ∃ (t : set α) (H : t ∈ f), s ∈ g t
α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s : set α	⊢ s ∈ f * g * h ↔ s ∈ f * (g * h)
α : Type u,	_inst_1 : monoid α,	f g h : filter α	⊢ f * g * h = f * (g * h)
α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s : set α	⊢ s ∈ f * g * h → s ∈ f * (g * h)
α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s a b a₁ a₂ : set α,	ha₁ : a₁ ∈ f,	ha₂ : a₂ ∈ g,	a₁a₂ : a₁ * a₂ ⊆ a,	hb : b ∈ h,	ab : a * b ⊆ s	⊢ a₁ * (a₂ * b) ⊆ s
α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s a b a₁ a₂ : set α,	ha₁ : a₁ ∈ f,	ha₂ : a₂ ∈ g,	a₁a₂ : a₁ * a₂ ⊆ a,	hb : b ∈ h,	ab : a * b ⊆ s	⊢ s ∈ f * (g * h)
α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s a b a₁ a₂ : set α,	ha₁ : a₁ ∈ f,	ha₂ : a₂ ∈ g,	a₁a₂ : a₁ * a₂ ⊆ a,	hb : b ∈ h,	ab : a * b ⊆ s	⊢ a₁ * a₂ * b ⊆ s
α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s : set α	⊢ s ∈ f * g * h → s ∈ f * (g * h)		α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s : set α	⊢ s ∈ f * (g * h) → s ∈ f * g * h
α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s : set α	⊢ s ∈ f * (g * h) → s ∈ f * g * h
α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s a b : set α,	ha : a ∈ f,	ab : a * b ⊆ s,	b₁ b₂ : set α,	hb₁ : b₁ ∈ g,	hb₂ : b₂ ∈ h,	b₁b₂ : b₁ * b₂ ⊆ b	⊢ a * b₁ * b₂ ⊆ s
α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s a b : set α,	ha : a ∈ f,	ab : a * b ⊆ s,	b₁ b₂ : set α,	hb₁ : b₁ ∈ g,	hb₂ : b₂ ∈ h,	b₁b₂ : b₁ * b₂ ⊆ b	⊢ s ∈ f * g * h
α : Type u,	_inst_1 : monoid α,	f g h : filter α,	s a b : set α,	ha : a ∈ f,	ab : a * b ⊆ s,	b₁ b₂ : set α,	hb₁ : b₁ ∈ g,	hb₂ : b₂ ∈ h,	b₁b₂ : b₁ * b₂ ⊆ b	⊢ a * (b₁ * b₂) ⊆ s
α : Type u,	β : Type v,	m : α → β,	u : ultrafilter β,	inj : function.injective m,	large : set.range m ∈ u,	g : filter α,	hg : g.ne_bot,	hgu : g ≤ filter.comap m ↑u	⊢ filter.comap m ↑u ≤ g
α : Type u,	β : Type v,	m : α → β,	u : ultrafilter β,	inj : function.injective m,	large : set.range m ∈ u,	g : filter α,	hg : g.ne_bot,	hgu : g ≤ filter.comap m ↑u	⊢ filter.comap m ↑u ≤ g
α : Type u,	β : Type v,	a₁ a₂ : α,	_inst_1 : semilattice_sup α,	_inst_2 : semilattice_sup β,	l : α → β,	u : β → α,	gc : galois_connection l u	⊢ is_lub (l '' {a₁, a₂}) (l a₁ ⊔ l a₂)
α : Type u,	β : Type v,	l : α → β,	u : β → α,	_inst_1 : partial_order β,	_inst_2 : complete_lattice α,	gi : galois_insertion l u,	s : set β	⊢ ∀ (a : β), a ∈ s → gi.choice (has_Inf.Inf (u '' s)) _ ≤ a
α : Type u,	β : Type v,	l : α → β,	u : β → α,	_inst_1 : partial_order β,	_inst_2 : complete_lattice α,	gi : galois_insertion l u,	s : set β	⊢ ∀ (a : β), a ∈ s → l (has_Inf.Inf (u '' s)) ≤ a
α : Type u,	β : Type v,	l : α → β,	u : β → α,	_inst_1 : partial_order β,	_inst_2 : complete_lattice α,	gi : galois_insertion l u,	s : set β	⊢ ∀ (a : β), (∀ (b : β), b ∈ s → a ≤ b) → a ≤ gi.choice (has_Inf.Inf (u '' s)) _
α : Type u,	β : Type v,	l : α → β,	u : β → α,	_inst_1 : partial_order β,	_inst_2 : complete_lattice α,	gi : galois_insertion l u,	s : set β	⊢ ∀ (a : β), (∀ (b : β), b ∈ s → a ≤ b) → a ≤ l (has_Inf.Inf (u '' s))
α : Type u,	β : Type v,	_inst_1 : preorder α,	_inst_2 : preorder β,	l : α → β,	u : β → α,	gc : galois_connection l u,	s : set α,	b : β	⊢ b ∈ upper_bounds (l '' s) ↔ b ∈ u ⁻¹' upper_bounds s
α : Type u_1,	_inst_1 : preorder α,	f : α → α,	h : id ≤ f,	id_le_iterate_of_id_le : ∀ (n : ℕ), id ≤ (f^[n])	⊢ id ≤ (f^[0])
α : Type u_1,	_inst_1 : preorder α,	f : α → α,	h : id ≤ f,	id_le_iterate_of_id_le : ∀ (n : ℕ), id ≤ (f^[n])	⊢ id ≤ id
α : Type u_1,	_inst_1 : preorder α,	f : α → α,	h : id ≤ f,	id_le_iterate_of_id_le : ∀ (n : ℕ), id ≤ (f^[n]),	n : ℕ,	x : α	⊢ id x ≤ f^[n + 1] x
α : Type u_1,	_inst_1 : preorder α,	f : α → α,	h : id ≤ f,	id_le_iterate_of_id_le : ∀ (n : ℕ), id ≤ (f^[n]),	n : ℕ,	x : α	⊢ id x ≤ f (f^[n] x)
α : Type u,	_inst_1 : semilattice_sup α,	a b : α	⊢ a ⊔ b ≤ a ∧ a ≤ a ⊔ b ↔ b ≤ a
α : Type ?,	A B : semilattice_sup α,	x y : α	⊢ Prop
α : Type ?,	A B : semilattice_sup α,	x y : α	⊢ Prop
α : Type ?,	A B : semilattice_sup α,	x y : α,	_inst : semilattice_sup α	⊢ Prop
α : Type ?,	A B : semilattice_sup α,	H : ∀ (x y : α), x ≤ y ↔ x ≤ y,	x y : α	⊢ α
α : Type ?,	A B : semilattice_sup α,	H : ∀ (x y : α), x ≤ y ↔ x ≤ y,	x y : α	⊢ α
α : Type ?,	A B : semilattice_sup α,	H : ∀ (x y : α), x ≤ y ↔ x ≤ y,	x y : α,	_inst : semilattice_sup α	⊢ α
α : Type u_1,	A B : semilattice_sup α,	H : ∀ (x y : α), x ≤ y ↔ x ≤ y,	x y c : α	⊢ x ⊔ y ≤ c ↔ x ⊔ y ≤ c
α : Type u_1,	A B : semilattice_sup α,	H : ∀ (x y : α), x ≤ y ↔ x ≤ y,	x y c : α	⊢ x ⊔ y ≤ c ↔ x ≤ c ∧ y ≤ c
α : Type u_1,	A B : semilattice_sup α,	H : ∀ (x y : α), x ≤ y ↔ x ≤ y,	x y c : α	⊢ x ⊔ y ≤ c ↔ x ⊔ y ≤ c
α : Type u,	_inst_1 : lattice α,	a b : α	⊢ a ⊔ b = b ↔ a ⊓ b = a
α : Type u,	β : Type v,	γ : Type u_1,	_inst_1 : omega_complete_partial_order α,	_inst_2 : omega_complete_partial_order β,	_inst_3 : omega_complete_partial_order γ,	f : α →ₘ β,	g : β →ₘ γ,	hfc : ∀ (c : omega_complete_partial_order.chain α), ⇑f (omega_complete_partial_order.ωSup c) = omega_complete_partial_order.ωSup (c.map f),	hgc : ∀ (c : omega_complete_partial_order.chain β), ⇑g (omega_complete_partial_order.ωSup c) = omega_complete_partial_order.ωSup (c.map g)	⊢ ∀ (c : omega_complete_partial_order.chain α), ⇑g (⇑f (omega_complete_partial_order.ωSup c)) = omega_complete_partial_order.ωSup (c.map (g.comp f))
α : Type u,	β : Type v,	γ : Type u_1,	_inst_1 : omega_complete_partial_order α,	_inst_2 : omega_complete_partial_order β,	_inst_3 : omega_complete_partial_order γ,	f : α →ₘ β,	g : β →ₘ γ,	hfc : omega_complete_partial_order.continuous f,	hgc : omega_complete_partial_order.continuous g	⊢ omega_complete_partial_order.continuous (g.comp f)
α : Type u,	β : Type v,	γ : Type u_1,	_inst_1 : omega_complete_partial_order α,	_inst_2 : omega_complete_partial_order β,	_inst_3 : omega_complete_partial_order γ,	f : α →ₘ β,	g : β →ₘ γ,	hfc : ∀ (c : omega_complete_partial_order.chain α), ⇑f (omega_complete_partial_order.ωSup c) = omega_complete_partial_order.ωSup (c.map f),	hgc : ∀ (c : omega_complete_partial_order.chain β), ⇑g (omega_complete_partial_order.ωSup c) = omega_complete_partial_order.ωSup (c.map g),	c : omega_complete_partial_order.chain α	⊢ ⇑g (⇑f (omega_complete_partial_order.ωSup c)) = omega_complete_partial_order.ωSup (c.map (g.comp f))
α : Type u,	_inst_1 : omega_complete_partial_order α,	β γ : Type v,	f : α → part β,	g : α → β → part γ,	bind_continuous' : omega_complete_partial_order.continuous' f → omega_complete_partial_order.continuous' g → omega_complete_partial_order.continuous' (λ (x : α), f x >>= g x),	hf : monotone f,	hf' : omega_complete_partial_order.continuous {to_fun := f, monotone' := hf},	hg : monotone g,	hg' : omega_complete_partial_order.continuous {to_fun := g, monotone' := hg}	⊢ omega_complete_partial_order.continuous ({to_fun := f, monotone' := hf}.bind {to_fun := g, monotone' := hg})
α : Type u,	_inst_1 : omega_complete_partial_order α,	β γ : Type v,	f : α → part β,	g : α → β → part γ,	bind_continuous' : omega_complete_partial_order.continuous' f → omega_complete_partial_order.continuous' g → omega_complete_partial_order.continuous' (λ (x : α), f x >>= g x),	hf : monotone f,	hf' : omega_complete_partial_order.continuous {to_fun := f, monotone' := hf},	hg : monotone g,	hg' : omega_complete_partial_order.continuous {to_fun := g, monotone' := hg}	⊢ omega_complete_partial_order.continuous ({to_fun := f, monotone' := hf}.bind {to_fun := g, monotone' := hg})
α : Type u,	_inst_1 : omega_complete_partial_order α,	β γ : Type v,	f : α → part β,	g : α → β → part γ,	bind_continuous' : omega_complete_partial_order.continuous' f → omega_complete_partial_order.continuous' g → omega_complete_partial_order.continuous' (λ (x : α), f x >>= g x),	hf : monotone f,	hf' : omega_complete_partial_order.continuous {to_fun := f, monotone' := hf},	hg : monotone g,	hg' : omega_complete_partial_order.continuous {to_fun := g, monotone' := hg},	c : omega_complete_partial_order.chain α	⊢ ⇑({to_fun := f, monotone' := hf}.bind {to_fun := g, monotone' := hg}) (omega_complete_partial_order.ωSup c) = omega_complete_partial_order.ωSup (c.map ({to_fun := f, monotone' := hf}.bind {to_fun := g, monotone' := hg}))
α : Type u,	_inst_1 : omega_complete_partial_order α,	β γ : Type v,	f : α → part β,	g : α → β → part γ,	bind_continuous' : omega_complete_partial_order.continuous' f → omega_complete_partial_order.continuous' g → omega_complete_partial_order.continuous' (λ (x : α), f x >>= g x),	hf : monotone f,	hf' : omega_complete_partial_order.continuous {to_fun := f, monotone' := hf},	hg : monotone g,	hg' : omega_complete_partial_order.continuous {to_fun := g, monotone' := hg},	c : omega_complete_partial_order.chain α	⊢ ⇑({to_fun := f, monotone' := hf}.bind {to_fun := g, monotone' := hg}) (omega_complete_partial_order.ωSup c) = ⇑{to_fun := f, monotone' := hf} (omega_complete_partial_order.ωSup c) >>= ⇑{to_fun := g, monotone' := hg} (omega_complete_partial_order.ωSup c)
α : Type u,	_inst_1 : omega_complete_partial_order α,	β γ : Type v,	f : α → part β,	g : α → β → part γ,	bind_continuous' : omega_complete_partial_order.continuous' f → omega_complete_partial_order.continuous' g → omega_complete_partial_order.continuous' (λ (x : α), f x >>= g x),	hf : monotone f,	hf' : omega_complete_partial_order.continuous {to_fun := f, monotone' := hf},	hg : monotone g,	hg' : omega_complete_partial_order.continuous {to_fun := g, monotone' := hg}	⊢ omega_complete_partial_order.continuous ({to_fun := f, monotone' := hf}.bind {to_fun := g, monotone' := hg})
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α	⊢ (⨆ (m : ℕ), ⇑a m) = monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	this : (⨆ (m : ℕ), ⇑a m) ≤ monotonic_sequence_limit a	⊢ (⨆ (m : ℕ), ⇑a m) = monotonic_sequence_limit a		α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α	⊢ (⨆ (m : ℕ), ⇑a m) ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	this : (⨆ (m : ℕ), ⇑a m) ≤ monotonic_sequence_limit a	⊢ (⨆ (m : ℕ), ⇑a m) = monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α	⊢ (⨆ (m : ℕ), ⇑a m) ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α	⊢ ∀ (i : ℕ), ⇑a i ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ	⊢ ⇑a m ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : m ≤ monotonic_sequence_limit_index a	⊢ ⇑a m ≤ monotonic_sequence_limit a		α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : ¬m ≤ monotonic_sequence_limit_index a	⊢ ⇑a m ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : m ≤ monotonic_sequence_limit_index a	⊢ ⇑a m ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : ¬m ≤ monotonic_sequence_limit_index a	⊢ ⇑a m ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : monotonic_sequence_limit_index a ≤ m	⊢ ⇑a m ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : monotonic_sequence_limit_index a ≤ m,	S : set ℕ := {n : ℕ | ∀ (m : ℕ), n ≤ m → ⇑a n = ⇑a m}	⊢ ⇑a m ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : monotonic_sequence_limit_index a ≤ m,	S : set ℕ := {n : ℕ | ∀ (m : ℕ), n ≤ m → ⇑a n = ⇑a m}	⊢ S.nonempty
α : Type u_1,	_inst_1 : complete_lattice α,	a : ℕ →ₘ α,	m : ℕ,	hm : monotonic_sequence_limit_index a ≤ m,	S : set ℕ := {n : ℕ | ∀ (m : ℕ), n ≤ m → ⇑a n = ⇑a m},	h : ∀ (a : ℕ →ₘ α), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑a n = ⇑a m	⊢ S.nonempty
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : monotonic_sequence_limit_index a ≤ m,	S : set ℕ := {n : ℕ | ∀ (m : ℕ), n ≤ m → ⇑a n = ⇑a m}	⊢ has_Inf.Inf S ∈ S
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : monotonic_sequence_limit_index a ≤ m,	S : set ℕ := {n : ℕ | ∀ (m : ℕ), n ≤ m → ⇑a n = ⇑a m}	⊢ has_Inf.Inf S ∈ S		α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : monotonic_sequence_limit_index a ≤ m,	S : set ℕ := {n : ℕ | ∀ (m : ℕ), n ≤ m → ⇑a n = ⇑a m},	hInf : has_Inf.Inf S ∈ S	⊢ ⇑a m ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	hm : monotonic_sequence_limit_index a ≤ m,	S : set ℕ := {n : ℕ | ∀ (m : ℕ), n ≤ m → ⇑a n = ⇑a m},	hInf : has_Inf.Inf S ∈ S	⊢ ⇑a m ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	S : set ℕ := {n : ℕ | ∀ (m : ℕ), n ≤ m → ⇑a n = ⇑a m},	hInf : has_Inf.Inf S ∈ S,	hm : has_Inf.Inf S ≤ m	⊢ ⇑a m ≤ monotonic_sequence_limit a
α : Type u_1,	_inst_1 : complete_lattice α,	h : well_founded gt,	a : ℕ →ₘ α,	m : ℕ,	S : set ℕ := {n : ℕ | ∀ (m : ℕ), n ≤ m → ⇑a n = ⇑a m},	hInf : has_Inf.Inf S ∈ S,	hm : has_Inf.Inf S ≤ m	⊢ ⇑a m ≤ ⇑a (has_Inf.Inf S)
α : Type u_1,	_inst_1 : semilattice_sup α,	f : ℕ → α,	n : ℕ	⊢ ⇑(partial_sups f) n = (finset.range (n + 1)).sup' _ f
α : Type u_1,	_inst_1 : semilattice_sup α,	f : ℕ → α	⊢ ⇑(partial_sups f) 0 = (finset.range (0 + 1)).sup' _ f		case nat.succ	α : Type u_1,	_inst_1 : semilattice_sup α,	f : ℕ → α,	n : ℕ,	ih : ⇑(partial_sups f) n = (finset.range (n + 1)).sup' _ f	⊢ ⇑(partial_sups f) n.succ = (finset.range (n.succ + 1)).sup' _ f
α : Type u_1,	_inst_1 : semilattice_sup α,	f : ℕ → α	⊢ ⇑(partial_sups f) 0 = (finset.range (0 + 1)).sup' _ f
α : Type u_1,	_inst_1 : semilattice_sup α,	f : ℕ → α,	n : ℕ,	ih : ⇑(partial_sups f) n = (finset.range (n + 1)).sup' _ f	⊢ ⇑(partial_sups f) n.succ = (finset.range (n.succ + 1)).sup' _ f
α : Type u_1,	_inst_1 : semilattice_sup α,	f : ℕ → α,	n : ℕ,	ih : nat.rec (f 0) (λ (n : ℕ) (a : α), a ⊔ f (n + 1)) n = (finset.range (n + 1)).sup' _ f	⊢ nat.rec (f 0) (λ (n : ℕ) (a : α), a ⊔ f (n + 1)) n ⊔ f (n + 1) = (finset.range (n.succ + 1)).sup' _ f
α : Type u_1,	_inst_1 : semilattice_sup α,	f : ℕ → α,	n : ℕ,	ih : nat.rec (f 0) (λ (n : ℕ) (a : α), a ⊔ f (n + 1)) n = (finset.range (n + 1)).sup' _ f	⊢ nat.rec (f 0) (λ (n : ℕ) (a : α), a ⊔ f (n + 1)) n ⊔ f (n + 1) = (has_insert.insert n.succ (finset.range n.succ)).sup' _ f
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α	⊢ (∀ (n₁ n₂ : ℕ) (a₁ a₂ : α), ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂) → ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α	⊢ (∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂) → ∀ (n₁ n₂ : ℕ) (a₁ a₂ : α), ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α	⊢ (∀ (n₁ n₂ : ℕ) (a₁ a₂ : α), ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂) ↔ ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α	⊢ (∀ (n₁ n₂ : ℕ) (a₁ a₂ : α), ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂) ↔ ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (n₁ n₂ : ℕ) (a₁ a₂ : α), ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂	⊢ ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂		α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂	⊢ ∀ (n₁ n₂ : ℕ) (a₁ a₂ : α), ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (n₁ n₂ : ℕ) (a₁ a₂ : α), ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂	⊢ ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α	⊢ ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂	⊢ ∀ (n₁ n₂ : ℕ) (a₁ a₂ : α), ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α,	n : ℕ	⊢ ∀ (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α,	n : ℕ	⊢ ∀ (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α	⊢ ∀ (a₁ a₂ : α), ⇑f^[0] (a₁ ⊔ a₂) ≤ ⇑f^[0] a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α,	n : ℕ,	ih : ∀ (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂	⊢ ∀ (a₁ a₂ : α), ⇑f^[n.succ] (a₁ ⊔ a₂) ≤ ⇑f^[n.succ] a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α	⊢ ∀ (n : ℕ) (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ a₁ a₂ : α	⊢ ⇑f^[0] (a₁ ⊔ a₂) ≤ ⇑f^[0] a₁ ⊔ a₂		case nat.succ	α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α,	n : ℕ,	ih : ∀ (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂,	a₁ a₂ : α	⊢ ⇑f^[n.succ] (a₁ ⊔ a₂) ≤ ⇑f^[n.succ] a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ a₁ a₂ : α	⊢ ⇑f^[0] (a₁ ⊔ a₂) ≤ ⇑f^[0] a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α,	n : ℕ,	ih : ∀ (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂,	a₁ a₂ : α	⊢ ⇑f^[n.succ] (a₁ ⊔ a₂) ≤ ⇑f^[n.succ] a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α,	n : ℕ,	ih : ∀ (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂,	a₁ a₂ : α	⊢ ⇑f^[n] (⇑f a₁) ⊔ a₂ = ⇑f^[n + 1] a₁ ⊔ a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α	⊢ ∀ (n : ℕ) (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂		α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α,	h' : ∀ (n : ℕ) (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂	⊢ ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α,	h' : ∀ (n : ℕ) (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂	⊢ ⇑f^[n₁ + n₂] (a₁ ⊔ a₂) ≤ ⇑f^[n₁] a₁ ⊔ ⇑f^[n₂] a₂
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α,	h' : ∀ (n : ℕ) (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂	⊢ ⇑f^[n₁] (⇑f^[n₂] (a₁ ⊔ a₂)) = ⇑f^[n₁] (⇑f^[n₂] (a₂ ⊔ a₁))
α : Type u_1,	_inst_6 : semilattice_sup α,	f : α →ₘ α,	h : ∀ (a₁ a₂ : α), ⇑f (a₁ ⊔ a₂) ≤ ⇑f a₁ ⊔ a₂,	n₁ n₂ : ℕ,	a₁ a₂ : α,	h' : ∀ (n : ℕ) (a₁ a₂ : α), ⇑f^[n] (a₁ ⊔ a₂) ≤ ⇑f^[n] a₁ ⊔ a₂	⊢ ⇑f^[n₁] (⇑f^[n₂] a₂ ⊔ a₁) = ⇑f^[n₁] (a₁ ⊔ ⇑f^[n₂] a₂)
α : Type u_1,	β : Type u_2,	_inst_1 : semilattice_inf α,	_inst_2 : linear_order β,	a : has_lt.lt →r has_lt.lt,	m n : β	⊢ ⇑a m ⊓ ⇑a n = ⇑a (m ⊓ n)
α : Type u_1,	β : Type u_2,	_inst_1 : semilattice_inf α,	_inst_2 : linear_order β,	a : has_lt.lt →r has_lt.lt,	m n : β	⊢ ⇑a (m ⊓ n) = ⇑a m ⊓ ⇑a n
α : Type u_1,	β : Type u_2,	_inst_1 : semilattice_inf α,	_inst_2 : linear_order β,	a : has_lt.lt →r has_lt.lt,	m n : β,	h : n ≤ m	⊢ ⇑a n ≤ ⇑a m
α : Type u_1,	β : Type u_2,	_inst_1 : semilattice_inf α,	_inst_2 : linear_order β,	a : has_lt.lt →r has_lt.lt,	m n : β,	h : n ≤ m	⊢ ⇑a m ⊓ ⇑a n = ⇑a (m ⊓ n)
α : Type u_1,	β : Type u_2,	_inst_1 : semilattice_inf α,	_inst_2 : linear_order β,	a : has_lt.lt →r has_lt.lt,	m n : β,	h : n ≤ m	⊢ ⇑a m ⊓ ⇑a n = ⇑a (m ⊓ n)		case or.inr	α : Type u_1,	β : Type u_2,	_inst_1 : semilattice_inf α,	_inst_2 : linear_order β,	a : has_lt.lt →r has_lt.lt,	m n : β,	h : m < n	⊢ ⇑a m ⊓ ⇑a n = ⇑a (m ⊓ n)
α : Type u_1,	β : Type u_2,	_inst_1 : semilattice_inf α,	_inst_2 : linear_order β,	a : has_lt.lt →r has_lt.lt,	m n : β,	h : m < n	⊢ ⇑a m ≤ ⇑a n
α : Type u_1,	β : Type u_2,	_inst_1 : semilattice_inf α,	_inst_2 : linear_order β,	a : has_lt.lt →r has_lt.lt,	m n : β,	h : m < n	⊢ ⇑a m ⊓ ⇑a n = ⇑a (m ⊓ n)
α : Type u_1,	β : Type u_2,	r : α → α → Prop,	s : β → β → Prop,	to_equiv_injective : function.injective rel_iso.to_equiv,	e₁ : α ≃ β,	o₁ : ∀ {a b : α}, s (⇑e₁ a) (⇑e₁ b) ↔ r a b,	e₂ : α ≃ β,	o₂ : ∀ {a b : α}, s (⇑e₂ a) (⇑e₂ b) ↔ r a b,	h : {to_equiv := e₁, map_rel_iff' := o₁}.to_equiv = {to_equiv := e₂, map_rel_iff' := o₂}.to_equiv	⊢ {to_equiv := e₁, map_rel_iff' := o₁} = {to_equiv := e₂, map_rel_iff' := o₂}
α : Type u_1,	β : Type u_2,	r : α → α → Prop,	s : β → β → Prop,	to_equiv_injective : function.injective rel_iso.to_equiv,	e₁ : α ≃ β,	o₁ : ∀ {a b : α}, s (⇑e₁ a) (⇑e₁ b) ↔ r a b,	e₂ : α ≃ β,	o₂ : ∀ {a b : α}, s (⇑e₂ a) (⇑e₂ b) ↔ r a b,	h : {to_equiv := e₁, map_rel_iff' := o₁}.to_equiv = {to_equiv := e₂, map_rel_iff' := o₂}.to_equiv	⊢ e₁ = e₂
α : Type u_1,	β : Type u_2,	_inst_1 : has_le α,	_inst_2 : has_le β,	e : α ≃o β	⊢ e.symm.symm = e
α : Type u_1,	β : Type u_2,	_inst_1 : has_le α,	_inst_2 : has_le β,	e : α ≃o β,	x : α	⊢ ⇑(e.symm.symm) x = ⇑e x
α : Type u_1,	_inst_1 : boolean_algebra α,	a b : α	⊢ a Δ b = a ⊓ bᶜ ⊔ b ⊓ aᶜ
α : Type u_1,	_inst_1 : generalized_boolean_algebra α,	a b c : α	⊢ c \ a Δ b = c ⊓ a ⊓ b ⊔ c \ (a ⊔ b)
α : Type u_1,	r : α → α → Prop,	wf : well_founded r,	x : α,	h : ∃ (y : α), r x y	⊢ r x (wf.min {y : α | r x y} h)
α : Type u_1,	r : α → α → Prop,	wf : well_founded r,	x : α,	h : ∃ (y : α), r x y	⊢ r x (wf.succ x)
α : Type u_1,	ι : Type u_2,	_inst_1 : partial_order α,	f : finset ι,	g : ι → set α,	hf : ∀ (i : ι), i ∈ f → (g i).is_wf	⊢ (f.sup g).is_wf
α : Type u_1,	ι : Type u_2,	_inst_1 : partial_order α,	f : finset ι,	g : ι → set α,	hf : ∀ (i : ι), i ∈ f → (g i).is_wf,	_inst : Π (a : Prop), decidable a	⊢ (f.sup g).is_wf
α : Type u_1,	ι : Type u_2,	_inst_1 : partial_order α,	f : finset ι,	g : ι → set α,	_inst : Π (a : Prop), decidable a	⊢ (∀ (i : ι), i ∈ f → (g i).is_wf) → (f.sup g).is_wf
α : Type u_1,	ι : Type u_2,	_inst_1 : partial_order α,	f : finset ι,	g : ι → set α,	_inst : Π (a : Prop), decidable a	⊢ (∀ (i : ι), i ∈ ∅ → (g i).is_wf) → (∅.sup g).is_wf
α : Type u_1,	ι : Type u_2,	_inst_1 : partial_order α,	f : finset ι,	g : ι → set α,	_inst : Π (a : Prop), decidable a	⊢ (∀ (i : ι), i ∈ ∅ → (g i).is_wf) → (∅.sup g).is_wf		α : Type u_1,	ι : Type u_2,	_inst_1 : partial_order α,	f : finset ι,	g : ι → set α,	_inst : Π (a : Prop), decidable a	⊢ ∀ ⦃a : ι⦄ {s : finset ι}, a ∉ s → ((∀ (i : ι), i ∈ s → (g i).is_wf) → (s.sup g).is_wf) → (∀ (i : ι), i ∈ has_insert.insert a s → (g i).is_wf) → ((has_insert.insert a s).sup g).is_wf
α : Type u_1,	ι : Type u_2,	_inst_1 : partial_order α,	f : finset ι,	g : ι → set α,	_inst : Π (a : Prop), decidable a,	h : ∀ (i : ι), i ∈ ∅ → (g i).is_wf	⊢ (∅.sup g).is_wf
α : Type u_1,	ι : Type u_2,	_inst_1 : partial_order α,	f : finset ι,	g : ι → set α,	_inst : Π (a : Prop), decidable a	⊢ ∀ ⦃a : ι⦄ {s : finset ι}, a ∉ s → ((∀ (i : ι), i ∈ s → (g i).is_wf) → (s.sup g).is_wf) → (∀ (i : ι), i ∈ has_insert.insert a s → (g i).is_wf) → ((has_insert.insert a s).sup g).is_wf
α : Type u_1,	ι : Type u_2,	_inst_1 : partial_order α,	f : finset ι,	g : ι → set α,	_inst : Π (a : Prop), decidable a,	s : ι,	f : finset ι,	sf : s ∉ f,	hf : (∀ (i : ι), i ∈ f → (g i).is_wf) → (f.sup g).is_wf,	hsf : ∀ (i : ι), i ∈ has_insert.insert s f → (g i).is_wf	⊢ ((has_insert.insert s f).sup g).is_wf
α : Type u_1,	ι : Type u_2,	_inst_1 : partial_order α,	f : finset ι,	g : ι → set α,	_inst : Π (a : Prop), decidable a,	s : ι,	f : finset ι,	sf : s ∉ f,	hf : (∀ (i : ι), i ∈ f → (g i).is_wf) → (f.sup g).is_wf,	hsf : ∀ (i : ι), i ∈ has_insert.insert s f → (g i).is_wf	⊢ (g s ⊔ f.sup g).is_wf
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r	⊢ {l : list α | ∀ (x : α), x ∈ l → x ∈ s}.partially_well_ordered_on (list.sublist_forall₂ r)
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	h : ∅.partially_well_ordered_on r	⊢ {l : list α | ∀ (x : α), x ∈ l → x ∈ ∅}.partially_well_ordered_on (list.sublist_forall₂ r)
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	h : ∅.partially_well_ordered_on r	⊢ {l : list α | ∀ (x : α), x ∈ l → x ∈ ∅} ⊆ ↑{list.nil}
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	h : ∅.partially_well_ordered_on r,	l : list α,	hl : l ∈ {l : list α | ∀ (x : α), x ∈ l → x ∈ ∅}	⊢ l ∈ ↑{list.nil}
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	h : ∅.partially_well_ordered_on r	⊢ {l : list α | ∀ (x : α), x ∈ l → x ∈ ∅} ⊆ ↑{list.nil}		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	h : ∅.partially_well_ordered_on r	⊢ Type ?		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	h : ∅.partially_well_ordered_on r	⊢ has_singleton (list ?m_1) (finset (list α))		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	h : ∅.partially_well_ordered_on r	⊢ is_refl (list α) (list.sublist_forall₂ r)
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	h : ∅.partially_well_ordered_on r,	l : list α,	hl : l ∈ {l : list α | ∀ (x : α), x ∈ l → x ∈ ∅}	⊢ ∀ (a : α), a ∉ l
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	h : ∅.partially_well_ordered_on r	⊢ {l : list α | ∀ (x : α), x ∈ l → x ∈ ∅}.partially_well_ordered_on (list.sublist_forall₂ r)		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s	⊢ {l : list α | ∀ (x : α), x ∈ l → x ∈ s}.partially_well_ordered_on (list.sublist_forall₂ r)
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	h : ∅.partially_well_ordered_on r	⊢ is_refl (list α) (list.sublist_forall₂ r)
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s	⊢ {l : list α | ∀ (x : α), x ∈ l → x ∈ s}.partially_well_ordered_on (list.sublist_forall₂ r)
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α	⊢ {l : list α | ∀ (x : α), x ∈ l → x ∈ s}.partially_well_ordered_on (list.sublist_forall₂ r)
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α	⊢ ¬∃ (f : ℕ → list α), set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f ∧ ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil	⊢ set.range (list.head ∘ f) ⊆ s
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n))	⊢ false		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil	⊢ set.range (list.head ∘ f) ⊆ s
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil	⊢ ∀ (y : ℕ), (f y).head ∈ s
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil	⊢ set.range (list.head ∘ f) ⊆ s		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n))	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n))	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n))	⊢ ((λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) (⇑g 0)).length < (f (⇑g 0)).length
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : ¬set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)	⊢ false		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n))	⊢ ((λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) (⇑g 0)).length < (f (⇑g 0)).length
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n))	⊢ (f (⇑g 0)).tail.length < (f (⇑g 0)).length
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n))	⊢ (f (⇑g 0)).length.pred < (f (⇑g 0)).length
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n))	⊢ ((λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) (⇑g 0)).length < (f (⇑g 0)).length		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : ¬set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : ¬set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : ¬(set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} ∧ ∀ (m n : ℕ), m < n → ¬list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail))	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail))	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail))	⊢ set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s}
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n : ℕ,	mn : m < n,	hmn : list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)	⊢ false		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail))	⊢ set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s}
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail))	⊢ ∀ (y : ℕ), ite (y < ⇑g 0) (f y) (f (⇑g (y - ⇑g 0))).tail ∈ {l : list α | ∀ (x : α), x ∈ l → x ∈ s}
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	n : ℕ,	x : α,	hx : x ∈ ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail	⊢ x ∈ s
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	n : ℕ,	x : α,	hn : n < ⇑g 0,	hx : x ∈ f n	⊢ x ∈ s		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	n : ℕ,	x : α,	hn : ¬n < ⇑g 0,	hx : x ∈ (f (⇑g (n - ⇑g 0))).tail	⊢ x ∈ s
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	n : ℕ,	x : α,	hn : n < ⇑g 0,	hx : x ∈ f n	⊢ x ∈ s
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail))	⊢ set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s}		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n : ℕ,	mn : m < n,	hmn : list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	n : ℕ,	x : α,	hn : ¬n < ⇑g 0,	hx : x ∈ (f (⇑g (n - ⇑g 0))).tail	⊢ x ∈ s
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n : ℕ,	mn : m < n,	hmn : list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n : ℕ,	mn : m < n,	hmn : list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail),	hn : n < ⇑g 0	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n : ℕ,	mn : m < n,	hmn : list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail),	hn : n < ⇑g 0	⊢ false		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n : ℕ,	mn : m < n,	hmn : list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail),	hn : ¬n < ⇑g 0	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n : ℕ,	mn : m < n,	hmn : list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail),	hn : n < ⇑g 0	⊢ list.sublist_forall₂ r (f m) (f n)
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n : ℕ,	mn : m < n,	hmn : list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail),	hn : ¬n < ⇑g 0	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n' : ℕ,	mn : m < ⇑g 0 + n',	hmn : list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (⇑g 0 + n' < ⇑g 0) (f (⇑g 0 + n')) (f (⇑g (⇑g 0 + n' - ⇑g 0))).tail),	hn : ¬⇑g 0 + n' < ⇑g 0	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n' : ℕ,	mn : m < ⇑g 0 + n',	hn : ¬⇑g 0 + n' < ⇑g 0,	hmn : list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (f (⇑g n')).tail	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n' : ℕ,	mn : m < ⇑g 0 + n',	hn : ¬⇑g 0 + n' < ⇑g 0,	hm : m < ⇑g 0,	hmn : list.sublist_forall₂ r (f m) (f (⇑g n')).tail	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n' : ℕ,	mn : m < ⇑g 0 + n',	hn : ¬⇑g 0 + n' < ⇑g 0,	hm : m < ⇑g 0,	hmn : list.sublist_forall₂ r (f m) (f (⇑g n')).tail	⊢ false		α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n' : ℕ,	mn : m < ⇑g 0 + n',	hn : ¬⇑g 0 + n' < ⇑g 0,	hm : ¬m < ⇑g 0,	hmn : list.sublist_forall₂ r (f (⇑g (m - ⇑g 0))).tail (f (⇑g n')).tail	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n' : ℕ,	mn : m < ⇑g 0 + n',	hn : ¬⇑g 0 + n' < ⇑g 0,	hm : m < ⇑g 0,	hmn : list.sublist_forall₂ r (f m) (f (⇑g n')).tail	⊢ list.sublist_forall₂ r (f m) (f (⇑g n'))
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n' : ℕ,	mn : m < ⇑g 0 + n',	hn : ¬⇑g 0 + n' < ⇑g 0,	hm : ¬m < ⇑g 0,	hmn : list.sublist_forall₂ r (f (⇑g (m - ⇑g 0))).tail (f (⇑g n')).tail	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n' : ℕ,	hn : ¬⇑g 0 + n' < ⇑g 0,	hm : ¬m < ⇑g 0,	hmn : list.sublist_forall₂ r (f (⇑g (m - ⇑g 0))).tail (f (⇑g n')).tail,	mn : m - ⇑g 0 < n'	⊢ false
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n' : ℕ,	hn : ¬⇑g 0 + n' < ⇑g 0,	hm : ¬m < ⇑g 0,	hmn : list.sublist_forall₂ r (f (⇑g (m - ⇑g 0))).tail (f (⇑g n')).tail,	mn : m - ⇑g 0 < n'	⊢ list.sublist_forall₂ r (f (⇑g (m - ⇑g 0))) (f (⇑g n'))
α : Type u_1,	r : α → α → Prop,	_inst_1 : is_refl α r,	_inst_2 : is_trans α r,	s : set α,	h : s.partially_well_ordered_on r,	as : α,	has : as ∈ s,	_inst : inhabited α,	f : ℕ → list α,	hf1 : set.partially_well_ordered_on.is_bad_seq (list.sublist_forall₂ r) {l : list α | ∀ (x : α), x ∈ l → x ∈ s} f,	hf2 : ∀ (n : ℕ), set.partially_well_ordered_on.is_min_bad_seq (list.sublist_forall₂ r) list.length {l : list α | ∀ (x : α), x ∈ l → x ∈ s} n f,	hnil : ∀ (n : ℕ), f n ≠ list.nil,	g : ℕ ↪o ℕ,	hg : ∀ (m n : ℕ), m ≤ n → r ((list.head ∘ f) (⇑g m)) ((list.head ∘ f) (⇑g n)),	hf' : set.range (λ (n : ℕ), ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail) ⊆ {l : list α | ∀ (x : α), x ∈ l → x ∈ s} → (∃ (m n : ℕ), m < n ∧ list.sublist_forall₂ r (ite (m < ⇑g 0) (f m) (f (⇑g (m - ⇑g 0))).tail) (ite (n < ⇑g 0) (f n) (f (⇑g (n - ⇑g 0))).tail)),	m n' : ℕ,	hn : ¬⇑g 0 + n' < ⇑g 0,	hm : ¬m < ⇑g 0,	hmn : list.sublist_forall₂ r (f (⇑g (m - ⇑g 0))).tail (f (⇑g n')).tail,	mn : m - ⇑g 0 < n'	⊢ list.sublist_forall₂ r ((f (⇑g (m - ⇑g 0))).head :: (f (⇑g (m - ⇑g 0))).tail) ((f (⇑g n')).head :: (f (⇑g n')).tail)
α : Type u,	_inst_1 : partial_order α,	s : set α,	ih : ∀ (c : set α), c ⊆ s → zorn.chain has_le.le c → ∀ (y : α), y ∈ c → (∃ (ub : α) (H : ub ∈ s), ∀ (z : α), z ∈ c → z ≤ ub),	x : α,	hxs : x ∈ s,	c : set {m // m ∈ s ∧ x ≤ m},	hc : zorn.chain has_le.le c,	_x : c.nonempty,	_fun_match : c.nonempty → (∃ (ub : {m // m ∈ s ∧ x ≤ m}), ∀ (a : {m // m ∈ s ∧ x ≤ m}), a ∈ c → a ≤ ub),	m : {m // m ∈ s ∧ x ≤ m},	hmc : m ∈ c	⊢ zorn.chain has_le.le (subtype.val '' c)
α : Type u,	_inst_1 : partial_order α,	s : set α,	ih : ∀ (c : set α), c ⊆ s → zorn.chain has_le.le c → ∀ (y : α), y ∈ c → (∃ (ub : α) (H : ub ∈ s), ∀ (z : α), z ∈ c → z ≤ ub),	x : α,	hxs : x ∈ s,	c : set {m // m ∈ s ∧ x ≤ m},	hc : zorn.chain has_le.le c,	_x : c.nonempty,	_fun_match : c.nonempty → (∃ (ub : {m // m ∈ s ∧ x ≤ m}), ∀ (a : {m // m ∈ s ∧ x ≤ m}), a ∈ c → a ≤ ub),	m : {m // m ∈ s ∧ x ≤ m},	hmc : m ∈ c	⊢ zorn.chain has_le.le (subtype.val '' c)
α : Type u,	_inst_1 : partial_order α,	s : set α,	ih : ∀ (c : set α), c ⊆ s → zorn.chain has_le.le c → ∀ (y : α), y ∈ c → (∃ (ub : α) (H : ub ∈ s), ∀ (z : α), z ∈ c → z ≤ ub),	x : α,	hxs : x ∈ s,	c : set {m // m ∈ s ∧ x ≤ m},	hc : zorn.chain has_le.le c,	_x : c.nonempty,	_fun_match : c.nonempty → (∃ (ub : {m // m ∈ s ∧ x ≤ m}), ∀ (a : {m // m ∈ s ∧ x ≤ m}), a ∈ c → a ≤ ub),	m : {m // m ∈ s ∧ x ≤ m},	hmc : m ∈ c,	p : {m // m ∈ s ∧ x ≤ m},	hpc : p ∈ c,	q : {m // m ∈ s ∧ x ≤ m},	hqc : q ∈ c,	hpq : p.val ≠ q.val	⊢ p.val ≤ q.val ∨ q.val ≤ p.val
α : Type u,	_inst_1 : partial_order α,	s : set α,	ih : ∀ (c : set α), c ⊆ s → zorn.chain has_le.le c → ∀ (y : α), y ∈ c → (∃ (ub : α) (H : ub ∈ s), ∀ (z : α), z ∈ c → z ≤ ub),	x : α,	hxs : x ∈ s,	c : set {m // m ∈ s ∧ x ≤ m},	hc : zorn.chain has_le.le c,	_x : c.nonempty,	_fun_match : c.nonempty → (∃ (ub : {m // m ∈ s ∧ x ≤ m}), ∀ (a : {m // m ∈ s ∧ x ≤ m}), a ∈ c → a ≤ ub),	m : {m // m ∈ s ∧ x ≤ m},	hmc : m ∈ c,	p : {m // m ∈ s ∧ x ≤ m},	hpc : p ∈ c,	q : {m // m ∈ s ∧ x ≤ m},	hqc : q ∈ c,	hpq : p.val ≠ q.val	⊢ p = q → p.val = q.val
α : Type u,	_inst_1 : partial_order α,	s : set α,	ih : ∀ (c : set α), c ⊆ s → zorn.chain has_le.le c → ∀ (y : α), y ∈ c → (∃ (ub : α) (H : ub ∈ s), ∀ (z : α), z ∈ c → z ≤ ub),	x : α,	hxs : x ∈ s,	c : set {m // m ∈ s ∧ x ≤ m},	hc : zorn.chain has_le.le c,	_x : c.nonempty,	_fun_match : c.nonempty → (∃ (ub : {m // m ∈ s ∧ x ≤ m}), ∀ (a : {m // m ∈ s ∧ x ≤ m}), a ∈ c → a ≤ ub),	m : {m // m ∈ s ∧ x ≤ m},	hmc : m ∈ c,	p : {m // m ∈ s ∧ x ≤ m},	hpc : p ∈ c,	q : {m // m ∈ s ∧ x ≤ m},	hqc : q ∈ c,	hpq : p.val ≠ q.val	⊢ p = q → p.val = q.val
α : Type u,	_inst_1 : partial_order α,	s : set α,	ih : ∀ (c : set α), c ⊆ s → zorn.chain has_le.le c → ∀ (y : α), y ∈ c → (∃ (ub : α) (H : ub ∈ s), ∀ (z : α), z ∈ c → z ≤ ub),	x : α,	hxs : x ∈ s,	c : set {m // m ∈ s ∧ x ≤ m},	hc : zorn.chain has_le.le c,	_x : c.nonempty,	_fun_match : c.nonempty → (∃ (ub : {m // m ∈ s ∧ x ≤ m}), ∀ (a : {m // m ∈ s ∧ x ≤ m}), a ∈ c → a ≤ ub),	m : {m // m ∈ s ∧ x ≤ m},	hmc : m ∈ c,	p : {m // m ∈ s ∧ x ≤ m},	hpc hqc : p ∈ c,	hpq : p.val ≠ p.val	⊢ p.val = p.val
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j	⊢ probability_theory.indep_sets (s i) (s j) μ
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j	⊢ ⇑μ (t₁ ∩ t₂) = ⇑μ t₁ * ⇑μ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j	⊢ ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι,	hx : x ∈ {i, j}	⊢ ite (x = i) t₁ t₂ ∈ s x
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι,	hx : x ∈ {i, j},	hx : x = i	⊢ ite (x = i) t₁ t₂ ∈ s x		case or.inr	α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι,	hx : x ∈ {i, j},	hx : x ∈ {j}	⊢ ite (x = i) t₁ t₂ ∈ s x		α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι	⊢ has_singleton ι (finset ι)
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι,	hx : x ∈ {i, j},	hx : x = i	⊢ ite (x = i) t₁ t₂ ∈ s x
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι,	hx : x ∈ {i, j},	hx : x ∈ {j}	⊢ ite (x = i) t₁ t₂ ∈ s x		α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι	⊢ has_singleton ι (finset ι)
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j	⊢ ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x		α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x	⊢ ⇑μ (t₁ ∩ t₂) = ⇑μ t₁ * ⇑μ t₂		α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι	⊢ Type ?		α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι	⊢ has_mem ι ?m_1		α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι	⊢ has_insert ι ?m_1		α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι	⊢ has_singleton ι ?m_1
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	x : ι,	hx : x ∈ {i, j},	hx : x ∈ {j}	⊢ ite (x = i) t₁ t₂ ∈ s x
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x	⊢ ⇑μ (t₁ ∩ t₂) = ⇑μ t₁ * ⇑μ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x	⊢ t₁ = ite (i = i) t₁ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x,	h1 : t₁ = ite (i = i) t₁ t₂	⊢ ⇑μ (t₁ ∩ t₂) = ⇑μ t₁ * ⇑μ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x,	h1 : t₁ = ite (i = i) t₁ t₂	⊢ t₂ = ite (j = i) t₁ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x,	h1 : t₁ = ite (i = i) t₁ t₂,	h2 : t₂ = ite (j = i) t₁ t₂	⊢ ⇑μ (t₁ ∩ t₂) = ⇑μ t₁ * ⇑μ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x,	h1 : t₁ = ite (i = i) t₁ t₂,	h2 : t₂ = ite (j = i) t₁ t₂	⊢ (⋂ (t : ι) (H : t ∈ {i, j}), ite (t = i) t₁ t₂) = ite (i = i) t₁ t₂ ∩ ite (j = i) t₁ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x,	h1 : t₁ = ite (i = i) t₁ t₂,	h2 : t₂ = ite (j = i) t₁ t₂,	h_inter : (⋂ (t : ι) (H : t ∈ {i, j}), ite (t = i) t₁ t₂) = ite (i = i) t₁ t₂ ∩ ite (j = i) t₁ t₂	⊢ ⇑μ (t₁ ∩ t₂) = ⇑μ t₁ * ⇑μ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x,	h1 : t₁ = ite (i = i) t₁ t₂,	h2 : t₂ = ite (j = i) t₁ t₂,	h_inter : (⋂ (t : ι) (H : t ∈ {i, j}), ite (t = i) t₁ t₂) = ite (i = i) t₁ t₂ ∩ ite (j = i) t₁ t₂	⊢ ∏ (t : ι) in {i, j}, ⇑μ (ite (t = i) t₁ t₂) = ⇑μ (ite (i = i) t₁ t₂) * ⇑μ (ite (j = i) t₁ t₂)
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x,	h1 : t₁ = ite (i = i) t₁ t₂,	h2 : t₂ = ite (j = i) t₁ t₂,	h_inter : (⋂ (t : ι) (H : t ∈ {i, j}), ite (t = i) t₁ t₂) = ite (i = i) t₁ t₂ ∩ ite (j = i) t₁ t₂,	h_prod : ∏ (t : ι) in {i, j}, ⇑μ (ite (t = i) t₁ t₂) = ⇑μ (ite (i = i) t₁ t₂) * ⇑μ (ite (j = i) t₁ t₂)	⊢ ⇑μ (t₁ ∩ t₂) = ⇑μ t₁ * ⇑μ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x,	h1 : t₁ = ite (i = i) t₁ t₂,	h2 : t₂ = ite (j = i) t₁ t₂,	h_inter : (⋂ (t : ι) (H : t ∈ {i, j}), ite (t = i) t₁ t₂) = ite (i = i) t₁ t₂ ∩ ite (j = i) t₁ t₂,	h_prod : ∏ (t : ι) in {i, j}, ⇑μ (ite (t = i) t₁ t₂) = ⇑μ (ite (i = i) t₁ t₂) * ⇑μ (ite (j = i) t₁ t₂)	⊢ ⇑μ (ite (i = i) t₁ t₂ ∩ t₂) = ⇑μ (ite (i = i) t₁ t₂) * ⇑μ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x,	h1 : t₁ = ite (i = i) t₁ t₂,	h2 : t₂ = ite (j = i) t₁ t₂,	h_inter : (⋂ (t : ι) (H : t ∈ {i, j}), ite (t = i) t₁ t₂) = ite (i = i) t₁ t₂ ∩ ite (j = i) t₁ t₂,	h_prod : ∏ (t : ι) in {i, j}, ⇑μ (ite (t = i) t₁ t₂) = ⇑μ (ite (i = i) t₁ t₂) * ⇑μ (ite (j = i) t₁ t₂)	⊢ ⇑μ (ite (i = i) t₁ t₂ ∩ ite (j = i) t₁ t₂) = ⇑μ (ite (i = i) t₁ t₂) * ⇑μ t₂
α : Type u_1,	ι : Type u_2,	s : ι → set (set α),	_inst_1 : measurable_space α,	μ : measure_theory.measure α,	h_indep : probability_theory.Indep_sets s μ,	i j : ι,	hij : i ≠ j,	t₁ t₂ : set α,	ht₁ : t₁ ∈ s i,	ht₂ : t₂ ∈ s j,	hf_m : ∀ (x : ι), x ∈ {i, j} → ite (x = i) t₁ t₂ ∈ s x,	h1 : t₁ = ite (i = i) t₁ t₂,	h2 : t₂ = ite (j = i) t₁ t₂,	h_inter : (⋂ (t : ι) (H : t ∈ {i, j}), ite (t = i) t₁ t₂) = ite (i = i) t₁ t₂ ∩ ite (j = i) t₁ t₂,	h_prod : ∏ (t : ι) in {i, j}, ⇑μ (ite (t = i) t₁ t₂) = ⇑μ (ite (i = i) t₁ t₂) * ⇑μ (ite (j = i) t₁ t₂)	⊢ ⇑μ (ite (i = i) t₁ t₂ ∩ ite (j = i) t₁ t₂) = ⇑μ (ite (i = i) t₁ t₂) * ⇑μ (ite (j = i) t₁ t₂)
R : Type u,	_inst_1 : comm_ring R,	f : polynomial R	⊢ polynomial.eval₂ (adjoin_root.of f) (adjoin_root.root f) f = 0
R : Type u,	S : Type v,	_inst_1 : comm_ring R,	f : polynomial R,	_inst_2 : comm_ring S,	i : R →+* S,	x : S,	h : polynomial.eval₂ i x f = 0	⊢ adjoin_root f →+* S
R : Type u,	S : Type v,	_inst_1 : comm_ring R,	f : polynomial R,	_inst_2 : comm_ring S,	i : R →+* S,	x : S,	h : polynomial.eval₂ i x f = 0	⊢ ∀ (a : polynomial R), a ∈ ideal.span {f} → ⇑(polynomial.eval₂_ring_hom i x) a = 0
R : Type u,	S : Type v,	_inst_1 : comm_ring R,	f : polynomial R,	_inst_2 : comm_ring S,	i : R →+* S,	x : S,	h : polynomial.eval₂ i x f = 0,	g : polynomial R,	H : g ∈ ideal.span {f}	⊢ ⇑(polynomial.eval₂_ring_hom i x) g = 0
R : Type u,	S : Type v,	_inst_1 : comm_ring R,	f : polynomial R,	_inst_2 : comm_ring S,	i : R →+* S,	x : S,	h : polynomial.eval₂ i x f = 0,	g : polynomial R,	H : g ∈ ideal.span {f},	y : polynomial R,	hy : g = f * y	⊢ ⇑(polynomial.eval₂_ring_hom i x) g = 0
L : Type u_1,	F : Type u_2,	_inst_1 : field F,	_inst_3 : field L,	_inst_5 : algebra F L,	f : polynomial F,	hf : f ≠ 0,	x : L	⊢ x ∈ (polynomial.map (algebra_map F L) (minpoly F (adjoin_root.power_basis hf).gen)).roots ↔ ⇑(equiv.refl L) x ∈ (polynomial.map (algebra_map F L) f).roots
L : Type u_1,	F : Type u_2,	_inst_1 : field F,	_inst_3 : field L,	_inst_5 : algebra F L,	f : polynomial F,	hf : f ≠ 0,	x : L	⊢ polynomial.map (algebra_map F L) (f * ⇑polynomial.C (f.leading_coeff)⁻¹) ≠ 0
L : Type u_1,	F : Type u_2,	_inst_1 : field F,	_inst_3 : field L,	_inst_5 : algebra F L,	f : polynomial F,	hf : f ≠ 0,	x : L	⊢ polynomial.map (algebra_map F L) f * polynomial.map (algebra_map F L) (⇑polynomial.C (f.leading_coeff)⁻¹) ≠ 0
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M	⊢ (∀ (f : ℕ →ₘ order_dual (submodule R M)), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ is_artinian R M
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M	⊢ (∀ (f : ℕ →ₘ order_dual (submodule R M)), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ is_artinian R M
R : Type u_1,	M : Type u_2,	_inst_1 : ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M	⊢ (∀ (f : ℕ →ₘ order_dual (submodule R M)), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ well_founded has_lt.lt
α : Type u_1,	_inst_1 : euclidean_domain α,	x y : α,	h : is_unit (euclidean_domain.gcd x y),	_let_match : (∃ (b : α), b * euclidean_domain.gcd x y = 1) → is_coprime x y,	b : α,	hb : b * euclidean_domain.gcd x y = 1	⊢ b * euclidean_domain.gcd_a x y * x + b * euclidean_domain.gcd_b x y * y = 1
R : Type u_1,	A : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring A,	_inst_3 : algebra R A,	_inst_10 : is_noetherian_ring R	⊢ algebra.finite_type R A ↔ algebra.finite_presentation R A
R : Type u_1,	A : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring A,	_inst_3 : algebra R A,	_inst_10 : is_noetherian_ring R,	h : algebra.finite_type R A	⊢ algebra.finite_presentation R A
R : Type u_1,	A : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring A,	_inst_3 : algebra R A,	_inst_10 : is_noetherian_ring R,	h : algebra.finite_type R A,	n : ℕ,	f : mv_polynomial (fin n) R →ₐ[R] A,	hf : function.surjective ⇑f	⊢ algebra.finite_presentation R A
R : Type u_1,	A : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring A,	_inst_3 : algebra R A,	_inst_10 : is_noetherian_ring R,	h : algebra.finite_type R A,	n : ℕ,	f : mv_polynomial (fin n) R →ₐ[R] A,	hf : function.surjective ⇑f	⊢ submodule.fg f.to_ring_hom.ker
R : Type u_1,	A : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring A,	_inst_3 : algebra R A,	_inst_10 : is_noetherian_ring R,	h : algebra.finite_type R A,	n : ℕ,	f : mv_polynomial (fin n) R →ₐ[R] A,	hf : function.surjective ⇑f	⊢ is_noetherian_ring (mv_polynomial (fin n) R)
R : Type u_1,	A : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring A,	_inst_3 : algebra R A,	_inst_10 : is_noetherian_ring R,	h : algebra.finite_type R A,	n : ℕ,	f : mv_polynomial (fin n) R →ₐ[R] A,	hf : function.surjective ⇑f,	hnoet : is_noetherian_ring (mv_polynomial (fin n) R)	⊢ submodule.fg f.to_ring_hom.ker
R : Type u_1,	A : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring A,	_inst_3 : algebra R A,	_inst_10 : is_noetherian_ring R,	h : algebra.finite_type R A,	n : ℕ,	f : mv_polynomial (fin n) R →ₐ[R] A,	hf : function.surjective ⇑f,	hnoet : ∀ (s : submodule (mv_polynomial (fin n) R) (mv_polynomial (fin n) R)), s.fg	⊢ submodule.fg f.to_ring_hom.ker
A : Type u_1,	B : Type u_2,	_inst_1 : comm_ring A,	_inst_2 : comm_ring B,	f : A →+* B,	hf : function.surjective ⇑f	⊢ f.finite
A : Type u_1,	B : Type u_2,	_inst_1 : comm_ring A,	_inst_2 : comm_ring B,	f : A →+* B,	hf : function.surjective ⇑f,	_inst : algebra A B := f.to_algebra	⊢ f.finite
R₁ : Type u_3,	_inst_4 : integral_domain R₁,	K : Type u_4,	_inst_5 : field K,	_inst_6 : algebra R₁ K,	_inst_7 : is_noetherian_ring R₁,	I : ideal R₁	⊢ is_noetherian R₁ ↥↑I
R₁ : Type u_3,	_inst_4 : integral_domain R₁,	K : Type u_4,	_inst_5 : field K,	_inst_6 : algebra R₁ K,	_inst_7 : is_noetherian_ring R₁,	I : ideal R₁	⊢ ∀ (J : fractional_ideal R₁⁰ K), J ≤ ↑I → ↑J.fg
R₁ : Type u_3,	_inst_4 : integral_domain R₁,	K : Type u_4,	_inst_5 : field K,	_inst_6 : algebra R₁ K,	_inst_7 : is_noetherian_ring R₁,	I : ideal R₁,	J : fractional_ideal R₁⁰ K,	hJ : J ≤ ↑I	⊢ ↑J.fg
R₁ : Type u_3,	_inst_4 : integral_domain R₁,	K : Type u_4,	_inst_5 : field K,	_inst_6 : algebra R₁ K,	_inst_7 : is_noetherian_ring R₁,	I : ideal R₁,	J : ideal R₁,	hJ : ↑J ≤ ↑I	⊢ ↑↑J.fg
R : Type u_1,	_inst_1 : comm_ring R,	S : submonoid R,	P : Type u_2,	_inst_2 : comm_ring P,	_inst_3 : algebra R P,	I : fractional_ideal S P	⊢ 0 ≤ I
R : Type u_1,	_inst_1 : comm_ring R,	S : submonoid R,	P : Type u_2,	_inst_2 : comm_ring P,	_inst_3 : algebra R P,	I : fractional_ideal S P,	x : P,	hx : x ∈ 0	⊢ x ∈ I
R : Type u_1,	_inst_1 : comm_ring R,	S : submonoid R,	P : Type u_2,	_inst_2 : comm_ring P,	_inst_3 : algebra R P,	I : fractional_ideal S P,	x : P,	hx : x ∈ 0	⊢ x = 0
R : Type u_2,	_inst_1 : comm_semiring R,	A : Type u_3,	_inst_2 : semiring A,	_inst_3 : algebra R A,	r : R	⊢ hahn_series.to_power_series.to_fun (⇑(algebra_map R (hahn_series ℕ A)) r) = ⇑(algebra_map R (power_series A)) r
R : Type u_2,	_inst_1 : comm_semiring R,	A : Type u_3,	_inst_2 : semiring A,	_inst_3 : algebra R A,	r : R,	n : ℕ	⊢ ⇑(power_series.coeff A n) (hahn_series.to_power_series.to_fun (⇑(algebra_map R (hahn_series ℕ A)) r)) = ⇑(power_series.coeff A n) (⇑(algebra_map R (power_series A)) r)
R : Type u_2,	_inst_1 : comm_semiring R,	A : Type u_3,	_inst_2 : semiring A,	_inst_3 : algebra R A,	r : R,	n : ℕ	⊢ (⇑(hahn_series.single 0) (⇑(algebra_map R A) r)).coeff n = ⇑(power_series.coeff A n) (⇑(power_series.C A) (⇑(algebra_map R A) r))
R : Type u_2,	_inst_1 : comm_semiring R,	A : Type u_3,	_inst_2 : semiring A,	_inst_3 : algebra R A,	r : R	⊢ (⇑(hahn_series.single 0) (⇑(algebra_map R A) r)).coeff 0 = ⇑(power_series.coeff A 0) (⇑(power_series.C A) (⇑(algebra_map R A) r))
R : Type u_2,	_inst_1 : comm_semiring R,	A : Type u_3,	_inst_2 : semiring A,	_inst_3 : algebra R A,	r : R	⊢ (⇑(hahn_series.single 0) (⇑(algebra_map R A) r)).coeff 0 = ⇑(power_series.coeff A 0) (⇑(power_series.C A) (⇑(algebra_map R A) r))		case nat.succ	R : Type u_2,	_inst_1 : comm_semiring R,	A : Type u_3,	_inst_2 : semiring A,	_inst_3 : algebra R A,	r : R,	n : ℕ	⊢ (⇑(hahn_series.single 0) (⇑(algebra_map R A) r)).coeff n.succ = ⇑(power_series.coeff A n.succ) (⇑(power_series.C A) (⇑(algebra_map R A) r))
R : Type u_2,	_inst_1 : comm_semiring R,	A : Type u_3,	_inst_2 : semiring A,	_inst_3 : algebra R A,	r : R	⊢ ⇑(algebra_map R A) r = ⇑(power_series.constant_coeff A) (⇑(power_series.C A) (⇑(algebra_map R A) r))
R : Type u_2,	_inst_1 : comm_semiring R,	A : Type u_3,	_inst_2 : semiring A,	_inst_3 : algebra R A,	r : R,	n : ℕ	⊢ (⇑(hahn_series.single 0) (⇑(algebra_map R A) r)).coeff n.succ = ⇑(power_series.coeff A n.succ) (⇑(power_series.C A) (⇑(algebra_map R A) r))
R : Type u_2,	_inst_1 : comm_semiring R,	A : Type u_3,	_inst_2 : semiring A,	_inst_3 : algebra R A,	r : R,	n : ℕ	⊢ 0 = ⇑(power_series.coeff A n.succ) (⇑(power_series.C A) (⇑(algebra_map R A) r))
Γ : Type u_1,	R : Type u_2,	_inst_1 : ordered_cancel_add_comm_monoid Γ,	_inst_2 : non_unital_non_assoc_semiring R,	r : R,	x : hahn_series Γ R,	a : Γ	⊢ (⇑(hahn_series.single 0) r * x).coeff a = r * x.coeff a
R : Type u_2,	Γ : Type u_1,	_inst_2 : linear_ordered_cancel_add_comm_monoid Γ,	_inst_3 : integral_domain R,	x y : hahn_series Γ R,	hx : x ≠ 0,	hy : y ≠ 0	⊢ (x * y).order = x.order + y.order
R : Type u_2,	Γ : Type u_1,	_inst_2 : linear_ordered_cancel_add_comm_monoid Γ,	_inst_3 : integral_domain R,	x y : hahn_series Γ R,	hx : x ≠ 0,	hy : y ≠ 0	⊢ (x * y).order ≤ x.order + y.order
R : Type u_2,	Γ : Type u_1,	_inst_2 : linear_ordered_cancel_add_comm_monoid Γ,	_inst_3 : integral_domain R,	x y : hahn_series Γ R,	hx : x ≠ 0,	hy : y ≠ 0	⊢ (x * y).coeff (x.order + y.order) ≠ 0
R : Type u_2,	Γ : Type u_1,	_inst_2 : linear_ordered_cancel_add_comm_monoid Γ,	_inst_3 : integral_domain R,	x y : hahn_series Γ R,	hx : x ≠ 0,	hy : y ≠ 0	⊢ x.coeff x.order * y.coeff y.order ≠ 0
R : Type u_2,	Γ : Type u_1,	_inst_2 : linear_ordered_cancel_add_comm_monoid Γ,	_inst_3 : integral_domain R,	x y : hahn_series Γ R,	hx : x ≠ 0,	hy : y ≠ 0	⊢ (x * y).order ≤ x.order + y.order		R : Type u_2,	Γ : Type u_1,	_inst_2 : linear_ordered_cancel_add_comm_monoid Γ,	_inst_3 : integral_domain R,	x y : hahn_series Γ R,	hx : x ≠ 0,	hy : y ≠ 0	⊢ x.order + y.order ≤ (x * y).order
R : Type u_2,	Γ : Type u_1,	_inst_2 : linear_ordered_cancel_add_comm_monoid Γ,	_inst_3 : integral_domain R,	x y : hahn_series Γ R,	hx : x ≠ 0,	hy : y ≠ 0	⊢ x.order + y.order ≤ (x * y).order
R : Type u_2,	Γ : Type u_1,	_inst_2 : linear_ordered_cancel_add_comm_monoid Γ,	_inst_3 : integral_domain R,	x y : hahn_series Γ R,	hx : x ≠ 0,	hy : y ≠ 0	⊢ _.min _ ≤ _.min _
Γ : Type u_1,	R : Type u_2,	_inst_1 : ordered_cancel_add_comm_monoid Γ,	_inst_2 : non_assoc_semiring R,	r : R,	h : r ≠ 0	⊢ ⇑hahn_series.C r ≠ 0
Γ : Type u_1,	R : Type u_2,	_inst_1 : ordered_cancel_add_comm_monoid Γ,	_inst_2 : non_assoc_semiring R,	r : R,	h : ⇑hahn_series.C r = 0	⊢ r = 0
Γ : Type u_1,	R : Type u_2,	_inst_1 : ordered_cancel_add_comm_monoid Γ,	_inst_2 : non_assoc_semiring R,	r : R,	h : ⇑hahn_series.C r = ⇑hahn_series.C 0	⊢ r = 0
Γ : Type u_1,	R : Type u_2,	_inst_1 : ordered_cancel_add_comm_monoid Γ,	_inst_2 : non_assoc_semiring R,	r : R	⊢ (⇑hahn_series.C r).order = 0
Γ : Type u_1,	R : Type u_2,	_inst_1 : ordered_cancel_add_comm_monoid Γ,	_inst_2 : non_assoc_semiring R,	r : R,	h : r = 0	⊢ (⇑hahn_series.C r).order = 0		Γ : Type u_1,	R : Type u_2,	_inst_1 : ordered_cancel_add_comm_monoid Γ,	_inst_2 : non_assoc_semiring R,	r : R,	h : ¬r = 0	⊢ (⇑hahn_series.C r).order = 0
Γ : Type u_1,	R : Type u_2,	_inst_1 : ordered_cancel_add_comm_monoid Γ,	_inst_2 : non_assoc_semiring R,	r : R,	h : r = 0	⊢ (⇑hahn_series.C r).order = 0
Γ : Type u_1,	R : Type u_2,	_inst_1 : ordered_cancel_add_comm_monoid Γ,	_inst_2 : non_assoc_semiring R,	r : R,	h : ¬r = 0	⊢ (⇑hahn_series.C r).order = 0
R : Type u,	S : Type v,	_inst_1 : comm_ring R,	_inst_2 : local_ring R,	_inst_3 : comm_ring S,	_inst_4 : nontrivial S,	f : R →+* S,	hf : function.surjective ⇑f	⊢ ∀ (a : S), is_unit a ∨ is_unit (1 - a)
R : Type u,	S : Type v,	_inst_1 : comm_ring R,	_inst_2 : local_ring R,	_inst_3 : comm_ring S,	_inst_4 : nontrivial S,	f : R →+* S,	hf : function.surjective ⇑f,	b : S	⊢ is_unit b ∨ is_unit (1 - b)
R : Type u,	S : Type v,	_inst_1 : comm_ring R,	_inst_2 : local_ring R,	_inst_3 : comm_ring S,	_inst_4 : nontrivial S,	f : R →+* S,	hf : function.surjective ⇑f,	a : R	⊢ is_unit (⇑f a) ∨ is_unit (1 - ⇑f a)
R : Type u,	S : Type v,	_inst_1 : comm_ring R,	_inst_2 : local_ring R,	_inst_3 : comm_ring S,	_inst_4 : nontrivial S,	f : R →+* S,	hf : function.surjective ⇑f,	a : R	⊢ is_unit (1 - a) → is_unit (1 - ⇑f a)
R : Type u,	S : Type v,	_inst_1 : comm_ring R,	_inst_2 : local_ring R,	_inst_3 : comm_ring S,	_inst_4 : nontrivial S,	f : R →+* S,	hf : function.surjective ⇑f,	a : R	⊢ is_unit (1 - a) → is_unit (⇑f (1 - a))
R : Type u,	_inst_1 : field R,	a : R,	h : a = 0	⊢ is_unit (1 - a)
R : Type u,	_inst_1 : field R,	a : R,	h : a = 0	⊢ is_unit (1 - a)
R : Type u,	_inst_1 : field R,	a : R,	h : a = 0	⊢ is_unit 1
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I	⊢ ideal.map f I.radical = (ideal.map f I).radical
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I	⊢ ideal.map f (has_Inf.Inf {J : ideal R | I ≤ J ∧ J.is_prime}) = has_Inf.Inf {J : ideal S | ideal.map f I ≤ J ∧ J.is_prime}
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I,	this : ∀ (J : ideal R), J ∈ {J : ideal R | I ≤ J ∧ J.is_prime} → f.ker ≤ J	⊢ ideal.map f (has_Inf.Inf {J : ideal R | I ≤ J ∧ J.is_prime}) = has_Inf.Inf {J : ideal S | ideal.map f I ≤ J ∧ J.is_prime}
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I,	this : ∀ (J : ideal R), J ∈ {J : ideal R | I ≤ J ∧ J.is_prime} → f.ker ≤ J	⊢ (λ (J : ideal S), ideal.map f I ≤ J ∧ J.is_prime) = λ (b : ideal S), ∃ (a : ideal R), a ∈ {J : ideal R | I ≤ J ∧ J.is_prime} ∧ ideal.map f a = b
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I,	this : ∀ (J : ideal R), J ∈ {J : ideal R | I ≤ J ∧ J.is_prime} → f.ker ≤ J,	j : ideal S	⊢ ideal.map f I ≤ j ∧ ideal.is_prime j → (∃ (a : ideal R), a ∈ {J : ideal R | I ≤ J ∧ J.is_prime} ∧ ideal.map f a = j)
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I,	this : ∀ (J : ideal R), J ∈ {J : ideal R | I ≤ J ∧ J.is_prime} → f.ker ≤ J,	j : ideal S,	hj : ideal.map f I ≤ j,	hj' : ideal.is_prime j	⊢ ∃ (a : ideal R), a ∈ {J : ideal R | I ≤ J ∧ J.is_prime} ∧ ideal.map f a = j
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I,	this : ∀ (J : ideal R), J ∈ {J : ideal R | I ≤ J ∧ J.is_prime} → f.ker ≤ J,	j : ideal S,	hj : ideal.map f I ≤ j,	hj' _inst : ideal.is_prime j	⊢ ∃ (a : ideal R), a ∈ {J : ideal R | I ≤ J ∧ J.is_prime} ∧ ideal.map f a = j
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I,	this : ∀ (J : ideal R), J ∈ {J : ideal R | I ≤ J ∧ J.is_prime} → f.ker ≤ J,	j : ideal S	⊢ ideal.map f I ≤ j ∧ ideal.is_prime j → (∃ (a : ideal R), a ∈ {J : ideal R | I ≤ J ∧ J.is_prime} ∧ ideal.map f a = j)		R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I,	this : ∀ (J : ideal R), J ∈ {J : ideal R | I ≤ J ∧ J.is_prime} → f.ker ≤ J,	j : ideal S	⊢ (∃ (a : ideal R), a ∈ {J : ideal R | I ≤ J ∧ J.is_prime} ∧ ideal.map f a = j) → ideal.map f I ≤ j ∧ ideal.is_prime j
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I,	this : ∀ (J : ideal R), J ∈ {J : ideal R | I ≤ J ∧ J.is_prime} → f.ker ≤ J,	j : ideal S	⊢ (∃ (a : ideal R), a ∈ {J : ideal R | I ≤ J ∧ J.is_prime} ∧ ideal.map f a = j) → ideal.map f I ≤ j ∧ ideal.is_prime j
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I,	this : ∀ (J : ideal R), J ∈ {J : ideal R | I ≤ J ∧ J.is_prime} → f.ker ≤ J,	j : ideal S,	J : ideal R,	hJ : J ∈ {J : ideal R | I ≤ J ∧ J.is_prime},	hJ' : ideal.map f J = j	⊢ ideal.map f I ≤ j ∧ ideal.is_prime j
R : Type u_1,	S : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	hf : function.surjective ⇑f,	I : ideal R,	h : f.ker ≤ I,	this : ∀ (J : ideal R), J ∈ {J : ideal R | I ≤ J ∧ J.is_prime} → f.ker ≤ J,	j : ideal S,	J : ideal R,	hJ : J ∈ {J : ideal R | I ≤ J ∧ J.is_prime},	hJ' : ideal.map f J = j,	_inst : J.is_prime	⊢ ideal.map f I ≤ j ∧ ideal.is_prime j
R : Type u_1,	_inst_1 : comm_ring R,	A : Type u_3,	_inst_3 : comm_ring A,	_inst_4 : algebra R A,	B : Type u_4,	_inst_5 : comm_ring B,	_inst_6 : algebra R B,	f : A →ₐ[R] B,	r : R,	x : f.to_ring_hom.ker.quotient	⊢ ⇑(f.to_ring_hom.ker_lift) (r • x) = r • ⇑(f.to_ring_hom.ker_lift) x
R : Type u_1,	_inst_1 : comm_ring R,	A : Type u_3,	_inst_3 : comm_ring A,	_inst_4 : algebra R A,	B : Type u_4,	_inst_5 : comm_ring B,	_inst_6 : algebra R B,	f : A →ₐ[R] B,	r : R,	a : A	⊢ ⇑(f.to_ring_hom.ker_lift) (r • ⇑(ideal.quotient.mkₐ R f.to_ring_hom.ker) a) = r • ⇑(f.to_ring_hom.ker_lift) (⇑(ideal.quotient.mkₐ R f.to_ring_hom.ker) a)
R : Type u_1,	_inst_1 : comm_ring R,	A : Type u_3,	_inst_3 : comm_ring A,	_inst_4 : algebra R A,	B : Type u_4,	_inst_5 : comm_ring B,	_inst_6 : algebra R B,	f : A →ₐ[R] B,	r : R,	a : A	⊢ ⇑(f.to_ring_hom) (r • a) = r • ⇑(f.to_ring_hom.ker_lift) (⇑(ideal.quotient.mk f.to_ring_hom.ker) a)
R : Type u,	_inst_1 : comm_ring R,	s : R	⊢ ideal.span {s} ^ 0 = ideal.span {s ^ 0}
R : Type u,	_inst_1 : comm_ring R,	s : R,	n : ℕ	⊢ ideal.span {s} ^ n = ideal.span {s ^ n}
R : Type u,	_inst_1 : comm_ring R,	s : R	⊢ ideal.span {s} ^ 0 = ideal.span {s ^ 0}		case nat.succ	R : Type u,	_inst_1 : comm_ring R,	s : R,	n : ℕ,	ih : ideal.span {s} ^ n = ideal.span {s ^ n}	⊢ ideal.span {s} ^ n.succ = ideal.span {s ^ n.succ}
R : Type u,	_inst_1 : comm_ring R,	s : R,	n : ℕ,	ih : ideal.span {s} ^ n = ideal.span {s ^ n}	⊢ ideal.span {s} ^ n.succ = ideal.span {s ^ n.succ}
⊢ ∀ (a b : ℤ), ↑(a.gcd b) * ↑(a.lcm b) = ⇑normalize (a * b)
⊢ ∀ (a b : ℤ), ↑(a.gcd b) * ↑(a.lcm b) = ⇑normalize (a * b)
a b : ℤ	⊢ ↑(a.gcd b) * ↑(a.lcm b) = ⇑normalize (a * b)
P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n : ℕ	⊢ P n
P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n : ℕ	⊢ P 0		P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n : ℕ	⊢ ∀ (x : ℕ), is_unit x → P x		P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n : ℕ	⊢ ∀ (a p : ℕ), a ≠ 0 → prime p → P a → P (p * a)
P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n : ℕ	⊢ ∀ (x : ℕ), is_unit x → P x
P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n n : ℕ,	h : is_unit n	⊢ P n
P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n : ℕ	⊢ ∀ (x : ℕ), is_unit x → P x		P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n : ℕ	⊢ ∀ (a p : ℕ), a ≠ 0 → prime p → P a → P (p * a)
P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n n : ℕ,	h : is_unit n	⊢ P 1
P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n : ℕ	⊢ ∀ (a p : ℕ), a ≠ 0 → prime p → P a → P (p * a)
P : ℕ → Prop,	h₀ : P 0,	h₁ : P 1,	h : ∀ (p a : ℕ), nat.prime p → P a → P (p * a),	n a p : ℕ,	ᾰ : a ≠ 0,	hp : prime p,	ha : P a	⊢ P (p * a)
R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G	⊢ {g ∈ finset.univ | g ^ n = g₀}.card ≤ ⇑multiset.card (polynomial.nth_roots n (⇑f g₀))
R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G,	_inst : decidable_eq R	⊢ {g ∈ finset.univ | g ^ n = g₀}.card ≤ ⇑multiset.card (polynomial.nth_roots n (⇑f g₀))
R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G,	_inst : decidable_eq R	⊢ {g ∈ finset.univ | g ^ n = g₀}.card ≤ (polynomial.nth_roots n (⇑f g₀)).to_finset.card
R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G,	_inst : decidable_eq R	⊢ ∀ (a : G), a ∈ {g ∈ finset.univ | g ^ n = g₀} → ⇑f a ∈ (polynomial.nth_roots n (⇑f g₀)).to_finset
R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G,	_inst : decidable_eq R,	g : G,	hg : g ∈ {g ∈ finset.univ | g ^ n = g₀}	⊢ ⇑f g ∈ (polynomial.nth_roots n (⇑f g₀)).to_finset
R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G,	_inst : decidable_eq R,	g : G,	hg : g ∈ finset.univ ∧ g ^ n = g₀	⊢ ⇑f g ∈ (polynomial.nth_roots n (⇑f g₀)).to_finset
R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G,	_inst : decidable_eq R	⊢ ∀ (a : G), a ∈ {g ∈ finset.univ | g ^ n = g₀} → ⇑f a ∈ (polynomial.nth_roots n (⇑f g₀)).to_finset		R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G,	_inst : decidable_eq R	⊢ ∀ (a₁ : G), a₁ ∈ {g ∈ finset.univ | g ^ n = g₀} → ∀ (a₂ : G), a₂ ∈ {g ∈ finset.univ | g ^ n = g₀} → ⇑f a₁ = ⇑f a₂ → a₁ = a₂
R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G,	_inst : decidable_eq R,	a₁ : G,	H : a₁ ∈ {g ∈ finset.univ | g ^ n = g₀},	a₂ : G,	H_1 : a₂ ∈ {g ∈ finset.univ | g ^ n = g₀},	ᾰ : ⇑f a₁ = ⇑f a₂	⊢ a₁ = a₂
R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G,	_inst : decidable_eq R,	a₁ : G,	H : a₁ ∈ {g ∈ finset.univ | g ^ n = g₀},	a₂ : G,	H_1 : a₂ ∈ {g ∈ finset.univ | g ^ n = g₀},	ᾰ : ⇑f a₁ = ⇑f a₂	⊢ ⇑f a₁ = ⇑f a₂
R : Type u_1,	G : Type u_2,	_inst_1 : integral_domain R,	_inst_2 : group G,	_inst_3 : fintype G,	f : G →* R,	hf : function.injective ⇑f,	n : ℕ,	hn : 0 < n,	g₀ : G,	_inst : decidable_eq R	⊢ ∀ (a₁ : G), a₁ ∈ {g ∈ finset.univ | g ^ n = g₀} → ∀ (a₂ : G), a₂ ∈ {g ∈ finset.univ | g ^ n = g₀} → ⇑f a₁ = ⇑f a₂ → a₁ = a₂
R : Type u_1,	_inst_1 : integral_domain R,	K : Type u_2,	_inst_2 : field K,	_inst_3 : algebra R K,	_inst_4 : is_fraction_ring R K,	L : Type u_3,	_inst_5 : field L,	_inst_6 : algebra K L,	_inst_7 : algebra R L,	_inst_8 : is_scalar_tower R K L,	_inst_9 : finite_dimensional K L	⊢ is_integrally_closed ↥(integral_closure R L)
R : Type u_1,	_inst_1 : integral_domain R,	K : Type u_2,	_inst_2 : field K,	_inst_3 : algebra R K,	_inst_4 : is_fraction_ring R K,	L : Type u_3,	_inst_5 : field L,	_inst_6 : algebra K L,	_inst_7 : algebra R L,	_inst_8 : is_scalar_tower R K L,	_inst_9 : finite_dimensional K L,	_inst : is_fraction_ring ↥(integral_closure R L) L := integral_closure.is_fraction_ring_of_finite_extension K L	⊢ is_integrally_closed ↥(integral_closure R L)
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	S : Type u_2,	_inst_2 : comm_ring S,	_inst_3 : algebra R S,	_inst_5 : is_localization M S,	h : is_noetherian_ring R	⊢ is_noetherian_ring S
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	S : Type u_2,	_inst_2 : comm_ring S,	_inst_3 : algebra R S,	_inst_5 : is_localization M S,	h : well_founded gt	⊢ well_founded gt
A : Type u_4,	_inst_5 : integral_domain A,	K : Type u_5,	_inst_7 : field K,	_inst_9 : algebra A K,	_inst_10 : is_fraction_ring A K,	_inst_11 : unique_factorization_monoid A,	x : K,	h : is_fraction_ring.num A x = 0	⊢ 0 * ⇑(algebra_map ?m_1 K) ↑(is_fraction_ring.denom ?m_1 x) = ⇑(algebra_map ?m_1 K) (is_fraction_ring.num ?m_1 x)
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	x : localization M,	x : R × ↥M	⊢ localization.smul 0 (localization.mk x.fst x.snd) = 0
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	n : ℕ,	x : localization M,	x : R × ↥M	⊢ localization.smul n.succ (localization.mk x.fst x.snd) = localization.mk x.fst x.snd + localization.smul n (localization.mk x.fst x.snd)
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	x : localization M,	x : R × ↥M	⊢ localization.smul 0 (localization.mk x.fst x.snd) = 0
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	n : ℕ,	x : localization M,	x : R × ↥M	⊢ localization.smul (int.of_nat n.succ) (localization.mk x.fst x.snd) = localization.mk x.fst x.snd + localization.smul (int.of_nat n) (localization.mk x.fst x.snd)
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	n : ℕ,	x : localization M,	x : R × ↥M	⊢ localization.smul -[1+ n] (localization.mk x.fst x.snd) = -localization.smul ↑(n.succ) (localization.mk x.fst x.snd)
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	n : ℕ,	x : localization M,	x : R × ↥M	⊢ localization.mk (-[1+ n] • x.fst) x.snd = localization.mk (-↑(n.succ) • x.fst) x.snd
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	m n k : localization M	⊢ ∀ (x y z : R × ↥M), localization.mk x.fst x.snd + localization.mk y.fst y.snd + localization.mk z.fst z.snd = localization.mk x.fst x.snd + (localization.mk y.fst y.snd + localization.mk z.fst z.snd)
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	y : localization M	⊢ ∀ (y : R × ↥M), 0 + localization.mk y.fst y.snd = localization.mk y.fst y.snd
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	y : localization M	⊢ ∀ (y : R × ↥M), localization.mk y.fst y.snd + 0 = localization.mk y.fst y.snd
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	y : localization M	⊢ -y + y = 0
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	y : localization M	⊢ ∀ (y : R × ↥M), -localization.mk y.fst y.snd + localization.mk y.fst y.snd = 0
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	y z : localization M	⊢ ∀ (x y : R × ↥M), localization.mk y.fst y.snd + localization.mk x.fst x.snd = localization.mk x.fst x.snd + localization.mk y.fst y.snd
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	m n k : localization M	⊢ ∀ (x y z : R × ↥M), localization.mk x.fst x.snd * (localization.mk y.fst y.snd + localization.mk z.fst z.snd) = localization.mk x.fst x.snd * localization.mk y.fst y.snd + localization.mk x.fst x.snd * localization.mk z.fst z.snd
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	m n k : localization M	⊢ ∀ (x y z : R × ↥M), (localization.mk x.fst x.snd + localization.mk y.fst y.snd) * localization.mk z.fst z.snd = localization.mk x.fst x.snd * localization.mk z.fst z.snd + localization.mk y.fst y.snd * localization.mk z.fst z.snd
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R	⊢ ⇑((localization.monoid_of M).to_map) 0 = 0
R : Type u_1,	_inst_1 : comm_ring R,	M : submonoid R,	x y : R	⊢ ⇑((localization.monoid_of M).to_map) (x + y) = ⇑((localization.monoid_of M).to_map) x + ⇑((localization.monoid_of M).to_map) y
α : Type u_1,	_inst_1 : comm_monoid α,	_inst_2 : decidable_rel has_dvd.dvd,	a : α,	ha : multiplicity.finite a 1	⊢ (multiplicity a 1).get ha = 0
α : Type u_1,	_inst_1 : comm_monoid α,	_inst_2 : decidable_rel has_dvd.dvd,	a : α,	ha : multiplicity.finite a 1	⊢ 1 ∣ 1 ∧ ¬a ^ (0 + 1) ∣ 1
α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b	⊢ multiplicity p (a + b) = linear_order.min (multiplicity p a) (multiplicity p b)
α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b,	hab : multiplicity p a < multiplicity p b	⊢ multiplicity p (a + b) = linear_order.min (multiplicity p a) (multiplicity p b)
α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b,	hab : multiplicity p a < multiplicity p b	⊢ multiplicity p a ≤ multiplicity p b
α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b,	hab : multiplicity p a < multiplicity p b	⊢ multiplicity p (a + b) = linear_order.min (multiplicity p a) (multiplicity p b)		α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b,	hab : multiplicity p a = multiplicity p b	⊢ multiplicity p (a + b) = linear_order.min (multiplicity p a) (multiplicity p b)		α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b,	hab : multiplicity p b < multiplicity p a	⊢ multiplicity p (a + b) = linear_order.min (multiplicity p a) (multiplicity p b)
α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b,	hab : multiplicity p a = multiplicity p b	⊢ multiplicity p (a + b) = linear_order.min (multiplicity p a) (multiplicity p b)		α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b,	hab : multiplicity p b < multiplicity p a	⊢ multiplicity p (a + b) = linear_order.min (multiplicity p a) (multiplicity p b)
α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b,	hab : multiplicity p a = multiplicity p b	⊢ multiplicity p (a + b) = linear_order.min (multiplicity p a) (multiplicity p b)
α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b,	hab : multiplicity p b < multiplicity p a	⊢ multiplicity p b ≤ multiplicity p a
α : Type u_1,	_inst_1 : comm_ring α,	_inst_2 : decidable_rel has_dvd.dvd,	p a b : α,	h : multiplicity p a ≠ multiplicity p b,	hab : multiplicity p b < multiplicity p a	⊢ multiplicity p (a + b) = linear_order.min (multiplicity p a) (multiplicity p b)
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_rel has_dvd.dvd,	p a : α,	hp : prime p,	pow : ∀ {k : ℕ}, multiplicity p (a ^ k) = k • multiplicity p a	⊢ multiplicity p (a ^ 0) = 0 • multiplicity p a
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_rel has_dvd.dvd,	p a : α,	hp : prime p,	pow : ∀ {k : ℕ}, multiplicity p (a ^ k) = k • multiplicity p a,	k : ℕ	⊢ multiplicity p (a ^ k.succ) = k.succ • multiplicity p a
R : Type u_1,	M : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I J : ideal R,	N : submodule R M,	hN : N.fg,	hIN : N ≤ I • N,	hIjac : I ≤ J.jacobson	⊢ N = J • N
R : Type u_1,	M : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I J : ideal R,	N : submodule R M,	hN : N.fg,	hIN : N ≤ I • N,	hIjac : I ≤ J.jacobson	⊢ N ≤ J • N
R : Type u_1,	M : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I J : ideal R,	N : submodule R M,	hN : N.fg,	hIN : N ≤ I • N,	hIjac : I ≤ J.jacobson,	n : M,	hn : n ∈ N	⊢ n ∈ J • N
R : Type u_1,	M : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I J : ideal R,	N : submodule R M,	hN : N.fg,	hIN : N ≤ I • N,	hIjac : I ≤ J.jacobson,	n : M,	hn : n ∈ N,	r : R,	hr : r - 1 ∈ I ∧ ∀ (n : M), n ∈ N → r • n = 0	⊢ n ∈ J • N
R : Type u_1,	M : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I J : ideal R,	N : submodule R M,	hN : N.fg,	hIN : N ≤ I • N,	hIjac : I ≤ J.jacobson,	n : M,	hn : n ∈ N,	r : R,	hr : r - 1 ∈ I ∧ ∀ (n : M), n ∈ N → r • n = 0,	s : R,	hs : r * s - 1 ∈ J	⊢ n ∈ J • N
R : Type u_1,	M : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I J : ideal R,	N : submodule R M,	hN : N.fg,	hIN : N ≤ I • N,	hIjac : I ≤ J.jacobson,	n : M,	hn : n ∈ N,	r : R,	hr : r - 1 ∈ I ∧ ∀ (n : M), n ∈ N → r • n = 0,	s : R,	hs : r * s - 1 ∈ J	⊢ n = -(r * s - 1) • n
R : Type u_1,	M : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I J : ideal R,	N : submodule R M,	hN : N.fg,	hIN : N ≤ I • N,	hIjac : I ≤ J.jacobson,	n : M,	hn : n ∈ N,	r : R,	hr : r - 1 ∈ I ∧ ∀ (n : M), n ∈ N → r • n = 0,	s : R,	hs : r * s - 1 ∈ J	⊢ n = -(r * s - 1) • n		R : Type u_1,	M : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I J : ideal R,	N : submodule R M,	hN : N.fg,	hIN : N ≤ I • N,	hIjac : I ≤ J.jacobson,	n : M,	hn : n ∈ N,	r : R,	hr : r - 1 ∈ I ∧ ∀ (n : M), n ∈ N → r • n = 0,	s : R,	hs : r * s - 1 ∈ J,	this : n = -(r * s - 1) • n	⊢ n ∈ J • N
R : Type u_1,	M : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I J : ideal R,	N : submodule R M,	hN : N.fg,	hIN : N ≤ I • N,	hIjac : I ≤ J.jacobson,	n : M,	hn : n ∈ N,	r : R,	hr : r - 1 ∈ I ∧ ∀ (n : M), n ∈ N → r • n = 0,	s : R,	hs : r * s - 1 ∈ J,	this : n = -(r * s - 1) • n	⊢ n ∈ J • N
R : Type u_1,	M : Type u_2,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	I J : ideal R,	N : submodule R M,	hN : N.fg,	hIN : N ≤ I • N,	hIjac : I ≤ J.jacobson,	n : M,	hn : n ∈ N,	r : R,	hr : r - 1 ∈ I ∧ ∀ (n : M), n ∈ N → r • n = 0,	s : R,	hs : r * s - 1 ∈ J,	this : n = -(r * s - 1) • n	⊢ -(r * s - 1) • n ∈ J • N
R : Type u,	x : R,	_inst_1 : ring R,	h : is_nilpotent x	⊢ is_nilpotent (-x)
R : Type u,	x : R,	_inst_1 : ring R,	n : ℕ,	hn : x ^ n = 0	⊢ is_nilpotent (-x)
R : Type u,	x : R,	_inst_1 : ring R,	n : ℕ,	hn : x ^ n = 0	⊢ (-x) ^ n = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I	⊢ x = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict	⊢ x = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict	⊢ (polynomial.map_ring_hom i).ker ≤ I
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	f : polynomial R,	hf : f ∈ (polynomial.map_ring_hom i).ker,	n : ℕ	⊢ polynomial.coeff f n ∈ ideal.comap polynomial.C I
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	f : polynomial R,	hf : f ∈ (polynomial.map_ring_hom i).ker,	n : ℕ	⊢ ⇑((ideal.quotient.mk I).comp polynomial.C) (polynomial.coeff f n) = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	f : polynomial R,	n : ℕ,	hf : polynomial.map i f = 0	⊢ ⇑((ideal.quotient.mk I).comp polynomial.C) (polynomial.coeff f n) = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	f : polynomial R,	n : ℕ,	hf : (λ (f : polynomial ↥(((ideal.quotient.mk I).comp polynomial.C).range)), f.coeff n) (polynomial.map i f) = (λ (f : polynomial ↥(((ideal.quotient.mk I).comp polynomial.C).range)), f.coeff n) 0	⊢ ⇑((ideal.quotient.mk I).comp polynomial.C) (polynomial.coeff f n) = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	f : polynomial R,	n : ℕ,	hf : ⇑i (polynomial.coeff f n) = 0	⊢ ⇑((ideal.quotient.mk I).comp polynomial.C) (polynomial.coeff f n) = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict	⊢ (polynomial.map_ring_hom i).ker ≤ I		R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I	⊢ x = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	x : ↥(((ideal.quotient.mk I).comp polynomial.C).range),	hx : ⇑polynomial.C x ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I	⊢ x = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I,	x : I.quotient,	hx' : x ∈ ((ideal.quotient.mk I).comp polynomial.C).range,	hx : ⇑polynomial.C ⟨x, hx'⟩ ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I	⊢ ⟨x, hx'⟩ = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I,	y : R,	hx' : ⇑((ideal.quotient.mk I).comp polynomial.C) y ∈ ((ideal.quotient.mk I).comp polynomial.C).range,	hx : ⇑polynomial.C ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩ ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I	⊢ ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩ = 0
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I,	y : R,	hx' : ⇑((ideal.quotient.mk I).comp polynomial.C) y ∈ ((ideal.quotient.mk I).comp polynomial.C).range,	hx : ⇑polynomial.C ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩ ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I	⊢ ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩.val = 0.val
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I,	y : R,	hx' : ⇑((ideal.quotient.mk I).comp polynomial.C) y ∈ ((ideal.quotient.mk I).comp polynomial.C).range,	hx : ⇑polynomial.C ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩ ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I	⊢ ⇑polynomial.C y ∈ I
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I,	y : R,	hx' : ⇑((ideal.quotient.mk I).comp polynomial.C) y ∈ ((ideal.quotient.mk I).comp polynomial.C).range,	hx : ⇑polynomial.C ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩ ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	this : ⇑polynomial.C (⇑i y) ∈ ideal.map (polynomial.map_ring_hom i) I	⊢ ⇑polynomial.C y ∈ I
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I,	y : R,	hx' : ⇑((ideal.quotient.mk I).comp polynomial.C) y ∈ ((ideal.quotient.mk I).comp polynomial.C).range,	hx : ⇑polynomial.C ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩ ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	this : ⇑polynomial.C (⇑i y) ∈ ideal.map (polynomial.map_ring_hom i) I,	f : polynomial R,	hf : f ∈ ↑I ∧ ⇑(polynomial.map_ring_hom i) f = ⇑polynomial.C (⇑i y)	⊢ ⇑polynomial.C y ∈ I
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I,	y : R,	hx' : ⇑((ideal.quotient.mk I).comp polynomial.C) y ∈ ((ideal.quotient.mk I).comp polynomial.C).range,	hx : ⇑polynomial.C ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩ ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	this : ⇑polynomial.C (⇑i y) ∈ ideal.map (polynomial.map_ring_hom i) I,	f : polynomial R,	hf : f ∈ ↑I ∧ ⇑(polynomial.map_ring_hom i) f = ⇑polynomial.C (⇑i y)	⊢ ⇑polynomial.C y - f ∈ (polynomial.map_ring_hom i).ker
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I,	y : R,	hx' : ⇑((ideal.quotient.mk I).comp polynomial.C) y ∈ ((ideal.quotient.mk I).comp polynomial.C).range,	hx : ⇑polynomial.C ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩ ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I,	this : ⇑polynomial.C (⇑i y) ∈ ideal.map (polynomial.map_ring_hom i) I	⊢ ⇑polynomial.C y ∈ I		R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I,	y : R,	hx' : ⇑((ideal.quotient.mk I).comp polynomial.C) y ∈ ((ideal.quotient.mk I).comp polynomial.C).range,	hx : ⇑polynomial.C ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩ ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I	⊢ ⇑polynomial.C (⇑i y) ∈ ideal.map (polynomial.map_ring_hom i) I
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	i : R →+* ↥(((ideal.quotient.mk I).comp polynomial.C).range) := ((ideal.quotient.mk I).comp polynomial.C).range_restrict,	hi' : (polynomial.map_ring_hom i).ker ≤ I,	y : R,	hx' : ⇑((ideal.quotient.mk I).comp polynomial.C) y ∈ ((ideal.quotient.mk I).comp polynomial.C).range,	hx : ⇑polynomial.C ⟨⇑((ideal.quotient.mk I).comp polynomial.C) y, hx'⟩ ∈ ideal.map (polynomial.map_ring_hom ((ideal.quotient.mk I).comp polynomial.C).range_restrict) I	⊢ ⇑polynomial.C (⇑i y) ∈ ideal.map (polynomial.map_ring_hom i) I
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	c : R,	x : polynomial R,	H : x ∈ I.carrier	⊢ c • x ∈ I.carrier
R : Type u,	_inst_1 : comm_ring R,	I : ideal (polynomial R),	c : R,	x : polynomial R,	H : x ∈ I.carrier	⊢ ⇑polynomial.C c * x ∈ I.carrier
R : Type u,	_inst_1 : comm_ring R,	n : ℕ	⊢ polynomial.degree_le R ↑n = submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1)))
R : Type u,	_inst_1 : comm_ring R,	n : ℕ,	p : polynomial R,	hp : p ∈ polynomial.degree_le R ↑n	⊢ p ∈ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1)))
R : Type u,	_inst_1 : comm_ring R,	n : ℕ	⊢ polynomial.degree_le R ↑n ≤ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1)))
R : Type u,	_inst_1 : comm_ring R,	n : ℕ,	p : polynomial R,	hp : p.degree ≤ ↑n	⊢ p ∈ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1)))
R : Type u,	_inst_1 : comm_ring R,	n : ℕ,	p : polynomial R,	hp : p.degree ≤ ↑n	⊢ ∑ (n : ℕ) in p.support, ⇑(polynomial.monomial n) (p.coeff n) ∈ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1)))
R : Type u,	_inst_1 : comm_ring R,	n : ℕ,	p : polynomial R,	hp : p.degree ≤ ↑n,	k : ℕ,	hk : k ∈ p.support	⊢ ⇑(polynomial.monomial k) (p.coeff k) ∈ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1)))
R : Type u,	_inst_1 : comm_ring R,	n : ℕ,	p : polynomial R,	hp : p.degree ≤ ↑n,	k : ℕ,	hk : k ∈ p.support	⊢ ⇑(polynomial.monomial k) (p.coeff k) ∈ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1)))
R : Type u,	_inst_1 : comm_ring R,	n : ℕ,	p : polynomial R,	hp : p.degree ≤ ↑n,	k : ℕ,	hk : k ∈ p.support,	this : k ≤ n	⊢ ⇑(polynomial.monomial k) (p.coeff k) ∈ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1)))
R : Type u,	_inst_1 : comm_ring R,	n : ℕ,	p : polynomial R,	hp : p.degree ≤ ↑n,	k : ℕ,	hk : k ∈ p.support,	this : k ≤ n	⊢ p.coeff k • polynomial.X ^ k ∈ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1)))
R : Type u,	_inst_1 : comm_ring R,	n : ℕ	⊢ polynomial.degree_le R ↑n ≤ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1)))		R : Type u,	_inst_1 : comm_ring R,	n : ℕ	⊢ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1))) ≤ polynomial.degree_le R ↑n
R : Type u,	_inst_1 : comm_ring R,	n : ℕ	⊢ submodule.span R ↑(finset.image (λ (n : ℕ), polynomial.X ^ n) (finset.range (n + 1))) ≤ polynomial.degree_le R ↑n
R : Type u,	_inst_1 : comm_ring R,	n k : ℕ,	hk : k ∈ ↑(finset.range (n + 1))	⊢ k ∈ (λ (n : ℕ), polynomial.X ^ n) ⁻¹' ↑(polynomial.degree_le R ↑n)
R : Type u,	_inst_1 : comm_ring R,	n : ℕ	⊢ ↑(finset.range (n + 1)) ⊆ (λ (n : ℕ), polynomial.X ^ n) ⁻¹' ↑(polynomial.degree_le R ↑n)
R : Type u,	_inst_1 : comm_ring R,	n k : ℕ,	hk : k ∈ ↑(finset.range (n + 1))	⊢ ((λ (n : ℕ), polynomial.X ^ n) k).degree ≤ ↑n
R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R	⊢ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker ≤ (⇑(polynomial.aeval f) (p * q)).ker
R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R,	v : M,	hv : v ∈ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker	⊢ v ∈ (⇑(polynomial.aeval f) (p * q)).ker
R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R,	v : M,	hv : v ∈ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker,	x : M,	hx : x ∈ (⇑(polynomial.aeval f) p).ker,	y : M,	hy : y ∈ (⇑(polynomial.aeval f) q).ker,	hxy : x + y = v	⊢ v ∈ (⇑(polynomial.aeval f) (p * q)).ker
R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R,	v : M,	hv : v ∈ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker,	x : M,	hx : x ∈ (⇑(polynomial.aeval f) p).ker,	y : M,	hy : y ∈ (⇑(polynomial.aeval f) q).ker,	hxy : x + y = v	⊢ ⇑(⇑(polynomial.aeval f) (p * q)) x = 0
R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R,	v : M,	hv : v ∈ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker,	x : M,	hx : x ∈ (⇑(polynomial.aeval f) p).ker,	y : M,	hy : y ∈ (⇑(polynomial.aeval f) q).ker,	hxy : x + y = v	⊢ ⇑(⇑(polynomial.aeval f) (p * q)) x = 0		R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R,	v : M,	hv : v ∈ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker,	x : M,	hx : x ∈ (⇑(polynomial.aeval f) p).ker,	y : M,	hy : y ∈ (⇑(polynomial.aeval f) q).ker,	hxy : x + y = v,	h_eval_x : ⇑(⇑(polynomial.aeval f) (p * q)) x = 0	⊢ v ∈ (⇑(polynomial.aeval f) (p * q)).ker
R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R,	v : M,	hv : v ∈ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker,	x : M,	hx : x ∈ (⇑(polynomial.aeval f) p).ker,	y : M,	hy : y ∈ (⇑(polynomial.aeval f) q).ker,	hxy : x + y = v,	h_eval_x : ⇑(⇑(polynomial.aeval f) (p * q)) x = 0	⊢ v ∈ (⇑(polynomial.aeval f) (p * q)).ker
R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R,	v : M,	hv : v ∈ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker,	x : M,	hx : x ∈ (⇑(polynomial.aeval f) p).ker,	y : M,	hy : y ∈ (⇑(polynomial.aeval f) q).ker,	hxy : x + y = v,	h_eval_x : ⇑(⇑(polynomial.aeval f) (p * q)) x = 0	⊢ ⇑(⇑(polynomial.aeval f) (p * q)) y = 0
R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R,	v : M,	hv : v ∈ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker,	x : M,	hx : x ∈ (⇑(polynomial.aeval f) p).ker,	y : M,	hy : y ∈ (⇑(polynomial.aeval f) q).ker,	hxy : x + y = v,	h_eval_x : ⇑(⇑(polynomial.aeval f) (p * q)) x = 0	⊢ ⇑(⇑(polynomial.aeval f) (p * q)) y = 0		R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R,	v : M,	hv : v ∈ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker,	x : M,	hx : x ∈ (⇑(polynomial.aeval f) p).ker,	y : M,	hy : y ∈ (⇑(polynomial.aeval f) q).ker,	hxy : x + y = v,	h_eval_x : ⇑(⇑(polynomial.aeval f) (p * q)) x = 0,	h_eval_y : ⇑(⇑(polynomial.aeval f) (p * q)) y = 0	⊢ v ∈ (⇑(polynomial.aeval f) (p * q)).ker
R : Type u,	M : Type w,	_inst_1 : comm_ring R,	_inst_2 : add_comm_group M,	_inst_3 : module R M,	f : M →ₗ[R] M,	p q : polynomial R,	v : M,	hv : v ∈ (⇑(polynomial.aeval f) p).ker ⊔ (⇑(polynomial.aeval f) q).ker,	x : M,	hx : x ∈ (⇑(polynomial.aeval f) p).ker,	y : M,	hy : y ∈ (⇑(polynomial.aeval f) q).ker,	hxy : x + y = v,	h_eval_x : ⇑(⇑(polynomial.aeval f) (p * q)) x = 0,	h_eval_y : ⇑(⇑(polynomial.aeval f) (p * q)) y = 0	⊢ v ∈ (⇑(polynomial.aeval f) (p * q)).ker
R : Type u,	σ : Type v,	_inst_1 : comm_ring R,	I : ideal R,	i : R,	hi : i ∈ I	⊢ ⇑((ideal.quotient.mk (ideal.map mv_polynomial.C I)).comp mv_polynomial.C) i = 0
R : Type u,	σ : Type v,	_inst_1 : comm_ring R,	I : ideal R,	i : R,	hi : i ∈ I	⊢ ⇑mv_polynomial.C i ∈ ideal.map mv_polynomial.C I
D : Type u,	_inst_4 : integral_domain D,	_inst_5 : unique_factorization_monoid D	⊢ unique_factorization_monoid (polynomial D)
D : Type u,	_inst_4 : integral_domain D,	_inst_5 : unique_factorization_monoid D,	_inst : normalization_monoid D	⊢ unique_factorization_monoid (polynomial D)
D : Type u,	_inst_4 : integral_domain D,	_inst_5 : unique_factorization_monoid D,	_inst : normalization_monoid D,	_inst_1 : gcd_monoid D	⊢ unique_factorization_monoid (polynomial D)
R : Type u_1,	_inst_1 : comm_ring R,	_inst_2 : char_zero R,	n ν : ℕ,	h : ν ≤ n	⊢ polynomial.eval 1 (⇑polynomial.derivative^[n - ν] (bernstein_polynomial R n ν)) ≠ 0
R : Type u_1,	_inst_1 : comm_ring R,	_inst_2 : char_zero R,	n ν : ℕ,	h : ν ≤ n	⊢ ¬polynomial.eval ν.succ (pochhammer ℕ (n - ν)) = 0
R : Type u_1,	_inst_1 : integral_domain R,	_inst_2 : gcd_monoid R,	p : polynomial R,	hp : p.is_primitive	⊢ p.prim_part = p
R : Type u_1,	_inst_1 : integral_domain R,	_inst_2 : gcd_monoid R,	r : R	⊢ (⇑polynomial.C r).content = ⇑normalize r
R : Type u_1,	_inst_1 : integral_domain R,	_inst_2 : gcd_monoid R,	r : R	⊢ (⇑polynomial.C r).support.gcd (⇑polynomial.C r).coeff = ⇑normalize r
R : Type u_1,	_inst_1 : integral_domain R,	_inst_2 : gcd_monoid R,	r : R,	h0 : r = 0	⊢ (⇑polynomial.C r).support.gcd (⇑polynomial.C r).coeff = ⇑normalize r		R : Type u_1,	_inst_1 : integral_domain R,	_inst_2 : gcd_monoid R,	r : R,	h0 : ¬r = 0	⊢ (⇑polynomial.C r).support.gcd (⇑polynomial.C r).coeff = ⇑normalize r
R : Type u_1,	_inst_1 : integral_domain R,	_inst_2 : gcd_monoid R,	r : R,	h0 : r = 0	⊢ (⇑polynomial.C r).support.gcd (⇑polynomial.C r).coeff = ⇑normalize r
R : Type u_1,	_inst_1 : integral_domain R,	_inst_2 : gcd_monoid R,	r : R,	h0 : ¬r = 0	⊢ (⇑polynomial.C r).support.gcd (⇑polynomial.C r).coeff = ⇑normalize r
R : Type u_1,	_inst_1 : integral_domain R,	_inst_2 : gcd_monoid R,	r : R,	h0 : ¬r = 0,	h : (⇑polynomial.C r).support = {0}	⊢ (⇑polynomial.C r).support.gcd (⇑polynomial.C r).coeff = ⇑normalize r
R : Type u_1,	_inst_2 : integral_domain R	⊢ polynomial.cyclotomic' 1 R = polynomial.X - 1
σ : Type u_1,	R : Type u_3,	_inst_1 : comm_semiring R,	n : ℕ,	φ : mv_polynomial σ R,	d : σ →₀ ℕ	⊢ mv_polynomial.coeff d (⇑(mv_polynomial.homogeneous_component n) φ) = ite (∑ (i : σ) in d.support, ⇑d i = n) (mv_polynomial.coeff d φ) 0
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	_inst_3 : fintype σ	⊢ mv_polynomial.esymm σ R 0 = 1
R : Type u,	S : Type v,	A : Type w,	_inst_1 : comm_semiring R,	_inst_2 : comm_semiring S,	_inst_3 : semiring A,	_inst_5 : algebra R S,	_inst_6 : algebra S A,	_inst_8 : algebra R A,	_inst_10 : is_scalar_tower R S A,	x : A,	p : polynomial R	⊢ ⇑(polynomial.aeval x) p = ⇑(polynomial.aeval x) (polynomial.map (algebra_map R S) p)
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ	⊢ mv_polynomial.coeff m (⇑(mv_power_series.trunc R n) (⇑(mv_power_series.C σ R) a)) = mv_polynomial.coeff m (⇑mv_polynomial.C a)
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ	⊢ ite (m ≤ n) (ite (m = 0) a 0) 0 = ite (0 = m) a 0
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : m ≤ n,	h : m = 0,	h_1 : 0 = m	⊢ a = a
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : m ≤ n,	h : m = 0,	h_1 : ¬0 = m	⊢ a = 0
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : m ≤ n,	h : ¬m = 0,	h_1 : 0 = m	⊢ 0 = a
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : m ≤ n,	h : ¬m = 0,	h_1 : ¬0 = m	⊢ 0 = 0
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : ¬m ≤ n,	h : 0 = m	⊢ 0 = a
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : ¬m ≤ n,	h : ¬0 = m	⊢ 0 = 0
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : m ≤ n,	h : m = 0,	h_1 : ¬0 = m	⊢ a = 0
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : m ≤ n,	h : ¬m = 0,	h_1 : 0 = m	⊢ 0 = a
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : ¬m ≤ n,	h : 0 = m	⊢ 0 = a
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : ¬m ≤ n,	h : 0 = m	⊢ 0 = a
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ	⊢ ite (m ≤ n) (ite (m = 0) a 0) 0 = ite (0 = m) a 0
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : ¬m ≤ n,	h : 0 = m	⊢ false
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : ¬m ≤ n,	h : 0 = m	⊢ m ≤ n
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	H : ¬0 ≤ n	⊢ 0 ≤ n
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	H : ¬0 ≤ n,	s : σ	⊢ ⇑0 s ≤ ⇑n s
σ : Type u_1,	R : Type u_2,	_inst_1 : comm_semiring R,	n : σ →₀ ℕ,	a : R,	m : σ →₀ ℕ,	H : ¬m ≤ n,	h : 0 = m	⊢ 0 = a
R : Type u,	M : Type v,	_inst_1 : add_comm_group M,	_inst_2 : ring R,	_inst_3 : module R M,	S : submodule R M,	_inst_4 : S.is_principal	⊢ S = ?m_1
R : Type u,	M : Type v,	_inst_1 : add_comm_group M,	_inst_2 : ring R,	_inst_3 : module R M,	S : submodule R M,	_inst_4 : S.is_principal	⊢ submodule.is_principal.generator S ∈ submodule.span R {submodule.is_principal.generator S}
R : Type u,	M : Type v,	_inst_1 : add_comm_group M,	_inst_2 : ring R,	_inst_3 : module R M,	S : submodule R M,	_inst_4 : S.is_principal	⊢ submodule.is_principal.generator S ∈ S
M : Type u_1,	_inst_1 : comm_monoid M,	k : ℕ,	ζ : M,	h : is_primitive_root ζ k,	h0 : 0 < k	⊢ is_unit ζ
M : Type u_1,	_inst_1 : comm_monoid M,	k : ℕ,	ζ : M,	h : is_primitive_root ζ k,	h0 : 0 < k	⊢ ζ * ζ ^ (k - 1) = 1
R : Type u_5,	_inst_5 : integral_domain R	⊢ primitive_roots 1 R = {1}
R : Type u_5,	_inst_5 : integral_domain R	⊢ 1 ∈ primitive_roots 1 R ∧ ∀ (x : R), x ∈ primitive_roots 1 R → x = 1
R : Type u_5,	_inst_5 : integral_domain R	⊢ 1 ∈ primitive_roots 1 R
R : Type u_5,	_inst_5 : integral_domain R	⊢ 1 ∈ primitive_roots 1 R		R : Type u_5,	_inst_5 : integral_domain R	⊢ ∀ (x : R), x ∈ primitive_roots 1 R → x = 1
R : Type u_5,	_inst_5 : integral_domain R	⊢ ∀ (x : R), x ∈ primitive_roots 1 R → x = 1
R : Type u_5,	_inst_5 : integral_domain R,	x : R,	hx : x ∈ primitive_roots 1 R	⊢ x = 1
R : Type u_5,	_inst_5 : integral_domain R,	x : R,	hx : x = 1	⊢ x = 1
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	a p : α,	ha0 : a ≠ 0,	hp : irreducible p,	hd : p ∣ a,	q : α,	hq : q ∈ unique_factorization_monoid.factors a,	hpq : p ~ᵤ q	⊢ ⟨associates.mk q, _⟩ = ⟨associates.mk p, _⟩
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	dec_irr : Π (p : associates α), decidable (irreducible p),	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a p : α,	ha0 : a ≠ 0,	hp : irreducible p,	hd : p ∣ a	⊢ associates.mk p ∈ ↑(associates.factors' a)
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	dec_irr : Π (p : associates α), decidable (irreducible p),	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a p : α,	ha0 : a ≠ 0,	hp : irreducible p,	hd : p ∣ a	⊢ associates.mk p ∈ (associates.mk a).factors
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	dec_irr : Π (p : associates α), decidable (irreducible p),	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a : associates α,	ha : a ≠ 0,	b : associates α,	hb : b ≠ 0,	p : associates α,	hp : irreducible p,	hab : ∀ (d : associates α), d ∣ a → d ∣ b → ¬prime d	⊢ p.count a.factors = 0 ∨ p.count a.factors = p.count (a * b).factors
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	dec_irr : Π (p : associates α), decidable (irreducible p),	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a : associates α,	ha : a ≠ 0,	b : associates α,	hb : b ≠ 0,	p : associates α,	hp : irreducible p,	hab : ∀ (d : associates α), d ∣ a → d ∣ b → ¬prime d,	hz : p.count a.factors = 0	⊢ p.count a.factors = 0 ∨ p.count a.factors = p.count (a * b).factors
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	dec_irr : Π (p : associates α), decidable (irreducible p),	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a : associates α,	ha : a ≠ 0,	b : associates α,	hb : b ≠ 0,	p : associates α,	hp : irreducible p,	hab : ∀ (d : associates α), d ∣ a → d ∣ b → ¬prime d,	hz : p.count a.factors = 0	⊢ p.count a.factors = 0 ∨ p.count a.factors = p.count (a * b).factors		case or.inr	α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	dec_irr : Π (p : associates α), decidable (irreducible p),	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a : associates α,	ha : a ≠ 0,	b : associates α,	hb : b ≠ 0,	p : associates α,	hp : irreducible p,	hab : ∀ (d : associates α), d ∣ a → d ∣ b → ¬prime d,	hb0 : p.count b.factors = 0	⊢ p.count a.factors = 0 ∨ p.count a.factors = p.count (a * b).factors
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	dec_irr : Π (p : associates α), decidable (irreducible p),	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a : associates α,	ha : a ≠ 0,	b : associates α,	hb : b ≠ 0,	p : associates α,	hp : irreducible p,	hab : ∀ (d : associates α), d ∣ a → d ∣ b → ¬prime d,	hb0 : p.count b.factors = 0	⊢ p.count a.factors = 0 ∨ p.count a.factors = p.count (a * b).factors
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	dec_irr : Π (p : associates α), decidable (irreducible p),	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a : associates α,	ha : a ≠ 0,	b : associates α,	hb : b ≠ 0,	p : associates α,	hp : irreducible p,	hab : ∀ (d : associates α), d ∣ a → d ∣ b → ¬prime d,	hb0 : p.count b.factors = 0	⊢ p.count a.factors = p.count (a * b).factors
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α	⊢ wf_dvd_monoid α → well_founded has_lt.lt
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0	⊢ unique_factorization_monoid.factors (x * y) = unique_factorization_monoid.factors x + unique_factorization_monoid.factors y
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	x_1 : α	⊢ ⇑normalize x_1 = (associates.out ∘ associates.mk) x_1
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0	⊢ ⇑normalize = associates.out ∘ associates.mk		α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ unique_factorization_monoid.factors (x * y) = unique_factorization_monoid.factors x + unique_factorization_monoid.factors y
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0	⊢ ⇑normalize = associates.out ∘ associates.mk
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ unique_factorization_monoid.factors (x * y) = unique_factorization_monoid.factors x + unique_factorization_monoid.factors y
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ multiset.map associates.out (multiset.map (λ (x : α), associates.mk x) (unique_factorization_monoid.factors x + unique_factorization_monoid.factors y)) = multiset.map associates.out (multiset.map (λ (x : α), associates.mk x) (unique_factorization_monoid.factors (x * y)))
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ multiset.map (λ (x : α), associates.mk x) (unique_factorization_monoid.factors x + unique_factorization_monoid.factors y) = multiset.map (λ (x : α), associates.mk x) (unique_factorization_monoid.factors (x * y))
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ multiset.rel setoid.r (unique_factorization_monoid.factors x + unique_factorization_monoid.factors y) (unique_factorization_monoid.factors (x * y))
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ ∀ (x_1 : α), x_1 ∈ unique_factorization_monoid.factors x + unique_factorization_monoid.factors y → irreducible x_1
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk,	x : α,	hx : x ∈ unique_factorization_monoid.factors x + unique_factorization_monoid.factors y	⊢ irreducible x
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk,	x : α,	hx : x ∈ unique_factorization_monoid.factors x + unique_factorization_monoid.factors y	⊢ irreducible x
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ ∀ (x_1 : α), x_1 ∈ unique_factorization_monoid.factors x + unique_factorization_monoid.factors y → irreducible x_1		α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ ∀ (x_1 : α), x_1 ∈ unique_factorization_monoid.factors (x * y) → irreducible x_1		α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ (unique_factorization_monoid.factors x + unique_factorization_monoid.factors y).prod ~ᵤ (unique_factorization_monoid.factors (x * y)).prod
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk,	x : α,	hx : x ∈ unique_factorization_monoid.factors x + unique_factorization_monoid.factors y,	hx : x ∈ unique_factorization_monoid.factors x	⊢ irreducible x
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk,	x : α,	hx : x ∈ unique_factorization_monoid.factors x + unique_factorization_monoid.factors y,	hx : x ∈ unique_factorization_monoid.factors y	⊢ irreducible x
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ ∀ (x_1 : α), x_1 ∈ unique_factorization_monoid.factors (x * y) → irreducible x_1		α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ (unique_factorization_monoid.factors x + unique_factorization_monoid.factors y).prod ~ᵤ (unique_factorization_monoid.factors (x * y)).prod
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ ∀ (x_1 : α), x_1 ∈ unique_factorization_monoid.factors (x * y) → irreducible x_1
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ (unique_factorization_monoid.factors x + unique_factorization_monoid.factors y).prod ~ᵤ (unique_factorization_monoid.factors (x * y)).prod
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : decidable_eq α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	_inst_5 : unique_factorization_monoid α,	x y : α,	hx : x ≠ 0,	hy : y ≠ 0,	h : ⇑normalize = associates.out ∘ associates.mk	⊢ (unique_factorization_monoid.factors x).prod * (unique_factorization_monoid.factors y).prod ~ᵤ (unique_factorization_monoid.factors (x * y)).prod
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a b : associates α,	h : a.factors = b.factors	⊢ a.factors.prod = b.factors.prod
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a b : associates α,	h : a.factors = b.factors,	this : a.factors.prod = b.factors.prod	⊢ a = b
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a b : associates α	⊢ (a.factors ⊔ b.factors).prod * (a.factors ⊓ b.factors).prod = a * b
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	dec' : decidable_eq (associates α),	a b : associates α	⊢ ((a.factors ⊔ b.factors).prod * (a.factors ⊓ b.factors).prod).factors = (a * b).factors
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	a p : α,	ha0 : a ≠ 0,	hp : irreducible p,	hd : p ∣ a	⊢ ⟨associates.mk p, _⟩ ∈ associates.factors' a
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	a p : α,	ha0 : a ≠ 0,	hp : irreducible p,	hd : p ∣ a,	q : α,	hq : q ∈ unique_factorization_monoid.factors a,	hpq : p ~ᵤ q	⊢ ∃ (a_1 : α) (h : a_1 ∈ unique_factorization_monoid.factors a), ⟨associates.mk a_1, _⟩ = ⟨associates.mk p, _⟩
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	a p : α,	ha0 : a ≠ 0,	hp : irreducible p,	hd : p ∣ a,	q : α,	hq : q ∈ unique_factorization_monoid.factors a,	hpq : p ~ᵤ q	⊢ ∃ (h : q ∈ unique_factorization_monoid.factors a), ⟨associates.mk q, _⟩ = ⟨associates.mk p, _⟩
α : Type u_1,	_inst_1 : comm_cancel_monoid_with_zero α,	_inst_2 : unique_factorization_monoid α,	_inst_3 : nontrivial α,	_inst_4 : normalization_monoid α,	dec : decidable_eq α,	a p : α,	ha0 : a ≠ 0,	hp : irreducible p,	hd : p ∣ a,	q : α,	hq : q ∈ unique_factorization_monoid.factors a,	hpq : p ~ᵤ q	⊢ ⟨associates.mk p, _⟩ ∈ associates.factors' a
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	x y : witt_vector p R	⊢ ghost_fun (x + y) = ghost_fun x + ghost_fun y
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	x : witt_vector p R	⊢ ghost_fun (-x) = -ghost_fun x
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R	⊢ 0.frobenius_fun = 0
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R	⊢ ∀ (R : Type u_1) [_Rcr : comm_ring R] (x : witt_vector p R) (n : ℕ), ⇑(witt_vector.ghost_component n) ((witt_vector.frobenius_fun ∘ λ (_x : witt_vector p R), 0) x) = ⇑(witt_vector.ghost_component n) (((λ (_x : witt_vector p R), 0) ∘ witt_vector.frobenius_fun) x)
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R	⊢ 1.frobenius_fun = 1
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R	⊢ ∀ (R : Type u_1) [_Rcr : comm_ring R] (x : witt_vector p R) (n : ℕ), ⇑(witt_vector.ghost_component n) ((witt_vector.frobenius_fun ∘ λ (_x : witt_vector p R), 1) x) = ⇑(witt_vector.ghost_component n) (((λ (_x : witt_vector p R), 1) ∘ witt_vector.frobenius_fun) x)
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R	⊢ ∀ (x y : witt_vector p R), (x + y).frobenius_fun = x.frobenius_fun + y.frobenius_fun
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R	⊢ ∀ (x y : witt_vector p R), (x + y).frobenius_fun = x.frobenius_fun + y.frobenius_fun
p : ℕ,	hp : fact (nat.prime p),	R : Type u_1,	R._inst : comm_ring R,	x y : witt_vector p R	⊢ ∀ (n : ℕ), ⇑(witt_vector.ghost_component n) (x + y).frobenius_fun = ⇑(witt_vector.ghost_component n) (x.frobenius_fun + y.frobenius_fun)
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R	⊢ ∀ (x y : witt_vector p R), (x * y).frobenius_fun = x.frobenius_fun * y.frobenius_fun
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R	⊢ ∀ (x y : witt_vector p R), (x * y).frobenius_fun = x.frobenius_fun * y.frobenius_fun
p : ℕ,	hp : fact (nat.prime p),	R : Type u_1,	R._inst : comm_ring R,	x y : witt_vector p R	⊢ ∀ (n : ℕ), ⇑(witt_vector.ghost_component n) (x * y).frobenius_fun = ⇑(witt_vector.ghost_component n) (x.frobenius_fun * y.frobenius_fun)
p : ℕ,	hp : fact (nat.prime p),	R : Type u_1,	_inst_1 : comm_ring R,	x : witt_vector p R,	n : ℕ	⊢ witt_vector.init n (-x) = witt_vector.init n (-witt_vector.init n x)
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R	⊢ ⇑(witt_vector.teichmuller p) 0 = 0
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	n : ℕ	⊢ (⇑(witt_vector.teichmuller p) 0).coeff n.succ = 0.coeff n.succ
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	n : ℕ	⊢ (⇑(witt_vector.teichmuller p) 0).coeff n.succ = 0
p : ℕ,	R : Type u_1,	hp : fact (nat.prime p),	_inst_1 : comm_ring R	⊢ ⇑(witt_vector.teichmuller p) 0 = 0
p : ℕ,	R : Type u_1,	S : Type u_2,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	r : R,	n : ℕ	⊢ (⇑(witt_vector.map f) (witt_vector.teichmuller_fun p r)).coeff n = (witt_vector.teichmuller_fun p (⇑f r)).coeff n
p : ℕ,	R : Type u_1,	S : Type u_2,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	r : R	⊢ (⇑(witt_vector.map f) (witt_vector.teichmuller_fun p r)).coeff 0 = (witt_vector.teichmuller_fun p (⇑f r)).coeff 0
p : ℕ,	R : Type u_1,	S : Type u_2,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	r : R	⊢ (⇑(witt_vector.map f) (witt_vector.teichmuller_fun p r)).coeff 0 = (witt_vector.teichmuller_fun p (⇑f r)).coeff 0		case nat.succ	p : ℕ,	R : Type u_1,	S : Type u_2,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	r : R,	n : ℕ	⊢ (⇑(witt_vector.map f) (witt_vector.teichmuller_fun p r)).coeff n.succ = (witt_vector.teichmuller_fun p (⇑f r)).coeff n.succ
p : ℕ,	R : Type u_1,	S : Type u_2,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	r : R,	n : ℕ	⊢ (⇑(witt_vector.map f) (witt_vector.teichmuller_fun p r)).coeff n.succ = (witt_vector.teichmuller_fun p (⇑f r)).coeff n.succ
p : ℕ,	R : Type u_1,	S : Type u_2,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	r : R	⊢ ⇑(witt_vector.map f) (witt_vector.teichmuller_fun p r) = witt_vector.teichmuller_fun p (⇑f r)
p : ℕ,	hp : fact (nat.prime p),	R : Type u_1,	_inst_1 : comm_ring R,	S : Type u_2,	_inst_2 : semiring S,	f : Π (k : ℕ), S →+* truncated_witt_vector p k R,	f_compat : ∀ (k₁ k₂ : ℕ) (hk : k₁ ≤ k₂), (truncated_witt_vector.truncate hk).comp (f k₂) = f k₁	⊢ S →+* witt_vector p R
p : ℕ,	hp : fact (nat.prime p),	R : Type u_1,	_inst_1 : comm_ring R,	S : Type u_2,	_inst_2 : semiring S,	f : Π (k : ℕ), S →+* truncated_witt_vector p k R,	f_compat : ∀ (k₁ k₂ : ℕ) (hk : k₁ ≤ k₂), (truncated_witt_vector.truncate hk).comp (f k₂) = f k₁	⊢ S →+* witt_vector p R
p : ℕ,	hp : fact (nat.prime p),	R : Type u_1,	_inst_1 : comm_ring R,	S : Type u_2,	_inst_2 : semiring S,	f : Π (k : ℕ), S →+* truncated_witt_vector p k R,	f_compat : ∀ (k₁ k₂ : ℕ) (hk : k₁ ≤ k₂), (truncated_witt_vector.truncate hk).comp (f k₂) = f k₁	⊢ ∀ (x y : S), witt_vector.lift_fun f (x + y) = witt_vector.lift_fun f x + witt_vector.lift_fun f y
p : ℕ,	hp : fact (nat.prime p),	R : Type u_1,	_inst_1 : comm_ring R,	S : Type u_2,	_inst_2 : semiring S,	f : Π (k : ℕ), S →+* truncated_witt_vector p k R,	f_compat : ∀ (k₁ k₂ : ℕ) (hk : k₁ ≤ k₂), (truncated_witt_vector.truncate hk).comp (f k₂) = f k₁,	x y : S	⊢ witt_vector.lift_fun f (x + y) = witt_vector.lift_fun f x + witt_vector.lift_fun f y
p : ℕ,	hp : fact (nat.prime p),	R : Type u_1,	_inst_1 : comm_ring R,	S : Type u_2,	_inst_2 : semiring S,	f : Π (k : ℕ), S →+* truncated_witt_vector p k R,	f_compat : ∀ (k₁ k₂ : ℕ) (hk : k₁ ≤ k₂), (truncated_witt_vector.truncate hk).comp (f k₂) = f k₁,	x y : S	⊢ ∀ (i : ℕ), witt_vector.lift_fun f (x + y) - (witt_vector.lift_fun f x + witt_vector.lift_fun f y) ∈ (witt_vector.truncate i).ker
p : ℕ,	R : Type u_1,	S : Type u_2,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	x : witt_vector p R	⊢ (⇑(witt_vector.map f) (⇑witt_vector.verschiebung x)).coeff 0 = (⇑witt_vector.verschiebung (⇑(witt_vector.map f) x)).coeff 0		p : ℕ,	R : Type u_1,	S : Type u_2,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	x : witt_vector p R,	n : ℕ	⊢ (⇑(witt_vector.map f) (⇑witt_vector.verschiebung x)).coeff n.succ = (⇑witt_vector.verschiebung (⇑(witt_vector.map f) x)).coeff n.succ
p : ℕ,	R : Type u_1,	S : Type u_2,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	x : witt_vector p R,	n : ℕ	⊢ (⇑(witt_vector.map f) (⇑witt_vector.verschiebung x)).coeff n.succ = (⇑witt_vector.verschiebung (⇑(witt_vector.map f) x)).coeff n.succ
p : ℕ,	R : Type u_1,	S : Type u_2,	hp : fact (nat.prime p),	_inst_1 : comm_ring R,	_inst_2 : comm_ring S,	f : R →+* S,	x : witt_vector p R	⊢ ⇑(witt_vector.map f) (⇑witt_vector.verschiebung x) = ⇑witt_vector.verschiebung (⇑(witt_vector.map f) x)
α : Type u	⊢ 2 ≤ # α ↔ ∃ (x y : α), x ≠ y
α : Type u,	f : punit ⊕ punit ↪ α	⊢ ∃ (x y : α), x ≠ y
α : Type u	⊢ 2 ≤ # α → (∃ (x y : α), x ≠ y)
α : Type u,	f : punit ⊕ punit ↪ α	⊢ ⇑f (sum.inl punit.star) ≠ ⇑f (sum.inr punit.star)
α : Type u,	f : punit ⊕ punit ↪ α,	h : ⇑f (sum.inl punit.star) = ⇑f (sum.inr punit.star)	⊢ false
α : Type u	⊢ 2 ≤ # α → (∃ (x y : α), x ≠ y)		α : Type u	⊢ (∃ (x y : α), x ≠ y) → 2 ≤ # α
α : Type u,	x y : α,	h : x ≠ y	⊢ 2 ≤ # α
α : Type u	⊢ (∃ (x y : α), x ≠ y) → 2 ≤ # α
α : Type u,	x y : α,	h : x ≠ y,	h' : ¬2 ≤ # α	⊢ false
α : Type u,	x y : α,	h : x ≠ y,	h' : subsingleton α	⊢ x = y
α : Type u,	x y : α,	h : x ≠ y,	h' : subsingleton α	⊢ false
a b : cardinal	⊢ a < b.succ ↔ a ≤ b
c : cardinal	⊢ c + 1 ≤ c.succ
c : cardinal,	α : Type u_1	⊢ quot.mk setoid.r α < cardinal.succ (quot.mk setoid.r α) → quot.mk setoid.r α + 1 ≤ cardinal.succ (quot.mk setoid.r α)
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β	⊢ quot.mk setoid.r α + 1 ≤ quot.mk setoid.r β
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β	⊢ quot.mk setoid.r α + 1 ≤ quot.mk setoid.r β
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f	⊢ quot.mk setoid.r α + 1 ≤ quot.mk setoid.r β
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b	⊢ α → β
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b	⊢ quot.mk setoid.r α + 1 ≤ quot.mk setoid.r β
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b	⊢ punit → β		c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b	⊢ function.injective (sum.rec ⇑f ?m_1)
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b	⊢ punit → β
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	a b : α ⊕ punit,	h : sum.rec ⇑f (λ (_x : punit), b) a = sum.rec ⇑f (λ (_x : punit), b) b	⊢ a = b
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	a b : α ⊕ punit,	h : sum.rec ⇑f (λ (_x : punit), b) a = sum.rec ⇑f (λ (_x : punit), b) b	⊢ a = b
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	b : α ⊕ punit,	a : α,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inl a) = sum.rec ⇑f (λ (_x : punit), b) b	⊢ sum.inl a = b
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	b : α ⊕ punit,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star) = sum.rec ⇑f (λ (_x : punit), b) b	⊢ sum.inr punit.star = b
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b	⊢ function.injective (sum.rec ⇑f (λ (_x : punit), b))
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	a b : α,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inl a) = sum.rec ⇑f (λ (_x : punit), b) (sum.inl b)	⊢ sum.inl a = sum.inl b		c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	a : α,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inl a) = sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star)	⊢ sum.inl a = sum.inr punit.star		c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	b : α,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star) = sum.rec ⇑f (λ (_x : punit), b) (sum.inl b)	⊢ sum.inr punit.star = sum.inl b		c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star) = sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star)	⊢ sum.inr punit.star = sum.inr punit.star
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	a b : α,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inl a) = sum.rec ⇑f (λ (_x : punit), b) (sum.inl b)	⊢ sum.inl a = sum.inl b
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	a : α,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inl a) = sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star)	⊢ sum.inl a = sum.inr punit.star		c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	b : α,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star) = sum.rec ⇑f (λ (_x : punit), b) (sum.inl b)	⊢ sum.inr punit.star = sum.inl b		c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star) = sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star)	⊢ sum.inr punit.star = sum.inr punit.star
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	a : α,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inl a) = sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star)	⊢ sum.inl a = sum.inr punit.star
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	b : α,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star) = sum.rec ⇑f (λ (_x : punit), b) (sum.inl b)	⊢ sum.inr punit.star = sum.inl b		c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star) = sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star)	⊢ sum.inr punit.star = sum.inr punit.star
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	b : α,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star) = sum.rec ⇑f (λ (_x : punit), b) (sum.inl b)	⊢ sum.inr punit.star = sum.inl b
c : cardinal,	α β : Type u_1,	h : quot.mk setoid.r α < quot.mk setoid.r β,	f : α ↪ β,	this : ¬function.surjective ⇑f,	b : β,	nex : ¬∃ (a : α), ⇑f a = b,	h : sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star) = sum.rec ⇑f (λ (_x : punit), b) (sum.inr punit.star)	⊢ sum.inr punit.star = sum.inr punit.star
ι : Type u_1,	f : ι → cardinal,	i : ι	⊢ f i ≤ cardinal.sup f
ι : Type u_1,	f : ι → cardinal,	i : ι	⊢ f i ≤ cardinal.sup f
ι : Type u_1,	f : ι → cardinal,	i : ι	⊢ f i ≤ cardinal.sup f
ι : Type u_1,	f : ι → cardinal,	i : ι	⊢ f i ≤ cardinal.min _ subtype.val
ι : Type u_1,	f : ι → cardinal,	i : ι,	c : ?m_1,	hc : cardinal.min ?m_2 ?m_3 = ?m_3 c	⊢ f i ≤ cardinal.min _ subtype.val
ι : Type u_1,	f : ι → cardinal,	i : ι	⊢ f i ≤ cardinal.sup f
ι : Type u_1,	f : ι → cardinal,	i : ι,	c : {c // ∀ (i : ι), f i ≤ c},	hc : cardinal.min _ subtype.val = c.val	⊢ f i ≤ c.val
ι : Type u_1,	f g : ι → cardinal,	H : ∀ (i : ι), f i ≤ g i,	i : ι	⊢ nonempty (quotient.out (f i) ↪ quotient.out (g i))
ι : Type u_1,	f g : ι → cardinal,	H : ∀ (i : ι), f i ≤ g i,	i : ι,	this : f i ≤ g i	⊢ nonempty (quotient.out (f i) ↪ quotient.out (g i))
ι : Type u_1,	f g : ι → cardinal,	H : ∀ (i : ι), f i ≤ g i,	i : ι	⊢ nonempty (quotient.out (f i) ↪ quotient.out (g i))
ι : Type u_1,	f : ι → cardinal	⊢ ¬cardinal.prod f = 0 ↔ ¬∃ (i : ι), f i = 0
a : cardinal,	b : cardinal	⊢ a.lift = b.lift ↔ a.lift.lift = b.lift.lift
⊢ dite (0 < ω) (λ (h : 0 < ω), classical.some _) (λ (h : ¬0 < ω), 0) = 0
h : 0 < ω	⊢ dite (0 < ω) (λ (h : 0 < ω), classical.some _) (λ (h : ¬0 < ω), 0) = 0
a b : cardinal	⊢ a * b = a ↔ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0
a b : cardinal	⊢ a * b = a ↔ linear_order.max ω b ≤ a ∧ b ≠ 0 ∨ b = 1 ∨ a = 0
a b : cardinal	⊢ a * b = a → (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a	⊢ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a,	ha : ω ≤ a	⊢ a ≠ 0
b : cardinal,	h : 0 * b = 0,	ha : ω ≤ 0	⊢ false
a b : cardinal,	h : a * b = a,	ha : ω ≤ a	⊢ a ≠ 0		a b : cardinal,	h : a * b = a,	ha : ω ≤ a,	this : a ≠ 0	⊢ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a,	ha : ω ≤ a	⊢ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a,	ha : ω ≤ a,	this : a ≠ 0	⊢ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0
a b : cardinal,	h : a * b = a,	ha : ω ≤ a,	this : a ≠ 0	⊢ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a,	ha : ω ≤ a,	this : a ≠ 0	⊢ ¬a < b
a b : cardinal,	h : a * b = a,	ha : ω ≤ a,	this : a ≠ 0,	hb : a < b	⊢ false
a b : cardinal,	h : a * b = a,	ha : ω ≤ a,	this : a ≠ 0,	hb : a < b	⊢ a < a * b
a b : cardinal,	h : a * b = a,	ha : ω ≤ a,	this : a ≠ 0	⊢ b ≤ a		a b : cardinal,	h : a * b = a,	ha : ω ≤ a,	this : a ≠ 0	⊢ b ≠ 0
a b : cardinal,	h : a * b = a,	ha : ω ≤ a,	this : a ≠ 0	⊢ b ≤ a
a : cardinal,	ha : ω ≤ a,	this : a ≠ 0,	h : a * 0 = a	⊢ false
a : cardinal,	ha : ω ≤ a,	this : a ≠ 0,	h : a * 0 = a	⊢ a = 0
a : cardinal,	ha : ω ≤ a,	this : a ≠ 0,	h : 0 = a	⊢ a = 0
a b : cardinal,	h : a * b = a,	ha : ω ≤ a	⊢ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0		case or.inr	a b : cardinal,	h : a * b = a,	ha : a < ω	⊢ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a,	ha : ω ≤ a,	this : a ≠ 0	⊢ b ≠ 0
a b : cardinal,	h : a * b = a,	ha : a < ω	⊢ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a,	ha : a < ω,	h2a : a = 0	⊢ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a,	ha : a < ω,	h2a : a = 0	⊢ a = 0
a b : cardinal,	h : a * b = a,	ha : a < ω,	h2a : a = 0	⊢ b = 1 ∨ a = 0		a b : cardinal,	h : a * b = a,	ha : a < ω,	h2a : ¬a = 0	⊢ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a,	ha : a < ω	⊢ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a,	ha : a < ω,	h2a : ¬a = 0	⊢ b ≠ 0
a : cardinal,	ha : a < ω,	h2a : ¬a = 0,	h : a * 0 = a	⊢ false
a : cardinal,	ha : a < ω,	h2a : ¬a = 0,	h : a * 0 = a	⊢ a = 0
a b : cardinal,	h : a * b = a,	ha : a < ω,	h2a : ¬a = 0	⊢ b = 1 ∨ a = 0
a : cardinal,	ha : a < ω,	h2a : ¬a = 0,	h : 0 = a	⊢ a = 0
a b : cardinal,	h : a * b = a,	ha : a < ω,	h2a : ¬a = 0	⊢ b ≠ 0		a b : cardinal,	h : a * b = a,	ha : a < ω,	h2a : ¬a = 0,	hb : b ≠ 0	⊢ b = 1 ∨ a = 0
a b : cardinal,	h : a * b = a,	ha : a < ω,	h2a : ¬a = 0,	hb : b ≠ 0	⊢ b = 1
a b : cardinal,	h : a * b = a,	ha : a < ω,	h2a : ¬a = 0,	hb : b ≠ 0	⊢ b = 1 ∨ a = 0
b : cardinal,	hb : b ≠ 0,	h : 0 * b = 0,	h2a : ¬0 = 0	⊢ b = 1		a : cardinal,	h2a : ¬a = 0,	h : a * 0 = a,	hb : 0 ≠ 0	⊢ 0 = 1		n : ℕ,	h2a : ¬↑n = 0,	m : ℕ,	hb : ↑m ≠ 0,	h : ↑n * ↑m = ↑n	⊢ ↑m = 1
a b : cardinal,	h : a * b = a,	h2a : ¬a = 0,	hb : b ≠ 0,	ha : a = 0 ∨ b = 0 ∨ (∃ (n : ℕ), a = ↑n) ∧ ∃ (n : ℕ), b = ↑n	⊢ b = 1
a : cardinal,	h2a : ¬a = 0,	h : a * 0 = a,	hb : 0 ≠ 0	⊢ 0 = 1		n : ℕ,	h2a : ¬↑n = 0,	m : ℕ,	hb : ↑m ≠ 0,	h : ↑n * ↑m = ↑n	⊢ ↑m = 1
n m : ℕ,	hb : ↑m ≠ 0,	h : ↑n * ↑m = ↑n,	h2a : ↑n ≠ 0	⊢ ↑m = 1
n : ℕ,	h2a : ¬↑n = 0,	m : ℕ,	hb : ↑m ≠ 0,	h : ↑n * ↑m = ↑n	⊢ ↑m = 1
n m : ℕ,	h : ↑n * ↑m = ↑n,	hb : 1 ≤ ↑m,	h2a : 1 ≤ ↑n	⊢ ↑m = 1
n m : ℕ,	h : n * m = n,	hb : 1 ≤ m,	h2a : 1 ≤ n	⊢ m ≤ 1
n m : ℕ,	h : n * m = n,	hb : 1 ≤ m,	h2a : 1 ≤ n	⊢ ¬1 < m
n m : ℕ,	h : n * m = n,	hb : 1 ≤ m,	h2a : 1 ≤ n	⊢ m = 1
n m : ℕ,	h : n * m = n,	hb : 1 ≤ m,	h2a : 1 ≤ n,	h2b : 1 < m	⊢ n < n * m
n m : ℕ,	h : n * m = n,	hb : 1 ≤ m,	h2a : 1 ≤ n,	h2b : 1 < m	⊢ n = ?m_1
n m : ℕ,	h : n * m = n,	hb : 1 ≤ m,	h2a : 1 ≤ n,	h2b : 1 < m	⊢ false
n m : ℕ,	h : n * m = n,	hb : 1 ≤ m,	h2a : 1 ≤ n,	h2b : 1 < m	⊢ 0 < n
a b : cardinal	⊢ a * b = a → (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0		a b : cardinal	⊢ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0 → a * b = a
n m : ℕ,	h : n * m = n,	hb : 1 ≤ m,	h2a : 1 ≤ n,	h2b : 1 < m	⊢ n * 1 < n * m
a b : cardinal	⊢ (ω ≤ a ∧ b ≤ a) ∧ b ≠ 0 ∨ b = 1 ∨ a = 0 → a * b = a
a b : cardinal,	hb : b ≠ 0,	ha : ω ≤ a,	hab : b ≤ a	⊢ a * b = a		a : cardinal	⊢ a * 1 = a		b : cardinal	⊢ 0 * b = 0
a b : cardinal,	hb : b ≠ 0,	ha : ω ≤ a,	hab : b ≤ a	⊢ a * b = a
a : cardinal	⊢ a * 1 = a
b : cardinal	⊢ 0 * b = 0
a : cardinal	⊢ a * 1 = a		b : cardinal	⊢ 0 * b = 0
c : cardinal,	h : ω ≤ c	⊢ c + c ≤ c
κ μ : cardinal,	H1 : ω ≤ κ,	H2 : μ < ω,	_let_match : (∃ (n : ℕ), μ = ↑n) → κ ^ μ ≤ κ,	n : ℕ,	H3 : μ = ↑n,	α : Type u,	H1 : ω ≤ ⟦α⟧	⊢ ⟦α⟧ ^ ↑0 < ω
κ μ : cardinal,	H1 : ω ≤ κ,	H2 : μ < ω,	_let_match : (∃ (n : ℕ), μ = ↑n) → κ ^ μ ≤ κ,	n : ℕ,	H3 : μ = ↑n,	α : Type u,	H1 : ω ≤ ⟦α⟧	⊢ ⟦α⟧ ^ ↑0 < ω
κ μ : cardinal,	H1 : ω ≤ κ,	H2 : μ < ω,	_let_match : (∃ (n : ℕ), μ = ↑n) → κ ^ μ ≤ κ,	n : ℕ,	H3 : μ = ↑n,	α : Type u,	H1 : ω ≤ ⟦α⟧	⊢ 1 < ω
κ μ : cardinal,	H1 : ω ≤ κ,	H2 : μ < ω,	_let_match : (∃ (n : ℕ), μ = ↑n) → κ ^ μ ≤ κ,	n : ℕ,	H3 : μ = ↑n,	α : Type u,	H1 : ω ≤ ⟦α⟧,	n : ℕ,	ih : ⟦α⟧ ^ ↑n ≤ ⟦α⟧	⊢ ⟦α⟧ ^ ↑(n.succ) ≤ ⟦α⟧ * ⟦α⟧
κ μ : cardinal,	H1 : ω ≤ κ,	H2 : μ < ω,	_let_match : (∃ (n : ℕ), μ = ↑n) → κ ^ μ ≤ κ,	n : ℕ,	H3 : μ = ↑n,	α : Type u,	H1 : ω ≤ ⟦α⟧,	n : ℕ,	ih : ⟦α⟧ ^ ↑n ≤ ⟦α⟧	⊢ ⟦α⟧ ^ ↑(n.succ) ≤ ⟦α⟧ * ⟦α⟧
κ μ : cardinal,	H1 : ω ≤ κ,	H2 : μ < ω,	_let_match : (∃ (n : ℕ), μ = ↑n) → κ ^ μ ≤ κ,	n : ℕ,	H3 : μ = ↑n,	α : Type u,	H1 : ω ≤ ⟦α⟧,	n : ℕ,	ih : ⟦α⟧ ^ ↑n ≤ ⟦α⟧	⊢ ⟦α⟧ ^ ↑n * ⟦α⟧ ≤ ⟦α⟧ * ⟦α⟧
c : cardinal	⊢ bit0 c < ω ↔ c < ω
y : pgame,	j : y.right_moves,	x_α x_β : Type u_1,	x_ᾰ : x_α → pgame,	x_ᾰ_1 : x_β → pgame,	i : (pgame.mk x_α x_β x_ᾰ x_ᾰ_1).right_moves	⊢ (pgame.mk x_α x_β x_ᾰ x_ᾰ_1 * y).move_left (⇑(((pgame.mk x_α x_β x_ᾰ x_ᾰ_1).left_moves_mul y).symm) (sum.inr (i, j))) = (pgame.mk x_α x_β x_ᾰ x_ᾰ_1).move_right i * y + pgame.mk x_α x_β x_ᾰ x_ᾰ_1 * y.move_right j - (pgame.mk x_α x_β x_ᾰ x_ᾰ_1).move_right i * y.move_right j
x_α x_β : Type u_1,	x_ᾰ : x_α → pgame,	x_ᾰ_1 : x_β → pgame,	i : (pgame.mk x_α x_β x_ᾰ x_ᾰ_1).right_moves,	y_α y_β : Type u_1,	y_ᾰ : y_α → pgame,	y_ᾰ_1 : y_β → pgame,	j : (pgame.mk y_α y_β y_ᾰ y_ᾰ_1).right_moves	⊢ (pgame.mk x_α x_β x_ᾰ x_ᾰ_1 * pgame.mk y_α y_β y_ᾰ y_ᾰ_1).move_left (⇑(((pgame.mk x_α x_β x_ᾰ x_ᾰ_1).left_moves_mul (pgame.mk y_α y_β y_ᾰ y_ᾰ_1)).symm) (sum.inr (i, j))) = (pgame.mk x_α x_β x_ᾰ x_ᾰ_1).move_right i * pgame.mk y_α y_β y_ᾰ y_ᾰ_1 + pgame.mk x_α x_β x_ᾰ x_ᾰ_1 * (pgame.mk y_α y_β y_ᾰ y_ᾰ_1).move_right j - (pgame.mk x_α x_β x_ᾰ x_ᾰ_1).move_right i * (pgame.mk y_α y_β y_ᾰ y_ᾰ_1).move_right j
x y : pgame,	i : x.right_moves,	j : y.right_moves	⊢ (x * y).move_left (⇑((x.left_moves_mul y).symm) (sum.inr (i, j))) = x.move_right i * y + x * y.move_right j - x.move_right i * y.move_right j
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ (0 * pgame.mk xl xr xL xR).left_moves ≃ 0.left_moves
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ (0 * pgame.mk xl xr xL xR).left_moves → 0.left_moves
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ 0.left_moves → (0 * pgame.mk xl xr xL xR).left_moves
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ function.left_inverse (λ (ᾰ : 0.left_moves), pempty.cases_on (λ (ᾰ : 0.left_moves), (0 * pgame.mk xl xr xL xR).left_moves) ᾰ) (λ (ᾰ : (0 * pgame.mk xl xr xL xR).left_moves), sum.cases_on ᾰ (λ (ᾰ : pempty × xl), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xl), pempty.cases_on (λ (ᾰ_fst : pempty), 0.left_moves) ᾰ_fst)) (λ (ᾰ : pempty × xr), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xr), pempty.cases_on (λ (ᾰ_fst : pempty), 0.left_moves) ᾰ_fst)))
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ function.right_inverse (λ (ᾰ : 0.left_moves), pempty.cases_on (λ (ᾰ : 0.left_moves), (0 * pgame.mk xl xr xL xR).left_moves) ᾰ) (λ (ᾰ : (0 * pgame.mk xl xr xL xR).left_moves), sum.cases_on ᾰ (λ (ᾰ : pempty × xl), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xl), pempty.cases_on (λ (ᾰ_fst : pempty), 0.left_moves) ᾰ_fst)) (λ (ᾰ : pempty × xr), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xr), pempty.cases_on (λ (ᾰ_fst : pempty), 0.left_moves) ᾰ_fst)))
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ (0 * pgame.mk xl xr xL xR).left_moves ≃ 0.left_moves
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ (0 * pgame.mk xl xr xL xR).right_moves ≃ 0.right_moves
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ (0 * pgame.mk xl xr xL xR).right_moves → 0.right_moves
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ 0.right_moves → (0 * pgame.mk xl xr xL xR).right_moves
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ function.left_inverse (λ (ᾰ : 0.right_moves), pempty.cases_on (λ (ᾰ : 0.right_moves), (0 * pgame.mk xl xr xL xR).right_moves) ᾰ) (λ (ᾰ : (0 * pgame.mk xl xr xL xR).right_moves), sum.cases_on ᾰ (λ (ᾰ : pempty × xr), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xr), pempty.cases_on (λ (ᾰ_fst : pempty), 0.right_moves) ᾰ_fst)) (λ (ᾰ : pempty × xl), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xl), pempty.cases_on (λ (ᾰ_fst : pempty), 0.right_moves) ᾰ_fst)))
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ function.right_inverse (λ (ᾰ : 0.right_moves), pempty.cases_on (λ (ᾰ : 0.right_moves), (0 * pgame.mk xl xr xL xR).right_moves) ᾰ) (λ (ᾰ : (0 * pgame.mk xl xr xL xR).right_moves), sum.cases_on ᾰ (λ (ᾰ : pempty × xr), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xr), pempty.cases_on (λ (ᾰ_fst : pempty), 0.right_moves) ᾰ_fst)) (λ (ᾰ : pempty × xl), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xl), pempty.cases_on (λ (ᾰ_fst : pempty), 0.right_moves) ᾰ_fst)))
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ (0 * pgame.mk xl xr xL xR).right_moves ≃ 0.right_moves
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ Π (i : (0 * pgame.mk xl xr xL xR).left_moves), ((0 * pgame.mk xl xr xL xR).move_left i).relabelling (0.move_left (⇑{to_fun := λ (ᾰ : (0 * pgame.mk xl xr xL xR).left_moves), sum.cases_on ᾰ (λ (ᾰ : pempty × xl), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xl), pempty.cases_on (λ (ᾰ_fst : pempty), 0.left_moves) ᾰ_fst)) (λ (ᾰ : pempty × xr), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xr), pempty.cases_on (λ (ᾰ_fst : pempty), 0.left_moves) ᾰ_fst)), inv_fun := λ (ᾰ : 0.left_moves), pempty.cases_on (λ (ᾰ : 0.left_moves), (0 * pgame.mk xl xr xL xR).left_moves) ᾰ, left_inv := _, right_inv := _} i))
zero_mul_relabelling : Π (x : pgame), (0 * x).relabelling 0,	xl xr : Type ?,	xL : xl → pgame,	xR : xr → pgame	⊢ Π (j : 0.right_moves), ((0 * pgame.mk xl xr xL xR).move_right (⇑({to_fun := λ (ᾰ : (0 * pgame.mk xl xr xL xR).right_moves), sum.cases_on ᾰ (λ (ᾰ : pempty × xr), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xr), pempty.cases_on (λ (ᾰ_fst : pempty), 0.right_moves) ᾰ_fst)) (λ (ᾰ : pempty × xl), ᾰ.cases_on (λ (ᾰ_fst : pempty) (ᾰ_snd : xl), pempty.cases_on (λ (ᾰ_fst : pempty), 0.right_moves) ᾰ_fst)), inv_fun := λ (ᾰ : 0.right_moves), pempty.cases_on (λ (ᾰ : 0.right_moves), (0 * pgame.mk xl xr xL xR).right_moves) ᾰ, left_inv := _, right_inv := _}.symm) j)).relabelling (0.move_right j)
G : pgame	⊢ G.impartial_aux ↔ G ≈ -G ∧ (∀ (i : G.left_moves), (G.move_left i).impartial_aux) ∧ ∀ (j : G.right_moves), (G.move_right j).impartial_aux
G : pgame	⊢ G.impartial_aux → (G ≈ -G ∧ (∀ (i : G.left_moves), (G.move_left i).impartial_aux) ∧ ∀ (j : G.right_moves), (G.move_right j).impartial_aux)
G : pgame,	hi : G.impartial_aux	⊢ G ≈ -G ∧ (∀ (i : G.left_moves), (G.move_left i).impartial_aux) ∧ ∀ (j : G.right_moves), (G.move_right j).impartial_aux
G : pgame	⊢ G.impartial_aux → (G ≈ -G ∧ (∀ (i : G.left_moves), (G.move_left i).impartial_aux) ∧ ∀ (j : G.right_moves), (G.move_right j).impartial_aux)		G : pgame	⊢ (G ≈ -G ∧ (∀ (i : G.left_moves), (G.move_left i).impartial_aux) ∧ ∀ (j : G.right_moves), (G.move_right j).impartial_aux) → G.impartial_aux
G : pgame,	hi : G ≈ -G ∧ (∀ (i : G.left_moves), (G.move_left i).impartial_aux) ∧ ∀ (j : G.right_moves), (G.move_right j).impartial_aux	⊢ G ≈ -G ∧ (∀ (i : G.left_moves), (G.move_left i).impartial_aux) ∧ ∀ (j : G.right_moves), (G.move_right j).impartial_aux
G : pgame	⊢ (G ≈ -G ∧ (∀ (i : G.left_moves), (G.move_left i).impartial_aux) ∧ ∀ (j : G.right_moves), (G.move_right j).impartial_aux) → G.impartial_aux
G : pgame,	hi : G ≈ -G ∧ (∀ (i : G.left_moves), (G.move_left i).impartial_aux) ∧ ∀ (j : G.right_moves), (G.move_right j).impartial_aux	⊢ G.impartial_aux
⊢ 0 ≈ -0 ∧ (∀ (i : 0.left_moves), (0.move_left i).impartial) ∧ ∀ (j : 0.right_moves), (0.move_right j).impartial
⊢ 0 ≈ -0 ∧ (∀ (i : pempty), (0.move_left i).impartial) ∧ ∀ (j : pempty), (0.move_right j).impartial
⊢ 0.impartial
S_α S_β : Type ?,	S_L : S_α → pgame,	S_R : S_β → pgame,	L : Π (i : S_α), (S_L i).short,	S_sR : Π (j : S_β), (S_R j).short,	S__inst_1 : fintype S_α,	S__inst_2 : fintype S_β,	i : (pgame.mk S_α S_β S_L S_R).left_moves	⊢ ((pgame.mk S_α S_β S_L S_R).move_left i).short
x : pgame,	S : x.short,	i : x.left_moves	⊢ (x.move_left i).short
S : Type u,	_inst_1 : pgame.state S,	n : ℕ,	s : S,	h : pgame.state.turn_bound s ≤ n	⊢ fintype (pgame.of_aux n s h).left_moves
S : Type u,	_inst_1 : pgame.state S,	n : ℕ,	s : S,	h : pgame.state.turn_bound s ≤ n	⊢ fintype {t // t ∈ pgame.state.L s}
S : Type u,	_inst_1 : pgame.state S,	short_of_aux : Π (n : ℕ) {s : S} (h : pgame.state.turn_bound s ≤ n), (pgame.of_aux n s h).short,	s : S,	h : pgame.state.turn_bound s ≤ 0,	i : (pgame.of_aux 0 s h).left_moves	⊢ ((pgame.of_aux 0 s h).move_left i).short
S : Type u,	_inst_1 : pgame.state S,	short_of_aux : Π (n : ℕ) {s : S} (h : pgame.state.turn_bound s ≤ n), (pgame.of_aux n s h).short,	s : S,	h : pgame.state.turn_bound s ≤ 0,	i : (pgame.of_aux 0 s h).left_moves,	i : {t // t ∈ pgame.state.L s}	⊢ ((pgame.of_aux 0 s h).move_left i).short
S : Type u,	_inst_1 : pgame.state S,	short_of_aux : Π (n : ℕ) {s : S} (h : pgame.state.turn_bound s ≤ n), (pgame.of_aux n s h).short,	s : S,	h : pgame.state.turn_bound s ≤ 0,	i : (pgame.of_aux 0 s h).left_moves,	i : {t // t ∈ pgame.state.L s}	⊢ false
S : Type u,	_inst_1 : pgame.state S,	short_of_aux : Π (n : ℕ) {s : S} (h : pgame.state.turn_bound s ≤ n), (pgame.of_aux n s h).short,	s : S,	h : pgame.state.turn_bound s ≤ 0,	j : (pgame.of_aux 0 s h).right_moves	⊢ ((pgame.of_aux 0 s h).move_right j).short
S : Type u,	_inst_1 : pgame.state S,	short_of_aux : Π (n : ℕ) {s : S} (h : pgame.state.turn_bound s ≤ n), (pgame.of_aux n s h).short,	s : S,	h : pgame.state.turn_bound s ≤ 0,	j : (pgame.of_aux 0 s h).right_moves,	j : {t // t ∈ pgame.state.R s}	⊢ ((pgame.of_aux 0 s h).move_right j).short
S : Type u,	_inst_1 : pgame.state S,	short_of_aux : Π (n : ℕ) {s : S} (h : pgame.state.turn_bound s ≤ n), (pgame.of_aux n s h).short,	s : S,	h : pgame.state.turn_bound s ≤ 0,	j : (pgame.of_aux 0 s h).right_moves,	j : {t // t ∈ pgame.state.R s}	⊢ false
α : Type u_1,	l₁ l₂ : lists' α bool.tt,	H : ∀ (a : lists α), a ∈ l₁.to_list → a ∈ l₂	⊢ l₁ ⊆ l₂
α : Type u_1,	l₁ l₂ : lists' α bool.tt	⊢ (∀ (a : lists α), a ∈ l₁.to_list → a ∈ l₂) → lists'.of_list l₁.to_list ⊆ l₂
α : Type u_1,	l₁ l₂ : lists' α bool.tt	⊢ (∀ (a : lists α), a ∈ l₁.to_list → a ∈ l₂) → lists'.of_list l₁.to_list ⊆ l₂
α : Type u_1,	l₁ l₂ : lists' α bool.tt	⊢ (∀ (a : lists α), a ∈ list.nil → a ∈ l₂) → lists'.of_list list.nil ⊆ l₂
α : Type u_1,	l₁ l₂ : lists' α bool.tt,	hd : lists α,	tl : list (lists α),	ih : (∀ (a : lists α), a ∈ tl → a ∈ l₂) → lists'.of_list tl ⊆ l₂	⊢ (∀ (a : lists α), a ∈ hd :: tl → a ∈ l₂) → lists'.of_list (hd :: tl) ⊆ l₂
α : Type u_1,	l₁ l₂ : lists' α bool.tt,	H : ∀ (a : lists α), a ∈ l₁.to_list → a ∈ l₂	⊢ lists'.of_list l₁.to_list ⊆ l₂
α : Type u_1,	l₁ l₂ : lists' α bool.tt,	H : ∀ (a : lists α), a ∈ list.nil → a ∈ l₂	⊢ lists'.of_list list.nil ⊆ l₂		case list.cons	α : Type u_1,	l₁ l₂ : lists' α bool.tt,	hd : lists α,	tl : list (lists α),	ih : (∀ (a : lists α), a ∈ tl → a ∈ l₂) → lists'.of_list tl ⊆ l₂,	H : ∀ (a : lists α), a ∈ hd :: tl → a ∈ l₂	⊢ lists'.of_list (hd :: tl) ⊆ l₂
α : Type u_1,	l₁ l₂ : lists' α bool.tt,	H : ∀ (a : lists α), a ∈ list.nil → a ∈ l₂	⊢ lists'.of_list list.nil ⊆ l₂
α : Type u_1,	l₁ l₂ : lists' α bool.tt,	hd : lists α,	tl : list (lists α),	ih : (∀ (a : lists α), a ∈ tl → a ∈ l₂) → lists'.of_list tl ⊆ l₂,	H : hd ∈ l₂ ∧ ∀ (a : lists α), a ∈ tl → a ∈ l₂	⊢ lists'.of_list (hd :: tl) ⊆ l₂
α : Type u_1,	l₁ l₂ : lists' α bool.tt,	hd : lists α,	tl : list (lists α),	ih : (∀ (a : lists α), a ∈ tl → a ∈ l₂) → lists'.of_list tl ⊆ l₂,	H : ∀ (a : lists α), a ∈ hd :: tl → a ∈ l₂	⊢ lists'.of_list (hd :: tl) ⊆ l₂
s : set ordinal,	hs : s.nonempty	⊢ ordinal.omin s hs ∈ s
s : set ordinal,	hs : s.nonempty	⊢ has_Inf.Inf s ∈ s
α : Type u_1,	β : Type u_2,	γ : Type u_3,	r : α → α → Prop,	s : β → β → Prop,	t : γ → γ → Prop,	_inst_1 : is_well_order γ t,	e : r ≃r s,	f : r ≺i t,	g : s ≺i t	⊢ f.top = g.top
α : Type u_1,	β : Type u_2,	γ : Type u_3,	r : α → α → Prop,	s : β → β → Prop,	t : γ → γ → Prop,	_inst_1 : is_well_order γ t,	e : r ≃r s,	f : r ≺i t,	g : s ≺i t	⊢ f.top = g.top
α : Type u_1,	β : Type u_2,	γ : Type u_3,	r : α → α → Prop,	s : β → β → Prop,	t : γ → γ → Prop,	_inst_1 : is_well_order γ t,	e : r ≃r s,	f : r ≺i t,	g : s ≺i t	⊢ (principal_seg.equiv_lt e g).top = g.top
m n : ℕ	⊢ ↑(m * n) = ↑m * ↑n
m : ℕ	⊢ ↑(m * 0) = ↑m * ↑0
m n : ℕ	⊢ ↑(m * n) = ↑m * ↑n
m n : ℕ,	IH : ↑(m * n) = ↑m * ↑n	⊢ ↑(m * n.succ) = ↑m * ↑(n.succ)
a b : ordinal	⊢ a * (b + 1) = a * b + a
f : ordinal → ordinal,	H : ordinal.is_normal f,	ι : Type u_1,	g : ι → ordinal,	h : nonempty ι,	a : ordinal	⊢ f (ordinal.sup g) ≤ a ↔ ordinal.sup (f ∘ g) ≤ a
f : ordinal → ordinal,	H : ordinal.is_normal f,	ι : Type u_1,	g : ι → ordinal,	h : nonempty ι,	a : ordinal	⊢ f (ordinal.sup g) ≤ a ↔ ordinal.sup (f ∘ g) ≤ a
f : ordinal → ordinal,	H : ordinal.is_normal f,	ι : Type u_1,	g : ι → ordinal,	h : nonempty ι,	a : ordinal	⊢ f (ordinal.sup g) ≤ a ↔ ordinal.sup (f ∘ g) ≤ a
f : ordinal → ordinal,	H : ordinal.is_normal f,	ι : Type u_1,	g : ι → ordinal,	h : nonempty ι,	a : ordinal	⊢ (∀ (a_1 : ι), (λ (_x : ι), true) a_1 → f (g a_1) ≤ a) ↔ ∀ (i : ι), (λ (x : ι), f (g x)) i ≤ a
f : ordinal → ordinal,	H : ordinal.is_normal f,	ι : Type u_1,	g : ι → ordinal,	h : nonempty ι,	a : ordinal,	o : ordinal	⊢ ordinal.sup g ≤ o ↔ ∀ (a : ι), (λ (_x : ι), true) a → g a ≤ o
f : ordinal → ordinal,	H : ordinal.is_normal f,	ι : Type u_1,	g : ι → ordinal,	h : nonempty ι,	a : ordinal	⊢ (∀ (a_1 : ι), (λ (_x : ι), true) a_1 → f (g a_1) ≤ a) ↔ ∀ (i : ι), (λ (x : ι), f (g x)) i ≤ a
f : ordinal → ordinal,	H : ordinal.is_normal f,	ι : Type u_1,	g : ι → ordinal,	h : nonempty ι,	a : ordinal	⊢ ∀ (o : ordinal), ordinal.sup g ≤ o ↔ ∀ (a : ι), (λ (_x : ι), true) a → g a ≤ o
o : onote,	b : ordinal,	h : o.NF_below b	⊢ o.repr < ω ^ b
o : onote,	b h : ordinal	⊢ 0.repr < ω ^ h		case onote.NF_below.oadd'	o : onote,	b : ordinal,	e : onote,	n : ℕ+,	a : onote,	eb b : ordinal,	h₁ : e.NF_below eb,	h₂ : a.NF_below e.repr,	h₃ : e.repr < b,	h_ih_ᾰ : e.repr < ω ^ eb,	IH : a.repr < ω ^ e.repr	⊢ (e.oadd n a).repr < ω ^ b
o : onote,	b h : ordinal	⊢ 0.repr < ω ^ h
o : onote,	b : ordinal,	e : onote,	n : ℕ+,	a : onote,	eb b : ordinal,	h₁ : e.NF_below eb,	h₂ : a.NF_below e.repr,	h₃ : e.repr < b,	h_ih_ᾰ : e.repr < ω ^ eb,	IH : a.repr < ω ^ e.repr	⊢ (e.oadd n a).repr < ω ^ b
o : onote,	b : ordinal,	e : onote,	n : ℕ+,	a : onote,	eb b : ordinal,	h₁ : e.NF_below eb,	h₂ : a.NF_below e.repr,	h₃ : e.repr < b,	h_ih_ᾰ : e.repr < ω ^ eb,	IH : a.repr < ω ^ e.repr	⊢ ω ^ e.repr * ↑n + a.repr < ω ^ b
o : onote,	b : ordinal,	e : onote,	n : ℕ+,	a : onote,	eb b : ordinal,	h₁ : e.NF_below eb,	h₂ : a.NF_below e.repr,	h₃ : e.repr < b,	h_ih_ᾰ : e.repr < ω ^ eb,	IH : a.repr < ω ^ e.repr	⊢ ω ^ e.repr * ↑n + ω ^ e.repr ≤ ω ^ b
o : onote,	b : ordinal,	e : onote,	n : ℕ+,	a : onote,	eb b : ordinal,	h₁ : e.NF_below eb,	h₂ : a.NF_below e.repr,	h₃ : e.repr < b,	h_ih_ᾰ : e.repr < ω ^ eb,	IH : a.repr < ω ^ e.repr	⊢ ω ^ e.repr * ↑n.succ ≤ ω ^ b
o : onote,	b : ordinal,	e : onote,	n : ℕ+,	a : onote,	eb b : ordinal,	h₁ : e.NF_below eb,	h₂ : a.NF_below e.repr,	h₃ : e.repr < b,	h_ih_ᾰ : e.repr < ω ^ eb,	IH : a.repr < ω ^ e.repr	⊢ ω ^ e.repr * ω ≤ ω ^ b
o : onote,	b : ordinal,	e : onote,	n : ℕ+,	a : onote,	eb b : ordinal,	h₁ : e.NF_below eb,	h₂ : a.NF_below e.repr,	h₃ : e.repr < b,	h_ih_ᾰ : e.repr < ω ^ eb,	IH : a.repr < ω ^ e.repr	⊢ ω ^ e.repr.succ ≤ ω ^ b
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	NF_power_aux : ∀ (k m : ℕ), onote.NF (e.power_aux a0 a k m),	k : ℕ	⊢ onote.NF (e.power_aux a0 a k 0)
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	NF_power_aux : ∀ (k m : ℕ), onote.NF (e.power_aux a0 a k m),	k : ℕ	⊢ onote.NF (e.power_aux a0 a k 0)
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	NF_power_aux : ∀ (k m : ℕ), onote.NF (e.power_aux a0 a k m)	⊢ onote.NF (e.power_aux a0 a 0 0)
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	NF_power_aux : ∀ (k m : ℕ), onote.NF (e.power_aux a0 a k m),	k : ℕ	⊢ onote.NF (e.power_aux a0 a k.succ 0)
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	NF_power_aux : ∀ (k m : ℕ), onote.NF (e.power_aux a0 a k m),	k m : ℕ	⊢ onote.NF (e.power_aux a0 a (k + 1) (m + 1))
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	NF_power_aux : ∀ (k m : ℕ), onote.NF (e.power_aux a0 a k m),	k m : ℕ	⊢ onote.NF (e.power_aux a0 a (k + 1) (m + 1))
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	NF_power_aux : ∀ (k m : ℕ), onote.NF (e.power_aux a0 a k m),	k m : ℕ	⊢ onote.NF (e.power_aux a0 a (k + 1) (m + 1))
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	NF_power_aux : ∀ (k m : ℕ), onote.NF (e.power_aux a0 a k m),	k m : ℕ,	_inst : ∀ (m : ℕ), onote.NF (e.power_aux a0 a k m)	⊢ onote.NF ((e + a0 * onote.of_nat k).scale a + e.power_aux a0 a k (m + 1))
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	NF_power_aux : ∀ (k m : ℕ), onote.NF (e.power_aux a0 a k m),	k m : ℕ,	_inst : ∀ (m : ℕ), onote.NF (e.power_aux a0 a k m)	⊢ onote.NF (e.power_aux a0 a (k + 1) (m + 1))
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	scale_power_aux : ∀ (k m : ℕ), (e.power_aux a0 a k m).repr = ω ^ e.repr * (0.power_aux a0 a k m).repr,	m : ℕ	⊢ (e.power_aux a0 a 0 m).repr = ω ^ e.repr * (0.power_aux a0 a 0 m).repr
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	scale_power_aux : ∀ (k m : ℕ), (e.power_aux a0 a k m).repr = ω ^ e.repr * (0.power_aux a0 a k m).repr,	m : ℕ	⊢ (e.power_aux a0 a 0 m).repr = ω ^ e.repr * (0.power_aux a0 a 0 m).repr
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	scale_power_aux : ∀ (k m : ℕ), (e.power_aux a0 a k m).repr = ω ^ e.repr * (0.power_aux a0 a k m).repr	⊢ (e.power_aux a0 a 0 0).repr = ω ^ e.repr * (0.power_aux a0 a 0 0).repr
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	scale_power_aux : ∀ (k m : ℕ), (e.power_aux a0 a k m).repr = ω ^ e.repr * (0.power_aux a0 a k m).repr,	m : ℕ	⊢ (e.power_aux a0 a 0 m.succ).repr = ω ^ e.repr * (0.power_aux a0 a 0 m.succ).repr
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	scale_power_aux : ∀ (k m : ℕ), (e.power_aux a0 a k m).repr = ω ^ e.repr * (0.power_aux a0 a k m).repr,	k m : ℕ	⊢ (e.power_aux a0 a (k + 1) m).repr = ω ^ e.repr * (0.power_aux a0 a (k + 1) m).repr
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	scale_power_aux : ∀ (k m : ℕ), (e.power_aux a0 a k m).repr = ω ^ e.repr * (0.power_aux a0 a k m).repr,	k m : ℕ	⊢ (e.power_aux a0 a (k + 1) m).repr = ω ^ e.repr * (0.power_aux a0 a (k + 1) m).repr
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	scale_power_aux : ∀ (k m : ℕ), (e.power_aux a0 a k m).repr = ω ^ e.repr * (0.power_aux a0 a k m).repr,	k m : ℕ,	h : m = 0	⊢ (e.power_aux a0 a (k + 1) m).repr = ω ^ e.repr * (0.power_aux a0 a (k + 1) m).repr
e a0 a : onote,	_inst_1 : onote.NF e,	_inst_2 : onote.NF a0,	_inst_3 : onote.NF a,	scale_power_aux : ∀ (k m : ℕ), (e.power_aux a0 a k m).repr = ω ^ e.repr * (0.power_aux a0 a k m).repr,	k m : ℕ,	h : ¬m = 0	⊢ (e.power_aux a0 a (k + 1) m).repr = ω ^ e.repr * (0.power_aux a0 a (k + 1) m).repr
le_refl : ∀ (x : pgame), x ≤ x,	l r : Type ?,	L : l → pgame,	R : r → pgame	⊢ pgame.mk l r L R ≤ pgame.mk l r L R
le_refl : ∀ (x : pgame), x ≤ x,	l r : Type ?,	L : l → pgame,	R : r → pgame	⊢ pgame.mk l r L R ≤ pgame.mk l r L R
le_refl : ∀ (x : pgame), x ≤ x,	l r : Type ?,	L : l → pgame,	R : r → pgame	⊢ (∀ (i : l), L i < pgame.mk l r L R) ∧ ∀ (j : r), pgame.mk l r L R < R j
x : pgame,	o : x.numeric,	j : x.right_moves	⊢ (x.move_right j).numeric
xl xr : Type u_1,	xL : xl → pgame,	xR : xr → pgame,	o : (pgame.mk xl xr xL xR).numeric,	j : (pgame.mk xl xr xL xR).right_moves	⊢ ((pgame.mk xl xr xL xR).move_right j).numeric
g : Type,	_inst_1 : random_gen g,	n : ℕ,	x y : bitvec n,	h : x ≤ y	⊢ ∀ (a : fin (2 ^ n)), x.to_fin ≤ a → a ≤ y.to_fin → x ≤ bitvec.of_fin a ∧ bitvec.of_fin a ≤ y
g : Type,	_inst_1 : random_gen g,	n : ℕ,	x y : bitvec n,	h : x ≤ y	⊢ ∀ (a : fin (2 ^ n)), a ∈ (x.to_fin .. y.to_fin) → bitvec.of_fin a ∈ (x .. y)
g : Type,	_inst_1 : random_gen g,	n : ℕ,	x y : bitvec n,	h : x ≤ y,	z : fin (2 ^ n),	h₀ : x.to_fin ≤ z,	h₁ : z ≤ y.to_fin	⊢ x ≤ bitvec.of_fin z ∧ bitvec.of_fin z ≤ y
g : Type,	_inst_1 : random_gen g,	n : ℕ,	x y : bitvec n,	h : x ≤ y,	z : fin (2 ^ n),	h₁ : z ≤ y.to_fin,	h₀ : bitvec.of_fin x.to_fin ≤ bitvec.of_fin z	⊢ x ≤ bitvec.of_fin z ∧ bitvec.of_fin z ≤ y
g : Type,	_inst_1 : random_gen g,	n : ℕ,	x y : bitvec n,	h : x ≤ y,	z : fin (2 ^ n),	h₁ : bitvec.of_fin z ≤ y,	h₀ : x ≤ bitvec.of_fin z	⊢ x ≤ bitvec.of_fin z ∧ bitvec.of_fin z ≤ y
g : Type,	_inst_1 : random_gen g,	n : ℕ,	x y : bitvec n,	h : x ≤ y,	z : fin (2 ^ n),	h₀ : bitvec.of_fin x.to_fin ≤ bitvec.of_fin z,	h₁ : bitvec.of_fin z ≤ bitvec.of_fin y.to_fin	⊢ x ≤ bitvec.of_fin z ∧ bitvec.of_fin z ≤ y
g : Type,	_inst_1 : random_gen g,	n : ℕ,	x y : bitvec n,	h : x ≤ y,	z : fin (2 ^ n),	h₁ : bitvec.of_fin z ≤ y,	h₀ : x ≤ bitvec.of_fin z	⊢ x ≤ bitvec.of_fin z ∧ bitvec.of_fin z ≤ y
g : Type,	_inst_1 : random_gen g,	n : ℕ,	x y : bitvec n,	h : x ≤ y,	z : fin (2 ^ n),	h₁ : bitvec.of_fin z ≤ y,	h₀ : x ≤ bitvec.of_fin z	⊢ x ≤ bitvec.of_fin z
g : Type,	_inst_1 : random_gen g,	n : ℕ,	x y : bitvec n,	h : x ≤ y,	z : fin (2 ^ n),	h₁ : bitvec.of_fin z ≤ y,	h₀ : x ≤ bitvec.of_fin z	⊢ bitvec.of_fin z ≤ y
α : Type u_1,	_inst_1 : add_comm_monoid α,	l : ℕ,	r : α,	tl : ℕ,	tr t : α,	prl : l = tl,	prr : r = tr,	prt : tactic.abel.smul tl tr = t	⊢ tactic.abel.smul l r = t
x y : unit	⊢ x = y
y : unit	⊢ punit.star = y
⊢ punit.star = punit.star
x y : punit	⊢ x = y
y : punit	⊢ punit.star = y
α : Type u_1,	_inst_1 : ordered_semiring α,	a b : α,	ha : a ≤ 0,	hb : b = 0	⊢ a + b ≤ 0
n : ℕ	⊢ tactic.norm_fin.normalize_fin (n + 1) 0 0
n : ℕ	⊢ 0.val = 0 % (n + 1)
n : ℕ,	a : fin n,	a' b : ℕ,	h : tactic.norm_fin.normalize_fin_lt n a a',	e : a' + 1 = b	⊢ tactic.norm_fin.normalize_fin_lt n.succ a.succ b
a b c : ℤ,	p : Prop,	h₁ : b % a = c,	h₂ : c = 0 = p	⊢ a ∣ b ↔ c = 0
α : Type u_1,	_inst_1 : division_ring α,	a b b' c d : α,	h₀ : b ≠ 0,	h₁ : b * b' = d,	h₂ : a * b' = c	⊢ a / b * d = c
α : Type u_1,	_inst_1 : has_add α,	l r tl tr t : α,	prl : l = tl,	prr : r = tr,	prt : tl + tr = t	⊢ l + r = t
v : ℕ → ℤ,	is js : list ℤ	⊢ omega.coeffs.val v (list.func.add is js) = omega.coeffs.val v is + omega.coeffs.val v js
v : ℕ → ℤ,	is js : list ℤ	⊢ omega.coeffs.val_between v is 0 (list.func.add is js).length + omega.coeffs.val_between v js 0 (list.func.add is js).length = omega.coeffs.val_between v is 0 is.length + omega.coeffs.val_between v js 0 js.length
v : ℕ → ℤ,	is js : list ℤ	⊢ omega.coeffs.val_between v is 0 (list.func.add is js).length + omega.coeffs.val_between v js 0 (list.func.add is js).length = omega.coeffs.val_between v is 0 is.length + omega.coeffs.val_between v js 0 js.length
v : ℕ → ℤ,	is js : list ℤ	⊢ omega.coeffs.val_between v is 0 (list.func.add is js).length + omega.coeffs.val_between v js 0 (list.func.add is js).length = omega.coeffs.val_between v is 0 is.length + omega.coeffs.val_between v js 0 js.length
v : ℕ → ℤ,	is js : list ℤ	⊢ omega.coeffs.val_between v (list.func.add is js) 0 (list.func.add is js).length = omega.coeffs.val_between v is 0 is.length + omega.coeffs.val_between v js 0 js.length
v : ℕ → ℤ,	is js : list ℤ	⊢ omega.coeffs.val_between v is 0 (list.func.add is js).length = omega.coeffs.val_between v is 0 is.length
v : ℕ → ℤ,	is js : list ℤ	⊢ omega.coeffs.val_between v js 0 (list.func.add is js).length = omega.coeffs.val_between v js 0 js.length
v : ℕ → ℤ,	is js : list ℤ	⊢ is.length ≤ 0 + (list.func.add is js).length
v : ℕ → ℤ,	is js : list ℤ	⊢ js.length ≤ 0 + (list.func.add is js).length
v : ℕ → ℤ,	is js : list ℤ	⊢ js.length ≤ linear_order.max is.length js.length
v : ℕ → ℤ,	is js : list ℤ	⊢ is.length ≤ linear_order.max is.length js.length		v : ℕ → ℤ,	is js : list ℤ	⊢ js.length ≤ linear_order.max is.length js.length
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	h1 : as.length ≤ l + 0	⊢ as.length ≤ l
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	h1 : as.length ≤ l + 0	⊢ omega.coeffs.val_between v as l 0 = omega.coeffs.val_between v as l (as.length - l)
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length = l + (m + 1) ∨ as.length < l + (m + 1)	⊢ omega.coeffs.val_between v as l (m + 1) = omega.coeffs.val_between v as l (as.length - l)
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length ≤ l + (m + 1)	⊢ omega.coeffs.val_between v as l (m + 1) = omega.coeffs.val_between v as l (as.length - l)
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length = l + (m + 1)	⊢ omega.coeffs.val_between v as l (m + 1) = omega.coeffs.val_between v as l (as.length - l)		case or.inr	v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length < l + (m + 1)	⊢ omega.coeffs.val_between v as l (m + 1) = omega.coeffs.val_between v as l (as.length - l)
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length = l + (m + 1)	⊢ omega.coeffs.val_between v as l (m + 1) = omega.coeffs.val_between v as l (as.length - l)
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length < l + (m + 1)	⊢ omega.coeffs.val_between v as l (m + 1) = omega.coeffs.val_between v as l (as.length - l)
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length < l + (m + 1)	⊢ as.length < (l + m).succ
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length < l + (m + 1)	⊢ as.length ≤ l + m		v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length < l + (m + 1),	h2 : as.length ≤ l + m	⊢ omega.coeffs.val_between v as l (m + 1) = omega.coeffs.val_between v as l (as.length - l)
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length < l + (m + 1)	⊢ as.length ≤ l + m
v : ℕ → ℤ,	as : list ℤ,	l : ℕ,	val_between_eq_of_le : ∀ (m : ℕ), as.length ≤ l + m → omega.coeffs.val_between v as l m = omega.coeffs.val_between v as l (as.length - l),	m : ℕ,	h1 : as.length < l + (m + 1),	h2 : as.length ≤ l + m	⊢ omega.coeffs.val_between v as l (m + 1) = omega.coeffs.val_between v as l (as.length - l)
i : ℤ	⊢ 0 < i → omega.symmod i (i + 1) = -1
i : ℤ,	h1 : 0 < i	⊢ omega.symmod i (i + 1) = -1
i : ℤ,	h1 : 0 < i	⊢ ite (2 * (i % (i + 1)) < i + 1) (i % (i + 1)) (i % (i + 1) - (i + 1)) = -1
i : ℤ,	h1 : 0 < i	⊢ i - (i + 1) = -1		i : ℤ,	h1 : 0 < i	⊢ ¬2 * i < i + 1
i : ℤ,	h1 : 0 < i	⊢ ¬2 * i < i + 1
i : ℤ,	h1 : 0 < i,	h2 : 2 * i = (1 + 1) * i	⊢ ¬2 * i < i + 1
has_reflect : _root_.has_reflect tactic.rcases_patt,	l : listΠ tactic.rcases_patt	⊢ reflected l
has_reflect : _root_.has_reflect tactic.rcases_patt,	l : listΠ tactic.rcases_patt,	_inst : _root_.has_reflect tactic.rcases_patt	⊢ reflected l
has_reflect : _root_.has_reflect tactic.rcases_patt,	l : listΠ tactic.rcases_patt	⊢ reflected l
has_reflect : _root_.has_reflect tactic.rcases_patt,	l : listΣ tactic.rcases_patt	⊢ reflected l
has_reflect : _root_.has_reflect tactic.rcases_patt,	l : listΣ tactic.rcases_patt,	_inst : _root_.has_reflect tactic.rcases_patt	⊢ reflected l
has_reflect : _root_.has_reflect tactic.rcases_patt,	l : listΣ tactic.rcases_patt	⊢ reflected l
α : Type u_1,	_inst_1 : comm_semiring α,	a₁ x : α,	n₁ : ℕ,	b₁ a₂ : α,	n₂ : ℕ,	b₂ aa haa ab bb t : α,	h₁ : tactic.ring.horner a₁ x n₁ b₁ * a₂ = aa,	h₂ : tactic.ring.horner aa x n₂ 0 = haa,	h₃ : a₁ * b₂ = ab,	h₄ : b₁ * b₂ = bb,	H : haa + tactic.ring.horner ab x n₁ bb = t	⊢ tactic.ring.horner a₁ x n₁ b₁ * tactic.ring.horner a₂ x n₂ b₂ = t
α : Type u_1,	_inst_1 : comm_semiring α,	a₁ x : α,	n₁ : ℕ,	b₁ a₂ : α,	n₂ : ℕ,	b₂ aa haa ab bb t : α,	h₁ : tactic.ring.horner a₁ x n₁ b₁ * a₂ = aa,	h₂ : tactic.ring.horner aa x n₂ 0 = haa,	h₃ : a₁ * b₂ = ab,	h₄ : b₁ * b₂ = bb,	H : haa + tactic.ring.horner ab x n₁ bb = t	⊢ tactic.ring.horner a₁ x n₁ b₁ * tactic.ring.horner a₂ x n₂ b₂ = t
α : Type u_1,	_inst_1 : comm_semiring α,	a₁ x : α,	n₁ : ℕ,	b₁ a₂ : α,	n₂ : ℕ,	b₂ aa haa ab bb t : α,	h₁ : tactic.ring.horner a₁ x n₁ b₁ * a₂ = aa,	h₂ : tactic.ring.horner aa x n₂ 0 = haa,	h₃ : a₁ * b₂ = ab,	h₄ : b₁ * b₂ = bb,	H : haa + tactic.ring.horner ab x n₁ bb = t	⊢ tactic.ring.horner a₁ x n₁ b₁ * tactic.ring.horner a₂ x n₂ b₂ = tactic.ring.horner (tactic.ring.horner a₁ x n₁ b₁ * a₂) x n₂ 0 + tactic.ring.horner (a₁ * b₂) x n₁ (b₁ * b₂)
α : Type u_1,	_inst_1 : comm_semiring α,	a x : α,	n : ℕ,	b : α	⊢ tactic.ring.horner a x n b = x ^ n * a + b
α : Type u,	_inst_1 : comm_semiring α,	ps : α,	qs qs' : ℕ,	ps_pf : ps = 0,	qs_pf : qs = qs'.succ	⊢ ps ^ qs = 0 ^ qs'.succ
α : Type u,	_inst_1 : comm_semiring α,	pps p : α,	ps qs psqs : ℕ,	pps_pf : pps = p ^ ps,	psqs_pf : ps * qs = psqs	⊢ pps ^ qs = (p ^ ps) ^ qs
α : Type u,	_inst_1 : comm_semiring α,	pps p : α,	ps qs psqs : ℕ,	pps_pf : pps = p ^ ps,	psqs_pf : ps * qs = psqs	⊢ p ^ (ps * qs) = p ^ psqs
α : Type u,	_inst_1 : has_sizeof α,	xs ys ys' : list α,	h : sizeof ys < sizeof ys'	⊢ sizeof (xs ++ ys) < sizeof (xs ++ ys')
α : Type u,	_inst_1 : has_sizeof α,	ys ys' : list α,	h : sizeof ys < sizeof ys'	⊢ sizeof (list.nil ++ ys) < sizeof (list.nil ++ ys')		case list.cons	α : Type u,	_inst_1 : has_sizeof α,	ys ys' : list α,	h : sizeof ys < sizeof ys',	xs_hd : α,	xs_tl : list α,	xs_ih : sizeof (xs_tl ++ ys) < sizeof (xs_tl ++ ys')	⊢ sizeof (xs_hd :: xs_tl ++ ys) < sizeof (xs_hd :: xs_tl ++ ys')
α : Type u,	_inst_1 : has_sizeof α,	ys ys' : list α,	h : sizeof ys < sizeof ys'	⊢ sizeof (list.nil ++ ys) < sizeof (list.nil ++ ys')
α : Type u,	_inst_1 : has_sizeof α,	ys ys' : list α,	h : sizeof ys < sizeof ys',	xs_hd : α,	xs_tl : list α,	xs_ih : sizeof (xs_tl ++ ys) < sizeof (xs_tl ++ ys')	⊢ sizeof (xs_hd :: xs_tl ++ ys) < sizeof (xs_hd :: xs_tl ++ ys')
α : Type u,	_inst_1 : has_sizeof α,	ys ys' : list α,	h : sizeof ys < sizeof ys',	xs_hd : α,	xs_tl : list α,	xs_ih : sizeof (xs_tl ++ ys) < sizeof (xs_tl ++ ys')	⊢ (xs_hd :: (xs_tl ++ ys)).sizeof < (xs_hd :: (xs_tl ++ ys')).sizeof
α : Type u,	_inst_1 : has_sizeof α,	ys ys' : list α,	h : sizeof ys < sizeof ys',	xs_hd : α,	xs_tl : list α,	xs_ih : sizeof (xs_tl ++ ys) < sizeof (xs_tl ++ ys')	⊢ (xs_tl ++ ys).sizeof < (xs_tl ++ ys').sizeof
x _p : ℕ,	_do_match : ℕ → slim_check.gen {y // x < y},	y : ℕ	⊢ x < x + y + 1
α : Type u_1,	_inst_1 : topological_space α,	s t : set α,	hs : is_Gδ s,	ht : is_Gδ t	⊢ is_Gδ (s ∪ t)
α : Type u_1,	_inst_1 : topological_space α,	t : set α,	ht : is_Gδ t,	S : set (set α),	Sopen : ∀ (t : set α), t ∈ S → is_open t,	Scount : S.countable	⊢ is_Gδ (⋂₀ S ∪ t)
α : Type u_1,	_inst_1 : topological_space α,	S : set (set α),	Sopen : ∀ (t : set α), t ∈ S → is_open t,	Scount : S.countable,	T : set (set α),	Topen : ∀ (t : set α), t ∈ T → is_open t,	Tcount : T.countable	⊢ is_Gδ (⋂₀ S ∪ ⋂₀ T)
α : Type u_1,	_inst_1 : topological_space α,	S : set (set α),	Sopen : ∀ (t : set α), t ∈ S → is_open t,	Scount : S.countable,	T : set (set α),	Topen : ∀ (t : set α), t ∈ T → is_open t,	Tcount : T.countable	⊢ is_Gδ (⋂ (p : set α × set α) (H : p ∈ S.prod T), p.fst ∪ p.snd)
α : Type u_1,	_inst_1 : topological_space α,	S : set (set α),	Sopen : ∀ (t : set α), t ∈ S → is_open t,	Scount : S.countable,	T : set (set α),	Topen : ∀ (t : set α), t ∈ T → is_open t,	Tcount : T.countable	⊢ ∀ (i : set α × set α), i ∈ S.prod T → is_open (i.fst ∪ i.snd)
α : Type u_1,	_inst_1 : topological_space α,	S : set (set α),	Sopen : ∀ (t : set α), t ∈ S → is_open t,	Scount : S.countable,	T : set (set α),	Topen : ∀ (t : set α), t ∈ T → is_open t,	Tcount : T.countable,	a b : set α,	hab : (a, b) ∈ S.prod T	⊢ is_open ((a, b).fst ∪ (a, b).snd)
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : (filter.cocompact X).ne_bot	⊢ dense_range coe
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : (filter.cocompact X).ne_bot	⊢ dense {∞}ᶜ
G : Type w,	_inst_1 : add_group_with_zero_nhd G,	a : G	⊢ continuous_at (λ (a : G), -a) a
G : Type w,	_inst_1 : add_group_with_zero_nhd G,	a : G	⊢ filter.tendsto ((λ (a : G), -a) ∘ λ (x : G), x + a) (Z G) (filter.map (λ (x : G), x + -a) (Z G))
G : Type w,	_inst_1 : add_group_with_zero_nhd G,	a : G,	this : filter.tendsto ((λ (x : G), x - a) ∘ λ (x : G), -x) (Z G) (filter.map (λ (x : G), x - a) (Z G))	⊢ filter.tendsto ((λ (a : G), -a) ∘ λ (x : G), x + a) (Z G) (filter.map (λ (x : G), x + -a) (Z G))		G : Type w,	_inst_1 : add_group_with_zero_nhd G,	a : G	⊢ filter.tendsto ((λ (x : G), x - a) ∘ λ (x : G), -x) (Z G) (filter.map (λ (x : G), x - a) (Z G))
G : Type w,	_inst_1 : add_group_with_zero_nhd G,	a : G,	this : filter.tendsto ((λ (x : G), x - a) ∘ λ (x : G), -x) (Z G) (filter.map (λ (x : G), x - a) (Z G))	⊢ filter.tendsto ((λ (a : G), -a) ∘ λ (x : G), x + a) (Z G) (filter.map (λ (x : G), x + -a) (Z G))
G : Type w,	_inst_1 : add_group_with_zero_nhd G,	a : G	⊢ filter.tendsto ((λ (x : G), x - a) ∘ λ (x : G), -x) (Z G) (filter.map (λ (x : G), x - a) (Z G))
α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_monoid α,	_inst_2 : topological_space α,	_inst_3 : has_continuous_add α,	_inst_4 : regular_space α,	γ : β → Type u_3,	f : (Σ (b : β), γ b) → α,	g : β → α,	a : α,	ha : has_sum g a,	hf : ∀ (b : β), has_sum (λ (c : γ b), f ⟨b, c⟩) (g b),	hf' : summable f	⊢ has_sum f a
α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_monoid α,	_inst_2 : topological_space α,	_inst_3 : t2_space α,	P : Prop,	_inst_4 : decidable P,	x : β → ¬P → α	⊢ ∑' (b : β), dite P (λ (h : P), 0) (λ (h : ¬P), x b h) = dite P (λ (h : P), 0) (λ (h : ¬P), ∑' (b : β), x b h)
α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_monoid α,	_inst_2 : topological_space α,	_inst_3 : t2_space α,	P : Prop,	_inst_4 : decidable P,	x : β → ¬P → α,	hP : P	⊢ ∑' (b : β), dite P (λ (h : P), 0) (λ (h : ¬P), x b h) = dite P (λ (h : P), 0) (λ (h : ¬P), ∑' (b : β), x b h)
α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_monoid α,	_inst_2 : topological_space α,	_inst_3 : t2_space α,	P : Prop,	_inst_4 : decidable P,	x : β → ¬P → α,	hP : ¬P	⊢ ∑' (b : β), dite P (λ (h : P), 0) (λ (h : ¬P), x b h) = dite P (λ (h : P), 0) (λ (h : ¬P), ∑' (b : β), x b h)
α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_monoid α,	_inst_2 : topological_space α,	_inst_3 : t2_space α,	P : Prop,	_inst_4 : decidable P,	x : β → ¬P → α	⊢ ∑' (b : β), dite P (λ (h : P), 0) (λ (h : ¬P), x b h) = dite P (λ (h : P), 0) (λ (h : ¬P), ∑' (b : β), x b h)
α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_group α,	_inst_2 : topological_space α,	_inst_3 : topological_add_group α,	f : β → α,	a : α,	_inst_4 : decidable_eq β,	hf : has_sum f a,	b : β	⊢ has_sum (λ (n : β), ite (n = b) 0 (f n)) (a - f b)
α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_group α,	_inst_2 : topological_space α,	_inst_3 : topological_add_group α,	f : β → α,	a : α,	_inst_4 : decidable_eq β,	hf : has_sum f a,	b n : β	⊢ ite (n = b) 0 (f n) = function.update f b 0 n
α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_group α,	_inst_2 : topological_space α,	_inst_3 : topological_add_group α,	f : β → α,	a : α,	_inst_4 : decidable_eq β,	hf : has_sum f a,	b : β	⊢ (λ (n : β), ite (n = b) 0 (f n)) = function.update f b 0		α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_group α,	_inst_2 : topological_space α,	_inst_3 : topological_add_group α,	f : β → α,	a : α,	_inst_4 : decidable_eq β,	hf : has_sum f a,	b : β	⊢ a - f b = 0 - f b + a
α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_group α,	_inst_2 : topological_space α,	_inst_3 : topological_add_group α,	f : β → α,	a : α,	_inst_4 : decidable_eq β,	hf : has_sum f a,	b : β	⊢ (λ (n : β), ite (n = b) 0 (f n)) = function.update f b 0
α : Type u_1,	β : Type u_2,	_inst_1 : add_comm_group α,	_inst_2 : topological_space α,	_inst_3 : topological_add_group α,	f : β → α,	a : α,	_inst_4 : decidable_eq β,	hf : has_sum f a,	b : β	⊢ a - f b = 0 - f b + a
α : Type u_1,	β : Type u_2,	_inst_1 : canonically_ordered_add_monoid α,	_inst_2 : topological_space α,	_inst_3 : order_closed_topology α,	f : β → α,	hf : summable f	⊢ ∑' (i : β), f i = 0 ↔ ∀ (x : β), f x = 0
R : Type u_1,	_inst_1 : semiring R,	M : Type u_2,	_inst_2 : topological_space M,	_inst_3 : add_comm_monoid M,	M₂ : Type u_3,	_inst_4 : topological_space M₂,	_inst_5 : add_comm_monoid M₂,	M₃ : Type u_4,	_inst_6 : topological_space M₃,	_inst_7 : add_comm_monoid M₃,	_inst_10 : module R M,	_inst_11 : module R M₂,	_inst_12 : module R M₃,	_inst_14 : has_continuous_add M₃,	g₁ g₂ : M₂ →L[R] M₃,	f : M →L[R] M₂,	x : M	⊢ ⇑((g₁ + g₂).comp f) x = ⇑(g₁.comp f + g₂.comp f) x
R : Type u_1,	_inst_1 : semiring R,	M : Type u_2,	_inst_2 : topological_space M,	_inst_3 : add_comm_monoid M,	M₂ : Type u_3,	_inst_4 : topological_space M₂,	_inst_5 : add_comm_monoid M₂,	M₃ : Type u_4,	_inst_6 : topological_space M₃,	_inst_7 : add_comm_monoid M₃,	_inst_10 : module R M,	_inst_11 : module R M₂,	_inst_12 : module R M₃,	_inst_14 : has_continuous_add M₃,	g₁ g₂ : M₂ →L[R] M₃,	f : M →L[R] M₂	⊢ (g₁ + g₂).comp f = g₁.comp f + g₂.comp f
R : Type u_1,	_inst_1 : semiring R,	M : Type u_2,	_inst_2 : topological_space M,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	ι : Type u_4,	φ : ι → Type u_5,	_inst_8 : Π (i : ι), topological_space (φ i),	_inst_9 : Π (i : ι), add_comm_monoid (φ i),	_inst_10 : Π (i : ι), module R (φ i),	f : Π (i : ι), M →L[R] φ i	⊢ (∀ (x : M) (a : ι), ⇑(f a) x = ⇑0 x a) ↔ ∀ (i : ι) (x : M), ⇑(f i) x = ⇑0 x
R : Type u_1,	_inst_1 : semiring R,	M : Type u_2,	_inst_2 : topological_space M,	_inst_3 : add_comm_monoid M,	_inst_4 : module R M,	ι : Type u_4,	φ : ι → Type u_5,	_inst_8 : Π (i : ι), topological_space (φ i),	_inst_9 : Π (i : ι), add_comm_monoid (φ i),	_inst_10 : Π (i : ι), module R (φ i),	f : Π (i : ι), M →L[R] φ i	⊢ continuous_linear_map.pi f = 0 ↔ ∀ (i : ι), f i = 0
R : Type u_1,	S : Type u_2,	_inst_1 : semiring R,	_inst_2 : semiring S,	_inst_3 : topological_space S,	M : Type u_3,	_inst_4 : topological_space M,	_inst_5 : add_comm_monoid M,	_inst_6 : module R M,	M₂ : Type u_4,	_inst_7 : topological_space M₂,	_inst_8 : add_comm_monoid M₂,	_inst_9 : module R M₂,	_inst_16 : module S M₂,	_inst_17 : has_continuous_smul S M₂,	_inst_18 : smul_comm_class R S M₂,	_inst_19 : has_continuous_add M₂,	_x : M →L[R] M₂,	_x : M	⊢ ⇑(1 • _x) _x = ⇑_x _x
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a u' : α,	s : set α,	hu' : a < u'	⊢ auto_param ([s ∈ 𝓝[set.Ici a] a, s ∈ 𝓝[set.Icc a u'] a, s ∈ 𝓝[set.Ico a u'] a, ∃ (u : α) (H : u ∈ set.Ioc a u'), set.Ico a u ⊆ s, ∃ (u : α) (H : u ∈ set.Ioi a), set.Ico a u ⊆ s].nth 0 = option.some (s ∈ 𝓝[set.Ici a] a)) (name.mk_string "refl" (name.mk_string "interactive" (name.mk_string "tactic" name.anonymous)))
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a u' : α,	s : set α,	hu' : a < u'	⊢ auto_param ([s ∈ 𝓝[set.Ici a] a, s ∈ 𝓝[set.Icc a u'] a, s ∈ 𝓝[set.Ico a u'] a, ∃ (u : α) (H : u ∈ set.Ioc a u'), set.Ico a u ⊆ s, ∃ (u : α) (H : u ∈ set.Ioi a), set.Ico a u ⊆ s].nth 3 = option.some (∃ (u : α) (H : u ∈ set.Ioc a u'), set.Ico a u ⊆ s)) (name.mk_string "refl" (name.mk_string "interactive" (name.mk_string "tactic" name.anonymous)))
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α	⊢ [s ∈ 𝓝[set.Iic b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ioc a b] b, ∃ (l : α) (H : l ∈ set.Ico a b), set.Ioc l b ⊆ s, ∃ (l : α) (H : l ∈ set.Iio b), set.Ioc l b ⊆ s].tfae
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc b a] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α) (H : u ∈ set.Ioc b a), set.Ico b u ⊆ s, ∃ (u : order_dual α) (H : u ∈ set.Ioi b), set.Ico b u ⊆ s].tfae	⊢ [s ∈ 𝓝[set.Iic b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ioc a b] b, ∃ (l : α) (H : l ∈ set.Ico a b), set.Ioc l b ⊆ s, ∃ (l : α) (H : l ∈ set.Iio b), set.Ioc l b ⊆ s].tfae
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc b a] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α), u ∈ set.Ioc b a ∧ set.Ico b u ⊆ s, ∃ (u : order_dual α), u ∈ set.Ioi b ∧ set.Ico b u ⊆ s].tfae	⊢ [s ∈ 𝓝[set.Iic b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ioc a b] b, ∃ (l : α), l ∈ set.Ico a b ∧ set.Ioc l b ⊆ s, ∃ (l : α), l ∈ set.Iio b ∧ set.Ioc l b ⊆ s].tfae
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α), u ∈ set.Ico a b ∧ set.Ico b u ⊆ s, ∃ (u : order_dual α), u ∈ set.Iio b ∧ set.Ico b u ⊆ s].tfae	⊢ [s ∈ 𝓝[set.Iic b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ioc a b] b, ∃ (l : α), l ∈ set.Ico a b ∧ set.Ioc l b ⊆ s, ∃ (l : α), l ∈ set.Iio b ∧ set.Ioc l b ⊆ s].tfae
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α), u ∈ set.Ico a b ∧ set.Ico b u ⊆ s, ∃ (u : order_dual α), u ∈ set.Iio b ∧ set.Ico b u ⊆ s].tfae	⊢ [s ∈ 𝓝[set.Iic b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ioc a b] b, ∃ (l : α), l ∈ set.Ico a b ∧ set.Ioc l b ⊆ s, ∃ (l : α), l ∈ set.Iio b ∧ set.Ioc l b ⊆ s].tfae
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α), u ∈ set.Ico a b ∧ set.Ico b u ⊆ s, ∃ (u : order_dual α), u ∈ set.Iio b ∧ set.Ico b u ⊆ s].tfae	⊢ set.Ioc a b = set.Ico b a
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α), u ∈ set.Ico a b ∧ set.Ico b u ⊆ s, ∃ (u : order_dual α), u ∈ set.Iio b ∧ set.Ico b u ⊆ s].tfae	⊢ (λ (l : α), l ∈ set.Ico a b ∧ set.Ioc l b ⊆ s) = λ (u : order_dual α), u ∈ set.Ico a b ∧ set.Ico b u ⊆ s
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α), u ∈ set.Ico a b ∧ set.Ico b u ⊆ s, ∃ (u : order_dual α), u ∈ set.Iio b ∧ set.Ico b u ⊆ s].tfae	⊢ (λ (l : α), l ∈ set.Iio b ∧ set.Ioc l b ⊆ s) = λ (u : order_dual α), u ∈ set.Iio b ∧ set.Ico b u ⊆ s
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α), u ∈ set.Ico a b ∧ set.Ico b u ⊆ s, ∃ (u : order_dual α), u ∈ set.Iio b ∧ set.Ico b u ⊆ s].tfae,	l : α	⊢ l ∈ set.Ioc a b ↔ l ∈ set.Ico b a
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α), u ∈ set.Ico a b ∧ set.Ico b u ⊆ s, ∃ (u : order_dual α), u ∈ set.Iio b ∧ set.Ico b u ⊆ s].tfae,	l : α	⊢ l ∈ set.Ico a b ∧ set.Ioc l b ⊆ s ↔ l ∈ set.Ico a b ∧ set.Ico b l ⊆ s
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α), u ∈ set.Ico a b ∧ set.Ico b u ⊆ s, ∃ (u : order_dual α), u ∈ set.Iio b ∧ set.Ico b u ⊆ s].tfae,	l : α	⊢ l ∈ set.Iio b ∧ set.Ioc l b ⊆ s ↔ l ∈ set.Iio b ∧ set.Ico b l ⊆ s
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	a b : α,	h : a < b,	s : set α,	this : [s ∈ 𝓝[set.Ici b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ico b a] b, ∃ (u : order_dual α), u ∈ set.Ico a b ∧ set.Ico b u ⊆ s, ∃ (u : order_dual α), u ∈ set.Iio b ∧ set.Ico b u ⊆ s].tfae	⊢ [s ∈ 𝓝[set.Iic b] b, s ∈ 𝓝[set.Icc a b] b, s ∈ 𝓝[set.Ioc a b] b, ∃ (l : α), l ∈ set.Ico a b ∧ set.Ioc l b ⊆ s, ∃ (l : α), l ∈ set.Iio b ∧ set.Ioc l b ⊆ s].tfae
α : Type u,	β : Type v,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	l : filter β,	f g : β → α,	C : α,	hC : 0 < C,	hf : filter.tendsto f l filter.at_top,	hg : filter.tendsto g l (𝓝 C)	⊢ filter.tendsto (λ (x : β), f x * g x) l filter.at_top
α : Type u,	β : Type v,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	l : filter β,	f g : β → α,	C : α,	hC : 0 < C,	hf : filter.tendsto f l filter.at_top,	hg : filter.tendsto g l (𝓝 C)	⊢ (λ (x : β), f x * (C / 2)) ≤ᶠ[l] λ (x : β), f x * g x
α : Type u,	β : Type v,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	l : filter β,	f g : β → α,	C : α,	hC : 0 < C,	hf : filter.tendsto f l filter.at_top,	hg : filter.tendsto g l (𝓝 C)	⊢ ∀ (a : β), C / 2 < g a → 0 ≤ f a → f a * (C / 2) ≤ f a * g a
α : Type u,	β : Type v,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	l : filter β,	f g : β → α,	C : α,	hC : 0 < C,	hf : filter.tendsto f l (𝓝 C),	hg : filter.tendsto g l filter.at_bot	⊢ filter.tendsto (λ (x : β), f x * g x) l filter.at_bot
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0	⊢ filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d) ↔ n = 0 ∧ c = d ∨ n < 0 ∧ d = 0
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d)	⊢ n = 0 ∧ c = d ∨ n < 0 ∧ d = 0
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d),	hn : 0 ≤ n	⊢ n = 0 ∧ c = d ∨ n < 0 ∧ d = 0
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	c d : α,	hc : c ≠ 0,	n : ℕ,	h : filter.tendsto (λ (x : α), c * x ^ ↑n) filter.at_top (𝓝 d)	⊢ ↑n = 0 ∧ c = d ∨ ↑n < 0 ∧ d = 0
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	c d : α,	hc : c ≠ 0,	n : ℕ,	h : filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d)	⊢ ↑n = 0 ∧ c = d ∨ ↑n < 0 ∧ d = 0
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d),	hn : 0 ≤ n	⊢ n = 0 ∧ c = d ∨ n < 0 ∧ d = 0		α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d),	hn : ¬0 ≤ n	⊢ n = 0 ∧ c = d ∨ n < 0 ∧ d = 0
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	c d : α,	hc : c ≠ 0,	n : ℕ,	h : ↑n = 0 ∧ c = d	⊢ ↑n = 0 ∧ c = d ∨ ↑n < 0 ∧ d = 0
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d),	hn : ¬0 ≤ n	⊢ n = 0 ∧ c = d ∨ n < 0 ∧ d = 0
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d),	hn : n < 0	⊢ n = 0 ∧ c = d ∨ n < 0 ∧ d = 0
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d)	⊢ n = 0 ∧ c = d ∨ n < 0 ∧ d = 0		α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : n = 0 ∧ c = d ∨ n < 0 ∧ d = 0	⊢ filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d)
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : n = 0 ∧ c = d ∨ n < 0 ∧ d = 0	⊢ filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d)
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : n = 0 ∧ c = d	⊢ filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d)
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : n = 0 ∧ c = d	⊢ filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d)		case or.inr	α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : n < 0 ∧ d = 0	⊢ filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d)
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : n = 0 ∧ c = d	⊢ filter.tendsto (λ (x : α), d) filter.at_top (𝓝 d)
α : Type u,	_inst_1 : linear_ordered_field α,	_inst_2 : topological_space α,	_inst_3 : order_topology α,	n : ℤ,	c d : α,	hc : c ≠ 0,	h : n < 0 ∧ d = 0	⊢ filter.tendsto (λ (x : α), c * x ^ n) filter.at_top (𝓝 d)
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	_inst_4 : densely_ordered α,	a b : α,	h : a < b	⊢ frontier (set.Ioo a b) = {a, b}
α : Type u,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	_inst_4 : densely_ordered α,	_inst_5 : no_bot_order α,	a b : α,	h : a < b	⊢ frontier (set.Ico a b) = {a, b}
α : Type u,	β : Type v,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : order_topology α,	_inst_4 : densely_ordered α,	a : α,	l : filter β,	f : α → β	⊢ filter.tendsto (λ (x : ↥(set.Iio a)), f ↑x) filter.at_top l ↔ filter.tendsto f (𝓝[set.Iio a] a) l
α : Type u,	β : Type v,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : densely_ordered α,	_inst_4 : order_topology α,	_inst_5 : topological_space β,	_inst_6 : t2_space β,	f : α → β,	a b : α,	la : β,	hab : a < b,	ha : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 la)	⊢ extend_from (set.Ioo a b) f a = la
α : Type u,	β : Type v,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : densely_ordered α,	_inst_4 : order_topology α,	_inst_5 : topological_space β,	_inst_6 : t2_space β,	f : α → β,	a b : α,	la : β,	hab : a < b,	ha : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 la)	⊢ a ∈ closure (set.Ioo a b)
α : Type u,	β : Type v,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : densely_ordered α,	_inst_4 : order_topology α,	_inst_5 : topological_space β,	_inst_6 : t2_space β,	f : α → β,	a b : α,	la : β,	hab : a < b,	ha : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 la)	⊢ a ∈ closure (set.Ioo a b)		α : Type u,	β : Type v,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : densely_ordered α,	_inst_4 : order_topology α,	_inst_5 : topological_space β,	_inst_6 : t2_space β,	f : α → β,	a b : α,	la : β,	hab : a < b,	ha : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 la)	⊢ filter.tendsto f (𝓝[set.Ioo a b] a) (𝓝 la)
α : Type u,	β : Type v,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : densely_ordered α,	_inst_4 : order_topology α,	_inst_5 : topological_space β,	_inst_6 : t2_space β,	f : α → β,	a b : α,	la : β,	hab : a < b,	ha : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 la)	⊢ a ∈ set.Icc a b
α : Type u,	β : Type v,	_inst_1 : topological_space α,	_inst_2 : linear_order α,	_inst_3 : densely_ordered α,	_inst_4 : order_topology α,	_inst_5 : topological_space β,	_inst_6 : t2_space β,	f : α → β,	a b : α,	la : β,	hab : a < b,	ha : filter.tendsto f (𝓝[set.Ioi a] a) (𝓝 la)	⊢ filter.tendsto f (𝓝[set.Ioo a b] a) (𝓝 la)
β : Type u_2,	_inst_2 : topological_space β,	κ : Type u_5,	f : κ → β,	hf : dense_range f,	s : set β,	hs : is_open s	⊢ s ⊆ closure (s ∩ set.range f)
β : Type u_2,	_inst_2 : topological_space β,	κ : Type u_5,	f : κ → β,	hf : dense_range f,	s : set β,	hs : is_open s	⊢ s ⊆ closure (f '' (f ⁻¹' s))
α : Type u,	_inst_1 : topological_space α	⊢ is_open ∅
α : Type u,	_inst_1 : topological_space α	⊢ is_closed set.univ
α : Type u,	_inst_1 : topological_space α,	s : set α,	h : closure s ⊆ s	⊢ is_closed s
α : Type u,	_inst_1 : topological_space α,	s : set α,	h : closure s ⊆ s	⊢ is_closed (closure s)
α : Type u,	_inst_1 : topological_space α,	s : set α,	h : closure s ⊆ s	⊢ is_closed s
α : Type u,	_inst_1 : topological_space α,	s : set α,	h : dense s	⊢ dense sᶜᶜ
α : Type u,	_inst_1 : topological_space α,	s : set α,	hs : is_open s	⊢ frontier s = closure s \ s
α : Type u,	_inst_1 : topological_space α,	s : set α	⊢ {a : α | s ∈ 𝓝 a} = {a : α | 𝓝 a ≤ 𝓟 s}
α : Type u,	_inst_1 : topological_space α,	s : set α,	x : α	⊢ x ∈ closure s ↔ ∃ (u : ultrafilter α), s ∈ u ∧ ↑u ≤ 𝓝 x
α : Type u,	β : Type v,	γ : Type w,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	_inst_3 : topological_space γ,	f : α → β → γ,	b : β,	h : continuous (function.uncurry f)	⊢ continuous (λ (a : α), (a, b))
α : Type u_1,	_inst_1 : topological_space α,	a : α	⊢ 𝓝[{a}] a = has_pure.pure a
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	_inst_5 : decidable_eq α,	f : α → β,	s : set α,	x : α,	y : β	⊢ continuous_within_at (function.update f x y) (s \ {x}) x ↔ filter.tendsto (function.update f x y) (𝓝[s \ {x}] x) (𝓝 y)
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	_inst_5 : decidable_eq α,	f : α → β,	s : set α,	x : α,	y : β,	z : α,	hz : z ∈ s \ {x}	⊢ z ∈ {x_1 : α | (λ (x_1 : α), function.update f x y x_1 = f x_1) x_1}
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	i : α → β,	s : set α,	a : α,	di : dense_inducing i,	hs : s ∈ 𝓝 a	⊢ closure (i '' s) ∈ 𝓝 (i a)
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	i : α → β,	s : set α,	a : α,	di : dense_inducing i,	hs : ∃ (i_1 : set β) (hi : (λ (s : set β), i a ∈ s ∧ is_open s) i_1), (λ (i_1 : set β), i ⁻¹' i_1) i_1 ⊆ s	⊢ closure (i '' s) ∈ 𝓝 (i a)
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	i : α → β,	s : set α,	a : α,	di : dense_inducing i,	U : set β,	haU : i a ∈ U,	hUo : is_open U,	sub : i ⁻¹' U ⊆ s	⊢ closure (i '' s) ∈ 𝓝 (i a)
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	i : α → β,	s : set α,	a : α,	di : dense_inducing i,	U : set β,	haU : i a ∈ U,	hUo : is_open U,	sub : i ⁻¹' U ⊆ s	⊢ U ⊆ closure (i '' s)
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X	⊢ fintype ↥S
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : is_compact ⊤	⊢ fintype ↥S
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i)	⊢ fintype ↥S
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i	⊢ fintype ↥S
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h	⊢ fintype ↥S
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i	⊢ fintype ↥S
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	s : ↥S	⊢ s ∈ T
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	x : X	⊢ x ∈ ⊤
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	x : X	⊢ S.proj x ∈ T
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	x : X,	j : ↥S,	hj : j ∈ classical.some h,	h2 : x ∈ (λ (H : j ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) j) hj	⊢ S.proj x ∈ T
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	x : X,	j : ↥S,	hj : j ∈ classical.some h,	h2 : x ∈ S.proj ⁻¹' {j},	this : S.proj x = j	⊢ S.proj x ∈ T
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	x : X,	j : ↥S,	hj : j ∈ classical.some h,	h2 : x ∈ S.proj ⁻¹' {j}	⊢ S.proj x ∈ T
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	x : X,	j : ↥S,	hj : j ∈ classical.some h,	h2 : x ∈ S.proj ⁻¹' {j}	⊢ S.proj x = j
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	x j : X,	hj : quot.mk setoid.r j ∈ classical.some h,	h2 : x ∈ S.proj ⁻¹' {quot.mk setoid.r j}	⊢ S.proj x = quot.mk setoid.r j
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	x j : X,	hj : quot.mk setoid.r j ∈ classical.some h,	h2 : x ∈ S.proj ⁻¹' {quot.mk setoid.r j}	⊢ setoid.r x j
X : Type u_1,	_inst_1 : topological_space X,	S : discrete_quotient X,	_inst_2 : compact_space X,	cond : ∀ {ι : Type u_1} (U : ι → set X), (∀ (i : ι), is_open (U i)) → (⊤ ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), ⊤ ⊆ ⋃ (i : ι) (H : i ∈ t), U i),	h : ∃ (t : finset ↥S), ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ t), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	T : finset ↥S := classical.some h,	hT : ⊤ ⊆ ⋃ (i : ↥S) (H : i ∈ classical.some h), (λ (s : ↥S), S.proj ⁻¹' {s}) i,	x j : X,	hj : quot.mk setoid.r j ∈ classical.some h,	h2 : x ∈ set_of (S.rel j)	⊢ setoid.r x j
X : Type u_1,	_inst_1 : topological_space X,	α : Type u_2,	f : locally_constant X α	⊢ ⇑(f.locally_constant_lift) ∘ f.discrete_quotient.proj = ⇑f
X : Type u_1,	_inst_1 : topological_space X,	α : Type u_2,	f : locally_constant X α,	x : X	⊢ (⇑(f.locally_constant_lift) ∘ f.discrete_quotient.proj) x = ⇑f x
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B	⊢ continuous_on (a.pretrivialization_at x).to_local_equiv.to_fun (a.pretrivialization_at x).to_local_equiv.source
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology	⊢ continuous_on (a.pretrivialization_at x).to_local_equiv.to_fun (a.pretrivialization_at x).to_local_equiv.source
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s	⊢ (a.pretrivialization_at x).to_local_equiv.to_fun ⁻¹' s ∩ (a.pretrivialization_at x).to_local_equiv.source = ⇑(a.pretrivialization_at x) ⁻¹' s ∩ (a.pretrivialization_at x).to_local_equiv.source ∩ (a.pretrivialization_at x).to_local_equiv.source
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s	⊢ (a.pretrivialization_at x).to_local_equiv.to_fun ⁻¹' s ∩ (a.pretrivialization_at x).to_local_equiv.source = ⇑(a.pretrivialization_at x) ⁻¹' s ∩ (a.pretrivialization_at x).to_local_equiv.source
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s,	y : B	⊢ is_open (⇑(a.pretrivialization_at x) ⁻¹' s ∩ (a.pretrivialization_at x).to_local_equiv.source)
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s,	y : B	⊢ ∃ (t : set (B × F)), is_open t ∧ coe ⁻¹' t = (a.pretrivialization_at y).set_symm ⁻¹' (⇑(a.pretrivialization_at x) ⁻¹' s ∩ (a.pretrivialization_at x).to_local_equiv.source)
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s,	y : B,	u : set (B × F),	hu1 : is_open u,	hu2 : ⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = u ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source)	⊢ ∃ (t : set (B × F)), is_open t ∧ coe ⁻¹' t = (a.pretrivialization_at y).set_symm ⁻¹' (⇑(a.pretrivialization_at x) ⁻¹' s ∩ (a.pretrivialization_at x).to_local_equiv.source)
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s,	y : B,	u : set (B × F),	hu1 : is_open u,	hu2 : ⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = u ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source),	hu3 : (λ (s : set (B × F)), (λ (x : ↥((a.pretrivialization_at y).to_local_equiv.target)), ↑x) ⁻¹' s) (⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source)) = (λ (s : set (B × F)), (λ (x : ↥((a.pretrivialization_at y).to_local_equiv.target)), ↑x) ⁻¹' s) (u ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source))	⊢ ∃ (t : set (B × F)), is_open t ∧ coe ⁻¹' t = (a.pretrivialization_at y).set_symm ⁻¹' (⇑(a.pretrivialization_at x) ⁻¹' s ∩ (a.pretrivialization_at x).to_local_equiv.source)
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s,	y : B,	u : set (B × F),	hu1 : is_open u,	hu2 : ⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = u ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source),	hu3 : coe ⁻¹' (⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s) ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = coe ⁻¹' u ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source)	⊢ ∃ (t : set (B × F)), is_open t ∧ coe ⁻¹' t = (a.pretrivialization_at y).set_symm ⁻¹' (⇑(a.pretrivialization_at x) ⁻¹' s ∩ (a.pretrivialization_at x).to_local_equiv.source)
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s,	y : B,	u : set (B × F),	hu1 : is_open u,	hu2 : ⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = u ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source),	hu3 : coe ⁻¹' (⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s) ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = coe ⁻¹' u ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source)	⊢ coe ⁻¹' (⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s) ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = (a.pretrivialization_at y).set_symm ⁻¹' (⇑(a.pretrivialization_at x) ⁻¹' s) ∩ (a.pretrivialization_at y).set_symm ⁻¹' (a.pretrivialization_at x).to_local_equiv.source
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s,	y : B,	u : set (B × F),	hu1 : is_open u,	hu2 : ⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = u ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source),	hu3 : coe ⁻¹' (⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s) ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = coe ⁻¹' u ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source)	⊢ coe ⁻¹' (u ∩ (a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = (a.pretrivialization_at y).set_symm ⁻¹' (⇑(a.pretrivialization_at x) ⁻¹' s ∩ (a.pretrivialization_at x).to_local_equiv.source)
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s,	y : B,	u : set (B × F),	hu1 : is_open u,	hu2 : ⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = u ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source),	hu3 : coe ⁻¹' (⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s) ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = coe ⁻¹' u ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source)	⊢ is_open (u ∩ (a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source)
B : Type u_2,	F : Type u_3,	Z : Type u_4,	_inst_1 : topological_space B,	_inst_2 : topological_space F,	proj : Z → B,	a : topological_fiber_prebundle F proj,	x : B,	_inst : topological_space Z := a.total_space_topology,	s : set (B × F),	hs : is_open s,	y : B,	u : set (B × F),	hu1 : is_open u,	hu2 : ⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = u ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source),	hu3 : coe ⁻¹' (⇑(a.pretrivialization_at x) ∘ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' s) ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source) = coe ⁻¹' u ∩ coe ⁻¹' (⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source)	⊢ is_open (u ∩ ((a.pretrivialization_at y).to_local_equiv.target ∩ ⇑((a.pretrivialization_at y).to_local_equiv.symm) ⁻¹' (a.pretrivialization_at x).to_local_equiv.source))
β : Type u_2,	f g : β → ℝ,	hg : ∀ (b : β), 0 ≤ g b,	hgf : ∀ (b : β), g b ≤ f b,	hf : summable f	⊢ summable g
β : Type u_2,	g : β → ℝ,	hg : ∀ (b : β), 0 ≤ g b,	f : β → ℝ≥0,	hgf : ∀ (b : β), g b ≤ (λ (i : β), ↑(f i)) b,	hf : summable (λ (i : β), ↑(f i))	⊢ summable g
β : Type u_2,	f : β → ℝ≥0,	hf : summable (λ (i : β), ↑(f i)),	g : β → ℝ≥0,	hgf : ∀ (b : β), (λ (i : β), ↑(g i)) b ≤ (λ (i : β), ↑(f i)) b	⊢ summable (λ (i : β), ↑(g i))
β : Type u_2,	f g : β → ℝ≥0,	hgf : ∀ (b : β), (λ (i : β), ↑(g i)) b ≤ (λ (i : β), ↑(f i)) b,	hf : summable (λ (a : β), f a)	⊢ summable (λ (a : β), g a)
⊢ continuous_at (λ (p : ereal × ereal), p.fst + p.snd) (⊤, ⊤)
⊢ ∀ (x : ℝ), ∀ᶠ (a : ereal × ereal) in 𝓝 ⊤ ×ᶠ 𝓝 ⊤, ↑x < a.fst + a.snd
r : ℝ	⊢ ∀ᶠ (a : ereal × ereal) in 𝓝 ⊤ ×ᶠ 𝓝 ⊤, ↑r < a.fst + a.snd
r : ℝ	⊢ ∃ (pa : ereal → Prop) (ha : ∀ᶠ (x : ereal) in 𝓝 ⊤, pa x) (pb : ereal → Prop) (hb : ∀ᶠ (y : ereal) in 𝓝 ⊤, pb y), ∀ {x : ereal}, pa x → ∀ {y : ereal}, pb y → ↑r < (x, y).fst + (x, y).snd
r : ℝ	⊢ ↑0 < ⊤
r : ℝ,	x : ereal,	hx : ↑r < x,	y : ereal,	hy : ↑0 < y	⊢ ↑r < (x, y).fst + (x, y).snd
r : ℝ,	x : ereal,	hx : ↑r < x,	y : ereal,	hy : ↑0 < y	⊢ ↑r < x + y
r : ℝ,	x : ereal,	hx : ↑r < x,	y : ereal,	hy : ↑0 < y	⊢ r = (λ (b : ℝ), r + b) 0
α : Type u_1,	f : α → ℝ,	hf₁ : ∀ (n : α), 0 ≤ f n	⊢ summable (λ (n : α), ⟨f n, _⟩) ↔ summable f
α : Type u_1,	f : α → ℝ≥0,	hf₁ : ∀ (n : α), 0 ≤ (λ (i : α), ↑(f i)) n	⊢ summable (λ (n : α), ⟨(λ (i : α), ↑(f i)) n, _⟩) ↔ summable (λ (i : α), ↑(f i))
α : Type u_1,	a : ℝ≥0,	f : α → ℝ≥0	⊢ ↑∑' (x : α), a * f x = ↑(a * ∑' (x : α), f x)
a b : ℚ	⊢ totally_bounded (set.Icc a b)
a b : ℚ,	this : totally_bounded (coe ⁻¹' set.Icc ↑a ↑b)	⊢ totally_bounded (set.Icc a b)
a b : ℚ,	this : totally_bounded (coe ⁻¹' set.Icc ↑a ↑b),	q : ℚ	⊢ q ∈ set.Icc a b ↔ q ∈ coe ⁻¹' set.Icc ↑a ↑b
f : ℝ → ℝ,	a b : ℝ,	h : continuous_on f [a, b]	⊢ f '' [a, b] = [has_Inf.Inf (f '' [a, b]), has_Sup.Sup (f '' [a, b])]
f : ℝ → ℝ,	a b : ℝ,	h : continuous_on f [a, b]	⊢ has_Inf.Inf (f '' [a, b]) ≤ has_Sup.Sup (f '' [a, b])
f : ℝ → ℝ,	a b : ℝ,	h : continuous_on f [a, b]	⊢ has_Inf.Inf (set.Icc (has_Inf.Inf (f '' [a, b])) (has_Sup.Sup (f '' [a, b]))) ≤ has_Sup.Sup (set.Icc (has_Inf.Inf (f '' [a, b])) (has_Sup.Sup (f '' [a, b])))
X : Type u_1,	Y : Type u_2,	_inst_1 : topological_space X,	coe_injective : function.injective coe_fn,	f : X → Y,	hf : is_locally_constant f,	g : X → Y,	hg : is_locally_constant g,	h : ⇑{to_fun := f, is_locally_constant := hf} = ⇑{to_fun := g, is_locally_constant := hg},	this : f = g	⊢ {to_fun := f, is_locally_constant := hf} = {to_fun := g, is_locally_constant := hg}
X : Type u_1,	Y : Type u_2,	Z : Type u_3,	_inst_1 : topological_space X,	_inst_2 : topological_space Y,	f : X → Y,	g : locally_constant Y Z,	hf : continuous f	⊢ ⇑{to_fun := ⇑g ∘ f, is_locally_constant := _} = ⇑g ∘ f
X : Type u_1,	Y : Type u_2,	Z : Type u_3,	_inst_1 : topological_space X,	_inst_2 : topological_space Y,	f : X → Y,	g : locally_constant Y Z,	hf : continuous f	⊢ ⇑(locally_constant.comap f g) = ⇑g ∘ f
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	f : α → β,	f' : β → α,	h : continuous f',	l_inv : function.left_inverse f f',	r_inv : function.right_inverse f f',	s : set α,	hs : is_closed s	⊢ f' ⁻¹' s = f '' s
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	f : α → β,	f' : β → α,	h : continuous f',	l_inv : function.left_inverse f f',	r_inv : function.right_inverse f f',	s : set α,	hs : is_closed s	⊢ f' ⁻¹' s = f '' s
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	f : α → β,	f' : β → α,	h : continuous f',	l_inv : function.left_inverse f f',	r_inv : function.right_inverse f f',	s : set α,	hs : is_closed s,	x : β	⊢ x ∈ f' ⁻¹' s ↔ x ∈ f '' s
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	f : α → β,	hf : open_embedding f,	s : set α,	h : is_open (f '' s)	⊢ is_open s
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	f : α → β,	hf : open_embedding f,	s : set α,	h : is_open (f '' s)	⊢ f ⁻¹' (f '' s) = s
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	f : α → β,	hf : closed_embedding f,	s : set β,	hs : s ⊆ set.range f	⊢ is_closed s ↔ is_closed (f ⁻¹' s)
α : Type u_1,	β : Type u_2,	_inst_1 : topological_space α,	_inst_2 : topological_space β,	f : α → β,	hf : closed_embedding f,	s : set β,	hs : s ⊆ set.range f	⊢ f '' (f ⁻¹' s) = s
α : Type u,	_inst_1 : pseudo_metric_space α,	s : set α,	h : ¬metric.bounded s	⊢ metric.diam s = 0
β : Type v,	γ : Type w,	_inst_2 : metric_space γ,	_inst_3 : metric_space β,	x y : γ × β,	h : has_dist.dist x y = 0	⊢ x = y
β : Type v,	γ : Type w,	_inst_2 : metric_space γ,	_inst_3 : metric_space β,	x y : γ × β,	h : has_dist.dist x y = 0,	h₁ : has_dist.dist x.fst y.fst ≤ 0,	h₂ : has_dist.dist x.snd y.snd ≤ 0	⊢ x = y
α : Type u,	_inst_1 : pseudo_metric_space α,	x : α,	ε : ℝ	⊢ metric.ball x ε = ∅ ↔ ε ≤ 0
α : Type u,	_inst_1 : pseudo_metric_space α,	x : α,	ε : ℝ≥0	⊢ ε = ↑ε.to_nnreal
α : Type u,	_inst_1 : pseudo_metric_space α,	x : α,	ε : ℝ≥0	⊢ emetric.ball x ↑ε = metric.ball x ↑ε
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤	⊢ complete_space (topological_space.closeds α)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N	⊢ ∃ (x : topological_space.closeds α), filter.tendsto s filter.at_top (𝓝 x)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val)	⊢ ∃ (x : topological_space.closeds α), filter.tendsto s filter.at_top (𝓝 x)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩	⊢ ∃ (x : topological_space.closeds α), filter.tendsto s filter.at_top (𝓝 x)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩	⊢ filter.tendsto s filter.at_top (𝓝 t)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩	⊢ ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val	⊢ ∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val	⊢ ∃ (z : Π (l : ℕ), ↥((s (n + l)).val)), ↑(z 0) = x ∧ ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val	⊢ ∀ (l : ℕ) (z : ↥((s (n + l)).val)), ∃ (z' : ↥((s (n + l + 1)).val)), has_edist.edist ↑z ↑z' ≤ B n / 2 ^ l
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val)	⊢ ∃ (z' : ↥((s (n + l + 1)).val)), has_edist.edist ↑z ↑z' ≤ B n / 2 ^ l
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val)	⊢ ∃ (z' : α) (H : z' ∈ (s (n + l + 1)).val), has_edist.edist ↑z z' < B n / 2 ^ l
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val)	⊢ emetric.Hausdorff_edist (s (n + l)).val (s (n + l + 1)).val < B n / 2 ^ l
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val)	⊢ emetric.Hausdorff_edist (s (n + l)).val (s (n + l + 1)).val < 2⁻¹ ^ n * 2⁻¹ ^ l
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val)	⊢ emetric.Hausdorff_edist (s (n + l)).val (s (n + l + 1)).val < 2⁻¹ ^ (n + l)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val)	⊢ emetric.Hausdorff_edist (s (n + l)).val (s (n + l + 1)).val < 2⁻¹ ^ (n + l)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val)	⊢ n + l ≤ n + l
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val)	⊢ n + l ≤ n + l + 1
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val)	⊢ ∃ (z' : α) (H : z' ∈ (s (n + l + 1)).val), has_edist.edist ↑z z' < B n / 2 ^ l		α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val),	z' : α,	z'_mem : z' ∈ (s (n + l + 1)).val,	hz' : has_edist.edist ↑z z' < B n / 2 ^ l	⊢ ∃ (z' : ↥((s (n + l + 1)).val)), has_edist.edist ↑z ↑z' ≤ B n / 2 ^ l
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val	⊢ ∀ (l : ℕ) (z : ↥((s (n + l)).val)), ∃ (z' : ↥((s (n + l + 1)).val)), has_edist.edist ↑z ↑z' ≤ B n / 2 ^ l		α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	this : ∀ (l : ℕ) (z : ↥((s (n + l)).val)), ∃ (z' : ↥((s (n + l + 1)).val)), has_edist.edist ↑z ↑z' ≤ B n / 2 ^ l	⊢ ∃ (z : Π (l : ℕ), ↥((s (n + l)).val)), ↑(z 0) = x ∧ ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	l : ℕ,	z : ↥((s (n + l)).val),	z' : α,	z'_mem : z' ∈ (s (n + l + 1)).val,	hz' : has_edist.edist ↑z z' < B n / 2 ^ l	⊢ ∃ (z' : ↥((s (n + l + 1)).val)), has_edist.edist ↑z ↑z' ≤ B n / 2 ^ l
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	this : ∀ (l : ℕ) (z : ↥((s (n + l)).val)), ∃ (z' : ↥((s (n + l + 1)).val)), has_edist.edist ↑z ↑z' ≤ B n / 2 ^ l	⊢ ∃ (z : Π (l : ℕ), ↥((s (n + l)).val)), ↑(z 0) = x ∧ ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val	⊢ ∃ (z : Π (l : ℕ), ↥((s (n + l)).val)), ↑(z 0) = x ∧ ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k		α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k	⊢ ∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	this : ∀ (l : ℕ) (z : ↥((s (n + l)).val)), ∃ (z' : ↥((s (n + l + 1)).val)), has_edist.edist ↑z ↑z' ≤ B n / 2 ^ l	⊢ ∀ (k : ℕ), has_edist.edist ↑(k.rec_on ⟨x, hx⟩ (λ (l : ℕ) (z : ↥((s (n + l)).val)), classical.some _)) ↑((k + 1).rec_on ⟨x, hx⟩ (λ (l : ℕ) (z : ↥((s (n + l)).val)), classical.some _)) ≤ B n / 2 ^ k
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k	⊢ ∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k	⊢ cauchy_seq (λ (k : ℕ), ↑(z k))		α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k,	this : cauchy_seq (λ (k : ℕ), ↑(z k))	⊢ ∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k,	this : cauchy_seq (λ (k : ℕ), ↑(z k))	⊢ ∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k,	this : cauchy_seq (λ (k : ℕ), ↑(z k)),	y : α,	y_lim : filter.tendsto (λ (k : ℕ), ↑(z k)) filter.at_top (𝓝 y)	⊢ ∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k,	this : cauchy_seq (λ (k : ℕ), ↑(z k)),	y : α,	y_lim : filter.tendsto (λ (k : ℕ), ↑(z k)) filter.at_top (𝓝 y)	⊢ y ∈ t0 ∧ has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k,	this : cauchy_seq (λ (k : ℕ), ↑(z k)),	y : α,	y_lim : filter.tendsto (λ (k : ℕ), ↑(z k)) filter.at_top (𝓝 y),	k : ℕ	⊢ ∀ᶠ (x : ℕ) in filter.at_top, ↑(z x) ∈ ⋃ (m : ℕ) (H : m ≥ k), (s m).val
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k,	this : cauchy_seq (λ (k : ℕ), ↑(z k)),	y : α,	y_lim : filter.tendsto (λ (k : ℕ), ↑(z k)) filter.at_top (𝓝 y),	k : ℕ	⊢ ∃ (a : ℕ), ∀ (b : ℕ), b ≥ a → (∃ (i : ℕ), i ≥ k ∧ ↑(z b) ∈ (s i).val)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k,	this : cauchy_seq (λ (k : ℕ), ↑(z k)),	y : α,	y_lim : filter.tendsto (λ (k : ℕ), ↑(z k)) filter.at_top (𝓝 y),	this : y ∈ t0	⊢ y ∈ t0 ∧ has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k,	this : cauchy_seq (λ (k : ℕ), ↑(z k)),	y : α,	y_lim : filter.tendsto (λ (k : ℕ), ↑(z k)) filter.at_top (𝓝 y),	this : y ∈ t0	⊢ has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	n : ℕ,	x : α,	hx : x ∈ (s n).val,	z : Π (l : ℕ), ↥((s (n + l)).val),	hz₀ : ↑(z 0) = x,	hz : ∀ (k : ℕ), has_edist.edist ↑(z k) ↑(z (k + 1)) ≤ B n / 2 ^ k,	this : cauchy_seq (λ (k : ℕ), ↑(z k)),	y : α,	y_lim : filter.tendsto (λ (k : ℕ), ↑(z k)) filter.at_top (𝓝 y),	this : y ∈ t0	⊢ has_edist.edist ↑(z 0) y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩	⊢ ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n)		α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n)	⊢ filter.tendsto s filter.at_top (𝓝 t)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n)	⊢ filter.tendsto s filter.at_top (𝓝 t)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n)	⊢ ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	n : ℕ,	x : α,	xt0 : x ∈ t0	⊢ x ∈ closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	n : ℕ,	x : α,	xt0 : x ∈ t0	⊢ ∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	n : ℕ,	x : α,	xt0 : x ∈ t0,	this : x ∈ closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val)	⊢ ∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	n : ℕ,	x : α,	xt0 : x ∈ t0,	this : x ∈ closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	z : α,	hz : z ∈ ⋃ (m : ℕ) (H : m ≥ n), (s m).val,	Dxz : has_edist.edist x z < B n	⊢ ∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	n : ℕ,	x : α,	xt0 : x ∈ t0,	this : x ∈ closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	z : α,	Dxz : has_edist.edist x z < B n,	hz : ∃ (i : ℕ), i ≥ n ∧ z ∈ (s i).val	⊢ ∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	n : ℕ,	x : α,	xt0 : x ∈ t0,	this : x ∈ closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	z : α,	Dxz : has_edist.edist x z < B n,	m : ℕ,	m_ge_n : m ≥ n,	hm : z ∈ (s m).val	⊢ ∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	n : ℕ,	x : α,	xt0 : x ∈ t0,	this : x ∈ closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	z : α,	Dxz : has_edist.edist x z < B n,	m : ℕ,	m_ge_n : m ≥ n,	hm : z ∈ (s m).val,	this : emetric.Hausdorff_edist (s m).val (s n).val < B n	⊢ ∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	n : ℕ,	x : α,	xt0 : x ∈ t0,	this : x ∈ closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	z : α,	Dxz : has_edist.edist x z < B n,	m : ℕ,	m_ge_n : m ≥ n,	hm : z ∈ (s m).val,	this : emetric.Hausdorff_edist (s m).val (s n).val < B n,	y : α,	hy : y ∈ (s n).val,	Dzy : has_edist.edist z y < B n	⊢ ∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n)	⊢ ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n)		α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n)	⊢ filter.tendsto s filter.at_top (𝓝 t)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n)	⊢ filter.tendsto s filter.at_top (𝓝 t)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n	⊢ filter.tendsto s filter.at_top (𝓝 t)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n,	ε : ℝ≥0∞,	εpos : ε > 0	⊢ ∃ (N : ℕ), ∀ (n : ℕ), n ≥ N → has_edist.edist (s n) t < ε
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n,	ε : ℝ≥0∞,	εpos : ε > 0	⊢ filter.tendsto (λ (n : ℕ), 2 * B n) filter.at_top (𝓝 (2 * 0))		α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n,	ε : ℝ≥0∞,	εpos : ε > 0,	this : filter.tendsto (λ (n : ℕ), 2 * B n) filter.at_top (𝓝 (2 * 0))	⊢ ∃ (N : ℕ), ∀ (n : ℕ), n ≥ N → has_edist.edist (s n) t < ε
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n,	ε : ℝ≥0∞,	εpos : ε > 0	⊢ 2⁻¹ < 1
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n,	ε : ℝ≥0∞,	εpos : ε > 0	⊢ 2 ≠ ⊤
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n,	ε : ℝ≥0∞,	εpos : ε > 0,	this : filter.tendsto (λ (n : ℕ), 2 * B n) filter.at_top (𝓝 (2 * 0))	⊢ ∃ (N : ℕ), ∀ (n : ℕ), n ≥ N → has_edist.edist (s n) t < ε
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n,	ε : ℝ≥0∞,	εpos : ε > 0,	this : filter.tendsto (λ (n : ℕ), 2 * B n) filter.at_top (𝓝 0)	⊢ ∃ (N : ℕ), ∀ (n : ℕ), n ≥ N → has_edist.edist (s n) t < ε
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n,	ε : ℝ≥0∞,	εpos : ε > 0,	this : filter.tendsto (λ (n : ℕ), 2 * B n) filter.at_top (𝓝 0)	⊢ ∃ (N : ℕ), ∀ (b : ℕ), b ≥ N → ε > 2 * B b		α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n,	ε : ℝ≥0∞,	εpos : ε > 0,	this : filter.tendsto (λ (n : ℕ), 2 * B n) filter.at_top (𝓝 0),	N : ℕ,	hN : ∀ (b : ℕ), b ≥ N → ε > 2 * B b	⊢ ∃ (N : ℕ), ∀ (n : ℕ), n ≥ N → has_edist.edist (s n) t < ε
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n,	B_ne_top : ∀ (n : ℕ), B n ≠ ⊤,	s : ℕ → topological_space.closeds α,	hs : ∀ (N n m : ℕ), N ≤ n → N ≤ m → has_edist.edist (s n) (s m) < B N,	t0 : set α := ⋂ (n : ℕ), closure (⋃ (m : ℕ) (H : m ≥ n), (s m).val),	t : topological_space.closeds α := ⟨t0, _⟩,	I1 : ∀ (n : ℕ) (x : α), x ∈ (s n).val → (∃ (y : α) (H : y ∈ t0), has_edist.edist x y ≤ 2 * B n),	I2 : ∀ (n : ℕ) (x : α), x ∈ t0 → (∃ (y : α) (H : y ∈ (s n).val), has_edist.edist x y ≤ 2 * B n),	main : ∀ (n : ℕ), has_edist.edist (s n) t ≤ 2 * B n,	ε : ℝ≥0∞,	εpos : ε > 0,	this : filter.tendsto (λ (n : ℕ), 2 * B n) filter.at_top (𝓝 0),	N : ℕ,	hN : ∀ (b : ℕ), b ≥ N → ε > 2 * B b	⊢ ∃ (N : ℕ), ∀ (n : ℕ), n ≥ N → has_edist.edist (s n) t < ε
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α	⊢ complete_space (topological_space.closeds α)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n	⊢ complete_space (topological_space.closeds α)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n	⊢ ∀ (n : ℕ), 0 < B n
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n	⊢ complete_space (topological_space.closeds α)
α : Type u,	_inst_1 : emetric_space α,	_inst_2 : complete_space α,	B : ℕ → ℝ≥0∞ := λ (n : ℕ), 2⁻¹ ^ n,	B_pos : ∀ (n : ℕ), 0 < B n	⊢ ∀ (n : ℕ), B n ≠ ⊤
α : Type u_1,	_inst_1 : emetric_space α,	K : ℝ≥0,	f : α → α,	hf : contracting_with K f,	x y : α,	hx : function.is_fixed_pt f x,	hy : function.is_fixed_pt f y	⊢ x = y ∨ has_edist.edist x y = ⊤
α : Type u_1,	_inst_1 : emetric_space α,	K : ℝ≥0,	f : α → α,	hf : contracting_with K f,	x y : α,	hx : function.is_fixed_pt f x,	hy : function.is_fixed_pt f y,	h : ¬has_edist.edist x y = ⊤	⊢ has_edist.edist x y ≤ 0
α : Type u,	β : Type v,	_inst_1 : pseudo_emetric_space α,	ι : Type u_1,	_inst_2 : topological_space β,	F : ι → β → α,	f : β → α,	p : filter ι,	s : set β	⊢ tendsto_locally_uniformly_on F f p s ↔ ∀ (ε : ℝ≥0∞), ε > 0 → ∀ (x : β), x ∈ s → (∃ (t : set β) (H : t ∈ 𝓝[s] x), ∀ᶠ (n : ι) in p, ∀ (y : β), y ∈ t → has_edist.edist (f y) (F n y) < ε)
α : Type u,	β : Type v,	_inst_1 : pseudo_emetric_space α,	ι : Type u_1,	_inst_2 : topological_space β,	F : ι → β → α,	f : β → α,	p : filter ι,	s : set β,	H : ∀ (ε : ℝ≥0∞), ε > 0 → ∀ (x : β), x ∈ s → (∃ (t : set β) (H : t ∈ 𝓝[s] x), ∀ᶠ (n : ι) in p, ∀ (y : β), y ∈ t → has_edist.edist (f y) (F n y) < ε),	u : set (α × α),	hu : u ∈ 𝓤 α,	x : β,	hx : x ∈ s	⊢ ∃ (t : set β) (H : t ∈ 𝓝[s] x), ∀ᶠ (n : ι) in p, ∀ (y : β), y ∈ t → (f y, F n y) ∈ u
α : Type u,	β : Type v,	_inst_1 : pseudo_emetric_space α,	ι : Type u_1,	_inst_2 : topological_space β,	F : ι → β → α,	f : β → α,	p : filter ι,	s : set β,	H : ∀ (ε : ℝ≥0∞), ε > 0 → ∀ (x : β), x ∈ s → (∃ (t : set β) (H : t ∈ 𝓝[s] x), ∀ᶠ (n : ι) in p, ∀ (y : β), y ∈ t → has_edist.edist (f y) (F n y) < ε),	u : set (α × α),	hu : u ∈ 𝓤 α,	x : β,	hx : x ∈ s,	ε : ℝ≥0∞,	εpos : ε > 0,	hε : ∀ {a b : α}, has_edist.edist a b < ε → (a, b) ∈ u	⊢ ∃ (t : set β) (H : t ∈ 𝓝[s] x), ∀ᶠ (n : ι) in p, ∀ (y : β), y ∈ t → (f y, F n y) ∈ u
α : Type u,	β : Type v,	_inst_1 : pseudo_emetric_space α,	ι : Type u_1,	_inst_2 : topological_space β,	F : ι → β → α,	f : β → α,	p : filter ι,	s : set β,	H : ∀ (ε : ℝ≥0∞), ε > 0 → ∀ (x : β), x ∈ s → (∃ (t : set β) (H : t ∈ 𝓝[s] x), ∀ᶠ (n : ι) in p, ∀ (y : β), y ∈ t → has_edist.edist (f y) (F n y) < ε),	u : set (α × α),	hu : u ∈ 𝓤 α,	x : β,	hx : x ∈ s,	ε : ℝ≥0∞,	εpos : ε > 0,	hε : ∀ {a b : α}, has_edist.edist a b < ε → (a, b) ∈ u,	t : set β,	ht : t ∈ 𝓝[s] x,	Ht : ∀ᶠ (n : ι) in p, ∀ (y : β), y ∈ t → has_edist.edist (f y) (F n y) < ε	⊢ ∃ (t : set β) (H : t ∈ 𝓝[s] x), ∀ᶠ (n : ι) in p, ∀ (y : β), y ∈ t → (f y, F n y) ∈ u
α : Type u,	_inst_1 : pseudo_emetric_space α,	hs : ∀ (ε : ℝ≥0∞), ε > 0 → (∃ (t : set α), t.countable ∧ (⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε) = set.univ),	this : topological_space.separable_space α	⊢ topological_space.second_countable_topology α
α : Type u,	_inst_1 : pseudo_emetric_space α,	hs : ∀ (ε : ℝ≥0∞), ε > 0 → (∃ (t : set α), t.countable ∧ (⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε) = set.univ)	⊢ topological_space.second_countable_topology α
α : Type u,	_inst_1 : pseudo_emetric_space α,	hs : ∀ (ε : ℝ≥0∞), ε > 0 → (∃ (t : set α), t.countable ∧ (⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε) = set.univ)	⊢ topological_space.separable_space α
α : Type u,	_inst_1 : pseudo_emetric_space α,	hs : ∀ (ε : ℝ≥0∞), ε > 0 → (∃ (t : set α), t.countable ∧ (⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε) = set.univ),	t : set α,	htc : t.countable,	ht : set.univ ⊆ closure t	⊢ topological_space.separable_space α		α : Type u,	_inst_1 : pseudo_emetric_space α,	hs : ∀ (ε : ℝ≥0∞), ε > 0 → (∃ (t : set α), t.countable ∧ (⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε) = set.univ),	ε : ℝ≥0∞,	ε0 : ε > 0	⊢ ∃ (t : set α), t.countable ∧ set.univ ⊆ ⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε
α : Type u,	_inst_1 : pseudo_emetric_space α,	hs : ∀ (ε : ℝ≥0∞), ε > 0 → (∃ (t : set α), t.countable ∧ (⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε) = set.univ),	t : set α,	htc : t.countable,	ht : set.univ ⊆ closure t	⊢ topological_space.separable_space α
α : Type u,	_inst_1 : pseudo_emetric_space α,	hs : ∀ (ε : ℝ≥0∞), ε > 0 → (∃ (t : set α), t.countable ∧ (⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε) = set.univ),	ε : ℝ≥0∞,	ε0 : ε > 0	⊢ ∃ (t : set α), t.countable ∧ set.univ ⊆ ⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε
α : Type u,	_inst_1 : pseudo_emetric_space α,	hs : ∀ (ε : ℝ≥0∞), ε > 0 → (∃ (t : set α), t.countable ∧ (⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε) = set.univ),	ε : ℝ≥0∞,	ε0 : ε > 0,	t : set α,	htc : t.countable,	ht : (⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε) = set.univ	⊢ ∃ (t : set α), t.countable ∧ set.univ ⊆ ⋃ (x : α) (H : x ∈ t), emetric.closed_ball x ε
X : Type u,	Y : Type v,	Z : Type w,	_inst_1 : nonempty Z,	_inst_2 : metric_space Z,	_inst_3 : metric_space X,	_inst_4 : metric_space Y,	Φ : Z → X,	Ψ : Z → Y,	hΦ : isometry Φ,	hΨ : isometry Ψ,	y : Y	⊢ metric.glue_space hΦ hΨ
X : Type u,	Y : Type v,	Z : Type w,	_inst_1 : nonempty Z,	_inst_2 : metric_space Z,	_inst_3 : metric_space X,	_inst_4 : metric_space Y,	Φ : Z → X,	Ψ : Z → Y,	hΦ : isometry Φ,	hΨ : isometry Ψ,	y : Y	⊢ metric.glue_space hΦ hΨ
X : Type u,	Y : Type v,	Z : Type w,	_inst_1 : nonempty Z,	_inst_2 : metric_space Z,	_inst_3 : metric_space X,	_inst_4 : metric_space Y,	Φ : Z → X,	Ψ : Z → Y,	hΦ : isometry Φ,	hΨ : isometry Ψ,	y : Y,	_inst : pseudo_metric_space (X ⊕ Y) := metric.glue_premetric hΦ hΨ	⊢ metric.glue_space hΦ hΨ
X : Type u_2,	Y : Type u_3,	_inst_1 : emetric_space X,	_inst_2 : emetric_space Y,	_inst_3 : topological_space.second_countable_topology X,	f : X → Y,	hf : ∀ (x : X), ∃ (C : ℝ≥0) (s : set X) (H : s ∈ 𝓝 x), lipschitz_on_with C f s	⊢ dimH (set.range f) ≤ dimH set.univ
X : Type u_2,	Y : Type u_3,	_inst_1 : emetric_space X,	_inst_2 : emetric_space Y,	_inst_3 : topological_space.second_countable_topology X,	f : X → Y,	hf : ∀ (x : X), ∃ (C : ℝ≥0) (s : set X) (H : s ∈ 𝓝 x), lipschitz_on_with C f s	⊢ dimH (f '' set.univ) ≤ dimH set.univ
X : Type u_2,	Y : Type u_3,	_inst_1 : emetric_space X,	_inst_2 : emetric_space Y,	_inst_3 : topological_space.second_countable_topology X,	f : X → Y,	hf : ∀ (x : X), ∃ (C : ℝ≥0) (s : set X) (H : s ∈ 𝓝 x), lipschitz_on_with C f s,	x : X,	_x : x ∈ set.univ	⊢ ∃ (C : ℝ≥0) (t : set X) (H : t ∈ 𝓝[set.univ] x), lipschitz_on_with C f t
X : Type u_2,	Y : Type u_3,	_inst_1 : emetric_space X,	_inst_2 : emetric_space Y,	e : X ≃ᵢ Y	⊢ dimH set.univ = dimH set.univ
α : Type u,	_inst_1 : pseudo_emetric_space α,	s t : set α,	r : ℝ≥0∞,	H1 : ∀ (x : α), x ∈ s → emetric.inf_edist x t ≤ r,	H2 : ∀ (x : α), x ∈ t → emetric.inf_edist x s ≤ r	⊢ emetric.Hausdorff_edist s t ≤ r
α : Type u,	_inst_1 : pseudo_emetric_space α,	s t : set α,	r : ℝ≥0∞,	H1 : ∀ (x : α), x ∈ s → emetric.inf_edist x t ≤ r,	H2 : ∀ (x : α), x ∈ t → emetric.inf_edist x s ≤ r	⊢ (∀ (i : α), i ∈ s → emetric.inf_edist i t ≤ r) ∧ ∀ (i : α), i ∈ t → emetric.inf_edist i s ≤ r
α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	h : s ⊆ t,	hs : s.nonempty	⊢ metric.inf_dist x t ≤ metric.inf_dist x s
α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	h : s ⊆ t,	hs : s.nonempty,	ht : t.nonempty	⊢ metric.inf_dist x t ≤ metric.inf_dist x s
α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	h : s ⊆ t,	hs : s.nonempty,	ht : t.nonempty	⊢ emetric.inf_edist x t ≤ emetric.inf_edist x s
α : Type u,	β : Type v,	_inst_1 : pseudo_metric_space α,	_inst_2 : pseudo_metric_space β,	t : set α,	x : α,	Φ : α → β,	hΦ : isometry Φ	⊢ metric.inf_dist (Φ x) (Φ '' t) = metric.inf_dist x t
α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	fin : emetric.Hausdorff_edist s t ≠ ⊤	⊢ metric.inf_dist x t ≤ metric.inf_dist x s + metric.Hausdorff_dist s t
α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	fin : emetric.Hausdorff_edist s t ≠ ⊤,	hs : s = ∅,	ht : t = ∅	⊢ metric.inf_dist x t ≤ metric.inf_dist x s + metric.Hausdorff_dist s t
α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	fin : emetric.Hausdorff_edist s t ≠ ⊤,	hs : s = ∅,	ht : t = ∅	⊢ metric.inf_dist x t ≤ metric.inf_dist x s + metric.Hausdorff_dist s t		α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	fin : emetric.Hausdorff_edist s t ≠ ⊤,	hs : s.nonempty,	ht : t.nonempty	⊢ metric.inf_dist x t ≤ metric.inf_dist x s + metric.Hausdorff_dist s t
α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	fin : emetric.Hausdorff_edist s t ≠ ⊤,	hs : s.nonempty,	ht : t.nonempty	⊢ metric.inf_dist x t ≤ metric.inf_dist x s + metric.Hausdorff_dist s t
α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	fin : emetric.Hausdorff_edist s t ≠ ⊤,	hs : s.nonempty,	ht : t.nonempty	⊢ emetric.inf_edist x t ≤ emetric.inf_edist x s + emetric.Hausdorff_edist s t		α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	fin : emetric.Hausdorff_edist s t ≠ ⊤,	hs : s.nonempty,	ht : t.nonempty	⊢ emetric.inf_edist x s + emetric.Hausdorff_edist s t ≠ ⊤
α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	fin : emetric.Hausdorff_edist s t ≠ ⊤,	hs : s.nonempty,	ht : t.nonempty	⊢ emetric.inf_edist x t ≤ emetric.inf_edist x s + emetric.Hausdorff_edist s t
α : Type u,	_inst_1 : pseudo_metric_space α,	s t : set α,	x : α,	fin : emetric.Hausdorff_edist s t ≠ ⊤,	hs : s.nonempty,	ht : t.nonempty	⊢ emetric.inf_edist x s + emetric.Hausdorff_edist s t ≠ ⊤
X : Type u_1,	Y : Type u_2,	Z : Type u_3,	_inst_1 : pseudo_emetric_space X,	_inst_2 : pseudo_emetric_space Y,	_inst_3 : pseudo_emetric_space Z,	s : set X,	Cg rg : ℝ≥0,	g : Y → Z,	t : set Y,	hg : holder_on_with Cg rg g t,	Cf rf : ℝ≥0,	f : X → Y,	hf : holder_on_with Cf rf f s,	hst : set.maps_to f s t	⊢ holder_on_with (Cg * Cf ^ ↑rg) (rg * rf) (g ∘ f) s
X : Type u_1,	Y : Type u_2,	Z : Type u_3,	_inst_1 : pseudo_emetric_space X,	_inst_2 : pseudo_emetric_space Y,	_inst_3 : pseudo_emetric_space Z,	s : set X,	Cg rg : ℝ≥0,	g : Y → Z,	t : set Y,	hg : holder_on_with Cg rg g t,	Cf rf : ℝ≥0,	f : X → Y,	hf : holder_on_with Cf rf f s,	hst : set.maps_to f s t,	x : X,	hx : x ∈ s,	y : X,	hy : y ∈ s	⊢ has_edist.edist ((g ∘ f) x) ((g ∘ f) y) ≤ ↑(Cg * Cf ^ ↑rg) * has_edist.edist x y ^ ↑(rg * rf)
X : Type u_1,	Y : Type u_2,	Z : Type u_3,	_inst_1 : pseudo_emetric_space X,	_inst_2 : pseudo_emetric_space Y,	_inst_3 : pseudo_emetric_space Z,	s : set X,	Cg rg : ℝ≥0,	g : Y → Z,	t : set Y,	hg : holder_on_with Cg rg g t,	Cf rf : ℝ≥0,	f : X → Y,	hf : holder_on_with Cf rf f s,	hst : set.maps_to f s t,	x : X,	hx : x ∈ s,	y : X,	hy : y ∈ s	⊢ has_edist.edist ((g ∘ f) x) ((g ∘ f) y) ≤ ↑Cg * (↑Cf * has_edist.edist x y ^ ↑rf) ^ ↑rg
α : Type u,	β : Type v,	_inst_1 : pseudo_emetric_space α,	_inst_2 : pseudo_emetric_space β,	e : α ≃ᵢ β,	hF : complete_space β	⊢ is_complete (⇑e '' set.univ)
α : Type u,	β : Type v,	_inst_1 : pseudo_emetric_space α,	_inst_2 : pseudo_emetric_space β,	f : α → β,	_inst_4 : subsingleton α,	x y : α	⊢ has_edist.edist (f x) (f y) = has_edist.edist x y
α : Type u,	β : Type v,	_inst_1 : pseudo_emetric_space α,	_inst_2 : pseudo_emetric_space β,	f : α → β,	_inst_4 : subsingleton α,	x y : α	⊢ has_edist.edist (f x) (f y) = has_edist.edist x y
α : Type u,	β : Type v,	_inst_1 : pseudo_emetric_space α,	_inst_2 : pseudo_emetric_space β,	f : α → β,	_inst_4 : subsingleton α,	x y : α	⊢ has_edist.edist (f y) (f y) = has_edist.edist y y
α : Type u,	β : Type v,	_inst_1 : pseudo_emetric_space α,	_inst_2 : pseudo_emetric_space β,	b : β,	x y : α	⊢ has_edist.edist ((λ (a : α), b) x) ((λ (a : α), b) y) ≤ ↑0 * has_edist.edist x y
α : Type u,	β : Type v,	γ : Type w,	_inst_1 : pseudo_emetric_space α,	_inst_2 : pseudo_emetric_space β,	_inst_3 : pseudo_emetric_space γ,	Kf Kg : ℝ≥0,	f : β → γ,	g : α → β,	hf : lipschitz_with Kf f,	hg : lipschitz_with Kg g,	x y : α	⊢ ↑Kf * (↑Kg * has_edist.edist x y) = ↑(Kf * Kg) * has_edist.edist x y
α : Type u,	β : Type v,	γ : Type w,	_inst_1 : pseudo_emetric_space α,	_inst_2 : pseudo_emetric_space β,	_inst_3 : pseudo_emetric_space γ,	f : α → β,	Kf : ℝ≥0,	hf : lipschitz_with Kf f,	g : α → γ,	Kg : ℝ≥0,	hg : lipschitz_with Kg g	⊢ lipschitz_with (linear_order.max Kf Kg) (λ (x : α), (f x, g x))
α : Type u,	β : Type v,	γ : Type w,	_inst_1 : pseudo_emetric_space α,	_inst_2 : pseudo_emetric_space β,	_inst_3 : pseudo_emetric_space γ,	f : α → β,	Kf : ℝ≥0,	hf : lipschitz_with Kf f,	g : α → γ,	Kg : ℝ≥0,	hg : lipschitz_with Kg g,	x y : α	⊢ has_edist.edist ((λ (x : α), (f x, g x)) x) ((λ (x : α), (f x, g x)) y) ≤ ↑(linear_order.max Kf Kg) * has_edist.edist x y
α : Type u,	β : Type v,	γ : Type w,	_inst_1 : pseudo_emetric_space α,	_inst_2 : pseudo_emetric_space β,	_inst_3 : pseudo_emetric_space γ,	f : α → β,	Kf : ℝ≥0,	hf : lipschitz_with Kf f,	g : α → γ,	Kg : ℝ≥0,	hg : lipschitz_with Kg g,	x y : α	⊢ linear_order.max (has_edist.edist ((λ (x : α), (f x, g x)) x).fst ((λ (x : α), (f x, g x)) y).fst) (has_edist.edist ((λ (x : α), (f x, g x)) x).snd ((λ (x : α), (f x, g x)) y).snd) ≤ linear_order.max (↑Kf * has_edist.edist x y) (↑Kg * has_edist.edist x y)
X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	h : is_metric_separated s t,	h' : is_metric_separated s' t	⊢ is_metric_separated (s ∪ s') t
X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	r : ennreal,	r0 : r ≠ 0,	hr : ∀ (x : X), x ∈ s → ∀ (y : X), y ∈ t → r ≤ has_edist.edist x y,	r' : ennreal,	r0' : r' ≠ 0,	hr' : ∀ (x : X), x ∈ s' → ∀ (y : X), y ∈ t → r' ≤ has_edist.edist x y	⊢ is_metric_separated (s ∪ s') t
X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	r : ennreal,	r0 : r ≠ 0,	hr : ∀ (x : X), x ∈ s → ∀ (y : X), y ∈ t → r ≤ has_edist.edist x y,	r' : ennreal,	r0' : r' ≠ 0,	hr' : ∀ (x : X), x ∈ s' → ∀ (y : X), y ∈ t → r' ≤ has_edist.edist x y	⊢ linear_order.min r r' ≠ 0
X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	r : ennreal,	r0 : r ≠ 0,	hr : ∀ (x : X), x ∈ s → ∀ (y : X), y ∈ t → r ≤ has_edist.edist x y,	r' : ennreal,	r0' : r' ≠ 0,	hr' : ∀ (x : X), x ∈ s' → ∀ (y : X), y ∈ t → r' ≤ has_edist.edist x y	⊢ linear_order.min r r' ≠ 0		X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	r : ennreal,	r0 : r ≠ 0,	hr : ∀ (x : X), x ∈ s → ∀ (y : X), y ∈ t → r ≤ has_edist.edist x y,	r' : ennreal,	r0' : r' ≠ 0,	hr' : ∀ (x : X), x ∈ s' → ∀ (y : X), y ∈ t → r' ≤ has_edist.edist x y,	x : X,	hx : x ∈ s ∪ s',	y : X,	hy : y ∈ t	⊢ x ∈ s → linear_order.min r r' ≤ has_edist.edist x y		X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	r : ennreal,	r0 : r ≠ 0,	hr : ∀ (x : X), x ∈ s → ∀ (y : X), y ∈ t → r ≤ has_edist.edist x y,	r' : ennreal,	r0' : r' ≠ 0,	hr' : ∀ (x : X), x ∈ s' → ∀ (y : X), y ∈ t → r' ≤ has_edist.edist x y,	x : X,	hx : x ∈ s ∪ s',	y : X,	hy : y ∈ t	⊢ x ∈ s' → linear_order.min r r' ≤ has_edist.edist x y
X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	r : ennreal,	hr : ∀ (x : X), x ∈ s → ∀ (y : X), y ∈ t → r ≤ has_edist.edist x y,	r' : ennreal,	hr' : ∀ (x : X), x ∈ s' → ∀ (y : X), y ∈ t → r' ≤ has_edist.edist x y,	r0' : 0 < r',	r0 : 0 < r	⊢ 0 < linear_order.min r r'
X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	r : ennreal,	r0 : r ≠ 0,	hr : ∀ (x : X), x ∈ s → ∀ (y : X), y ∈ t → r ≤ has_edist.edist x y,	r' : ennreal,	r0' : r' ≠ 0,	hr' : ∀ (x : X), x ∈ s' → ∀ (y : X), y ∈ t → r' ≤ has_edist.edist x y,	x : X,	hx : x ∈ s ∪ s',	y : X,	hy : y ∈ t	⊢ x ∈ s → linear_order.min r r' ≤ has_edist.edist x y		X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	r : ennreal,	r0 : r ≠ 0,	hr : ∀ (x : X), x ∈ s → ∀ (y : X), y ∈ t → r ≤ has_edist.edist x y,	r' : ennreal,	r0' : r' ≠ 0,	hr' : ∀ (x : X), x ∈ s' → ∀ (y : X), y ∈ t → r' ≤ has_edist.edist x y,	x : X,	hx : x ∈ s ∪ s',	y : X,	hy : y ∈ t	⊢ x ∈ s' → linear_order.min r r' ≤ has_edist.edist x y
X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	r : ennreal,	r0 : r ≠ 0,	hr : ∀ (x : X), x ∈ s → ∀ (y : X), y ∈ t → r ≤ has_edist.edist x y,	r' : ennreal,	r0' : r' ≠ 0,	hr' : ∀ (x : X), x ∈ s' → ∀ (y : X), y ∈ t → r' ≤ has_edist.edist x y,	x : X,	hx : x ∈ s ∪ s',	y : X,	hy : y ∈ t	⊢ x ∈ s → linear_order.min r r' ≤ has_edist.edist x y
X : Type u_1,	_inst_1 : emetric_space X,	s t s' : set X,	r : ennreal,	r0 : r ≠ 0,	hr : ∀ (x : X), x ∈ s → ∀ (y : X), y ∈ t → r ≤ has_edist.edist x y,	r' : ennreal,	r0' : r' ≠ 0,	hr' : ∀ (x : X), x ∈ s' → ∀ (y : X), y ∈ t → r' ≤ has_edist.edist x y,	x : X,	hx : x ∈ s ∪ s',	y : X,	hy : y ∈ t	⊢ x ∈ s' → linear_order.min r r' ≤ has_edist.edist x y
X : Type u_1,	_inst_1 : emetric_space X,	ι : Type u_2,	I : set ι,	hI : I.finite,	s : set X,	t : ι → set X	⊢ is_metric_separated s (⋃ (i : ι) (H : i ∈ I), t i) ↔ ∀ (i : ι), i ∈ I → is_metric_separated s (t i)
α : Type u_1,	β : Type u_2,	t : topological_space α,	b : set (set β),	f : α → β,	h : ∀ (a : set β), a ∈ b → is_open (f ⁻¹' a)	⊢ t ≤ topological_space.induced f (topological_space.generate_from b)
α : Type u_1,	β : Type u_2,	t : topological_space α,	b : set (set β),	f : α → β,	h : ∀ (a : set β), a ∈ b → is_open (f ⁻¹' a)	⊢ t ≤ topological_space.generate_from (set.preimage f '' b)
α : Type u_1,	β : Type u_2,	t : topological_space α,	b : set (set β),	f : α → β,	h : ∀ (a : set β), a ∈ b → is_open (f ⁻¹' a)	⊢ ∀ (s : set α), s ∈ set.preimage f '' b → is_open s
α : Type u_1,	β : Type u_2,	t : topological_space α,	b : set (set β),	f : α → β,	h : ∀ (a : set β), a ∈ b → is_open (f ⁻¹' a)	⊢ ∀ (a : set β), a ∈ b → is_open (f ⁻¹' a)
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s : set β	⊢ s ∈ 𝓝 a ↔ ∃ (u : set α) (H : u ∈ 𝓝 (f a)), f ⁻¹' u ⊆ s
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s : set β	⊢ (∃ (t : set β), t ⊆ s ∧ (∃ (t_1 : set α), is_open t_1 ∧ f ⁻¹' t_1 = t) ∧ a ∈ t) ↔ ∃ (u : set α), (∃ (t : set α), t ⊆ u ∧ is_open t ∧ f a ∈ t) ∧ f ⁻¹' u ⊆ s
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s : set β	⊢ (∃ (t : set β), t ⊆ s ∧ (∃ (t_1 : set α), is_open t_1 ∧ f ⁻¹' t_1 = t) ∧ a ∈ t) → (∃ (u : set α), (∃ (t : set α), t ⊆ u ∧ is_open t ∧ f a ∈ t) ∧ f ⁻¹' u ⊆ s)
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s u : set β,	usub : u ⊆ s,	au : a ∈ u,	v : set α,	openv : is_open v,	ueq : f ⁻¹' v = u	⊢ f a ∈ v
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s u : set β,	usub : u ⊆ s,	au : a ∈ u,	v : set α,	openv : is_open v,	ueq : f ⁻¹' v = u	⊢ ∃ (u : set α), (∃ (t : set α), t ⊆ u ∧ is_open t ∧ f a ∈ t) ∧ f ⁻¹' u ⊆ s
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s u : set β,	usub : u ⊆ s,	au : a ∈ u,	v : set α,	openv : is_open v,	ueq : f ⁻¹' v = u	⊢ f ⁻¹' v ⊆ s
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s u : set β,	usub : u ⊆ s,	au : a ∈ u,	v : set α,	openv : is_open v,	ueq : f ⁻¹' v = u	⊢ f ⁻¹' v ⊆ s
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s u : set β,	usub : u ⊆ s,	au : a ∈ u,	v : set α,	openv : is_open v,	ueq : f ⁻¹' v = u	⊢ u ⊆ s
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s : set β	⊢ (∃ (t : set β), t ⊆ s ∧ (∃ (t_1 : set α), is_open t_1 ∧ f ⁻¹' t_1 = t) ∧ a ∈ t) → (∃ (u : set α), (∃ (t : set α), t ⊆ u ∧ is_open t ∧ f a ∈ t) ∧ f ⁻¹' u ⊆ s)		α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s : set β	⊢ (∃ (u : set α), (∃ (t : set α), t ⊆ u ∧ is_open t ∧ f a ∈ t) ∧ f ⁻¹' u ⊆ s) → (∃ (t : set β), t ⊆ s ∧ (∃ (t_1 : set α), is_open t_1 ∧ f ⁻¹' t_1 = t) ∧ a ∈ t)
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s : set β	⊢ (∃ (u : set α), (∃ (t : set α), t ⊆ u ∧ is_open t ∧ f a ∈ t) ∧ f ⁻¹' u ⊆ s) → (∃ (t : set β), t ⊆ s ∧ (∃ (t_1 : set α), is_open t_1 ∧ f ⁻¹' t_1 = t) ∧ a ∈ t)
α : Type u,	β : Type v,	T : tspace α,	f : β → α,	a : β,	s : set β,	u : set α,	finvsub : f ⁻¹' u ⊆ s,	v : set α,	vsubu : v ⊆ u,	openv : is_open v,	amem : f a ∈ v	⊢ ∃ (t : set β), t ⊆ s ∧ (∃ (t_1 : set α), is_open t_1 ∧ f ⁻¹' t_1 = t) ∧ a ∈ t
X : Type ?,	_inst_2 : topological_space X,	a b : X,	γ : path a b,	t₀ t₁ : ℝ,	h : t₀ ≤ t₁	⊢ γ.extend t₀ = γ.extend (linear_order.min t₀ t₁)
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X	⊢ path_connected_space X ↔ connected_space X
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X	⊢ path_connected_space X → connected_space X
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X	⊢ path_connected_space X → connected_space X		X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X	⊢ connected_space X → path_connected_space X
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	h : path_connected_space X	⊢ connected_space X
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X	⊢ connected_space X → path_connected_space X
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X	⊢ path_connected_space X
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X	⊢ path_connected_space X
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X	⊢ path_connected_space X
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X	⊢ ∃ (x : X), path_component x = set.univ
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X	⊢ (path_component x₀).nonempty
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X	⊢ path_component x₀ = set.univ
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X	⊢ is_open (path_component x₀)
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X	⊢ ∀ (a : X), a ∈ path_component x₀ → path_component x₀ ∈ 𝓝 a
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X,	y : X,	y_in : y ∈ path_component x₀	⊢ path_component x₀ ∈ 𝓝 y
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X,	y : X,	y_in : y ∈ path_component x₀,	U : set X,	U_in : U ∈ 𝓝 y,	hU : is_path_connected U	⊢ path_component x₀ ∈ 𝓝 y
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X,	y : X,	y_in : y ∈ path_component x₀,	U : set X,	U_in : U ∈ 𝓝 y,	hU : is_path_connected U	⊢ U ⊆ path_component x₀
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X	⊢ is_open (path_component x₀)		X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X	⊢ is_closed (path_component x₀)
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X,	y : X,	y_in : y ∈ path_component x₀,	U : set X,	U_in : U ∈ 𝓝 y,	hU : is_path_connected U	⊢ U ⊆ path_component y
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X	⊢ is_closed (path_component x₀)
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X	⊢ ∀ (x : X), (∀ (U : set X), U ∈ 𝓝 x → (U ∩ path_component x₀).nonempty) → x ∈ path_component x₀
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X,	y : X,	H : ∀ (U : set X), U ∈ 𝓝 y → (U ∩ path_component x₀).nonempty	⊢ y ∈ path_component x₀
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X,	y : X,	H : ∀ (U : set X), U ∈ 𝓝 y → (U ∩ path_component x₀).nonempty,	U : set X,	U_in : U ∈ 𝓝 y,	hU : is_path_connected U	⊢ y ∈ path_component x₀
X : Type u_1,	_inst_1 : topological_space X,	_inst_2 : loc_path_connected_space X,	hX : connected_space X,	inst : inhabited X,	x₀ : X := inhabited.default X,	y : X,	H : ∀ (U : set X), U ∈ 𝓝 y → (U ∩ path_component x₀).nonempty,	U : set X,	U_in : U ∈ 𝓝 y,	hU : is_path_connected U,	z : X,	hz : z ∈ U,	hz' : z ∈ path_component x₀	⊢ y ∈ path_component x₀
α : Type u_1,	_inst_1 : topological_space α,	x : α,	γ : Type u_3,	_inst_3 : linear_order γ,	_inst_4 : topological_space γ,	_inst_5 : order_topology γ,	δ : Type u_4,	_inst_6 : linear_order δ,	_inst_7 : topological_space δ,	_inst_8 : order_topology δ,	g : γ → δ,	f : α → γ,	hg : continuous_at g (f x),	hf : lower_semicontinuous_at f x,	gmon : monotone g	⊢ lower_semicontinuous_at (g ∘ f) x
α : Type u_1,	_inst_1 : topological_space α,	x : α,	γ : Type u_3,	_inst_3 : linear_order γ,	_inst_4 : topological_space γ,	_inst_5 : order_topology γ,	δ : Type u_4,	_inst_6 : linear_order δ,	_inst_7 : topological_space δ,	_inst_8 : order_topology δ,	g : γ → δ,	f : α → γ,	hg : continuous_at g (f x),	gmon : monotone g,	hf : lower_semicontinuous_within_at f set.univ x	⊢ lower_semicontinuous_within_at (g ∘ f) set.univ x
α : Type u_1,	_inst_1 : topological_space α,	β : Type u_2,	_inst_2 : preorder β,	f : α → β	⊢ upper_semicontinuous_on f set.univ ↔ upper_semicontinuous f
α : Type u,	_inst_1 : topological_space α,	_inst_2 : t1_space α,	x y : α,	h : y ≠ x	⊢ y ∈ {x}ᶜ
α : Type u,	_inst_1 : topological_space α,	_inst_2 : t2_space α,	_inst_3 : compact_space α,	U : set α	⊢ is_open U ↔ ∀ (F : ultrafilter α), F.Lim ∈ U → U ∈ F.to_filter
α : Type u,	_inst_1 : topological_space α,	_inst_2 : t2_space α,	_inst_3 : compact_space α,	U : set α	⊢ (∀ (x : α), x ∈ U → ∀ (l : ultrafilter α), ↑l ≤ 𝓝 x → U ∈ l) ↔ ∀ (F : ultrafilter α), F.Lim ∈ U → U ∈ F.to_filter
α : Type u,	_inst_1 : topological_space α,	_inst_2 : t2_space α,	_inst_3 : compact_space α,	U : set α	⊢ (∀ (F : ultrafilter α), F.Lim ∈ U → U ∈ F.to_filter) → ∀ (x : α), x ∈ U → ∀ (l : ultrafilter α), ↑l ≤ 𝓝 x → U ∈ l
α : Type u,	_inst_1 : topological_space α,	_inst_2 : t2_space α,	_inst_3 : compact_space α,	U : set α,	cond : ∀ (F : ultrafilter α), F.Lim ∈ U → U ∈ F.to_filter,	x : α,	hx : x ∈ U,	f : ultrafilter α,	h : ↑f ≤ 𝓝 x	⊢ U ∈ f
α : Type u,	_inst_1 : topological_space α,	_inst_2 : t2_space α,	_inst_3 : compact_space α,	U : set α,	cond : ∀ (F : ultrafilter α), F.Lim ∈ U → U ∈ F.to_filter,	x : α,	f : ultrafilter α,	h : ↑f ≤ 𝓝 x,	hx : f.Lim ∈ U	⊢ U ∈ f
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X	⊢ F.sheaf_condition ≃ Top.presheaf.sheaf_condition (F ⋙ G)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X	⊢ F.sheaf_condition → Top.presheaf.sheaf_condition (F ⋙ G)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : F.sheaf_condition,	ι : Type v,	U : ι → topological_space.opens ↥X	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : F.sheaf_condition,	ι : Type v,	U : ι → topological_space.opens ↥X,	t₁ : category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork F U)	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : F.sheaf_condition,	ι : Type v,	U : ι → topological_space.opens ↥X,	t₁ : category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork F U),	t₂ : category_theory.limits.is_limit (G.map_cone (Top.presheaf.sheaf_condition_equalizer_products.fork F U))	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : F.sheaf_condition,	ι : Type v,	U : ι → topological_space.opens ↥X,	t₁ : category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork F U),	t₂ : category_theory.limits.is_limit (G.map_cone (Top.presheaf.sheaf_condition_equalizer_products.fork F U)),	t₃ : category_theory.limits.is_limit ((category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).inv).obj (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U))	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X	⊢ F.sheaf_condition → Top.presheaf.sheaf_condition (F ⋙ G)		C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X	⊢ Top.presheaf.sheaf_condition (F ⋙ G) → F.sheaf_condition
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : F.sheaf_condition,	ι : Type v,	U : ι → topological_space.opens ↥X,	t₁ : category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork F U),	t₂ : category_theory.limits.is_limit (G.map_cone (Top.presheaf.sheaf_condition_equalizer_products.fork F U)),	t₃ : category_theory.limits.is_limit ((category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).inv).obj (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U)),	t₄ : category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U)	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X	⊢ Top.presheaf.sheaf_condition (F ⋙ G) → F.sheaf_condition
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork F U)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork F U)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f)	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork F U)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f)	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork F U)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork F U)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ category_theory.limits.limit.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)) ≅ Top.presheaf.sheaf_condition_equalizer_products.fork F U		C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ category_theory.limits.has_limit (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U))
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ Top.presheaf.sheaf_condition_equalizer_products.fork F U ≅ category_theory.limits.limit.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U))		C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ category_theory.limits.has_limit (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U))
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ (Top.presheaf.sheaf_condition_equalizer_products.fork F U).X ≅ (category_theory.limits.limit.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U))).X		C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ ∀ (j : category_theory.limits.walking_parallel_pair), (Top.presheaf.sheaf_condition_equalizer_products.fork F U).π.app j = ?m_2.hom ≫ (category_theory.limits.limit.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U))).π.app j		C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ category_theory.limits.has_limit (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U))
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ ∀ (j : category_theory.limits.walking_parallel_pair), (Top.presheaf.sheaf_condition_equalizer_products.fork F U).π.app j = (category_theory.as_iso f).hom ≫ (category_theory.limits.limit.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U))).π.app j
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ (Top.presheaf.sheaf_condition_equalizer_products.fork F U).π.app category_theory.limits.walking_parallel_pair.one = (category_theory.as_iso f).hom ≫ (category_theory.limits.limit.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U))).π.app category_theory.limits.walking_parallel_pair.one
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ Top.presheaf.sheaf_condition_equalizer_products.res F U ≫ Top.presheaf.sheaf_condition_equalizer_products.left_res F U = category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _ ≫ category_theory.limits.limit.π (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)) category_theory.limits.walking_parallel_pair.one
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f)	⊢ category_theory.limits.is_limit (Top.presheaf.sheaf_condition_equalizer_products.fork F U)		C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _	⊢ category_theory.is_iso (G.map f)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	this : category_theory.is_iso (G.map f),	_inst : category_theory.is_iso f	⊢ ∀ (j : category_theory.limits.walking_parallel_pair), (Top.presheaf.sheaf_condition_equalizer_products.fork F U).π.app j = (category_theory.as_iso f).hom ≫ (category_theory.limits.limit.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U))).π.app j
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _	⊢ category_theory.is_iso (G.map f)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U	⊢ category_theory.is_iso (G.map f)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c	⊢ category_theory.is_iso (G.map f)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U))	⊢ category_theory.is_iso (G.map f)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d	⊢ category_theory.is_iso (G.map f)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d	⊢ category_theory.is_iso (G.map f)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d,	hd' : category_theory.limits.is_limit d'	⊢ category_theory.is_iso (G.map f)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d,	hd' : category_theory.limits.is_limit d'	⊢ G.map f ≫ category_theory.limits.fork.ι d' = c.ι
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d,	hd' : category_theory.limits.is_limit d'	⊢ G.map (category_theory.limits.equalizer.lift (category_theory.limits.pi.lift (λ (i : ι), F.map (topological_space.opens.le_supr U i).op)) _) ≫ category_theory.limits.fork.ι ((category_theory.limits.cones.postcompose (category_theory.nat_iso.of_components (category_theory.limits.walking_parallel_pair.rec (category_theory.limits.preserves_product.iso G (λ (i : ι), F.obj (opposite.op (U i)))) (category_theory.limits.preserves_product.iso G (λ (p : ι × ι), F.obj (opposite.op (U p.fst ⊓ U p.snd))))) _).hom).obj (G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)))) = (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U).ι
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d,	hd' : category_theory.limits.is_limit d'	⊢ G.map (category_theory.limits.equalizer.lift (category_theory.limits.pi.lift (λ (i : ι), F.map (topological_space.opens.le_supr U i).op)) _) ≫ ((category_theory.limits.cones.postcompose (category_theory.nat_iso.of_components (category_theory.limits.walking_parallel_pair.rec (category_theory.limits.preserves_product.iso G (λ (i : ι), F.obj (opposite.op (U i)))) (category_theory.limits.preserves_product.iso G (λ (p : ι × ι), F.obj (opposite.op (U p.fst ⊓ U p.snd))))) _).hom).obj (G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)))).π.app category_theory.limits.walking_parallel_pair.zero = (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U).π.app category_theory.limits.walking_parallel_pair.zero
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d,	hd' : category_theory.limits.is_limit d',	j : category_theory.discrete ι	⊢ (G.map (category_theory.limits.equalizer.lift (category_theory.limits.pi.lift (λ (i : ι), F.map (topological_space.opens.le_supr U i).op)) _) ≫ ((category_theory.limits.cones.postcompose (category_theory.nat_iso.of_components (category_theory.limits.walking_parallel_pair.rec (category_theory.limits.preserves_product.iso G (λ (i : ι), F.obj (opposite.op (U i)))) (category_theory.limits.preserves_product.iso G (λ (p : ι × ι), F.obj (opposite.op (U p.fst ⊓ U p.snd))))) _).hom).obj (G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)))).π.app category_theory.limits.walking_parallel_pair.zero) ≫ category_theory.limits.limit.π (category_theory.discrete.functor (λ (i : ι), (F ⋙ G).obj (opposite.op (U i)))) j = (Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U).π.app category_theory.limits.walking_parallel_pair.zero ≫ category_theory.limits.limit.π (category_theory.discrete.functor (λ (i : ι), (F ⋙ G).obj (opposite.op (U i)))) j
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d,	hd' : category_theory.limits.is_limit d',	j : category_theory.discrete ι	⊢ (G.map (category_theory.limits.equalizer.lift (category_theory.limits.pi.lift (λ (i : ι), F.map (topological_space.opens.le_supr U i).op)) _) ≫ G.map (category_theory.limits.equalizer.ι (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)) ≫ category_theory.limits.pi_comparison G (λ (i : ι), F.obj (opposite.op (U i)))) ≫ category_theory.limits.limit.π (category_theory.discrete.functor (λ (i : ι), G.obj (F.obj (opposite.op (U i))))) j = Top.presheaf.sheaf_condition_equalizer_products.res (F ⋙ G) U ≫ category_theory.limits.limit.π (category_theory.discrete.functor (λ (i : ι), G.obj (F.obj (opposite.op (U i))))) j
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d,	hd' : category_theory.limits.is_limit d',	j : category_theory.discrete ι	⊢ category_theory.limits.pi.lift (λ (j : ι), G.map (F.map (topological_space.opens.le_supr U j).op)) ≫ category_theory.limits.limit.π (category_theory.discrete.functor (λ (i : ι), G.obj (F.obj (opposite.op (U i))))) j = category_theory.limits.pi.lift (λ (i : ι), G.map (F.map (topological_space.opens.le_supr U i).op)) ≫ category_theory.limits.limit.π (category_theory.discrete.functor (λ (i : ι), G.obj (F.obj (opposite.op (U i))))) j
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d,	hd' : category_theory.limits.is_limit d',	j : category_theory.discrete ι	⊢ category_theory.limits.pi.lift (λ (j : ι), G.map (F.map (topological_space.opens.le_supr U j).op)) ≫ category_theory.limits.limit.π (category_theory.discrete.functor (λ (i : ι), G.obj (F.obj (opposite.op (U i))))) j = Top.presheaf.sheaf_condition_equalizer_products.res (F ⋙ G) U ≫ category_theory.limits.limit.π (category_theory.discrete.functor (λ (i : ι), G.obj (F.obj (opposite.op (U i))))) j
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d,	hd' : category_theory.limits.is_limit d',	f' : c ⟶ d' := category_theory.limits.fork.mk_hom (G.map f) _	⊢ category_theory.is_iso (G.map f)
C : Type u₁,	_inst_1 : category_theory.category C,	D : Type u₂,	_inst_2 : category_theory.category D,	G : C ⥤ D,	_inst_3 : category_theory.reflects_isomorphisms G,	_inst_4 : category_theory.limits.has_limits C,	_inst_5 : category_theory.limits.has_limits D,	_inst_6 : category_theory.limits.preserves_limits G,	X : Top,	F : Top.presheaf C X,	S : Top.presheaf.sheaf_condition (F ⋙ G),	ι : Type v,	U : ι → topological_space.opens ↥X,	f : F.obj (opposite.op (supr U)) ⟶ category_theory.limits.equalizer (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) := category_theory.limits.equalizer.lift (Top.presheaf.sheaf_condition_equalizer_products.res F U) _,	c : category_theory.limits.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res (F ⋙ G) U) (Top.presheaf.sheaf_condition_equalizer_products.right_res (F ⋙ G) U) := Top.presheaf.sheaf_condition_equalizer_products.fork (F ⋙ G) U,	hc : category_theory.limits.is_limit c,	d : category_theory.limits.cone (category_theory.limits.parallel_pair (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U) ⋙ G) := G.map_cone (category_theory.limits.equalizer.fork (Top.presheaf.sheaf_condition_equalizer_products.left_res F U) (Top.presheaf.sheaf_condition_equalizer_products.right_res F U)),	hd : category_theory.limits.is_limit d,	d' : category_theory.limits.cone (Top.presheaf.sheaf_condition_equalizer_products.diagram (F ⋙ G) U) := (category_theory.limits.cones.postcompose (Top.presheaf.sheaf_condition.diagram_comp_preserves_limits G F U).hom).obj d,	hd' : category_theory.limits.is_limit d',	f' : c ⟶ d' := category_theory.limits.fork.mk_hom (G.map f) _,	_inst : category_theory.is_iso f'	⊢ category_theory.is_iso (G.map f)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf	⊢ F.gluing U sf
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf,	gl : ↥(F.obj (opposite.op (supr U))),	gl_spec : F.is_gluing U sf gl,	gl_uniq : ∀ (y : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf y → y = gl	⊢ F.gluing U sf
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf	⊢ ∀ (a : F.gluing U sf), a = inhabited.default (F.gluing U sf)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf,	s : F.gluing U sf	⊢ s = inhabited.default (F.gluing U sf)
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf,	s : F.gluing U sf,	t : F.gluing U sf := ?m_1	⊢ s = inhabited.default (F.gluing U sf)		C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf,	s : F.gluing U sf	⊢ F.gluing U sf
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf,	s : F.gluing U sf,	t : F.gluing U sf := inhabited.default (F.gluing U sf)	⊢ s = t
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf,	s : F.gluing U sf,	t : F.gluing U sf := inhabited.default (F.gluing U sf)	⊢ ↑s = ↑t
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf,	s : F.gluing U sf,	t : F.gluing U sf := inhabited.default (F.gluing U sf),	gl : ↥(F.obj (opposite.op (supr U))),	gl_spec : F.is_gluing U sf gl,	gl_uniq : ∀ (y : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf y → y = gl	⊢ ↑s = ↑t
C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf,	s : F.gluing U sf,	t : F.gluing U sf := inhabited.default (F.gluing U sf),	gl : ↥(F.obj (opposite.op (supr U))),	gl_spec : F.is_gluing U sf gl,	gl_uniq : ∀ (y : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf y → y = gl	⊢ F.is_gluing U sf s.val		C : Type u,	_inst_1 : category_theory.category C,	_inst_2 : category_theory.concrete_category C,	_inst_3 : category_theory.limits.has_limits C,	_inst_4 : category_theory.reflects_isomorphisms (category_theory.forget C),	_inst_5 : category_theory.limits.preserves_limits (category_theory.forget C),	X : Top,	F : Top.presheaf C X,	h : ∀ ⦃ι : Type v⦄ (U : ι → topological_space.opens ↥X) (sf : Π (i : ι), ↥(F.obj (opposite.op (U i)))), F.is_compatible U sf → (∃! (s : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf s),	ι : Type v,	U : ι → topological_space.opens ↥X,	sf : Π (i : ι), ↥(F.obj (opposite.op (U i))),	hsf : F.is_compatible U sf,	s : F.gluing U sf,	t : F.gluing U sf := inhabited.default (F.gluing U sf),	gl : ↥(F.obj (opposite.op (supr U))),	gl_spec : F.is_gluing U sf gl,	gl_uniq : ∀ (y : ↥(F.obj (opposite.op (supr U)))), F.is_gluing U sf y → y = gl	⊢ F.is_gluing U sf t.val
ι : Type u_1,	X : Type u_2,	_inst_1 : topological_space X,	_inst_2 : normal_space X,	u : ι → set X,	s : set X,	c : set (shrinking_lemma.partial_refinement u s),	hc : zorn.chain has_le.le c,	v₁ v₂ : shrinking_lemma.partial_refinement u s,	h₁ : v₁ ∈ c,	h₂ : v₂ ∈ c,	i : ι,	hi₁ : i ∈ v₁.carrier,	hi₂ : i ∈ v₂.carrier	⊢ ⇑v₁ i = ⇑v₂ i
ι : Type u_1,	X : Type u_2,	_inst_1 : topological_space X,	_inst_2 : normal_space X,	u : ι → set X,	s : set X,	c : set (shrinking_lemma.partial_refinement u s),	hc : zorn.chain has_le.le c,	i : ι,	v₁ v₂ : shrinking_lemma.partial_refinement u s,	hle : v₁ ≤ v₂,	h₁ : v₁ ∈ c,	h₂ : v₂ ∈ c,	hi₁ : i ∈ v₁.carrier,	hi₂ : i ∈ v₂.carrier	⊢ ⇑v₁ i = ⇑v₂ i
α : Type u	⊢ ∀ (t₁ : set (ultrafilter α)), t₁ ∈ ultrafilter_basis α → ∀ (t₂ : set (ultrafilter α)), t₂ ∈ ultrafilter_basis α → ∀ (x : ultrafilter α), x ∈ t₁ ∩ t₂ → (∃ (t₃ : set (ultrafilter α)) (H : t₃ ∈ ultrafilter_basis α), x ∈ t₃ ∧ t₃ ⊆ t₁ ∩ t₂)
α : Type u,	u : ultrafilter α,	a b : set α,	ua : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a,	ub : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b	⊢ ∃ (t₃ : set (ultrafilter α)) (H : t₃ ∈ ultrafilter_basis α), u ∈ t₃ ∧ t₃ ⊆ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a ∩ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b
α : Type u,	u : ultrafilter α,	a b : set α,	ua : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a,	ub : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b	⊢ ∃ (t₃ : set (ultrafilter α)) (H : t₃ ∈ ultrafilter_basis α), u ∈ t₃ ∧ t₃ ⊆ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a ∩ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b
α : Type u,	u : ultrafilter α,	a b : set α,	ua : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a,	ub : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b	⊢ ∃ (t₃ : set (ultrafilter α)) (H : t₃ ∈ ultrafilter_basis α), u ∈ t₃ ∧ t₃ ⊆ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a ∩ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b
α : Type u,	u : ultrafilter α,	a b : set α,	ua : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a,	ub : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b,	v : ultrafilter α,	hv : v ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) (a ∩ b)	⊢ a ∩ b ⊆ a
α : Type u,	u : ultrafilter α,	a b : set α,	ua : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a,	ub : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b,	v : ultrafilter α,	hv : v ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) (a ∩ b)	⊢ a ∩ b ⊆ b
α : Type u,	u : ultrafilter α,	a b : set α,	ua : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a,	ub : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b,	v : ultrafilter α,	hv : v ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) (a ∩ b)	⊢ v ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a
α : Type u,	u : ultrafilter α,	a b : set α,	ua : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) a,	ub : u ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b,	v : ultrafilter α,	hv : v ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) (a ∩ b)	⊢ v ∈ (λ (s : set α), {u : ultrafilter α | s ∈ u}) b
α : Type u,	_inst_1 : topological_space α,	s : set α,	ι : Type v,	hs : is_compact s,	Z : ι → set α,	hZc : ∀ (i : ι), is_closed (Z i),	hsZ : (s ∩ ⋂ (i : ι), Z i) = ∅	⊢ s ⊆ ⋃ (i : ι), (λ (i : ι), (Z i)ᶜ) i
α : Type u,	_inst_1 : topological_space α,	s : set α,	ι : Type v,	hs : is_compact s,	Z : ι → set α,	hZc : ∀ (i : ι), is_closed (Z i),	hsZ : (s ∩ ⋂ (i : ι), Z i) = ∅,	_let_match : (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), (λ (i : ι), (Z i)ᶜ) i) → (∃ (t : finset ι), (s ∩ ⋂ (i : ι) (H : i ∈ t), Z i) = ∅),	t : finset ι,	ht : s ⊆ ⋃ (i : ι) (H : i ∈ t), (λ (i : ι), (Z i)ᶜ) i	⊢ (s ∩ ⋂ (i : ι) (H : i ∈ t), Z i) = ∅
α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : is_compact (f '' s)	⊢ is_compact s
α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : ∀ (f_1 : ultrafilter β), ↑f_1 ≤ 𝓟 (f '' s) → (∃ (a : β) (H : a ∈ f '' s), ↑f_1 ≤ 𝓝 a)	⊢ ∀ (f : ultrafilter α), ↑f ≤ 𝓟 s → (∃ (a : α) (H : a ∈ s), ↑f ≤ 𝓝 a)
α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : ∀ (f_1 : ultrafilter β), ↑f_1 ≤ 𝓟 (f '' s) → (∃ (a : β) (H : a ∈ f '' s), ↑f_1 ≤ 𝓝 a),	u : ultrafilter α,	us' : ↑u ≤ 𝓟 s	⊢ ∃ (a : α) (H : a ∈ s), ↑u ≤ 𝓝 a
α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : ∀ (f_1 : ultrafilter β), ↑f_1 ≤ 𝓟 (f '' s) → (∃ (a : β) (H : a ∈ f '' s), ↑f_1 ≤ 𝓝 a),	u : ultrafilter α,	us' : ↑u ≤ 𝓟 s	⊢ ↑(ultrafilter.map f u) ≤ 𝓟 (f '' s)
α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : ∀ (f_1 : ultrafilter β), ↑f_1 ≤ 𝓟 (f '' s) → (∃ (a : β) (H : a ∈ f '' s), ↑f_1 ≤ 𝓝 a),	u : ultrafilter α,	us' : ↑u ≤ 𝓟 s	⊢ ↑u ≤ 𝓟 (f ⁻¹' (f '' s))
α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : ∀ (f_1 : ultrafilter β), ↑f_1 ≤ 𝓟 (f '' s) → (∃ (a : β) (H : a ∈ f '' s), ↑f_1 ≤ 𝓝 a),	u : ultrafilter α,	us' : ↑u ≤ 𝓟 s	⊢ f ⁻¹' (f '' s) = s
α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : ∀ (f_1 : ultrafilter β), ↑f_1 ≤ 𝓟 (f '' s) → (∃ (a : β) (H : a ∈ f '' s), ↑f_1 ≤ 𝓝 a),	u : ultrafilter α,	us' : ↑u ≤ 𝓟 s	⊢ ↑(ultrafilter.map f u) ≤ 𝓟 (f '' s)		α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : ∀ (f_1 : ultrafilter β), ↑f_1 ≤ 𝓟 (f '' s) → (∃ (a : β) (H : a ∈ f '' s), ↑f_1 ≤ 𝓝 a),	u : ultrafilter α,	us' : ↑u ≤ 𝓟 s,	this : ↑(ultrafilter.map f u) ≤ 𝓟 (f '' s)	⊢ ∃ (a : α) (H : a ∈ s), ↑u ≤ 𝓝 a
α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : ∀ (f_1 : ultrafilter β), ↑f_1 ≤ 𝓟 (f '' s) → (∃ (a : β) (H : a ∈ f '' s), ↑f_1 ≤ 𝓝 a),	u : ultrafilter α,	us' : ↑u ≤ 𝓟 s,	this : ↑(ultrafilter.map f u) ≤ 𝓟 (f '' s)	⊢ ∃ (a : α) (H : a ∈ s), ↑u ≤ 𝓝 a
α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : ∀ (f_1 : ultrafilter β), ↑f_1 ≤ 𝓟 (f '' s) → (∃ (a : β) (H : a ∈ f '' s), ↑f_1 ≤ 𝓝 a),	u : ultrafilter α,	us' : ↑u ≤ 𝓟 s,	this : ↑(ultrafilter.map f u) ≤ 𝓟 (f '' s),	a : α,	ha : a ∈ s,	h_1_h : ↑(ultrafilter.map f u) ≤ 𝓝 (f a),	h_1_w_h_right : f a = f a	⊢ ∃ (a : α) (H : a ∈ s), ↑u ≤ 𝓝 a
α : Type u,	β : Type v,	_inst_1 : topological_space α,	s : set α,	_inst_2 : topological_space β,	f : α → β,	hf : embedding f,	h : ∀ (f_1 : ultrafilter β), ↑f_1 ≤ 𝓟 (f '' s) → (∃ (a : β) (H : a ∈ f '' s), ↑f_1 ≤ 𝓝 a),	u : ultrafilter α,	us' : ↑u ≤ 𝓟 s,	this : ↑(ultrafilter.map f u) ≤ 𝓟 (f '' s),	a : α,	ha : a ∈ s,	h_1_h : ↑(ultrafilter.map f u) ≤ 𝓝 (f a),	h_1_w_h_right : f a = f a	⊢ ↑u ≤ 𝓝 a
α : Type u_1,	_inst_1 : uniform_space α,	x : α,	s : set α	⊢ s ∈ 𝓝 x ↔ ∃ (V : set (α × α)) (H : V ∈ 𝓤 α), symmetric_rel V ∧ uniform_space.ball x V ⊆ s
α : Type u_1,	_inst_1 : uniform_space α,	x : α,	s : set α	⊢ (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ s) ↔ ∃ (V : set (α × α)) (H : V ∈ 𝓤 α), symmetric_rel V ∧ uniform_space.ball x V ⊆ s
α : Type u_1,	_inst_1 : uniform_space α,	x : α,	s : set α	⊢ (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ s) → (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), symmetric_rel V ∧ uniform_space.ball x V ⊆ s)
α : Type u_1,	_inst_1 : uniform_space α,	x : α,	s : set α,	V : set (α × α),	V_in : V ∈ 𝓤 α,	V_sub : uniform_space.ball x V ⊆ s	⊢ ∃ (V : set (α × α)) (H : V ∈ 𝓤 α), symmetric_rel V ∧ uniform_space.ball x V ⊆ s
α : Type u_1,	_inst_1 : uniform_space α,	x : α,	s : set α,	V : set (α × α),	V_in : V ∈ 𝓤 α,	V_sub : uniform_space.ball x V ⊆ s	⊢ uniform_space.ball x (symmetrize_rel V) ⊆ s
α : Type u_1,	_inst_1 : uniform_space α,	x : α,	s : set α	⊢ (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ s) → (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), symmetric_rel V ∧ uniform_space.ball x V ⊆ s)		α : Type u_1,	_inst_1 : uniform_space α,	x : α,	s : set α	⊢ (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), symmetric_rel V ∧ uniform_space.ball x V ⊆ s) → (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ s)
α : Type u_1,	_inst_1 : uniform_space α,	x : α,	s : set α	⊢ (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), symmetric_rel V ∧ uniform_space.ball x V ⊆ s) → (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ s)
α : Type u_1,	_inst_1 : uniform_space α,	x : α,	s : set α,	V : set (α × α),	V_in : V ∈ 𝓤 α,	V_symm : symmetric_rel V,	V_sub : uniform_space.ball x V ⊆ s	⊢ ∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ s
α : Type u_1,	_inst_1 : uniform_space α,	s : set α,	x : α	⊢ x ∈ closure s ↔ ∀ {V : set (α × α)}, V ∈ 𝓤 α → (uniform_space.ball x V ∩ s).nonempty
α : Type u_1,	_inst_1 : uniform_space α,	s : set α,	x : α	⊢ (∀ (t : set α), (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ t) → (t ∩ s).nonempty) ↔ ∀ {V : set (α × α)}, V ∈ 𝓤 α → (uniform_space.ball x V ∩ s).nonempty
α : Type u_1,	_inst_1 : uniform_space α,	s : set α,	x : α	⊢ (∀ (t : set α), (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ t) → (t ∩ s).nonempty) → ∀ {V : set (α × α)}, V ∈ 𝓤 α → (uniform_space.ball x V ∩ s).nonempty
α : Type u_1,	_inst_1 : uniform_space α,	s : set α,	x : α	⊢ (∀ (t : set α), (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ t) → (t ∩ s).nonempty) → ∀ {V : set (α × α)}, V ∈ 𝓤 α → (uniform_space.ball x V ∩ s).nonempty		α : Type u_1,	_inst_1 : uniform_space α,	s : set α,	x : α	⊢ (∀ {V : set (α × α)}, V ∈ 𝓤 α → (uniform_space.ball x V ∩ s).nonempty) → ∀ (t : set α), (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ t) → (t ∩ s).nonempty
α : Type u_1,	_inst_1 : uniform_space α,	s : set α,	x : α,	h : ∀ (t : set α), (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ t) → (t ∩ s).nonempty,	V : set (α × α),	V_in : V ∈ 𝓤 α	⊢ (uniform_space.ball x V ∩ s).nonempty
α : Type u_1,	_inst_1 : uniform_space α,	s : set α,	x : α	⊢ (∀ {V : set (α × α)}, V ∈ 𝓤 α → (uniform_space.ball x V ∩ s).nonempty) → ∀ (t : set α), (∃ (V : set (α × α)) (H : V ∈ 𝓤 α), uniform_space.ball x V ⊆ t) → (t ∩ s).nonempty
α : Type u_1,	_inst_1 : uniform_space α,	s : set α,	x : α,	h : ∀ {V : set (α × α)}, V ∈ 𝓤 α → (uniform_space.ball x V ∩ s).nonempty,	t : set α,	V : set (α × α),	V_in : V ∈ 𝓤 α,	Vt : uniform_space.ball x V ⊆ t	⊢ (t ∩ s).nonempty
α : Type u_1,	_inst_1 : uniform_space α,	s : set (α × α),	hs : s ∈ 𝓤 α	⊢ 𝓤 α ≤ (𝓟 ∘ closure) s
α : Type u_1,	_inst_1 : uniform_space α,	s : set (α × α),	hs : s ∈ 𝓤 α	⊢ 𝓤 α ≤ (𝓟 ∘ closure) s
α : Type u_1,	_inst_1 : uniform_space α,	s : set (α × α),	hs : s ∈ 𝓤 α	⊢ closure s ∈ 𝓤 α
α : Type u_1,	_inst_1 : uniform_space α	⊢ ∀ (s : set (α × α)), s ∈ 𝓤 α → closure s ⊆ s ○ (s ○ s)
α : Type u_1,	_inst_1 : uniform_space α	⊢ ∀ (s : set (α × α)), s ∈ 𝓤 α → closure s ⊆ s ○ (s ○ s)
α : Type u_1,	_inst_1 : uniform_space α	⊢ ∀ (s : set (α × α)), s ∈ 𝓤 α → closure s ⊆ s ○ (s ○ s)
α : Type u_1,	_inst_1 : uniform_space α,	s : set (α × α),	hs : s ∈ 𝓤 α	⊢ closure s ⊆ s ○ (s ○ s)
α : Type u_1,	_inst_1 : uniform_space α,	s : set (α × α),	hs : s ∈ 𝓤 α	⊢ (⋂ (d : set (α × α)) (H : d ∈ 𝓤 α), d ○ (s ○ d)) ⊆ s ○ (s ○ s)
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α	⊢ ∃ (t : set α) (H : t ⊆ s), t.finite ∧ s ⊆ ⋃ (y : α) (H : y ∈ t), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d	⊢ ∃ (t : set α) (H : t ⊆ s), t.finite ∧ s ⊆ ⋃ (y : α) (H : y ∈ t), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r}	⊢ ∃ (t : set α) (H : t ⊆ s), t.finite ∧ s ⊆ ⋃ (y : α) (H : y ∈ t), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r}	⊢ ∃ (t : set α) (H : t ⊆ s), t.finite ∧ s ⊆ ⋃ (y : α) (H : y ∈ t), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r	⊢ ∃ (t : set α) (H : t ⊆ s), t.finite ∧ s ⊆ ⋃ (y : α) (H : y ∈ t), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r	⊢ set.range f ⊆ s		α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r	⊢ (set.range f).finite		α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r	⊢ s ⊆ ⋃ (y : α) (H : y ∈ set.range f), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r	⊢ set.range f ⊆ s
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r	⊢ (set.range f).finite
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r	⊢ (set.range f).finite		α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r	⊢ s ⊆ ⋃ (y : α) (H : y ∈ set.range f), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r,	_inst : fintype ↥u	⊢ (set.range f).finite
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r	⊢ s ⊆ ⋃ (y : α) (H : y ∈ set.range f), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r,	x : α,	xs : x ∈ s	⊢ ∃ (y : α) (H : y ∈ k), (x, y) ∈ r		α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r,	x : α,	xs : x ∈ s,	y : α,	hy : y ∈ k,	xy : (x, y) ∈ r	⊢ x ∈ ⋃ (y : α) (H : y ∈ set.range f), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r,	x : α,	xs : x ∈ s	⊢ x ∈ ⋃ (y : α) (H : y ∈ set.range f), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r,	x : α,	xs : x ∈ s,	y : α,	hy : y ∈ k,	xy : (x, y) ∈ r	⊢ x ∈ ⋃ (y : α) (H : y ∈ set.range f), {x : α | (x, y) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r,	x : α,	xs : x ∈ s,	y : α,	hy : y ∈ k,	xy : (x, y) ∈ r	⊢ ∃ (i : ↥u), x ∈ {x : α | (x, f i) ∈ d}
α : Type u,	_inst_1 : uniform_space α,	s : set α,	H : totally_bounded s,	d : set (α × α),	hd : d ∈ 𝓤 α,	r : set (α × α),	hr : r ∈ 𝓤 α,	rs : ∀ {a b : α}, (a, b) ∈ r → (b, a) ∈ r,	rd : r ○ r ⊆ d,	k : set α,	fk : k.finite,	ks : s ⊆ ⋃ (y : α) (H : y ∈ k), {x : α | (x, y) ∈ r},	u : set α := k ∩ {y : α | ∃ (x : α) (H : x ∈ s), (x, y) ∈ r},	hk : ∀ (x : ↥u), ↑x ∈ k,	f : ↥u → α,	hfs : ∀ (x : ↥u), f x ∈ s,	hfr : ∀ (x : ↥u), (f x, ↑x) ∈ r,	x : α,	xs : x ∈ s,	y : α,	hy : y ∈ k,	xy : (x, y) ∈ r,	z : ↥u := ⟨y, _⟩	⊢ ∃ (i : ↥u), x ∈ {x : α | (x, f i) ∈ d}
α : Type u_1,	_inst_1 : uniform_space α,	h : complete_space α,	f : filter (quotient (uniform_space.separation_setoid α)),	hf : cauchy f,	this : cauchy (filter.comap (λ (x : α), ⟦x⟧) f),	_let_match : (∃ (x : α), filter.comap (λ (x : α), ⟦x⟧) f ≤ 𝓝 x) → (∃ (x : quotient (uniform_space.separation_setoid α)), f ≤ 𝓝 x),	x : α,	hx : filter.comap (λ (x : α), ⟦x⟧) f ≤ 𝓝 x	⊢ set.range (λ (x : α), ⟦x⟧) ∈ f
α : Type u,	β : Type v,	ι : Type u_1,	_inst_1 : uniform_space β,	F : ι → α → β,	f : α → β,	p : filter ι	⊢ tendsto_uniformly_on F f p set.univ ↔ tendsto_uniformly F f p
α : Type u_1,	_inst_1 : uniform_space α,	s : set α,	hs : is_complete s	⊢ is_complete (coe '' set.univ)
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β,	s : set β,	hf : uniform_embedding f,	hs : totally_bounded s,	t : set (α × α),	ht : t ∈ 𝓤 α	⊢ ∃ (t_1 : set α), t_1.finite ∧ f ⁻¹' s ⊆ ⋃ (y : α) (H : y ∈ t_1), {x : α | (x, y) ∈ t}
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β,	s : set β,	hf : uniform_embedding f,	hs : totally_bounded s,	t : set (α × α),	ht : t ∈ filter.comap (λ (x : α × α), (f x.fst, f x.snd)) (𝓤 β)	⊢ ∃ (t_1 : set α), t_1.finite ∧ f ⁻¹' s ⊆ ⋃ (y : α) (H : y ∈ t_1), {x : α | (x, y) ∈ t}
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β,	s : set β,	hf : uniform_embedding f,	hs : totally_bounded s,	t : set (α × α),	ht : t ∈ filter.comap (λ (x : α × α), (f x.fst, f x.snd)) (𝓤 β),	t' : set (β × β),	ht' : t' ∈ 𝓤 β,	ts : (λ (x : α × α), (f x.fst, f x.snd)) ⁻¹' t' ⊆ t	⊢ ∃ (t_1 : set α), t_1.finite ∧ f ⁻¹' s ⊆ ⋃ (y : α) (H : y ∈ t_1), {x : α | (x, y) ∈ t}
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β,	s : set β,	hf : uniform_embedding f,	hs : totally_bounded s,	t : set (α × α),	ht : t ∈ filter.comap (λ (x : α × α), (f x.fst, f x.snd)) (𝓤 β),	t' : set (β × β),	ht' : t' ∈ 𝓤 β,	ts : (λ (x : α × α), (f x.fst, f x.snd)) ⁻¹' t' ⊆ t,	c : set β,	cs : c ⊆ f '' (f ⁻¹' s),	hfc : c.finite,	hct : f '' (f ⁻¹' s) ⊆ ⋃ (y : β) (H : y ∈ c), {x : β | (x, y) ∈ t'}	⊢ ∃ (t_1 : set α), t_1.finite ∧ f ⁻¹' s ⊆ ⋃ (y : α) (H : y ∈ t_1), {x : α | (x, y) ∈ t}
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β,	s : set β,	hf : uniform_embedding f,	hs : totally_bounded s,	t : set (α × α),	ht : t ∈ filter.comap (λ (x : α × α), (f x.fst, f x.snd)) (𝓤 β),	t' : set (β × β),	ht' : t' ∈ 𝓤 β,	ts : (λ (x : α × α), (f x.fst, f x.snd)) ⁻¹' t' ⊆ t,	c : set β,	cs : c ⊆ f '' (f ⁻¹' s),	hfc : c.finite,	hct : f '' (f ⁻¹' s) ⊆ ⋃ (y : β) (H : y ∈ c), {x : β | (x, y) ∈ t'},	x : α,	h : x ∈ f ⁻¹' s,	this : f x ∈ ⋃ (y : β) (H : y ∈ c), {x : β | (x, y) ∈ t'}	⊢ x ∈ ⋃ (y : α) (H : y ∈ f ⁻¹' c), {x : α | (x, y) ∈ t}
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β,	s : set β,	hf : uniform_embedding f,	hs : totally_bounded s,	t : set (α × α),	ht : t ∈ filter.comap (λ (x : α × α), (f x.fst, f x.snd)) (𝓤 β),	t' : set (β × β),	ht' : t' ∈ 𝓤 β,	ts : (λ (x : α × α), (f x.fst, f x.snd)) ⁻¹' t' ⊆ t,	c : set β,	cs : c ⊆ f '' (f ⁻¹' s),	hfc : c.finite,	hct : f '' (f ⁻¹' s) ⊆ ⋃ (y : β) (H : y ∈ c), {x : β | (x, y) ∈ t'},	x : α,	h : x ∈ f ⁻¹' s	⊢ x ∈ ⋃ (y : α) (H : y ∈ f ⁻¹' c), {x : α | (x, y) ∈ t}
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β,	s : set β,	hf : uniform_embedding f,	hs : totally_bounded s,	t : set (α × α),	ht : t ∈ filter.comap (λ (x : α × α), (f x.fst, f x.snd)) (𝓤 β),	t' : set (β × β),	ht' : t' ∈ 𝓤 β,	ts : (λ (x : α × α), (f x.fst, f x.snd)) ⁻¹' t' ⊆ t,	c : set β,	cs : c ⊆ f '' (f ⁻¹' s),	hfc : c.finite,	hct : f '' (f ⁻¹' s) ⊆ ⋃ (y : β) (H : y ∈ c), {x : β | (x, y) ∈ t'},	x : α,	h : x ∈ f ⁻¹' s,	this : ∃ (i : β), i ∈ c ∧ (f x, i) ∈ t'	⊢ ∃ (i : α), f i ∈ c ∧ (x, i) ∈ t
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β,	s : set β,	hf : uniform_embedding f,	hs : totally_bounded s,	t : set (α × α),	ht : t ∈ filter.comap (λ (x : α × α), (f x.fst, f x.snd)) (𝓤 β),	t' : set (β × β),	ht' : t' ∈ 𝓤 β,	ts : (λ (x : α × α), (f x.fst, f x.snd)) ⁻¹' t' ⊆ t,	c : set β,	cs : c ⊆ f '' (f ⁻¹' s),	hfc : c.finite,	hct : f '' (f ⁻¹' s) ⊆ ⋃ (y : β) (H : y ∈ c), {x : β | (x, y) ∈ t'},	x : α,	h : x ∈ f ⁻¹' s,	z : β,	zc : z ∈ c,	zt : (f x, z) ∈ t'	⊢ ∃ (i : α), f i ∈ c ∧ (x, i) ∈ t
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β,	s : set β,	hf : uniform_embedding f,	hs : totally_bounded s,	t : set (α × α),	ht : t ∈ filter.comap (λ (x : α × α), (f x.fst, f x.snd)) (𝓤 β),	t' : set (β × β),	ht' : t' ∈ 𝓤 β,	ts : (λ (x : α × α), (f x.fst, f x.snd)) ⁻¹' t' ⊆ t,	c : set β,	cs : c ⊆ f '' (f ⁻¹' s),	hfc : c.finite,	hct : f '' (f ⁻¹' s) ⊆ ⋃ (y : β) (H : y ∈ c), {x : β | (x, y) ∈ t'},	x : α,	h : x ∈ f ⁻¹' s,	y : α,	yc : y ∈ f ⁻¹' s,	zc : f y ∈ c,	zt : (f x, f y) ∈ t'	⊢ (x, y) ∈ (λ (x : α × α), (f x.fst, f x.snd)) ⁻¹' t'
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β,	s : set β,	hf : uniform_embedding f,	hs : totally_bounded s,	t : set (α × α),	ht : t ∈ filter.comap (λ (x : α × α), (f x.fst, f x.snd)) (𝓤 β),	t' : set (β × β),	ht' : t' ∈ 𝓤 β,	ts : (λ (x : α × α), (f x.fst, f x.snd)) ⁻¹' t' ⊆ t,	c : set β,	cs : c ⊆ f '' (f ⁻¹' s),	hfc : c.finite,	hct : f '' (f ⁻¹' s) ⊆ ⋃ (y : β) (H : y ∈ c), {x : β | (x, y) ∈ t'},	x : α,	h : x ∈ f ⁻¹' s,	y : α,	yc : y ∈ f ⁻¹' s,	zc : f y ∈ c,	zt : (f x, f y) ∈ t'	⊢ ∃ (i : α), f i ∈ c ∧ (x, i) ∈ t
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β	⊢ uniform_embedding f ↔ function.injective f ∧ uniform_continuous f ∧ ∀ (s : set (α × α)), s ∈ 𝓤 α → (∃ (t : set (β × β)) (H : t ∈ 𝓤 β), ∀ (x y : α), (f x, f y) ∈ t → (x, y) ∈ s)
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β	⊢ uniform_embedding f ↔ function.injective f ∧ uniform_continuous f ∧ ∀ (s : set (α × α)), s ∈ 𝓤 α → (∃ (t : set (β × β)) (H : t ∈ 𝓤 β), ∀ (x y : α), (f x, f y) ∈ t → (x, y) ∈ s)
α : Type u_1,	β : Type u_2,	_inst_1 : uniform_space α,	_inst_2 : uniform_space β,	f : α → β	⊢ (function.injective f ∧ ∀ (s : set (α × α)), s ∈ 𝓤 α ↔ ∃ (t : set (β × β)) (H : t ∈ 𝓤 β), ∀ (x y : α), (f x, f y) ∈ t → (x, y) ∈ s) ↔ function.injective f ∧ (∀ (r : set (β × β)), r ∈ 𝓤 β → {x : α × α | (f x.fst, f x.snd) ∈ r} ∈ 𝓤 α) ∧ ∀ (s : set (α × α)), s ∈ 𝓤 α → (∃ (t : set (β × β)) (H : t ∈ 𝓤 β), ∀ (x y : α), (f x, f y) ∈ t → (x, y) ∈ s)
R : Type u_1,	B : Type u_2,	F : Type u_3,	E : B → Type u_4,	_inst_1 : semiring R,	_inst_2 : Π (x : B), add_comm_monoid (E x),	_inst_3 : Π (x : B), module R (E x),	_inst_4 : topological_space F,	_inst_5 : add_comm_monoid F,	_inst_6 : module R F,	_inst_7 : topological_space (bundle.total_space E),	_inst_8 : topological_space B,	_inst_9 : Π (x : B), topological_space (E x),	_inst_10 : topological_vector_bundle R F E,	z : bundle.total_space E	⊢ bundle.proj E z ∈ (topological_vector_bundle.trivialization_at R F E z.fst).to_fiber_bundle_trivialization.base_set
R : Type u_1,	B : Type u_2,	F : Type u_3,	E : B → Type u_4,	_inst_1 : semiring R,	_inst_2 : Π (x : B), add_comm_monoid (E x),	_inst_3 : Π (x : B), module R (E x),	_inst_4 : topological_space F,	_inst_5 : add_comm_monoid F,	_inst_6 : module R F,	_inst_7 : topological_space (bundle.total_space E),	_inst_8 : topological_space B,	_inst_9 : Π (x : B), topological_space (E x),	_inst_10 : topological_vector_bundle R F E,	z : bundle.total_space E	⊢ z ∈ (topological_vector_bundle.trivialization_at R F E z.fst).to_fiber_bundle_trivialization.to_local_homeomorph.to_local_equiv.source
